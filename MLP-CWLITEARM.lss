
MLP-CWLITEARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004548  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000974  080046d8  080046d8  000146d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800504c  0800504c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800504c  0800504c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800504c  0800504c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800504c  0800504c  0001504c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005050  08005050  00015050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005054  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000068  080050bc  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  200001dc  080050bc  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000522f  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000d86  00000000  00000000  000252c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000328c  00000000  00000000  00026047  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f8  00000000  00000000  000292d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000004c8  00000000  00000000  000294cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000036f8  00000000  00000000  00029993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000016fc  00000000  00000000  0002d08b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000004d  00000000  00000000  0002e787  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001810  00000000  00000000  0002e7d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000204  00000000  00000000  0002ffe4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000219  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080046c0 	.word	0x080046c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080046c0 	.word	0x080046c0

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2uiz>:
 8000acc:	004a      	lsls	r2, r1, #1
 8000ace:	d211      	bcs.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d211      	bcs.n	8000afa <__aeabi_d2uiz+0x2e>
 8000ad6:	d50d      	bpl.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d40e      	bmi.n	8000b00 <__aeabi_d2uiz+0x34>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_d2uiz+0x3a>
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr

08000b0c <strcmp>:
 8000b0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000b10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000b14:	2a01      	cmp	r2, #1
 8000b16:	bf28      	it	cs
 8000b18:	429a      	cmpcs	r2, r3
 8000b1a:	d0f7      	beq.n	8000b0c <strcmp>
 8000b1c:	1ad0      	subs	r0, r2, r3
 8000b1e:	4770      	bx	lr

08000b20 <strlen>:
 8000b20:	4603      	mov	r3, r0
 8000b22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b26:	2a00      	cmp	r2, #0
 8000b28:	d1fb      	bne.n	8000b22 <strlen+0x2>
 8000b2a:	1a18      	subs	r0, r3, r0
 8000b2c:	3801      	subs	r0, #1
 8000b2e:	4770      	bx	lr

08000b30 <memchr>:
 8000b30:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000b34:	2a10      	cmp	r2, #16
 8000b36:	db2b      	blt.n	8000b90 <memchr+0x60>
 8000b38:	f010 0f07 	tst.w	r0, #7
 8000b3c:	d008      	beq.n	8000b50 <memchr+0x20>
 8000b3e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000b42:	3a01      	subs	r2, #1
 8000b44:	428b      	cmp	r3, r1
 8000b46:	d02d      	beq.n	8000ba4 <memchr+0x74>
 8000b48:	f010 0f07 	tst.w	r0, #7
 8000b4c:	b342      	cbz	r2, 8000ba0 <memchr+0x70>
 8000b4e:	d1f6      	bne.n	8000b3e <memchr+0xe>
 8000b50:	b4f0      	push	{r4, r5, r6, r7}
 8000b52:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000b56:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8000b5a:	f022 0407 	bic.w	r4, r2, #7
 8000b5e:	f07f 0700 	mvns.w	r7, #0
 8000b62:	2300      	movs	r3, #0
 8000b64:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000b68:	3c08      	subs	r4, #8
 8000b6a:	ea85 0501 	eor.w	r5, r5, r1
 8000b6e:	ea86 0601 	eor.w	r6, r6, r1
 8000b72:	fa85 f547 	uadd8	r5, r5, r7
 8000b76:	faa3 f587 	sel	r5, r3, r7
 8000b7a:	fa86 f647 	uadd8	r6, r6, r7
 8000b7e:	faa5 f687 	sel	r6, r5, r7
 8000b82:	b98e      	cbnz	r6, 8000ba8 <memchr+0x78>
 8000b84:	d1ee      	bne.n	8000b64 <memchr+0x34>
 8000b86:	bcf0      	pop	{r4, r5, r6, r7}
 8000b88:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000b8c:	f002 0207 	and.w	r2, r2, #7
 8000b90:	b132      	cbz	r2, 8000ba0 <memchr+0x70>
 8000b92:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000b96:	3a01      	subs	r2, #1
 8000b98:	ea83 0301 	eor.w	r3, r3, r1
 8000b9c:	b113      	cbz	r3, 8000ba4 <memchr+0x74>
 8000b9e:	d1f8      	bne.n	8000b92 <memchr+0x62>
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	4770      	bx	lr
 8000ba4:	3801      	subs	r0, #1
 8000ba6:	4770      	bx	lr
 8000ba8:	2d00      	cmp	r5, #0
 8000baa:	bf06      	itte	eq
 8000bac:	4635      	moveq	r5, r6
 8000bae:	3803      	subeq	r0, #3
 8000bb0:	3807      	subne	r0, #7
 8000bb2:	f015 0f01 	tst.w	r5, #1
 8000bb6:	d107      	bne.n	8000bc8 <memchr+0x98>
 8000bb8:	3001      	adds	r0, #1
 8000bba:	f415 7f80 	tst.w	r5, #256	; 0x100
 8000bbe:	bf02      	ittt	eq
 8000bc0:	3001      	addeq	r0, #1
 8000bc2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000bc6:	3001      	addeq	r0, #1
 8000bc8:	bcf0      	pop	{r4, r5, r6, r7}
 8000bca:	3801      	subs	r0, #1
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <mlp>:

//     // Return a dummy value (assuming simpleserial_addcmd doesn't need a meaningful return value)
//     return 0;
// }

uint8_t mlp(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *in) {
 8000bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // putch(' ');
    // putch('\n');


    //HARDCODED VALS
    char *hardcoded_args[] = {
 8000bd4:	4dac      	ldr	r5, [pc, #688]	; (8000e88 <mlp+0x2b8>)
 8000bd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
uint8_t mlp(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *in) {
 8000bd8:	f5ad 7d71 	sub.w	sp, sp, #964	; 0x3c4
    char *hardcoded_args[] = {
 8000bdc:	ac05      	add	r4, sp, #20
 8000bde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    };

    int new_argc = sizeof(hardcoded_args) / sizeof(char *) - 1; // Exclude the NULL sentinel

    // Allocate memory for the new new_argv
    char **new_argv = (char **)malloc(new_argc * sizeof(char *));
 8000bf0:	2038      	movs	r0, #56	; 0x38
 8000bf2:	f002 fb6b 	bl	80032cc <malloc>
 8000bf6:	ac05      	add	r4, sp, #20
 8000bf8:	4605      	mov	r5, r0

    // Copy the hardcoded strings to the new new_argv
    for (int i = 0; i < new_argc; i++) {
 8000bfa:	1f06      	subs	r6, r0, #4
 8000bfc:	f100 0834 	add.w	r8, r0, #52	; 0x34
        new_argv[i] = (char *)malloc((strlen(hardcoded_args[i]) + 1) * sizeof(char));
 8000c00:	f854 7b04 	ldr.w	r7, [r4], #4
 8000c04:	4638      	mov	r0, r7
 8000c06:	f7ff ff8b 	bl	8000b20 <strlen>
 8000c0a:	3001      	adds	r0, #1
 8000c0c:	f002 fb5e 	bl	80032cc <malloc>
 8000c10:	f846 0f04 	str.w	r0, [r6, #4]!
        strcpy(new_argv[i], hardcoded_args[i]);
 8000c14:	4639      	mov	r1, r7
 8000c16:	f002 fce3 	bl	80035e0 <strcpy>
    for (int i = 0; i < new_argc; i++) {
 8000c1a:	4546      	cmp	r6, r8
 8000c1c:	d1f0      	bne.n	8000c00 <mlp+0x30>
    //     exit(0);
    // }


    // Create memory for training parameters struct
    param = (parameters*)malloc(sizeof(parameters));
 8000c1e:	2040      	movs	r0, #64	; 0x40
 8000c20:	f002 fb54 	bl	80032cc <malloc>
 8000c24:	4c99      	ldr	r4, [pc, #612]	; (8000e8c <mlp+0x2bc>)
 8000c26:	4606      	mov	r6, r0
 8000c28:	6020      	str	r0, [r4, #0]

    // Number of hidden layers
    param->n_hidden = atoi(new_argv[1]);
 8000c2a:	6868      	ldr	r0, [r5, #4]
 8000c2c:	f002 fb04 	bl	8003238 <atoi>
 8000c30:	6030      	str	r0, [r6, #0]
    // Sanity check of number of hidden layers
    if (param->n_hidden < 0) {
 8000c32:	6826      	ldr	r6, [r4, #0]
 8000c34:	6830      	ldr	r0, [r6, #0]
 8000c36:	2800      	cmp	r0, #0
 8000c38:	da05      	bge.n	8000c46 <mlp+0x76>
        printf("Error: Number of hidden layers should be >= 0\n");
 8000c3a:	4895      	ldr	r0, [pc, #596]	; (8000e90 <mlp+0x2c0>)
    char* tok;
    for (i = 0, tok = strtok(new_argv[2], ","); i < param->n_hidden; i++) {
        param->hidden_layers_size[i] = atoi(tok);
        // Sanity check of size of hidden layer
        if (param->hidden_layers_size[i] <= 0) {
            printf("Error: Hidden layer sizes should be positive\n");
 8000c3c:	f002 fcb8 	bl	80035b0 <puts>
            exit(0);
 8000c40:	2000      	movs	r0, #0
 8000c42:	f002 fb0b 	bl	800325c <exit>
    param->hidden_layers_size = (int*)malloc(param->n_hidden * sizeof(int));
 8000c46:	0080      	lsls	r0, r0, #2
 8000c48:	f002 fb40 	bl	80032cc <malloc>
    for (i = 0, tok = strtok(new_argv[2], ","); i < param->n_hidden; i++) {
 8000c4c:	4991      	ldr	r1, [pc, #580]	; (8000e94 <mlp+0x2c4>)
    param->hidden_layers_size = (int*)malloc(param->n_hidden * sizeof(int));
 8000c4e:	6070      	str	r0, [r6, #4]
    for (i = 0, tok = strtok(new_argv[2], ","); i < param->n_hidden; i++) {
 8000c50:	68a8      	ldr	r0, [r5, #8]
        }
        tok = strtok(NULL, ",");
 8000c52:	f8df 8240 	ldr.w	r8, [pc, #576]	; 8000e94 <mlp+0x2c4>
    for (i = 0, tok = strtok(new_argv[2], ","); i < param->n_hidden; i++) {
 8000c56:	f002 fccb 	bl	80035f0 <strtok>
 8000c5a:	2600      	movs	r6, #0
 8000c5c:	6827      	ldr	r7, [r4, #0]
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	42b3      	cmp	r3, r6
 8000c62:	dc1c      	bgt.n	8000c9e <mlp+0xce>
    }

    // Hidden activation functions - Activation functions for each hidden layer
    param->hidden_activation_functions = (int*)malloc(param->n_hidden * sizeof(int));
 8000c64:	0098      	lsls	r0, r3, #2
 8000c66:	f002 fb31 	bl	80032cc <malloc>
    for (i = 0, tok = strtok(new_argv[3], ","); i < param->n_hidden; i++) {
 8000c6a:	498a      	ldr	r1, [pc, #552]	; (8000e94 <mlp+0x2c4>)
    param->hidden_activation_functions = (int*)malloc(param->n_hidden * sizeof(int));
 8000c6c:	60b8      	str	r0, [r7, #8]
    for (i = 0, tok = strtok(new_argv[3], ","); i < param->n_hidden; i++) {
 8000c6e:	68e8      	ldr	r0, [r5, #12]
        if (strcmp(tok, "identity") == 0) {
            param->hidden_activation_functions[i] = 1;
        }
        else if (strcmp(tok, "sigmoid") == 0) {
 8000c70:	f8df a224 	ldr.w	sl, [pc, #548]	; 8000e98 <mlp+0x2c8>
            param->hidden_activation_functions[i] = 2;
        }
        else if (strcmp(tok, "tanh") == 0) {
 8000c74:	f8df b224 	ldr.w	fp, [pc, #548]	; 8000e9c <mlp+0x2cc>
    for (i = 0, tok = strtok(new_argv[3], ","); i < param->n_hidden; i++) {
 8000c78:	f002 fcba 	bl	80035f0 <strtok>
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	4681      	mov	r9, r0
 8000c80:	46b0      	mov	r8, r6
 8000c82:	6827      	ldr	r7, [r4, #0]
 8000c84:	683a      	ldr	r2, [r7, #0]
 8000c86:	4542      	cmp	r2, r8
 8000c88:	dc1c      	bgt.n	8000cc4 <mlp+0xf4>

        tok = strtok(NULL, ",");
    }

    // Output layer size
    param->output_layer_size = atoi(new_argv[4]);
 8000c8a:	6928      	ldr	r0, [r5, #16]
 8000c8c:	f002 fad4 	bl	8003238 <atoi>
    if (param->output_layer_size <= 0) {
 8000c90:	6826      	ldr	r6, [r4, #0]
    param->output_layer_size = atoi(new_argv[4]);
 8000c92:	6238      	str	r0, [r7, #32]
    if (param->output_layer_size <= 0) {
 8000c94:	6a33      	ldr	r3, [r6, #32]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	dc4a      	bgt.n	8000d30 <mlp+0x160>
        printf("Output layer size should be positive\n");
 8000c9a:	4881      	ldr	r0, [pc, #516]	; (8000ea0 <mlp+0x2d0>)
 8000c9c:	e7ce      	b.n	8000c3c <mlp+0x6c>
        param->hidden_layers_size[i] = atoi(tok);
 8000c9e:	687f      	ldr	r7, [r7, #4]
 8000ca0:	f002 faca 	bl	8003238 <atoi>
        if (param->hidden_layers_size[i] <= 0) {
 8000ca4:	6823      	ldr	r3, [r4, #0]
        param->hidden_layers_size[i] = atoi(tok);
 8000ca6:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
        if (param->hidden_layers_size[i] <= 0) {
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	dc01      	bgt.n	8000cb8 <mlp+0xe8>
            printf("Error: Hidden layer sizes should be positive\n");
 8000cb4:	487b      	ldr	r0, [pc, #492]	; (8000ea4 <mlp+0x2d4>)
 8000cb6:	e7c1      	b.n	8000c3c <mlp+0x6c>
        tok = strtok(NULL, ",");
 8000cb8:	4641      	mov	r1, r8
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f002 fc98 	bl	80035f0 <strtok>
    for (i = 0, tok = strtok(new_argv[2], ","); i < param->n_hidden; i++) {
 8000cc0:	3601      	adds	r6, #1
 8000cc2:	e7cb      	b.n	8000c5c <mlp+0x8c>
        if (strcmp(tok, "identity") == 0) {
 8000cc4:	4978      	ldr	r1, [pc, #480]	; (8000ea8 <mlp+0x2d8>)
 8000cc6:	4648      	mov	r0, r9
 8000cc8:	f7ff ff20 	bl	8000b0c <strcmp>
 8000ccc:	b958      	cbnz	r0, 8000ce6 <mlp+0x116>
            param->hidden_activation_functions[i] = 1;
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	2201      	movs	r2, #1
            param->hidden_activation_functions[i] = 5;
 8000cd2:	519a      	str	r2, [r3, r6]
        tok = strtok(NULL, ",");
 8000cd4:	496f      	ldr	r1, [pc, #444]	; (8000e94 <mlp+0x2c4>)
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f002 fc8a 	bl	80035f0 <strtok>
    for (i = 0, tok = strtok(new_argv[3], ","); i < param->n_hidden; i++) {
 8000cdc:	f108 0801 	add.w	r8, r8, #1
        tok = strtok(NULL, ",");
 8000ce0:	4681      	mov	r9, r0
    for (i = 0, tok = strtok(new_argv[3], ","); i < param->n_hidden; i++) {
 8000ce2:	3604      	adds	r6, #4
 8000ce4:	e7cd      	b.n	8000c82 <mlp+0xb2>
        else if (strcmp(tok, "sigmoid") == 0) {
 8000ce6:	4651      	mov	r1, sl
 8000ce8:	4648      	mov	r0, r9
 8000cea:	f7ff ff0f 	bl	8000b0c <strcmp>
 8000cee:	b910      	cbnz	r0, 8000cf6 <mlp+0x126>
            param->hidden_activation_functions[i] = 2;
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	2202      	movs	r2, #2
 8000cf4:	e7ed      	b.n	8000cd2 <mlp+0x102>
        else if (strcmp(tok, "tanh") == 0) {
 8000cf6:	4659      	mov	r1, fp
 8000cf8:	4648      	mov	r0, r9
 8000cfa:	f7ff ff07 	bl	8000b0c <strcmp>
 8000cfe:	b910      	cbnz	r0, 8000d06 <mlp+0x136>
            param->hidden_activation_functions[i] = 3;
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	2203      	movs	r2, #3
 8000d04:	e7e5      	b.n	8000cd2 <mlp+0x102>
        else if (strcmp(tok, "relu") == 0) {
 8000d06:	4969      	ldr	r1, [pc, #420]	; (8000eac <mlp+0x2dc>)
 8000d08:	4648      	mov	r0, r9
 8000d0a:	f7ff feff 	bl	8000b0c <strcmp>
 8000d0e:	b910      	cbnz	r0, 8000d16 <mlp+0x146>
            param->hidden_activation_functions[i] = 4;
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	2204      	movs	r2, #4
 8000d14:	e7dd      	b.n	8000cd2 <mlp+0x102>
        else if (strcmp(tok, "softmax") == 0) {
 8000d16:	4966      	ldr	r1, [pc, #408]	; (8000eb0 <mlp+0x2e0>)
 8000d18:	4648      	mov	r0, r9
 8000d1a:	f7ff fef7 	bl	8000b0c <strcmp>
 8000d1e:	b910      	cbnz	r0, 8000d26 <mlp+0x156>
            param->hidden_activation_functions[i] = 5;
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	2205      	movs	r2, #5
 8000d24:	e7d5      	b.n	8000cd2 <mlp+0x102>
            printf("Error: Invalid value for hidden activation function\n");
 8000d26:	4863      	ldr	r0, [pc, #396]	; (8000eb4 <mlp+0x2e4>)
 8000d28:	f002 fc42 	bl	80035b0 <puts>
            printf("Input either identity or sigmoid or tanh or relu or softmax for hidden activation function\n");
 8000d2c:	4862      	ldr	r0, [pc, #392]	; (8000eb8 <mlp+0x2e8>)
 8000d2e:	e785      	b.n	8000c3c <mlp+0x6c>
        exit(0);
    }

    // Output activation function
    if (strcmp(new_argv[5], "identity") == 0) {
 8000d30:	696f      	ldr	r7, [r5, #20]
 8000d32:	495d      	ldr	r1, [pc, #372]	; (8000ea8 <mlp+0x2d8>)
 8000d34:	4638      	mov	r0, r7
 8000d36:	f7ff fee9 	bl	8000b0c <strcmp>
 8000d3a:	b998      	cbnz	r0, 8000d64 <mlp+0x194>
        param->output_activation_function = 1;
 8000d3c:	2301      	movs	r3, #1
    }
    else if (strcmp(new_argv[5], "relu") == 0) {
        param->output_activation_function = 4;
    }
    else if (strcmp(new_argv[5], "softmax") == 0) {
        param->output_activation_function = 5;
 8000d3e:	6273      	str	r3, [r6, #36]	; 0x24
        exit(0);
    }


    // L2 Regularization parameter
    param->learning_rate = atoi(new_argv[6]);
 8000d40:	69a8      	ldr	r0, [r5, #24]
 8000d42:	f002 fa79 	bl	8003238 <atoi>
 8000d46:	f7ff fb95 	bl	8000474 <__aeabi_i2d>
 8000d4a:	6826      	ldr	r6, [r4, #0]
 8000d4c:	e9c6 0104 	strd	r0, r1, [r6, #16]

    // Max. number of iterations
    param->n_iterations_max = atoi(new_argv[7]);
 8000d50:	69e8      	ldr	r0, [r5, #28]
 8000d52:	f002 fa71 	bl	8003238 <atoi>
    if (param->n_iterations_max <= 0) {
 8000d56:	6825      	ldr	r5, [r4, #0]
    param->n_iterations_max = atoi(new_argv[7]);
 8000d58:	61b0      	str	r0, [r6, #24]
    if (param->n_iterations_max <= 0) {
 8000d5a:	69ab      	ldr	r3, [r5, #24]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	dc22      	bgt.n	8000da6 <mlp+0x1d6>
        printf("Max. number of iterations value should be positive\n");
 8000d60:	4856      	ldr	r0, [pc, #344]	; (8000ebc <mlp+0x2ec>)
 8000d62:	e76b      	b.n	8000c3c <mlp+0x6c>
    else if (strcmp(new_argv[5], "sigmoid") == 0) {
 8000d64:	494c      	ldr	r1, [pc, #304]	; (8000e98 <mlp+0x2c8>)
 8000d66:	4638      	mov	r0, r7
 8000d68:	f7ff fed0 	bl	8000b0c <strcmp>
 8000d6c:	b908      	cbnz	r0, 8000d72 <mlp+0x1a2>
        param->output_activation_function = 2;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	e7e5      	b.n	8000d3e <mlp+0x16e>
    else if (strcmp(new_argv[5], "tanh") == 0) {
 8000d72:	494a      	ldr	r1, [pc, #296]	; (8000e9c <mlp+0x2cc>)
 8000d74:	4638      	mov	r0, r7
 8000d76:	f7ff fec9 	bl	8000b0c <strcmp>
 8000d7a:	b908      	cbnz	r0, 8000d80 <mlp+0x1b0>
        param->output_activation_function = 3;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	e7de      	b.n	8000d3e <mlp+0x16e>
    else if (strcmp(new_argv[5], "relu") == 0) {
 8000d80:	494a      	ldr	r1, [pc, #296]	; (8000eac <mlp+0x2dc>)
 8000d82:	4638      	mov	r0, r7
 8000d84:	f7ff fec2 	bl	8000b0c <strcmp>
 8000d88:	b908      	cbnz	r0, 8000d8e <mlp+0x1be>
        param->output_activation_function = 4;
 8000d8a:	2304      	movs	r3, #4
 8000d8c:	e7d7      	b.n	8000d3e <mlp+0x16e>
    else if (strcmp(new_argv[5], "softmax") == 0) {
 8000d8e:	4948      	ldr	r1, [pc, #288]	; (8000eb0 <mlp+0x2e0>)
 8000d90:	4638      	mov	r0, r7
 8000d92:	f7ff febb 	bl	8000b0c <strcmp>
 8000d96:	b908      	cbnz	r0, 8000d9c <mlp+0x1cc>
        param->output_activation_function = 5;
 8000d98:	2305      	movs	r3, #5
 8000d9a:	e7d0      	b.n	8000d3e <mlp+0x16e>
        printf("Error: Invalid value for output activation function\n");
 8000d9c:	4848      	ldr	r0, [pc, #288]	; (8000ec0 <mlp+0x2f0>)
 8000d9e:	f002 fc07 	bl	80035b0 <puts>
        printf("Input either identity or sigmoid or tanh or relu or softmax for output activation function\n");
 8000da2:	4848      	ldr	r0, [pc, #288]	; (8000ec4 <mlp+0x2f4>)
 8000da4:	e74a      	b.n	8000c3c <mlp+0x6c>
    //    param->data_train[i] = (double*)malloc(param->feature_size * sizeof(double));

    // Read the train dataset from the csv into the 2D array
    //read_csv(train_filename, param->train_sample_size, param->feature_size, param->data_train);
    
    double test_lines[][5] = {
 8000da6:	4948      	ldr	r1, [pc, #288]	; (8000ec8 <mlp+0x2f8>)
 8000da8:	22c8      	movs	r2, #200	; 0xc8
 8000daa:	a814      	add	r0, sp, #80	; 0x50
 8000dac:	f002 fa9e 	bl	80032ec <memcpy>
    //param->test_sample_size = atoi(new_argv[12]);
    // Feature size = Number of input features + 1 output feature
    //param->feature_size = atoi(new_argv[13]);

   // Create 2D array memory for the test data
    param->data_test = (double **)malloc(test_sample_size * sizeof(double *));
 8000db0:	2014      	movs	r0, #20
 8000db2:	f002 fa8b 	bl	80032cc <malloc>
 8000db6:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8000dba:	62e8      	str	r0, [r5, #44]	; 0x2c
 8000dbc:	f04f 0900 	mov.w	r9, #0
    for (int i = 0; i < test_sample_size; i++) {
        param->data_test[i] = (double *)malloc(feature_size * sizeof(double));
 8000dc0:	2028      	movs	r0, #40	; 0x28
 8000dc2:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 8000dc4:	f002 fa82 	bl	80032cc <malloc>
 8000dc8:	f847 0009 	str.w	r0, [r7, r9]
        memcpy(param->data_test[i], test_lines[i], feature_size * sizeof(double));
 8000dcc:	4647      	mov	r7, r8
        param->data_test[i] = (double *)malloc(feature_size * sizeof(double));
 8000dce:	4606      	mov	r6, r0
        memcpy(param->data_test[i], test_lines[i], feature_size * sizeof(double));
 8000dd0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000dd2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000dd4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000dd6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000dd8:	e897 0003 	ldmia.w	r7, {r0, r1}
    for (int i = 0; i < test_sample_size; i++) {
 8000ddc:	f109 0904 	add.w	r9, r9, #4
 8000de0:	f1b9 0f14 	cmp.w	r9, #20
        memcpy(param->data_test[i], test_lines[i], feature_size * sizeof(double));
 8000de4:	e886 0003 	stmia.w	r6, {r0, r1}
    for (int i = 0; i < test_sample_size; i++) {
 8000de8:	f108 0828 	add.w	r8, r8, #40	; 0x28
 8000dec:	d1e8      	bne.n	8000dc0 <mlp+0x1f0>

    // Read the test dataset from the csv into the 2D array
    //read_csv(test_filename, param->test_sample_size, param->feature_size, param->data_test);

    // Total number of layers
    int n_layers = param->n_hidden + 2;
 8000dee:	682f      	ldr	r7, [r5, #0]
    param->test_sample_size = test_sample_size;
 8000df0:	2305      	movs	r3, #5
 8000df2:	63ab      	str	r3, [r5, #56]	; 0x38
    param->feature_size = feature_size;
 8000df4:	632b      	str	r3, [r5, #48]	; 0x30

    // Save the sizes of layers in an array
    layer_sizes = (int*)calloc(n_layers, sizeof(int));
 8000df6:	2104      	movs	r1, #4
 8000df8:	1cb8      	adds	r0, r7, #2
 8000dfa:	f002 fa21 	bl	8003240 <calloc>

    layer_sizes[0] = param->feature_size - 1;
 8000dfe:	2304      	movs	r3, #4
 8000e00:	6003      	str	r3, [r0, #0]
    layer_sizes[n_layers-1] = param->output_layer_size;
 8000e02:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
 8000e06:	3301      	adds	r3, #1
 8000e08:	6a2a      	ldr	r2, [r5, #32]
 8000e0a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    layer_sizes = (int*)calloc(n_layers, sizeof(int));
 8000e0e:	4606      	mov	r6, r0
 8000e10:	6060      	str	r0, [r4, #4]

    for (i = 1; i < n_layers-1 ; i++)
 8000e12:	2301      	movs	r3, #1
 8000e14:	429f      	cmp	r7, r3
 8000e16:	da22      	bge.n	8000e5e <mlp+0x28e>
        layer_sizes[i] = param->hidden_layers_size[i-1];

    // Create memory for the weight matrices between layers
    // weight is a pointer to the array of 2D arrays between the layers
    param->weight = (double***)calloc(n_layers - 1, sizeof(double**));
 8000e18:	2104      	movs	r1, #4
 8000e1a:	1c78      	adds	r0, r7, #1
 8000e1c:	f002 fa10 	bl	8003240 <calloc>

    // Each 2D array between two layers i and i+1 is of size ((layer_size[i]+1) x layer_size[i+1])
    // The weight matrix includes weights for the bias terms too
    for (i = 0; i < n_layers-1; i++)
 8000e20:	f04f 0900 	mov.w	r9, #0
    param->weight = (double***)calloc(n_layers - 1, sizeof(double**));
 8000e24:	4680      	mov	r8, r0
 8000e26:	63e8      	str	r0, [r5, #60]	; 0x3c
    for (i = 0; i < n_layers-1; i++)
 8000e28:	454f      	cmp	r7, r9
 8000e2a:	da21      	bge.n	8000e70 <mlp+0x2a0>
 8000e2c:	46b1      	mov	r9, r6
 8000e2e:	46b3      	mov	fp, r6
        param->weight[i] = (double**)calloc(layer_sizes[i]+1, sizeof(double*));

    int j;
    for (i = 0; i < n_layers-1; i++)
 8000e30:	f04f 0a00 	mov.w	sl, #0
 8000e34:	4557      	cmp	r7, sl
 8000e36:	da62      	bge.n	8000efe <mlp+0x32e>
        for (j = 0; j < layer_sizes[i]+1; j++)
            param->weight[i][j] = (double*)calloc(layer_sizes[i+1], sizeof(double));

    double weights[] = {
 8000e38:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 8000e3c:	4923      	ldr	r1, [pc, #140]	; (8000ecc <mlp+0x2fc>)
 8000e3e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8000e42:	4650      	mov	r0, sl
 8000e44:	f002 fa52 	bl	80032ec <memcpy>
    0.661625, -0.322602, -0.528113, -0.431437, -0.429017, -0.452627, -0.327129, -0.325360, 0.160116, 0.749951, -0.733778, 0.178550, -0.541029, 0.356270, 0.768002, 0.112665, -0.033648, -0.269000, 0.185479, -0.177941,
    0.099907, -0.994370, 0.701389, -0.158393, -0.674160
    };

    int weightIndex = 0;
    for (int i = 0; i < n_layers - 1; i++) {
 8000e48:	2300      	movs	r3, #0
    int weightIndex = 0;
 8000e4a:	469c      	mov	ip, r3
 8000e4c:	f8cd a00c 	str.w	sl, [sp, #12]
    for (int i = 0; i < n_layers - 1; i++) {
 8000e50:	429f      	cmp	r7, r3
 8000e52:	db7a      	blt.n	8000f4a <mlp+0x37a>
        for (int j = 0; j < layer_sizes[i] + 1; j++) {
 8000e54:	f859 2b04 	ldr.w	r2, [r9], #4
 8000e58:	9202      	str	r2, [sp, #8]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	e065      	b.n	8000f2a <mlp+0x35a>
        layer_sizes[i] = param->hidden_layers_size[i-1];
 8000e5e:	686a      	ldr	r2, [r5, #4]
 8000e60:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8000e64:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8000e68:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    for (i = 1; i < n_layers-1 ; i++)
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	e7d1      	b.n	8000e14 <mlp+0x244>
        param->weight[i] = (double**)calloc(layer_sizes[i]+1, sizeof(double*));
 8000e70:	f856 0029 	ldr.w	r0, [r6, r9, lsl #2]
 8000e74:	2104      	movs	r1, #4
 8000e76:	3001      	adds	r0, #1
 8000e78:	f002 f9e2 	bl	8003240 <calloc>
 8000e7c:	f848 0029 	str.w	r0, [r8, r9, lsl #2]
    for (i = 0; i < n_layers-1; i++)
 8000e80:	f109 0901 	add.w	r9, r9, #1
 8000e84:	e7d0      	b.n	8000e28 <mlp+0x258>
 8000e86:	bf00      	nop
 8000e88:	080046d8 	.word	0x080046d8
 8000e8c:	20000084 	.word	0x20000084
 8000e90:	08004af9 	.word	0x08004af9
 8000e94:	08004b27 	.word	0x08004b27
 8000e98:	08004ab5 	.word	0x08004ab5
 8000e9c:	08004ab0 	.word	0x08004ab0
 8000ea0:	08004bfb 	.word	0x08004bfb
 8000ea4:	08004b29 	.word	0x08004b29
 8000ea8:	08004b56 	.word	0x08004b56
 8000eac:	08004b5f 	.word	0x08004b5f
 8000eb0:	08004b64 	.word	0x08004b64
 8000eb4:	08004b6c 	.word	0x08004b6c
 8000eb8:	08004ba0 	.word	0x08004ba0
 8000ebc:	08004caf 	.word	0x08004caf
 8000ec0:	08004c20 	.word	0x08004c20
 8000ec4:	08004c54 	.word	0x08004c54
 8000ec8:	08004718 	.word	0x08004718
 8000ecc:	080047e0 	.word	0x080047e0
            param->weight[i][j] = (double*)calloc(layer_sizes[i+1], sizeof(double));
 8000ed0:	f858 202a 	ldr.w	r2, [r8, sl, lsl #2]
 8000ed4:	f8db 0004 	ldr.w	r0, [fp, #4]
 8000ed8:	9301      	str	r3, [sp, #4]
 8000eda:	2108      	movs	r1, #8
 8000edc:	9200      	str	r2, [sp, #0]
 8000ede:	f002 f9af 	bl	8003240 <calloc>
 8000ee2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8000ee6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
        for (j = 0; j < layer_sizes[i]+1; j++)
 8000eea:	3301      	adds	r3, #1
 8000eec:	f8db 2000 	ldr.w	r2, [fp]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	daed      	bge.n	8000ed0 <mlp+0x300>
    for (i = 0; i < n_layers-1; i++)
 8000ef4:	f10a 0a01 	add.w	sl, sl, #1
 8000ef8:	f10b 0b04 	add.w	fp, fp, #4
 8000efc:	e79a      	b.n	8000e34 <mlp+0x264>
        for (j = 0; j < layer_sizes[i]+1; j++)
 8000efe:	2300      	movs	r3, #0
 8000f00:	e7f4      	b.n	8000eec <mlp+0x31c>
            for (int k = 0; k < layer_sizes[i + 1]; k++) {
                param->weight[i][j][k] = weights[weightIndex++];
 8000f02:	9901      	ldr	r1, [sp, #4]
 8000f04:	e8f1 ab02 	ldrd	sl, fp, [r1], #8
 8000f08:	9101      	str	r1, [sp, #4]
 8000f0a:	f858 1023 	ldr.w	r1, [r8, r3, lsl #2]
 8000f0e:	f851 100e 	ldr.w	r1, [r1, lr]
 8000f12:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8000f16:	e9c1 ab00 	strd	sl, fp, [r1]
            for (int k = 0; k < layer_sizes[i + 1]; k++) {
 8000f1a:	3001      	adds	r0, #1
 8000f1c:	9900      	ldr	r1, [sp, #0]
 8000f1e:	4281      	cmp	r1, r0
 8000f20:	dcef      	bgt.n	8000f02 <mlp+0x332>
 8000f22:	2900      	cmp	r1, #0
 8000f24:	bfa8      	it	ge
 8000f26:	448c      	addge	ip, r1
        for (int j = 0; j < layer_sizes[i] + 1; j++) {
 8000f28:	3201      	adds	r2, #1
 8000f2a:	9902      	ldr	r1, [sp, #8]
 8000f2c:	4291      	cmp	r1, r2
 8000f2e:	db0a      	blt.n	8000f46 <mlp+0x376>
            for (int k = 0; k < layer_sizes[i + 1]; k++) {
 8000f30:	f8d9 1000 	ldr.w	r1, [r9]
 8000f34:	9100      	str	r1, [sp, #0]
 8000f36:	0091      	lsls	r1, r2, #2
 8000f38:	468e      	mov	lr, r1
 8000f3a:	9903      	ldr	r1, [sp, #12]
 8000f3c:	eb01 01cc 	add.w	r1, r1, ip, lsl #3
 8000f40:	9101      	str	r1, [sp, #4]
 8000f42:	2000      	movs	r0, #0
 8000f44:	e7ea      	b.n	8000f1c <mlp+0x34c>
    for (int i = 0; i < n_layers - 1; i++) {
 8000f46:	3301      	adds	r3, #1
 8000f48:	e782      	b.n	8000e50 <mlp+0x280>
    // fclose(fp);

    // Classify the test data using the trained parameter weights
    //printf("Classifying:\n");
    //printf("------------\n");
    mlp_classifier(param, layer_sizes);
 8000f4a:	4631      	mov	r1, r6
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	f000 f951 	bl	80011f4 <mlp_classifier>
    //while(1)
        //simpleserial_get();
    //printf("\nDone.\nOutput file generated\n");

    // Free the memory allocated in Heap
    for (i = 0; i < n_layers-1; i++)
 8000f52:	2600      	movs	r6, #0
 8000f54:	42b7      	cmp	r7, r6
 8000f56:	db42      	blt.n	8000fde <mlp+0x40e>
 8000f58:	ea4f 0886 	mov.w	r8, r6, lsl #2
        for (j = 0; j < layer_sizes[i]+1; j++)
 8000f5c:	2500      	movs	r5, #0
 8000f5e:	e006      	b.n	8000f6e <mlp+0x39e>
            free(param->weight[i][j]);
 8000f60:	f852 3008 	ldr.w	r3, [r2, r8]
 8000f64:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8000f68:	f002 f9b8 	bl	80032dc <free>
        for (j = 0; j < layer_sizes[i]+1; j++)
 8000f6c:	3501      	adds	r5, #1
            free(param->weight[i][j]);
 8000f6e:	6823      	ldr	r3, [r4, #0]
 8000f70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
        for (j = 0; j < layer_sizes[i]+1; j++)
 8000f72:	6863      	ldr	r3, [r4, #4]
 8000f74:	f853 3008 	ldr.w	r3, [r3, r8]
 8000f78:	42ab      	cmp	r3, r5
 8000f7a:	daf1      	bge.n	8000f60 <mlp+0x390>
    for (i = 0; i < n_layers-1; i++)
 8000f7c:	3601      	adds	r6, #1
 8000f7e:	e7e9      	b.n	8000f54 <mlp+0x384>

    for (i = 0; i < n_layers-1; i++)
        free(param->weight[i]);
 8000f80:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8000f84:	f002 f9aa 	bl	80032dc <free>
    for (i = 0; i < n_layers-1; i++)
 8000f88:	3501      	adds	r5, #1
        free(param->weight[i]);
 8000f8a:	6823      	ldr	r3, [r4, #0]
    for (i = 0; i < n_layers-1; i++)
 8000f8c:	42af      	cmp	r7, r5
        free(param->weight[i]);
 8000f8e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    for (i = 0; i < n_layers-1; i++)
 8000f90:	daf6      	bge.n	8000f80 <mlp+0x3b0>

    free(param->weight);
 8000f92:	f002 f9a3 	bl	80032dc <free>

    free(layer_sizes);
 8000f96:	6860      	ldr	r0, [r4, #4]
 8000f98:	f002 f9a0 	bl	80032dc <free>

    for (i = 0; i < param->train_sample_size; i++)
 8000f9c:	2500      	movs	r5, #0
 8000f9e:	6823      	ldr	r3, [r4, #0]
 8000fa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fa2:	42aa      	cmp	r2, r5
 8000fa4:	dc1d      	bgt.n	8000fe2 <mlp+0x412>
        free(param->data_train[i]);

    for (i = 0; i < param->test_sample_size; i++)
 8000fa6:	2500      	movs	r5, #0
 8000fa8:	6823      	ldr	r3, [r4, #0]
 8000faa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000fac:	42aa      	cmp	r2, r5
 8000fae:	dc1f      	bgt.n	8000ff0 <mlp+0x420>
        free(param->data_test[i]);

    free(param->data_train);
 8000fb0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000fb2:	f002 f993 	bl	80032dc <free>
    free(param->data_test);
 8000fb6:	6823      	ldr	r3, [r4, #0]
 8000fb8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000fba:	f002 f98f 	bl	80032dc <free>
    free(param->hidden_activation_functions);
 8000fbe:	6823      	ldr	r3, [r4, #0]
 8000fc0:	6898      	ldr	r0, [r3, #8]
 8000fc2:	f002 f98b 	bl	80032dc <free>
    free(param->hidden_layers_size);
 8000fc6:	6823      	ldr	r3, [r4, #0]
 8000fc8:	6858      	ldr	r0, [r3, #4]
 8000fca:	f002 f987 	bl	80032dc <free>
    free(param);
 8000fce:	6820      	ldr	r0, [r4, #0]
 8000fd0:	f002 f984 	bl	80032dc <free>

    return 0x00;
}
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	f50d 7d71 	add.w	sp, sp, #964	; 0x3c4
 8000fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (i = 0; i < n_layers-1; i++)
 8000fde:	2500      	movs	r5, #0
 8000fe0:	e7d3      	b.n	8000f8a <mlp+0x3ba>
        free(param->data_train[i]);
 8000fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe4:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8000fe8:	f002 f978 	bl	80032dc <free>
    for (i = 0; i < param->train_sample_size; i++)
 8000fec:	3501      	adds	r5, #1
 8000fee:	e7d6      	b.n	8000f9e <mlp+0x3ce>
        free(param->data_test[i]);
 8000ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8000ff6:	f002 f971 	bl	80032dc <free>
    for (i = 0; i < param->test_sample_size; i++)
 8000ffa:	3501      	adds	r5, #1
 8000ffc:	e7d4      	b.n	8000fa8 <mlp+0x3d8>
 8000ffe:	bf00      	nop

08001000 <main>:

int main(void) {
 8001000:	b507      	push	{r0, r1, r2, lr}
    // Initialize UART for serial communication
    platform_init();
 8001002:	f000 fccb 	bl	800199c <platform_init>
    init_uart();
 8001006:	f000 fd09 	bl	8001a1c <init_uart>
    trigger_setup();
 800100a:	f000 fd45 	bl	8001a98 <trigger_setup>
    simpleserial_init();
 800100e:	f000 fbef 	bl	80017f0 <simpleserial_init>

    // Add a command to the SimpleSerial module
    simpleserial_addcmd('a', 0, mlp);
 8001012:	4a08      	ldr	r2, [pc, #32]	; (8001034 <main+0x34>)
 8001014:	2100      	movs	r1, #0
 8001016:	2061      	movs	r0, #97	; 0x61
 8001018:	f000 fbd0 	bl	80017bc <simpleserial_addcmd>
    //put some value so we can verify if we cna read them.

    uint8_t test;
    test = 42;
 800101c:	232a      	movs	r3, #42	; 0x2a
    simpleserial_put('r', 1, (uint8_t*)&test);
 800101e:	f10d 0207 	add.w	r2, sp, #7
 8001022:	2101      	movs	r1, #1
 8001024:	2072      	movs	r0, #114	; 0x72
    test = 42;
 8001026:	f88d 3007 	strb.w	r3, [sp, #7]
    simpleserial_put('r', 1, (uint8_t*)&test);
 800102a:	f000 fbf3 	bl	8001814 <simpleserial_put>
    while (1){
        simpleserial_get();
 800102e:	f000 fc47 	bl	80018c0 <simpleserial_get>
    while (1){
 8001032:	e7fc      	b.n	800102e <main+0x2e>
 8001034:	08000bd1 	.word	0x08000bd1

08001038 <mat_mul_classify>:
#include "simpleserial.h"
#include "hal.h"

#define max(x, y) (x > y ? x : y)

void mat_mul_classify(double* a, double** b, double* result, int n, int p) {
 8001038:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800103c:	4607      	mov	r7, r0
 800103e:	4688      	mov	r8, r1
 8001040:	4699      	mov	r9, r3
 8001042:	f1a2 0408 	sub.w	r4, r2, #8
    // matrix a of size 1 x n (array)
    // matrix b of size n x p
    // matrix result of size 1 x p (array)
    // result = a * b
    int j, k;
    for (j = 0; j < p; j++) {
 8001046:	2500      	movs	r5, #0
 8001048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800104a:	429d      	cmp	r5, r3
 800104c:	db01      	blt.n	8001052 <mat_mul_classify+0x1a>
        result[j] = 0.0;
        for (k = 0; k < n; k++)
            result[j] += (a[k] * b[k][j]);
    }
}
 800104e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        result[j] = 0.0;
 8001052:	2200      	movs	r2, #0
 8001054:	2300      	movs	r3, #0
 8001056:	e9e4 2302 	strd	r2, r3, [r4, #8]!
        for (k = 0; k < n; k++)
 800105a:	ea4f 0bc5 	mov.w	fp, r5, lsl #3
 800105e:	f1a7 0a08 	sub.w	sl, r7, #8
 8001062:	2600      	movs	r6, #0
 8001064:	454e      	cmp	r6, r9
 8001066:	db01      	blt.n	800106c <mat_mul_classify+0x34>
    for (j = 0; j < p; j++) {
 8001068:	3501      	adds	r5, #1
 800106a:	e7ed      	b.n	8001048 <mat_mul_classify+0x10>
            result[j] += (a[k] * b[k][j]);
 800106c:	f858 3026 	ldr.w	r3, [r8, r6, lsl #2]
 8001070:	eb03 010b 	add.w	r1, r3, fp
 8001074:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001078:	e9fa 2302 	ldrd	r2, r3, [sl, #8]!
 800107c:	f7ff fa64 	bl	8000548 <__aeabi_dmul>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	e9d4 0100 	ldrd	r0, r1, [r4]
 8001088:	f7ff f8a8 	bl	80001dc <__adddf3>
        for (k = 0; k < n; k++)
 800108c:	3601      	adds	r6, #1
            result[j] += (a[k] * b[k][j]);
 800108e:	e9c4 0100 	strd	r0, r1, [r4]
        for (k = 0; k < n; k++)
 8001092:	e7e7      	b.n	8001064 <mat_mul_classify+0x2c>

08001094 <identity_classify>:

void identity_classify(int n, double* input, double* output) {
 8001094:	b530      	push	{r4, r5, lr}
    output[0] = 1; // Bias term
 8001096:	4d07      	ldr	r5, [pc, #28]	; (80010b4 <identity_classify+0x20>)
 8001098:	2400      	movs	r4, #0
 800109a:	e9c2 4500 	strd	r4, r5, [r2]

    int i;
    for (i = 0; i < n; i++) 
 800109e:	3908      	subs	r1, #8
 80010a0:	2300      	movs	r3, #0
 80010a2:	4283      	cmp	r3, r0
 80010a4:	db00      	blt.n	80010a8 <identity_classify+0x14>
        output[i+1] = input[i]; // Identity function
}
 80010a6:	bd30      	pop	{r4, r5, pc}
        output[i+1] = input[i]; // Identity function
 80010a8:	e9f1 4502 	ldrd	r4, r5, [r1, #8]!
    for (i = 0; i < n; i++) 
 80010ac:	3301      	adds	r3, #1
        output[i+1] = input[i]; // Identity function
 80010ae:	e9e2 4502 	strd	r4, r5, [r2, #8]!
    for (i = 0; i < n; i++) 
 80010b2:	e7f6      	b.n	80010a2 <identity_classify+0xe>
 80010b4:	3ff00000 	.word	0x3ff00000

080010b8 <sigmoid_classify>:

void sigmoid_classify(int n, double* input, double* output) {
 80010b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    output[0] = 1; // Bias term
 80010bc:	4f12      	ldr	r7, [pc, #72]	; (8001108 <sigmoid_classify+0x50>)
 80010be:	2600      	movs	r6, #0
 80010c0:	e9c2 6700 	strd	r6, r7, [r2]
void sigmoid_classify(int n, double* input, double* output) {
 80010c4:	4680      	mov	r8, r0
 80010c6:	4614      	mov	r4, r2
 80010c8:	f1a1 0508 	sub.w	r5, r1, #8

    int i;
    for (i = 0; i < n; i++) 
 80010cc:	f04f 0900 	mov.w	r9, #0
 80010d0:	45c1      	cmp	r9, r8
 80010d2:	db01      	blt.n	80010d8 <sigmoid_classify+0x20>
        output[i+1] = 1.0 / (1.0 + exp(-input[i])); // Sigmoid function
}
 80010d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        output[i+1] = 1.0 / (1.0 + exp(-input[i])); // Sigmoid function
 80010d8:	f855 2f08 	ldr.w	r2, [r5, #8]!
 80010dc:	686b      	ldr	r3, [r5, #4]
 80010de:	4610      	mov	r0, r2
 80010e0:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80010e4:	f001 fc18 	bl	8002918 <exp>
 80010e8:	4632      	mov	r2, r6
 80010ea:	463b      	mov	r3, r7
 80010ec:	f7ff f876 	bl	80001dc <__adddf3>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4630      	mov	r0, r6
 80010f6:	4639      	mov	r1, r7
 80010f8:	f7ff fb50 	bl	800079c <__aeabi_ddiv>
    for (i = 0; i < n; i++) 
 80010fc:	f109 0901 	add.w	r9, r9, #1
        output[i+1] = 1.0 / (1.0 + exp(-input[i])); // Sigmoid function
 8001100:	e9e4 0102 	strd	r0, r1, [r4, #8]!
    for (i = 0; i < n; i++) 
 8001104:	e7e4      	b.n	80010d0 <sigmoid_classify+0x18>
 8001106:	bf00      	nop
 8001108:	3ff00000 	.word	0x3ff00000

0800110c <tan_h_classify>:

void tan_h_classify(int n, double* input, double* output) {
 800110c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    output[0] = 1; // Bias term
 800110e:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <tan_h_classify+0x2c>)
void tan_h_classify(int n, double* input, double* output) {
 8001110:	4614      	mov	r4, r2
    output[0] = 1; // Bias term
 8001112:	2200      	movs	r2, #0
 8001114:	e9c4 2300 	strd	r2, r3, [r4]
void tan_h_classify(int n, double* input, double* output) {
 8001118:	4606      	mov	r6, r0
 800111a:	f1a1 0508 	sub.w	r5, r1, #8

    int i;
    for (i = 0; i < n; i++) 
 800111e:	2700      	movs	r7, #0
 8001120:	42b7      	cmp	r7, r6
 8001122:	db00      	blt.n	8001126 <tan_h_classify+0x1a>
        output[i+1] = tanh(input[i]); // tanh function
}
 8001124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        output[i+1] = tanh(input[i]); // tanh function
 8001126:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800112a:	f001 fb71 	bl	8002810 <tanh>
    for (i = 0; i < n; i++) 
 800112e:	3701      	adds	r7, #1
        output[i+1] = tanh(input[i]); // tanh function
 8001130:	e9e4 0102 	strd	r0, r1, [r4, #8]!
    for (i = 0; i < n; i++) 
 8001134:	e7f4      	b.n	8001120 <tan_h_classify+0x14>
 8001136:	bf00      	nop
 8001138:	3ff00000 	.word	0x3ff00000

0800113c <relu_classify>:

void relu_classify(int n, double* input, double* output) {
 800113c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    output[0] = 1; // Bias term
 8001140:	4b10      	ldr	r3, [pc, #64]	; (8001184 <relu_classify+0x48>)
void relu_classify(int n, double* input, double* output) {
 8001142:	4614      	mov	r4, r2
    output[0] = 1; // Bias term
 8001144:	2200      	movs	r2, #0
 8001146:	e9c4 2300 	strd	r2, r3, [r4]
void relu_classify(int n, double* input, double* output) {
 800114a:	4682      	mov	sl, r0
 800114c:	f1a1 0508 	sub.w	r5, r1, #8

    int i;
    for (i = 0; i < n; i++) 
 8001150:	f04f 0b00 	mov.w	fp, #0
        output[i+1] = max(0.0, input[i]); // ReLU function
 8001154:	f04f 0800 	mov.w	r8, #0
 8001158:	f04f 0900 	mov.w	r9, #0
    for (i = 0; i < n; i++) 
 800115c:	45d3      	cmp	fp, sl
 800115e:	db01      	blt.n	8001164 <relu_classify+0x28>
}
 8001160:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        output[i+1] = max(0.0, input[i]); // ReLU function
 8001164:	e9f5 6702 	ldrd	r6, r7, [r5, #8]!
 8001168:	4642      	mov	r2, r8
 800116a:	464b      	mov	r3, r9
 800116c:	4630      	mov	r0, r6
 800116e:	4639      	mov	r1, r7
 8001170:	f7ff fc5c 	bl	8000a2c <__aeabi_dcmplt>
 8001174:	b108      	cbz	r0, 800117a <relu_classify+0x3e>
 8001176:	4646      	mov	r6, r8
 8001178:	464f      	mov	r7, r9
 800117a:	e9e4 6702 	strd	r6, r7, [r4, #8]!
    for (i = 0; i < n; i++) 
 800117e:	f10b 0b01 	add.w	fp, fp, #1
 8001182:	e7eb      	b.n	800115c <relu_classify+0x20>
 8001184:	3ff00000 	.word	0x3ff00000

08001188 <softmax_classify>:

void softmax_classify(int n, double* input, double* output) {
    output[0] = 1; // Bias term
 8001188:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <softmax_classify+0x68>)
void softmax_classify(int n, double* input, double* output) {
 800118a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800118e:	4614      	mov	r4, r2
    output[0] = 1; // Bias term
 8001190:	2200      	movs	r2, #0
 8001192:	e9c4 2300 	strd	r2, r3, [r4]

    int i;
    double sum = 0.0;
    for (i = 0; i < n; i++)
 8001196:	f1a1 0508 	sub.w	r5, r1, #8
void softmax_classify(int n, double* input, double* output) {
 800119a:	4680      	mov	r8, r0
    for (i = 0; i < n; i++)
 800119c:	46aa      	mov	sl, r5
    double sum = 0.0;
 800119e:	2600      	movs	r6, #0
 80011a0:	2700      	movs	r7, #0
    for (i = 0; i < n; i++)
 80011a2:	f04f 0900 	mov.w	r9, #0
 80011a6:	45c1      	cmp	r9, r8
 80011a8:	db05      	blt.n	80011b6 <softmax_classify+0x2e>
        sum += exp(input[i]);

    for (i = 0; i < n; i++) 
 80011aa:	f04f 0900 	mov.w	r9, #0
 80011ae:	45c1      	cmp	r9, r8
 80011b0:	db10      	blt.n	80011d4 <softmax_classify+0x4c>
        output[i+1] = exp(input[i]) / sum; // Softmax function
}
 80011b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        sum += exp(input[i]);
 80011b6:	e9fa 0102 	ldrd	r0, r1, [sl, #8]!
 80011ba:	f001 fbad 	bl	8002918 <exp>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4630      	mov	r0, r6
 80011c4:	4639      	mov	r1, r7
 80011c6:	f7ff f809 	bl	80001dc <__adddf3>
    for (i = 0; i < n; i++)
 80011ca:	f109 0901 	add.w	r9, r9, #1
        sum += exp(input[i]);
 80011ce:	4606      	mov	r6, r0
 80011d0:	460f      	mov	r7, r1
    for (i = 0; i < n; i++)
 80011d2:	e7e8      	b.n	80011a6 <softmax_classify+0x1e>
        output[i+1] = exp(input[i]) / sum; // Softmax function
 80011d4:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 80011d8:	f001 fb9e 	bl	8002918 <exp>
 80011dc:	4632      	mov	r2, r6
 80011de:	463b      	mov	r3, r7
 80011e0:	f7ff fadc 	bl	800079c <__aeabi_ddiv>
    for (i = 0; i < n; i++) 
 80011e4:	f109 0901 	add.w	r9, r9, #1
        output[i+1] = exp(input[i]) / sum; // Softmax function
 80011e8:	e9e4 0102 	strd	r0, r1, [r4, #8]!
    for (i = 0; i < n; i++) 
 80011ec:	e7df      	b.n	80011ae <softmax_classify+0x26>
 80011ee:	bf00      	nop
 80011f0:	3ff00000 	.word	0x3ff00000

080011f4 <mlp_classifier>:

void mlp_classifier(parameters* param, int* layer_sizes) {
 80011f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int n_layers = param->n_hidden + 2;
 80011f8:	6803      	ldr	r3, [r0, #0]
void mlp_classifier(parameters* param, int* layer_sizes) {
 80011fa:	b093      	sub	sp, #76	; 0x4c
 80011fc:	4604      	mov	r4, r0
    int n_layers = param->n_hidden + 2;
 80011fe:	9308      	str	r3, [sp, #32]
 8001200:	3302      	adds	r3, #2
void mlp_classifier(parameters* param, int* layer_sizes) {
 8001202:	4689      	mov	r9, r1

    // Create memory for arrays of inputs to the layers
    double** layer_inputs = (double**)calloc(n_layers, sizeof(double*));
 8001204:	4618      	mov	r0, r3
 8001206:	2104      	movs	r1, #4
    int n_layers = param->n_hidden + 2;
 8001208:	9304      	str	r3, [sp, #16]
    double** layer_inputs = (double**)calloc(n_layers, sizeof(double*));
 800120a:	f002 f819 	bl	8003240 <calloc>

    int i;
    for (i = 0; i < n_layers; i++)
 800120e:	2500      	movs	r5, #0
    double** layer_inputs = (double**)calloc(n_layers, sizeof(double*));
 8001210:	9005      	str	r0, [sp, #20]
    for (i = 0; i < n_layers; i++)
 8001212:	9b04      	ldr	r3, [sp, #16]
 8001214:	429d      	cmp	r5, r3
 8001216:	db3c      	blt.n	8001292 <mlp_classifier+0x9e>
        layer_inputs[i] = (double*)calloc(layer_sizes[i], sizeof(double));

    // Create memory for arrays of outputs from the layers
    double** layer_outputs = (double**)calloc(n_layers, sizeof(double*));
 8001218:	2104      	movs	r1, #4
 800121a:	4618      	mov	r0, r3
 800121c:	f002 f810 	bl	8003240 <calloc>

    for (i = 0; i < n_layers; i++)
 8001220:	2500      	movs	r5, #0
    double** layer_outputs = (double**)calloc(n_layers, sizeof(double*));
 8001222:	9003      	str	r0, [sp, #12]
    for (i = 0; i < n_layers; i++)
 8001224:	9b04      	ldr	r3, [sp, #16]
 8001226:	429d      	cmp	r5, r3
 8001228:	db3d      	blt.n	80012a6 <mlp_classifier+0xb2>
        layer_outputs[i] = (double*)calloc(layer_sizes[i]+1, sizeof(double));

    // Create memory to store final outputs
    double** final_output = (double**)calloc(param->test_sample_size, sizeof(double*));
 800122a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800122c:	2104      	movs	r1, #4
 800122e:	4628      	mov	r0, r5
 8001230:	f002 f806 	bl	8003240 <calloc>
    for (i = 0; i < param->test_sample_size; i++)
 8001234:	2600      	movs	r6, #0
    double** final_output = (double**)calloc(param->test_sample_size, sizeof(double*));
 8001236:	9002      	str	r0, [sp, #8]
    for (i = 0; i < param->test_sample_size; i++)
 8001238:	42b5      	cmp	r5, r6
 800123a:	dc3f      	bgt.n	80012bc <mlp_classifier+0xc8>
            }
        }
        trigger_low();

        // Fill the output layers's input and output
        mat_mul_classify(layer_outputs[n_layers-2], param->weight[n_layers-2], layer_inputs[n_layers-1], layer_sizes[n_layers-2]+1, layer_sizes[n_layers-1]);
 800123c:	9b08      	ldr	r3, [sp, #32]
 800123e:	9a08      	ldr	r2, [sp, #32]
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	9309      	str	r3, [sp, #36]	; 0x24
 8001244:	9b03      	ldr	r3, [sp, #12]
 8001246:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800124a:	930b      	str	r3, [sp, #44]	; 0x2c
 800124c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800124e:	1d1e      	adds	r6, r3, #4
 8001250:	9b05      	ldr	r3, [sp, #20]
 8001252:	4433      	add	r3, r6
 8001254:	930c      	str	r3, [sp, #48]	; 0x30
 8001256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001258:	444b      	add	r3, r9
 800125a:	930d      	str	r3, [sp, #52]	; 0x34
                break;
            case 4: // relu
                relu_classify(layer_sizes[n_layers-1], layer_inputs[n_layers-1], layer_outputs[n_layers-1]);
                break;
            case 5: // softmax
                softmax_classify(layer_sizes[n_layers-1], layer_inputs[n_layers-1], layer_outputs[n_layers-1]);
 800125c:	9b03      	ldr	r3, [sp, #12]
        mat_mul_classify(layer_outputs[n_layers-2], param->weight[n_layers-2], layer_inputs[n_layers-1], layer_sizes[n_layers-2]+1, layer_sizes[n_layers-1]);
 800125e:	eb09 0b06 	add.w	fp, r9, r6
                softmax_classify(layer_sizes[n_layers-1], layer_inputs[n_layers-1], layer_outputs[n_layers-1]);
 8001262:	f04f 0a00 	mov.w	sl, #0
 8001266:	441e      	add	r6, r3
    for (test_example = 0; test_example < param->test_sample_size; test_example++) {
 8001268:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800126a:	45aa      	cmp	sl, r5
 800126c:	db2f      	blt.n	80012ce <mlp_classifier+0xda>
            final_output[test_example][i] = layer_outputs[n_layers-1][i+1];
    }

    //simpleserial_put('r', 1, (uint8_t*)final_output[0]);
    // Find the output class for each test example
    if (param->output_layer_size == 1) { // Binary classification
 800126e:	6a26      	ldr	r6, [r4, #32]
 8001270:	2e01      	cmp	r6, #1
        for (test_example = 0; test_example < param->test_sample_size; test_example++) {
 8001272:	f04f 0a00 	mov.w	sl, #0
    if (param->output_layer_size == 1) { // Binary classification
 8001276:	f000 8147 	beq.w	8001508 <mlp_classifier+0x314>
            else
                final_output[test_example][0] = 1;
        }
    }
    else { // Multi-class classification
        for (test_example = 0; test_example < param->test_sample_size; test_example++) {
 800127a:	4555      	cmp	r5, sl
 800127c:	f340 8254 	ble.w	8001728 <mlp_classifier+0x534>
            double max = -1;
            int max_class;
            for (i = 0; i < param->output_layer_size; i++) {
                if (final_output[test_example][i] > max) {
 8001280:	9b02      	ldr	r3, [sp, #8]
 8001282:	f853 b02a 	ldr.w	fp, [r3, sl, lsl #2]
            double max = -1;
 8001286:	4ba4      	ldr	r3, [pc, #656]	; (8001518 <mlp_classifier+0x324>)
 8001288:	2200      	movs	r2, #0
 800128a:	e9cd 2306 	strd	r2, r3, [sp, #24]
            for (i = 0; i < param->output_layer_size; i++) {
 800128e:	2700      	movs	r7, #0
 8001290:	e15d      	b.n	800154e <mlp_classifier+0x35a>
        layer_inputs[i] = (double*)calloc(layer_sizes[i], sizeof(double));
 8001292:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8001296:	2108      	movs	r1, #8
 8001298:	f001 ffd2 	bl	8003240 <calloc>
 800129c:	9b05      	ldr	r3, [sp, #20]
 800129e:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
    for (i = 0; i < n_layers; i++)
 80012a2:	3501      	adds	r5, #1
 80012a4:	e7b5      	b.n	8001212 <mlp_classifier+0x1e>
        layer_outputs[i] = (double*)calloc(layer_sizes[i]+1, sizeof(double));
 80012a6:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80012aa:	2108      	movs	r1, #8
 80012ac:	3001      	adds	r0, #1
 80012ae:	f001 ffc7 	bl	8003240 <calloc>
 80012b2:	9b03      	ldr	r3, [sp, #12]
 80012b4:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
    for (i = 0; i < n_layers; i++)
 80012b8:	3501      	adds	r5, #1
 80012ba:	e7b3      	b.n	8001224 <mlp_classifier+0x30>
        final_output[i] = (double*)calloc(param->output_layer_size, sizeof(double));
 80012bc:	6a20      	ldr	r0, [r4, #32]
 80012be:	2108      	movs	r1, #8
 80012c0:	f001 ffbe 	bl	8003240 <calloc>
 80012c4:	9b02      	ldr	r3, [sp, #8]
 80012c6:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
    for (i = 0; i < param->test_sample_size; i++)
 80012ca:	3601      	adds	r6, #1
 80012cc:	e7b4      	b.n	8001238 <mlp_classifier+0x44>
        printf("Classifying test example %d of %d\r", test_example+1, param->test_sample_size);
 80012ce:	f10a 0301 	add.w	r3, sl, #1
 80012d2:	462a      	mov	r2, r5
 80012d4:	4619      	mov	r1, r3
 80012d6:	4891      	ldr	r0, [pc, #580]	; (800151c <mlp_classifier+0x328>)
 80012d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80012da:	f002 f8cf 	bl	800347c <iprintf>
        layer_outputs[0][0] = 1; // Bias term of input layer
 80012de:	9b03      	ldr	r3, [sp, #12]
        for (i = 0; i < param->feature_size-1; i++)
 80012e0:	6b27      	ldr	r7, [r4, #48]	; 0x30
        layer_outputs[0][0] = 1; // Bias term of input layer
 80012e2:	681d      	ldr	r5, [r3, #0]
 80012e4:	4b8e      	ldr	r3, [pc, #568]	; (8001520 <mlp_classifier+0x32c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	e9c5 2300 	strd	r2, r3, [r5]
        for (i = 0; i < param->feature_size-1; i++)
 80012ec:	3f01      	subs	r7, #1
 80012ee:	ea4f 0c8a 	mov.w	ip, sl, lsl #2
 80012f2:	2300      	movs	r3, #0
 80012f4:	429f      	cmp	r7, r3
 80012f6:	dc24      	bgt.n	8001342 <mlp_classifier+0x14e>
        trigger_high();
 80012f8:	f000 fbf2 	bl	8001ae0 <trigger_high>
        for (i = 1; i < n_layers-1; i++) {
 80012fc:	9f03      	ldr	r7, [sp, #12]
 80012fe:	464d      	mov	r5, r9
 8001300:	2301      	movs	r3, #1
 8001302:	9306      	str	r3, [sp, #24]
 8001304:	9a06      	ldr	r2, [sp, #24]
 8001306:	9b08      	ldr	r3, [sp, #32]
 8001308:	4293      	cmp	r3, r2
 800130a:	da2b      	bge.n	8001364 <mlp_classifier+0x170>
        trigger_low();
 800130c:	f000 fbef 	bl	8001aee <trigger_low>
        mat_mul_classify(layer_outputs[n_layers-2], param->weight[n_layers-2], layer_inputs[n_layers-1], layer_sizes[n_layers-2]+1, layer_sizes[n_layers-1]);
 8001310:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001312:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001314:	681d      	ldr	r5, [r3, #0]
 8001316:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001318:	f8db 2000 	ldr.w	r2, [fp]
 800131c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	9200      	str	r2, [sp, #0]
 8001322:	5809      	ldr	r1, [r1, r0]
 8001324:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001326:	3301      	adds	r3, #1
 8001328:	6800      	ldr	r0, [r0, #0]
 800132a:	462a      	mov	r2, r5
 800132c:	f7ff fe84 	bl	8001038 <mat_mul_classify>
        switch (param->output_activation_function) {
 8001330:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001332:	3b01      	subs	r3, #1
 8001334:	2b04      	cmp	r3, #4
 8001336:	d855      	bhi.n	80013e4 <mlp_classifier+0x1f0>
 8001338:	e8df f003 	tbb	[pc, r3]
 800133c:	756e675a 	.word	0x756e675a
 8001340:	7c          	.byte	0x7c
 8001341:	00          	.byte	0x00
            layer_outputs[0][i+1] = layer_inputs[0][i] = param->data_test[test_example][i];
 8001342:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001344:	f852 200c 	ldr.w	r2, [r2, ip]
 8001348:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800134c:	e9d2 0100 	ldrd	r0, r1, [r2]
 8001350:	9a05      	ldr	r2, [sp, #20]
 8001352:	6812      	ldr	r2, [r2, #0]
 8001354:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8001358:	e9c2 0100 	strd	r0, r1, [r2]
 800135c:	e9e5 0102 	strd	r0, r1, [r5, #8]!
        for (i = 0; i < param->feature_size-1; i++)
 8001360:	3301      	adds	r3, #1
 8001362:	e7c7      	b.n	80012f4 <mlp_classifier+0x100>
            mat_mul_classify(layer_outputs[i-1], param->weight[i-1], layer_inputs[i], layer_sizes[i-1]+1, layer_sizes[i]);
 8001364:	9b06      	ldr	r3, [sp, #24]
 8001366:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	3b04      	subs	r3, #4
 800136c:	930a      	str	r3, [sp, #40]	; 0x28
 800136e:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8001372:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001374:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 8001378:	682b      	ldr	r3, [r5, #0]
 800137a:	f855 2f04 	ldr.w	r2, [r5, #4]!
 800137e:	9200      	str	r2, [sp, #0]
 8001380:	5809      	ldr	r1, [r1, r0]
 8001382:	f857 0b04 	ldr.w	r0, [r7], #4
 8001386:	3301      	adds	r3, #1
 8001388:	4642      	mov	r2, r8
 800138a:	f7ff fe55 	bl	8001038 <mat_mul_classify>
            switch (param->hidden_activation_functions[i-1]) {
 800138e:	68a3      	ldr	r3, [r4, #8]
 8001390:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001392:	589b      	ldr	r3, [r3, r2]
 8001394:	3b01      	subs	r3, #1
 8001396:	2b04      	cmp	r3, #4
 8001398:	d824      	bhi.n	80013e4 <mlp_classifier+0x1f0>
 800139a:	e8df f003 	tbb	[pc, r3]
 800139e:	0b03      	.short	0x0b03
 80013a0:	1711      	.short	0x1711
 80013a2:	1d          	.byte	0x1d
 80013a3:	00          	.byte	0x00
                    identity_classify(layer_sizes[i], layer_inputs[i], layer_outputs[i]);
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	6828      	ldr	r0, [r5, #0]
 80013a8:	4641      	mov	r1, r8
 80013aa:	f7ff fe73 	bl	8001094 <identity_classify>
        for (i = 1; i < n_layers-1; i++) {
 80013ae:	9b06      	ldr	r3, [sp, #24]
 80013b0:	3301      	adds	r3, #1
 80013b2:	e7a6      	b.n	8001302 <mlp_classifier+0x10e>
                    sigmoid_classify(layer_sizes[i], layer_inputs[i], layer_outputs[i]);
 80013b4:	683a      	ldr	r2, [r7, #0]
 80013b6:	6828      	ldr	r0, [r5, #0]
 80013b8:	4641      	mov	r1, r8
 80013ba:	f7ff fe7d 	bl	80010b8 <sigmoid_classify>
                    break;
 80013be:	e7f6      	b.n	80013ae <mlp_classifier+0x1ba>
                    tan_h_classify(layer_sizes[i], layer_inputs[i], layer_outputs[i]);
 80013c0:	683a      	ldr	r2, [r7, #0]
 80013c2:	6828      	ldr	r0, [r5, #0]
 80013c4:	4641      	mov	r1, r8
 80013c6:	f7ff fea1 	bl	800110c <tan_h_classify>
                    break;
 80013ca:	e7f0      	b.n	80013ae <mlp_classifier+0x1ba>
                    relu_classify(layer_sizes[i], layer_inputs[i], layer_outputs[i]);
 80013cc:	683a      	ldr	r2, [r7, #0]
 80013ce:	6828      	ldr	r0, [r5, #0]
 80013d0:	4641      	mov	r1, r8
 80013d2:	f7ff feb3 	bl	800113c <relu_classify>
                    break;
 80013d6:	e7ea      	b.n	80013ae <mlp_classifier+0x1ba>
                    softmax_classify(layer_sizes[i], layer_inputs[i], layer_outputs[i]);
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	6828      	ldr	r0, [r5, #0]
 80013dc:	4641      	mov	r1, r8
 80013de:	f7ff fed3 	bl	8001188 <softmax_classify>
                    break;
 80013e2:	e7e4      	b.n	80013ae <mlp_classifier+0x1ba>
                    printf("Forward propagation: Invalid hidden activation function\n");
 80013e4:	484f      	ldr	r0, [pc, #316]	; (8001524 <mlp_classifier+0x330>)
 80013e6:	f002 f8e3 	bl	80035b0 <puts>
                    exit(0);
 80013ea:	2000      	movs	r0, #0
 80013ec:	f001 ff36 	bl	800325c <exit>
                identity_classify(layer_sizes[n_layers-1], layer_inputs[n_layers-1], layer_outputs[n_layers-1]);
 80013f0:	6832      	ldr	r2, [r6, #0]
 80013f2:	f8db 0000 	ldr.w	r0, [fp]
 80013f6:	4629      	mov	r1, r5
 80013f8:	f7ff fe4c 	bl	8001094 <identity_classify>
        for (i = 0; i < param->output_layer_size; i++)
 80013fc:	6a25      	ldr	r5, [r4, #32]
 80013fe:	2100      	movs	r1, #0
 8001400:	428d      	cmp	r5, r1
 8001402:	dc1e      	bgt.n	8001442 <mlp_classifier+0x24e>
 8001404:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8001408:	e72e      	b.n	8001268 <mlp_classifier+0x74>
                sigmoid_classify(layer_sizes[n_layers-1], layer_inputs[n_layers-1], layer_outputs[n_layers-1]);
 800140a:	6832      	ldr	r2, [r6, #0]
 800140c:	f8db 0000 	ldr.w	r0, [fp]
 8001410:	4629      	mov	r1, r5
 8001412:	f7ff fe51 	bl	80010b8 <sigmoid_classify>
                break;
 8001416:	e7f1      	b.n	80013fc <mlp_classifier+0x208>
                tan_h_classify(layer_sizes[n_layers-1], layer_inputs[n_layers-1], layer_outputs[n_layers-1]);
 8001418:	6832      	ldr	r2, [r6, #0]
 800141a:	f8db 0000 	ldr.w	r0, [fp]
 800141e:	4629      	mov	r1, r5
 8001420:	f7ff fe74 	bl	800110c <tan_h_classify>
                break;
 8001424:	e7ea      	b.n	80013fc <mlp_classifier+0x208>
                relu_classify(layer_sizes[n_layers-1], layer_inputs[n_layers-1], layer_outputs[n_layers-1]);
 8001426:	6832      	ldr	r2, [r6, #0]
 8001428:	f8db 0000 	ldr.w	r0, [fp]
 800142c:	4629      	mov	r1, r5
 800142e:	f7ff fe85 	bl	800113c <relu_classify>
                break;
 8001432:	e7e3      	b.n	80013fc <mlp_classifier+0x208>
                softmax_classify(layer_sizes[n_layers-1], layer_inputs[n_layers-1], layer_outputs[n_layers-1]);
 8001434:	6832      	ldr	r2, [r6, #0]
 8001436:	f8db 0000 	ldr.w	r0, [fp]
 800143a:	4629      	mov	r1, r5
 800143c:	f7ff fea4 	bl	8001188 <softmax_classify>
                break;
 8001440:	e7dc      	b.n	80013fc <mlp_classifier+0x208>
            final_output[test_example][i] = layer_outputs[n_layers-1][i+1];
 8001442:	9b02      	ldr	r3, [sp, #8]
 8001444:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8001448:	6833      	ldr	r3, [r6, #0]
 800144a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800144e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001452:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8001456:	e9c0 2300 	strd	r2, r3, [r0]
        for (i = 0; i < param->output_layer_size; i++)
 800145a:	3101      	adds	r1, #1
 800145c:	e7d0      	b.n	8001400 <mlp_classifier+0x20c>
            if (final_output[test_example][0] < 0.5)
 800145e:	9b02      	ldr	r3, [sp, #8]
 8001460:	f853 b02a 	ldr.w	fp, [r3, sl, lsl #2]
 8001464:	4632      	mov	r2, r6
 8001466:	e9db 0100 	ldrd	r0, r1, [fp]
 800146a:	463b      	mov	r3, r7
 800146c:	f7ff fade 	bl	8000a2c <__aeabi_dcmplt>
 8001470:	2800      	cmp	r0, #0
 8001472:	d146      	bne.n	8001502 <mlp_classifier+0x30e>
                final_output[test_example][0] = 1;
 8001474:	4642      	mov	r2, r8
 8001476:	464b      	mov	r3, r9
 8001478:	e9cb 2300 	strd	r2, r3, [fp]
        for (test_example = 0; test_example < param->test_sample_size; test_example++) {
 800147c:	f10a 0a01 	add.w	sl, sl, #1
 8001480:	4555      	cmp	r5, sl
 8001482:	dcec      	bgt.n	800145e <mlp_classifier+0x26a>
 8001484:	2600      	movs	r6, #0
 8001486:	46b2      	mov	sl, r6
 8001488:	4637      	mov	r7, r6
    // Calculate the confusion matrix
    if (param->output_layer_size == 1) { // Binary classification
        int true_positive = 0, true_negative = 0, false_positive = 0, false_negative = 0;
        for (test_example = 0; test_example < param->test_sample_size; test_example++) {
            if (final_output[test_example][0] == 0) {
                if (param->data_test[test_example][param->feature_size-1] == 0)
 800148a:	f06f 4b60 	mvn.w	fp, #3758096384	; 0xe0000000
        for (test_example = 0; test_example < param->test_sample_size; test_example++) {
 800148e:	42bd      	cmp	r5, r7
 8001490:	dc67      	bgt.n	8001562 <mlp_classifier+0x36e>
                    ++false_negative;
            }
        }

        // Find the accuracy
        double accuracy = (double)(true_positive + true_negative) / param->test_sample_size;
 8001492:	eb0a 0006 	add.w	r0, sl, r6
 8001496:	f7fe ffed 	bl	8000474 <__aeabi_i2d>
 800149a:	4606      	mov	r6, r0
 800149c:	4628      	mov	r0, r5
 800149e:	460f      	mov	r7, r1
 80014a0:	f7fe ffe8 	bl	8000474 <__aeabi_i2d>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4630      	mov	r0, r6
 80014aa:	4639      	mov	r1, r7
 80014ac:	f7ff f976 	bl	800079c <__aeabi_ddiv>
        // Print the accuracy
        //printf("\nAccuracy: %.2lf\n\n", accuracy * 100);
        // Scale the double and convert to integer
        // cast to uint8_t
        uint8_t acc;
        acc = (accuracy * 100);
 80014b0:	2200      	movs	r2, #0
 80014b2:	4b1d      	ldr	r3, [pc, #116]	; (8001528 <mlp_classifier+0x334>)
 80014b4:	f7ff f848 	bl	8000548 <__aeabi_dmul>
 80014b8:	f7ff fb08 	bl	8000acc <__aeabi_d2uiz>
        simpleserial_put('r', 1, (uint8_t*)&acc);
 80014bc:	f10d 0247 	add.w	r2, sp, #71	; 0x47
        acc = (accuracy * 100);
 80014c0:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
        simpleserial_put('r', 1, (uint8_t*)&acc);
 80014c4:	2101      	movs	r1, #1
 80014c6:	2072      	movs	r0, #114	; 0x72
 80014c8:	f000 f9a4 	bl	8001814 <simpleserial_put>
        //printf("\nAccuracy: %.2lf\n\n", accuracy * 100);
        uint8_t acc;
        acc = (accuracy * 100);
        simpleserial_put('r', 1, (uint8_t*)&acc);
        // Free the memory allocated in heap
        for (i = 0; i < param->output_layer_size; i++)
 80014cc:	2500      	movs	r5, #0
    // Write the final output into a csv file
    //char* output_file_name = "data/data_test_output.csv";
    //write_csv(output_file_name, param->test_sample_size, param->output_layer_size, final_output);

    // Free the memory allocated in Heap
    for (i = 0; i < param->test_sample_size; i++)
 80014ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80014d0:	42ab      	cmp	r3, r5
 80014d2:	f300 8114 	bgt.w	80016fe <mlp_classifier+0x50a>
        free(final_output[i]);

    free(final_output);
 80014d6:	9802      	ldr	r0, [sp, #8]
 80014d8:	f001 ff00 	bl	80032dc <free>

    for (i = 0; i < n_layers; i++)
 80014dc:	2400      	movs	r4, #0
 80014de:	9b04      	ldr	r3, [sp, #16]
 80014e0:	429c      	cmp	r4, r3
 80014e2:	f2c0 8113 	blt.w	800170c <mlp_classifier+0x518>
        free(layer_outputs[i]);

    free(layer_outputs);
 80014e6:	9803      	ldr	r0, [sp, #12]
 80014e8:	f001 fef8 	bl	80032dc <free>

    for (i = 0; i < n_layers; i++)
 80014ec:	2400      	movs	r4, #0
 80014ee:	9b04      	ldr	r3, [sp, #16]
 80014f0:	429c      	cmp	r4, r3
 80014f2:	f2c0 8112 	blt.w	800171a <mlp_classifier+0x526>
        free(layer_inputs[i]);

    free(layer_inputs);
 80014f6:	9805      	ldr	r0, [sp, #20]
 80014f8:	b013      	add	sp, #76	; 0x4c
 80014fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    free(layer_inputs);
 80014fe:	f001 beed 	b.w	80032dc <free>
                final_output[test_example][0] = 0;
 8001502:	2200      	movs	r2, #0
 8001504:	2300      	movs	r3, #0
 8001506:	e7b7      	b.n	8001478 <mlp_classifier+0x284>
            if (final_output[test_example][0] < 0.5)
 8001508:	4f08      	ldr	r7, [pc, #32]	; (800152c <mlp_classifier+0x338>)
                final_output[test_example][0] = 1;
 800150a:	f8df 9014 	ldr.w	r9, [pc, #20]	; 8001520 <mlp_classifier+0x32c>
            if (final_output[test_example][0] < 0.5)
 800150e:	2600      	movs	r6, #0
                final_output[test_example][0] = 1;
 8001510:	f04f 0800 	mov.w	r8, #0
 8001514:	e7b4      	b.n	8001480 <mlp_classifier+0x28c>
 8001516:	bf00      	nop
 8001518:	bff00000 	.word	0xbff00000
 800151c:	08004ce2 	.word	0x08004ce2
 8001520:	3ff00000 	.word	0x3ff00000
 8001524:	08004d05 	.word	0x08004d05
 8001528:	40590000 	.word	0x40590000
 800152c:	3fe00000 	.word	0x3fe00000
                if (final_output[test_example][i] > max) {
 8001530:	eb0b 03c7 	add.w	r3, fp, r7, lsl #3
 8001534:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001538:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800153c:	4640      	mov	r0, r8
 800153e:	4649      	mov	r1, r9
                    max_class = i+1;
 8001540:	3701      	adds	r7, #1
                if (final_output[test_example][i] > max) {
 8001542:	f7ff fa91 	bl	8000a68 <__aeabi_dcmpgt>
 8001546:	b110      	cbz	r0, 800154e <mlp_classifier+0x35a>
                    max = final_output[test_example][i];
 8001548:	e9cd 8906 	strd	r8, r9, [sp, #24]
                    max_class = i+1;
 800154c:	970e      	str	r7, [sp, #56]	; 0x38
            for (i = 0; i < param->output_layer_size; i++) {
 800154e:	42be      	cmp	r6, r7
 8001550:	dcee      	bgt.n	8001530 <mlp_classifier+0x33c>
            final_output[test_example][0] = max_class;
 8001552:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001554:	f7fe ff8e 	bl	8000474 <__aeabi_i2d>
        for (test_example = 0; test_example < param->test_sample_size; test_example++) {
 8001558:	f10a 0a01 	add.w	sl, sl, #1
            final_output[test_example][0] = max_class;
 800155c:	e9cb 0100 	strd	r0, r1, [fp]
        for (test_example = 0; test_example < param->test_sample_size; test_example++) {
 8001560:	e68b      	b.n	800127a <mlp_classifier+0x86>
                if (param->data_test[test_example][param->feature_size-1] == 0)
 8001562:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
 8001566:	eb0b 0203 	add.w	r2, fp, r3
 800156a:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
 800156e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001572:	e9d3 8900 	ldrd	r8, r9, [r3]
            if (final_output[test_example][0] == 0) {
 8001576:	9b02      	ldr	r3, [sp, #8]
 8001578:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 800157c:	2200      	movs	r2, #0
 800157e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001582:	2300      	movs	r3, #0
 8001584:	f7ff fa48 	bl	8000a18 <__aeabi_dcmpeq>
                if (param->data_test[test_example][param->feature_size-1] == 0)
 8001588:	2200      	movs	r2, #0
            if (final_output[test_example][0] == 0) {
 800158a:	b140      	cbz	r0, 800159e <mlp_classifier+0x3aa>
                if (param->data_test[test_example][param->feature_size-1] == 0)
 800158c:	2300      	movs	r3, #0
 800158e:	4640      	mov	r0, r8
 8001590:	4649      	mov	r1, r9
 8001592:	f7ff fa41 	bl	8000a18 <__aeabi_dcmpeq>
 8001596:	b100      	cbz	r0, 800159a <mlp_classifier+0x3a6>
                    ++true_negative;
 8001598:	3601      	adds	r6, #1
        for (test_example = 0; test_example < param->test_sample_size; test_example++) {
 800159a:	3701      	adds	r7, #1
 800159c:	e777      	b.n	800148e <mlp_classifier+0x29a>
                if (param->data_test[test_example][param->feature_size-1] == 1)
 800159e:	4b66      	ldr	r3, [pc, #408]	; (8001738 <mlp_classifier+0x544>)
 80015a0:	4640      	mov	r0, r8
 80015a2:	4649      	mov	r1, r9
 80015a4:	f7ff fa38 	bl	8000a18 <__aeabi_dcmpeq>
 80015a8:	2800      	cmp	r0, #0
 80015aa:	d0f6      	beq.n	800159a <mlp_classifier+0x3a6>
                    ++true_positive;
 80015ac:	f10a 0a01 	add.w	sl, sl, #1
 80015b0:	e7f3      	b.n	800159a <mlp_classifier+0x3a6>
            confusion_matrix[i] = (int*)calloc(param->output_layer_size, sizeof(int));
 80015b2:	2104      	movs	r1, #4
 80015b4:	4630      	mov	r0, r6
 80015b6:	f001 fe43 	bl	8003240 <calloc>
 80015ba:	f847 0028 	str.w	r0, [r7, r8, lsl #2]
        for (i = 0; i < param->output_layer_size; i++)
 80015be:	f108 0801 	add.w	r8, r8, #1
 80015c2:	4546      	cmp	r6, r8
 80015c4:	dcf5      	bgt.n	80015b2 <mlp_classifier+0x3be>
            actual_class = param->data_test[test_example][param->feature_size-1] - 1;
 80015c6:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8001738 <mlp_classifier+0x544>
        for (test_example = 0; test_example < param->test_sample_size; test_example++) {
 80015ca:	2600      	movs	r6, #0
            actual_class = param->data_test[test_example][param->feature_size-1] - 1;
 80015cc:	f06f 4b60 	mvn.w	fp, #3758096384	; 0xe0000000
 80015d0:	f04f 0800 	mov.w	r8, #0
        for (test_example = 0; test_example < param->test_sample_size; test_example++) {
 80015d4:	42b5      	cmp	r5, r6
 80015d6:	dc3a      	bgt.n	800164e <mlp_classifier+0x45a>
        printf("\t");
 80015d8:	2009      	movs	r0, #9
 80015da:	f001 ff67 	bl	80034ac <putchar>
            printf("Predicted %d  ", predicted_class);
 80015de:	4e57      	ldr	r6, [pc, #348]	; (800173c <mlp_classifier+0x548>)
        for (predicted_class = 1; predicted_class <= param->output_layer_size; predicted_class++)
 80015e0:	2501      	movs	r5, #1
 80015e2:	6a23      	ldr	r3, [r4, #32]
 80015e4:	42ab      	cmp	r3, r5
 80015e6:	da57      	bge.n	8001698 <mlp_classifier+0x4a4>
        printf("\n---------------------------------------------------------------------------\n");
 80015e8:	4855      	ldr	r0, [pc, #340]	; (8001740 <mlp_classifier+0x54c>)
            printf("Actual %d | ", actual_class+1);
 80015ea:	4d56      	ldr	r5, [pc, #344]	; (8001744 <mlp_classifier+0x550>)
                printf("%d\t", confusion_matrix[actual_class][predicted_class]);
 80015ec:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8001748 <mlp_classifier+0x554>
        printf("\n---------------------------------------------------------------------------\n");
 80015f0:	f001 ffde 	bl	80035b0 <puts>
        for (actual_class = 0; actual_class < param->output_layer_size; actual_class++) {
 80015f4:	f04f 0a00 	mov.w	sl, #0
                printf("%d\t", confusion_matrix[actual_class][predicted_class]);
 80015f8:	f1a7 0804 	sub.w	r8, r7, #4
        for (actual_class = 0; actual_class < param->output_layer_size; actual_class++) {
 80015fc:	6a26      	ldr	r6, [r4, #32]
 80015fe:	4556      	cmp	r6, sl
 8001600:	dc50      	bgt.n	80016a4 <mlp_classifier+0x4b0>
        double accuracy = 0.0;
 8001602:	f04f 0800 	mov.w	r8, #0
 8001606:	f04f 0900 	mov.w	r9, #0
        for (i = 0; i < param->output_layer_size; i++)
 800160a:	2500      	movs	r5, #0
 800160c:	42ae      	cmp	r6, r5
 800160e:	dc60      	bgt.n	80016d2 <mlp_classifier+0x4de>
        accuracy /= param->test_sample_size;
 8001610:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001612:	f7fe ff2f 	bl	8000474 <__aeabi_i2d>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	4640      	mov	r0, r8
 800161c:	4649      	mov	r1, r9
 800161e:	f7ff f8bd 	bl	800079c <__aeabi_ddiv>
        acc = (accuracy * 100);
 8001622:	4b4a      	ldr	r3, [pc, #296]	; (800174c <mlp_classifier+0x558>)
 8001624:	2200      	movs	r2, #0
 8001626:	f7fe ff8f 	bl	8000548 <__aeabi_dmul>
 800162a:	f7ff fa4f 	bl	8000acc <__aeabi_d2uiz>
        simpleserial_put('r', 1, (uint8_t*)&acc);
 800162e:	f10d 0247 	add.w	r2, sp, #71	; 0x47
        acc = (accuracy * 100);
 8001632:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
        simpleserial_put('r', 1, (uint8_t*)&acc);
 8001636:	2101      	movs	r1, #1
 8001638:	2072      	movs	r0, #114	; 0x72
 800163a:	f000 f8eb 	bl	8001814 <simpleserial_put>
        for (i = 0; i < param->output_layer_size; i++)
 800163e:	2500      	movs	r5, #0
 8001640:	6a23      	ldr	r3, [r4, #32]
 8001642:	42ab      	cmp	r3, r5
 8001644:	dc55      	bgt.n	80016f2 <mlp_classifier+0x4fe>
        free(confusion_matrix);
 8001646:	4638      	mov	r0, r7
 8001648:	f001 fe48 	bl	80032dc <free>
 800164c:	e73e      	b.n	80014cc <mlp_classifier+0x2d8>
            actual_class = param->data_test[test_example][param->feature_size-1] - 1;
 800164e:	e9d4 210b 	ldrd	r2, r1, [r4, #44]	; 0x2c
 8001652:	eb0b 0301 	add.w	r3, fp, r1
 8001656:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
 800165a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800165e:	4642      	mov	r2, r8
 8001660:	464b      	mov	r3, r9
 8001662:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001666:	f7fe fdb7 	bl	80001d8 <__aeabi_dsub>
 800166a:	f7ff fa07 	bl	8000a7c <__aeabi_d2iz>
            predicted_class = final_output[test_example][0] - 1;
 800166e:	9b02      	ldr	r3, [sp, #8]
 8001670:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8001674:	4642      	mov	r2, r8
 8001676:	464b      	mov	r3, r9
            actual_class = param->data_test[test_example][param->feature_size-1] - 1;
 8001678:	4682      	mov	sl, r0
            predicted_class = final_output[test_example][0] - 1;
 800167a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800167e:	f7fe fdab 	bl	80001d8 <__aeabi_dsub>
 8001682:	f7ff f9fb 	bl	8000a7c <__aeabi_d2iz>
            ++confusion_matrix[actual_class][predicted_class];
 8001686:	f857 202a 	ldr.w	r2, [r7, sl, lsl #2]
 800168a:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 800168e:	3301      	adds	r3, #1
 8001690:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
        for (test_example = 0; test_example < param->test_sample_size; test_example++) {
 8001694:	3601      	adds	r6, #1
 8001696:	e79d      	b.n	80015d4 <mlp_classifier+0x3e0>
            printf("Predicted %d  ", predicted_class);
 8001698:	4629      	mov	r1, r5
 800169a:	4630      	mov	r0, r6
 800169c:	f001 feee 	bl	800347c <iprintf>
        for (predicted_class = 1; predicted_class <= param->output_layer_size; predicted_class++)
 80016a0:	3501      	adds	r5, #1
 80016a2:	e79e      	b.n	80015e2 <mlp_classifier+0x3ee>
            printf("Actual %d | ", actual_class+1);
 80016a4:	f10a 0a01 	add.w	sl, sl, #1
 80016a8:	4651      	mov	r1, sl
 80016aa:	4628      	mov	r0, r5
 80016ac:	f001 fee6 	bl	800347c <iprintf>
            for (predicted_class = 0; predicted_class < param->output_layer_size; predicted_class++)
 80016b0:	2600      	movs	r6, #0
 80016b2:	6a23      	ldr	r3, [r4, #32]
 80016b4:	42b3      	cmp	r3, r6
 80016b6:	dc03      	bgt.n	80016c0 <mlp_classifier+0x4cc>
            printf("\n");
 80016b8:	200a      	movs	r0, #10
 80016ba:	f001 fef7 	bl	80034ac <putchar>
        for (actual_class = 0; actual_class < param->output_layer_size; actual_class++) {
 80016be:	e79d      	b.n	80015fc <mlp_classifier+0x408>
                printf("%d\t", confusion_matrix[actual_class][predicted_class]);
 80016c0:	f858 302a 	ldr.w	r3, [r8, sl, lsl #2]
 80016c4:	4648      	mov	r0, r9
 80016c6:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 80016ca:	f001 fed7 	bl	800347c <iprintf>
            for (predicted_class = 0; predicted_class < param->output_layer_size; predicted_class++)
 80016ce:	3601      	adds	r6, #1
 80016d0:	e7ef      	b.n	80016b2 <mlp_classifier+0x4be>
            accuracy += confusion_matrix[i][i];
 80016d2:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 80016d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80016da:	f7fe fecb 	bl	8000474 <__aeabi_i2d>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	4640      	mov	r0, r8
 80016e4:	4649      	mov	r1, r9
 80016e6:	f7fe fd79 	bl	80001dc <__adddf3>
        for (i = 0; i < param->output_layer_size; i++)
 80016ea:	3501      	adds	r5, #1
            accuracy += confusion_matrix[i][i];
 80016ec:	4680      	mov	r8, r0
 80016ee:	4689      	mov	r9, r1
        for (i = 0; i < param->output_layer_size; i++)
 80016f0:	e78c      	b.n	800160c <mlp_classifier+0x418>
            free(confusion_matrix[i]);
 80016f2:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 80016f6:	f001 fdf1 	bl	80032dc <free>
        for (i = 0; i < param->output_layer_size; i++)
 80016fa:	3501      	adds	r5, #1
 80016fc:	e7a0      	b.n	8001640 <mlp_classifier+0x44c>
        free(final_output[i]);
 80016fe:	9b02      	ldr	r3, [sp, #8]
 8001700:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001704:	f001 fdea 	bl	80032dc <free>
    for (i = 0; i < param->test_sample_size; i++)
 8001708:	3501      	adds	r5, #1
 800170a:	e6e0      	b.n	80014ce <mlp_classifier+0x2da>
        free(layer_outputs[i]);
 800170c:	9b03      	ldr	r3, [sp, #12]
 800170e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001712:	f001 fde3 	bl	80032dc <free>
    for (i = 0; i < n_layers; i++)
 8001716:	3401      	adds	r4, #1
 8001718:	e6e1      	b.n	80014de <mlp_classifier+0x2ea>
        free(layer_inputs[i]);
 800171a:	9b05      	ldr	r3, [sp, #20]
 800171c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001720:	f001 fddc 	bl	80032dc <free>
    for (i = 0; i < n_layers; i++)
 8001724:	3401      	adds	r4, #1
 8001726:	e6e2      	b.n	80014ee <mlp_classifier+0x2fa>
        int** confusion_matrix = (int**)calloc(param->output_layer_size, sizeof(int*));
 8001728:	2104      	movs	r1, #4
 800172a:	4630      	mov	r0, r6
 800172c:	f001 fd88 	bl	8003240 <calloc>
        for (i = 0; i < param->output_layer_size; i++)
 8001730:	f04f 0800 	mov.w	r8, #0
        int** confusion_matrix = (int**)calloc(param->output_layer_size, sizeof(int*));
 8001734:	4607      	mov	r7, r0
        for (i = 0; i < param->output_layer_size; i++)
 8001736:	e744      	b.n	80015c2 <mlp_classifier+0x3ce>
 8001738:	3ff00000 	.word	0x3ff00000
 800173c:	08004d3d 	.word	0x08004d3d
 8001740:	08004d4c 	.word	0x08004d4c
 8001744:	08004d99 	.word	0x08004d99
 8001748:	08004da6 	.word	0x08004da6
 800174c:	40590000 	.word	0x40590000

08001750 <ss_crc>:


// 0xA6 formerly 
#define CW_CRC 0x4D 
uint8_t ss_crc(uint8_t *buf, uint8_t len)
{
 8001750:	4603      	mov	r3, r0
	unsigned int k = 0;
	uint8_t crc = 0x00;
	while (len--) {
 8001752:	4401      	add	r1, r0
	uint8_t crc = 0x00;
 8001754:	2000      	movs	r0, #0
	while (len--) {
 8001756:	428b      	cmp	r3, r1
 8001758:	d100      	bne.n	800175c <ss_crc+0xc>
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
		}
	}
	return crc;

}
 800175a:	4770      	bx	lr
		crc ^= *buf++;
 800175c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001760:	4050      	eors	r0, r2
 8001762:	2208      	movs	r2, #8
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8001764:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001768:	ea4f 0040 	mov.w	r0, r0, lsl #1
 800176c:	bf18      	it	ne
 800176e:	f080 004d 	eorne.w	r0, r0, #77	; 0x4d
		for (k = 0; k < 8; k++) {
 8001772:	3a01      	subs	r2, #1
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8001774:	b2c0      	uxtb	r0, r0
		for (k = 0; k < 8; k++) {
 8001776:	d1f5      	bne.n	8001764 <ss_crc+0x14>
 8001778:	e7ed      	b.n	8001756 <ss_crc+0x6>

0800177a <stuff_data>:
    return 0x00;

}

uint8_t stuff_data(uint8_t *buf, uint8_t len)
{
 800177a:	b530      	push	{r4, r5, lr}
	uint8_t i = 1;
	uint8_t last = 0;
 800177c:	2200      	movs	r2, #0
 800177e:	4604      	mov	r4, r0
	uint8_t i = 1;
 8001780:	2301      	movs	r3, #1
	for (; i < len; i++) {
 8001782:	428b      	cmp	r3, r1
 8001784:	d301      	bcc.n	800178a <stuff_data+0x10>
			buf[last] = i - last;
			last = i;
		}
	}
	return 0x00;
}
 8001786:	2000      	movs	r0, #0
 8001788:	bd30      	pop	{r4, r5, pc}
		if (buf[i] == FRAME_BYTE) {
 800178a:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800178e:	b915      	cbnz	r5, 8001796 <stuff_data+0x1c>
			buf[last] = i - last;
 8001790:	1a9d      	subs	r5, r3, r2
 8001792:	5485      	strb	r5, [r0, r2]
 8001794:	461a      	mov	r2, r3
	for (; i < len; i++) {
 8001796:	3301      	adds	r3, #1
 8001798:	b2db      	uxtb	r3, r3
 800179a:	e7f2      	b.n	8001782 <stuff_data+0x8>

0800179c <unstuff_data>:

uint8_t unstuff_data(uint8_t *buf, uint8_t len)
{
 800179c:	b510      	push	{r4, lr}
	uint8_t next = buf[0];
 800179e:	7802      	ldrb	r2, [r0, #0]
	buf[0] = 0x00;
 80017a0:	2400      	movs	r4, #0
{
 80017a2:	4603      	mov	r3, r0
	buf[0] = 0x00;
 80017a4:	7004      	strb	r4, [r0, #0]
	uint8_t next = buf[0];
 80017a6:	4610      	mov	r0, r2
	//len -= 1;
	uint8_t tmp = next;
	while ((next < len) && tmp != 0) {
 80017a8:	4288      	cmp	r0, r1
 80017aa:	d200      	bcs.n	80017ae <unstuff_data+0x12>
 80017ac:	b902      	cbnz	r2, 80017b0 <unstuff_data+0x14>
		tmp = buf[next];
		buf[next] = FRAME_BYTE;
		next += tmp;
	}
	return next;
}
 80017ae:	bd10      	pop	{r4, pc}
		tmp = buf[next];
 80017b0:	5c1a      	ldrb	r2, [r3, r0]
		buf[next] = FRAME_BYTE;
 80017b2:	541c      	strb	r4, [r3, r0]
		next += tmp;
 80017b4:	4410      	add	r0, r2
 80017b6:	b2c0      	uxtb	r0, r0
 80017b8:	e7f6      	b.n	80017a8 <unstuff_data+0xc>
 80017ba:	0000      	movs	r0, r0

080017bc <simpleserial_addcmd>:
	simpleserial_addcmd('v', 0, check_version);
    simpleserial_addcmd('w', 0, ss_get_commands);
}

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t, uint8_t, uint8_t, uint8_t*))
{
 80017bc:	b538      	push	{r3, r4, r5, lr}
	if(num_commands >= MAX_SS_CMDS) {
 80017be:	4d0b      	ldr	r5, [pc, #44]	; (80017ec <simpleserial_addcmd+0x30>)
 80017c0:	682b      	ldr	r3, [r5, #0]
 80017c2:	2b0f      	cmp	r3, #15
 80017c4:	dd04      	ble.n	80017d0 <simpleserial_addcmd+0x14>
		putch('a');
 80017c6:	2061      	movs	r0, #97	; 0x61
		return 1;
	}

	if(len >= MAX_SS_LEN) {
		putch('b');
 80017c8:	f000 f9b2 	bl	8001b30 <putch>
		return 1;
 80017cc:	2001      	movs	r0, #1
	commands[num_commands].len = len;
	commands[num_commands].fp  = fp;
	num_commands++;

	return 0;
}
 80017ce:	bd38      	pop	{r3, r4, r5, pc}
	if(len >= MAX_SS_LEN) {
 80017d0:	29ff      	cmp	r1, #255	; 0xff
 80017d2:	d901      	bls.n	80017d8 <simpleserial_addcmd+0x1c>
		putch('b');
 80017d4:	2062      	movs	r0, #98	; 0x62
 80017d6:	e7f7      	b.n	80017c8 <simpleserial_addcmd+0xc>
	commands[num_commands].c   = c;
 80017d8:	240c      	movs	r4, #12
 80017da:	fb04 5403 	mla	r4, r4, r3, r5
	num_commands++;
 80017de:	3301      	adds	r3, #1
	commands[num_commands].c   = c;
 80017e0:	7120      	strb	r0, [r4, #4]
	commands[num_commands].fp  = fp;
 80017e2:	e9c4 1202 	strd	r1, r2, [r4, #8]
	num_commands++;
 80017e6:	602b      	str	r3, [r5, #0]
	return 0;
 80017e8:	2000      	movs	r0, #0
 80017ea:	e7f0      	b.n	80017ce <simpleserial_addcmd+0x12>
 80017ec:	2000008c 	.word	0x2000008c

080017f0 <simpleserial_init>:
{
 80017f0:	b508      	push	{r3, lr}
	simpleserial_addcmd('v', 0, check_version);
 80017f2:	4a06      	ldr	r2, [pc, #24]	; (800180c <simpleserial_init+0x1c>)
 80017f4:	2100      	movs	r1, #0
 80017f6:	2076      	movs	r0, #118	; 0x76
 80017f8:	f7ff ffe0 	bl	80017bc <simpleserial_addcmd>
}
 80017fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    simpleserial_addcmd('w', 0, ss_get_commands);
 8001800:	4a03      	ldr	r2, [pc, #12]	; (8001810 <simpleserial_init+0x20>)
 8001802:	2100      	movs	r1, #0
 8001804:	2077      	movs	r0, #119	; 0x77
 8001806:	f7ff bfd9 	b.w	80017bc <simpleserial_addcmd>
 800180a:	bf00      	nop
 800180c:	0800186b 	.word	0x0800186b
 8001810:	08001889 	.word	0x08001889

08001814 <simpleserial_put>:
	simpleserial_put('e', 0x01, &err);
	return;
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 8001814:	b570      	push	{r4, r5, r6, lr}
 8001816:	b0c0      	sub	sp, #256	; 0x100
 8001818:	460c      	mov	r4, r1
	uint8_t data_buf[MAX_SS_LEN];
	data_buf[0] = 0x00;
 800181a:	2500      	movs	r5, #0
{
 800181c:	4611      	mov	r1, r2
	data_buf[1] = c;
 800181e:	f88d 0001 	strb.w	r0, [sp, #1]
	data_buf[2] = size;
	int i = 0;
	for (; i < size; i++) {
		data_buf[i + 3] = output[i];
 8001822:	4622      	mov	r2, r4
 8001824:	f10d 0003 	add.w	r0, sp, #3
	data_buf[2] = size;
 8001828:	f88d 4002 	strb.w	r4, [sp, #2]
	data_buf[0] = 0x00;
 800182c:	f88d 5000 	strb.w	r5, [sp]
		data_buf[i + 3] = output[i];
 8001830:	f001 fd5c 	bl	80032ec <memcpy>
	}
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 8001834:	1ca1      	adds	r1, r4, #2
 8001836:	b2c9      	uxtb	r1, r1
 8001838:	f10d 0001 	add.w	r0, sp, #1
 800183c:	f7ff ff88 	bl	8001750 <ss_crc>
 8001840:	eb0d 0304 	add.w	r3, sp, r4
	data_buf[i + 4] = 0x00;
 8001844:	1d26      	adds	r6, r4, #4
	stuff_data(data_buf, i + 5);
 8001846:	1d61      	adds	r1, r4, #5
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 8001848:	70d8      	strb	r0, [r3, #3]
	stuff_data(data_buf, i + 5);
 800184a:	b2c9      	uxtb	r1, r1
 800184c:	4668      	mov	r0, sp
	data_buf[i + 4] = 0x00;
 800184e:	f80d 5006 	strb.w	r5, [sp, r6]
	stuff_data(data_buf, i + 5);
 8001852:	f7ff ff92 	bl	800177a <stuff_data>
	for (int i = 0; i < size + 5; i++) {
 8001856:	466c      	mov	r4, sp
		putch(data_buf[i]);
 8001858:	f814 0b01 	ldrb.w	r0, [r4], #1
	for (int i = 0; i < size + 5; i++) {
 800185c:	3501      	adds	r5, #1
		putch(data_buf[i]);
 800185e:	f000 f967 	bl	8001b30 <putch>
	for (int i = 0; i < size + 5; i++) {
 8001862:	42ae      	cmp	r6, r5
 8001864:	daf8      	bge.n	8001858 <simpleserial_put+0x44>
	}
}
 8001866:	b040      	add	sp, #256	; 0x100
 8001868:	bd70      	pop	{r4, r5, r6, pc}

0800186a <check_version>:
{
 800186a:	b507      	push	{r0, r1, r2, lr}
	uint8_t ver = SS_VER;
 800186c:	2303      	movs	r3, #3
	simpleserial_put('r', 1, &ver);
 800186e:	f10d 0207 	add.w	r2, sp, #7
 8001872:	2101      	movs	r1, #1
 8001874:	2072      	movs	r0, #114	; 0x72
	uint8_t ver = SS_VER;
 8001876:	f88d 3007 	strb.w	r3, [sp, #7]
	simpleserial_put('r', 1, &ver);
 800187a:	f7ff ffcb 	bl	8001814 <simpleserial_put>
}
 800187e:	2000      	movs	r0, #0
 8001880:	b003      	add	sp, #12
 8001882:	f85d fb04 	ldr.w	pc, [sp], #4
 8001886:	0000      	movs	r0, r0

08001888 <ss_get_commands>:
{
 8001888:	b530      	push	{r4, r5, lr}
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 800188a:	480c      	ldr	r0, [pc, #48]	; (80018bc <ss_get_commands+0x34>)
 800188c:	7801      	ldrb	r1, [r0, #0]
{
 800188e:	b085      	sub	sp, #20
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8001890:	2200      	movs	r2, #0
        cmd_chars[i] = commands[i].c;
 8001892:	240c      	movs	r4, #12
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8001894:	b2d3      	uxtb	r3, r2
 8001896:	428b      	cmp	r3, r1
 8001898:	f102 0201 	add.w	r2, r2, #1
 800189c:	db06      	blt.n	80018ac <ss_get_commands+0x24>
    simpleserial_put('r', num_commands & 0xFF, (void *)cmd_chars);
 800189e:	466a      	mov	r2, sp
 80018a0:	2072      	movs	r0, #114	; 0x72
 80018a2:	f7ff ffb7 	bl	8001814 <simpleserial_put>
}
 80018a6:	2000      	movs	r0, #0
 80018a8:	b005      	add	sp, #20
 80018aa:	bd30      	pop	{r4, r5, pc}
        cmd_chars[i] = commands[i].c;
 80018ac:	ad04      	add	r5, sp, #16
 80018ae:	441d      	add	r5, r3
 80018b0:	fb04 0303 	mla	r3, r4, r3, r0
 80018b4:	791b      	ldrb	r3, [r3, #4]
 80018b6:	f805 3c10 	strb.w	r3, [r5, #-16]
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 80018ba:	e7eb      	b.n	8001894 <ss_get_commands+0xc>
 80018bc:	2000008c 	.word	0x2000008c

080018c0 <simpleserial_get>:
{
 80018c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018c4:	b0c2      	sub	sp, #264	; 0x108
	uint8_t err = 0;
 80018c6:	2500      	movs	r5, #0
 80018c8:	ae02      	add	r6, sp, #8
 80018ca:	f88d 5007 	strb.w	r5, [sp, #7]
	for (int i = 0; i < 4; i++) {
 80018ce:	4634      	mov	r4, r6
		data_buf[i] = getch(); //PTR, cmd, scmd, len
 80018d0:	f000 f914 	bl	8001afc <getch>
 80018d4:	f806 0b01 	strb.w	r0, [r6], #1
		if (data_buf[i] == FRAME_BYTE) {
 80018d8:	b958      	cbnz	r0, 80018f2 <simpleserial_get+0x32>
			err = SS_ERR_FRAME_BYTE;
 80018da:	2305      	movs	r3, #5
		err = SS_ERR_CRC;
 80018dc:	f88d 3007 	strb.w	r3, [sp, #7]
	simpleserial_put('e', 0x01, &err);
 80018e0:	f10d 0207 	add.w	r2, sp, #7
 80018e4:	2101      	movs	r1, #1
 80018e6:	2065      	movs	r0, #101	; 0x65
 80018e8:	f7ff ff94 	bl	8001814 <simpleserial_put>
}
 80018ec:	b042      	add	sp, #264	; 0x108
 80018ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (int i = 0; i < 4; i++) {
 80018f2:	3501      	adds	r5, #1
 80018f4:	2d04      	cmp	r5, #4
 80018f6:	d1eb      	bne.n	80018d0 <simpleserial_get+0x10>
	uint8_t next_frame = unstuff_data(data_buf, 4);
 80018f8:	4629      	mov	r1, r5
 80018fa:	4620      	mov	r0, r4
 80018fc:	f7ff ff4e 	bl	800179c <unstuff_data>
	for(c = 0; c < num_commands; c++)
 8001900:	4f25      	ldr	r7, [pc, #148]	; (8001998 <simpleserial_get+0xd8>)
		if(commands[c].c == data_buf[1])
 8001902:	7861      	ldrb	r1, [r4, #1]
	for(c = 0; c < num_commands; c++)
 8001904:	683a      	ldr	r2, [r7, #0]
	uint8_t next_frame = unstuff_data(data_buf, 4);
 8001906:	4680      	mov	r8, r0
	for(c = 0; c < num_commands; c++)
 8001908:	2300      	movs	r3, #0
		if(commands[c].c == data_buf[1])
 800190a:	200c      	movs	r0, #12
	for(c = 0; c < num_commands; c++)
 800190c:	fa5f f983 	uxtb.w	r9, r3
 8001910:	4591      	cmp	r9, r2
 8001912:	db02      	blt.n	800191a <simpleserial_get+0x5a>
	if (c == num_commands) {
 8001914:	d107      	bne.n	8001926 <simpleserial_get+0x66>
		err = SS_ERR_CMD;
 8001916:	2301      	movs	r3, #1
 8001918:	e7e0      	b.n	80018dc <simpleserial_get+0x1c>
		if(commands[c].c == data_buf[1])
 800191a:	fb00 7609 	mla	r6, r0, r9, r7
 800191e:	3301      	adds	r3, #1
 8001920:	7936      	ldrb	r6, [r6, #4]
 8001922:	428e      	cmp	r6, r1
 8001924:	d1f2      	bne.n	800190c <simpleserial_get+0x4c>
	if ((data_buf[3] + 5) < next_frame) {
 8001926:	78e3      	ldrb	r3, [r4, #3]
 8001928:	3305      	adds	r3, #5
 800192a:	4543      	cmp	r3, r8
 800192c:	da02      	bge.n	8001934 <simpleserial_get+0x74>
		err = SS_ERR_LEN;
 800192e:	2304      	movs	r3, #4
 8001930:	e7d4      	b.n	80018dc <simpleserial_get+0x1c>
 8001932:	4635      	mov	r5, r6
		data_buf[i] = getch();
 8001934:	f000 f8e2 	bl	8001afc <getch>
 8001938:	5560      	strb	r0, [r4, r5]
		if (data_buf[i] == FRAME_BYTE) {
 800193a:	2800      	cmp	r0, #0
 800193c:	d0cd      	beq.n	80018da <simpleserial_get+0x1a>
	for (; i < data_buf[3] + 5; i++) {
 800193e:	78e3      	ldrb	r3, [r4, #3]
 8001940:	1c6e      	adds	r6, r5, #1
 8001942:	3304      	adds	r3, #4
 8001944:	42b3      	cmp	r3, r6
 8001946:	daf4      	bge.n	8001932 <simpleserial_get+0x72>
	data_buf[i] = getch();
 8001948:	f000 f8d8 	bl	8001afc <getch>
 800194c:	55a0      	strb	r0, [r4, r6]
	if (data_buf[i] != FRAME_BYTE) {
 800194e:	2800      	cmp	r0, #0
 8001950:	d1ed      	bne.n	800192e <simpleserial_get+0x6e>
	unstuff_data(data_buf + next_frame, i - next_frame + 1);
 8001952:	f1c8 0101 	rsb	r1, r8, #1
 8001956:	fa51 f186 	uxtab	r1, r1, r6
 800195a:	b2c9      	uxtb	r1, r1
 800195c:	fa5f fa86 	uxtb.w	sl, r6
 8001960:	eb04 0008 	add.w	r0, r4, r8
 8001964:	f7ff ff1a 	bl	800179c <unstuff_data>
	uint8_t crc = ss_crc(data_buf+1, i-2);
 8001968:	f1aa 0102 	sub.w	r1, sl, #2
 800196c:	b2c9      	uxtb	r1, r1
 800196e:	f10d 0009 	add.w	r0, sp, #9
 8001972:	f7ff feed 	bl	8001750 <ss_crc>
	if (crc != data_buf[i-1]) {
 8001976:	5d63      	ldrb	r3, [r4, r5]
 8001978:	4283      	cmp	r3, r0
 800197a:	d001      	beq.n	8001980 <simpleserial_get+0xc0>
		err = SS_ERR_CRC;
 800197c:	2302      	movs	r3, #2
 800197e:	e7ad      	b.n	80018dc <simpleserial_get+0x1c>
	err = commands[c].fp(data_buf[1], data_buf[2], data_buf[3], data_buf+4);
 8001980:	230c      	movs	r3, #12
 8001982:	fb03 7709 	mla	r7, r3, r9, r7
 8001986:	78e2      	ldrb	r2, [r4, #3]
 8001988:	68fd      	ldr	r5, [r7, #12]
 800198a:	78a1      	ldrb	r1, [r4, #2]
 800198c:	7860      	ldrb	r0, [r4, #1]
 800198e:	446b      	add	r3, sp
 8001990:	47a8      	blx	r5
 8001992:	f88d 0007 	strb.w	r0, [sp, #7]
 8001996:	e7a3      	b.n	80018e0 <simpleserial_get+0x20>
 8001998:	2000008c 	.word	0x2000008c

0800199c <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 800199c:	b570      	push	{r4, r5, r6, lr}
 800199e:	b096      	sub	sp, #88	; 0x58
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
  #else
     RCC_OscInitTypeDef RCC_OscInitStruct;
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 80019a0:	2400      	movs	r4, #0
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 80019a2:	2603      	movs	r6, #3
 80019a4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80019a8:	a80c      	add	r0, sp, #48	; 0x30

     RCC_ClkInitTypeDef RCC_ClkInitStruct;
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 80019aa:	2501      	movs	r5, #1
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 80019ac:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 80019b0:	9410      	str	r4, [sp, #64]	; 0x40
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 80019b2:	9414      	str	r4, [sp, #80]	; 0x50
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80019b4:	f000 f8d4 	bl	8001b60 <HAL_RCC_OscConfig>
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 80019b8:	230f      	movs	r3, #15
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
     uint32_t flash_latency = 0;
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 80019ba:	4621      	mov	r1, r4
 80019bc:	a802      	add	r0, sp, #8
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 80019be:	e9cd 3502 	strd	r3, r5, [sp, #8]
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019c2:	e9cd 4404 	strd	r4, r4, [sp, #16]
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019c6:	9406      	str	r4, [sp, #24]
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 80019c8:	f000 fb38 	bl	800203c <HAL_RCC_ClockConfig>




#if (PLATFORM==CWLITEARM)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019cc:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <platform_init+0x78>)
 80019ce:	695a      	ldr	r2, [r3, #20]
 80019d0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80019d4:	615a      	str	r2, [r3, #20]
 80019d6:	695b      	ldr	r3, [r3, #20]
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80019d8:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 80019e0:	4c0d      	ldr	r4, [pc, #52]	; (8001a18 <platform_init+0x7c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e2:	9301      	str	r3, [sp, #4]
 80019e4:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 80019e6:	a907      	add	r1, sp, #28
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 80019e8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 80019ec:	4620      	mov	r0, r4
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 80019ee:	e9cd 3507 	strd	r3, r5, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 80019f2:	f000 fbc9 	bl	8002188 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 80019f6:	462a      	mov	r2, r5
 80019f8:	4620      	mov	r0, r4
 80019fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019fe:	f000 fc87 	bl	8002310 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8001a02:	462a      	mov	r2, r5
 8001a04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a08:	4620      	mov	r0, r4
 8001a0a:	f000 fc81 	bl	8002310 <HAL_GPIO_WritePin>
#endif
}
 8001a0e:	b016      	add	sp, #88	; 0x58
 8001a10:	bd70      	pop	{r4, r5, r6, pc}
 8001a12:	bf00      	nop
 8001a14:	40021000 	.word	0x40021000
 8001a18:	48000800 	.word	0x48000800

08001a1c <init_uart>:

void init_uart(void)
{
 8001a1c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 8001a1e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
{
 8001a22:	b088      	sub	sp, #32
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 8001a24:	2302      	movs	r3, #2
 8001a26:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GpioInit.Pull      = GPIO_PULLUP;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e9cd 1305 	strd	r1, r3, [sp, #20]
  GpioInit.Alternate = GPIO_AF7_USART1;
  __GPIOA_CLK_ENABLE();
 8001a32:	4c16      	ldr	r4, [pc, #88]	; (8001a8c <init_uart+0x70>)
  GpioInit.Alternate = GPIO_AF7_USART1;
 8001a34:	2307      	movs	r3, #7
 8001a36:	9307      	str	r3, [sp, #28]
  __GPIOA_CLK_ENABLE();
 8001a38:	6963      	ldr	r3, [r4, #20]
 8001a3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a3e:	6163      	str	r3, [r4, #20]
 8001a40:	6963      	ldr	r3, [r4, #20]
 8001a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a46:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8001a48:	a903      	add	r1, sp, #12
 8001a4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __GPIOA_CLK_ENABLE();
 8001a4e:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8001a50:	f000 fb9a 	bl	8002188 <HAL_GPIO_Init>

  UartHandle.Instance        = USART1;
 8001a54:	480e      	ldr	r0, [pc, #56]	; (8001a90 <init_uart+0x74>)
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
 8001a56:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8001a94 <init_uart+0x78>
 8001a5a:	f44f 3361 	mov.w	r3, #230400	; 0x38400
 8001a5e:	e9c0 c300 	strd	ip, r3, [r0]
  #else
  UartHandle.Init.BaudRate   = 38400;
  #endif
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8001a62:	2300      	movs	r3, #0
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8001a64:	e9c0 3302 	strd	r3, r3, [r0, #8]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8001a68:	6103      	str	r3, [r0, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8001a6a:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8001a6c:	230c      	movs	r3, #12
 8001a6e:	6143      	str	r3, [r0, #20]
  __USART1_CLK_ENABLE();
 8001a70:	69a3      	ldr	r3, [r4, #24]
 8001a72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a76:	61a3      	str	r3, [r4, #24]
 8001a78:	69a3      	ldr	r3, [r4, #24]
 8001a7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a7e:	9302      	str	r3, [sp, #8]
 8001a80:	9b02      	ldr	r3, [sp, #8]
  HAL_UART_Init(&UartHandle);
 8001a82:	f000 fd99 	bl	80025b8 <HAL_UART_Init>
}
 8001a86:	b008      	add	sp, #32
 8001a88:	bd10      	pop	{r4, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	20000150 	.word	0x20000150
 8001a94:	40013800 	.word	0x40013800

08001a98 <trigger_setup>:

void trigger_setup(void)
{
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a98:	4b10      	ldr	r3, [pc, #64]	; (8001adc <trigger_setup+0x44>)
{
 8001a9a:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9c:	695a      	ldr	r2, [r3, #20]
 8001a9e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001aa2:	615a      	str	r2, [r3, #20]
 8001aa4:	695b      	ldr	r3, [r3, #20]
{
 8001aa6:	b087      	sub	sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	9b00      	ldr	r3, [sp, #0]

  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_12;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8001ab0:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e9cd 4301 	strd	r4, r3, [sp, #4]
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001aba:	2500      	movs	r5, #0
 8001abc:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8001abe:	a901      	add	r1, sp, #4
 8001ac0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001ac4:	e9cd 5303 	strd	r5, r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8001ac8:	f000 fb5e 	bl	8002188 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8001acc:	462a      	mov	r2, r5
 8001ace:	4621      	mov	r1, r4
 8001ad0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ad4:	f000 fc1c 	bl	8002310 <HAL_GPIO_WritePin>
}
 8001ad8:	b007      	add	sp, #28
 8001ada:	bd30      	pop	{r4, r5, pc}
 8001adc:	40021000 	.word	0x40021000

08001ae0 <trigger_high>:

void trigger_high(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ae6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aea:	f000 bc11 	b.w	8002310 <HAL_GPIO_WritePin>

08001aee <trigger_low>:
}

void trigger_low(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8001aee:	2200      	movs	r2, #0
 8001af0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af8:	f000 bc0a 	b.w	8002310 <HAL_GPIO_WritePin>

08001afc <getch>:
}

char getch(void)
{
 8001afc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t d;
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8001afe:	4d0a      	ldr	r5, [pc, #40]	; (8001b28 <getch+0x2c>)
    USART1->ICR |= (1 << 3);
 8001b00:	4c0a      	ldr	r4, [pc, #40]	; (8001b2c <getch+0x30>)
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8001b02:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b06:	2201      	movs	r2, #1
 8001b08:	f10d 0107 	add.w	r1, sp, #7
 8001b0c:	4628      	mov	r0, r5
 8001b0e:	f000 fdd4 	bl	80026ba <HAL_UART_Receive>
 8001b12:	b918      	cbnz	r0, 8001b1c <getch+0x20>
  //putch(d);
  return d;
}
 8001b14:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001b18:	b003      	add	sp, #12
 8001b1a:	bd30      	pop	{r4, r5, pc}
    USART1->ICR |= (1 << 3);
 8001b1c:	6a23      	ldr	r3, [r4, #32]
 8001b1e:	f043 0308 	orr.w	r3, r3, #8
 8001b22:	6223      	str	r3, [r4, #32]
 8001b24:	e7ed      	b.n	8001b02 <getch+0x6>
 8001b26:	bf00      	nop
 8001b28:	20000150 	.word	0x20000150
 8001b2c:	40013800 	.word	0x40013800

08001b30 <putch>:

void putch(char c)
{
 8001b30:	b507      	push	{r0, r1, r2, lr}
  uint8_t d  = c;
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8001b32:	f241 3388 	movw	r3, #5000	; 0x1388
  uint8_t d  = c;
 8001b36:	f88d 0007 	strb.w	r0, [sp, #7]
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f10d 0107 	add.w	r1, sp, #7
 8001b40:	4802      	ldr	r0, [pc, #8]	; (8001b4c <putch+0x1c>)
 8001b42:	f000 fd64 	bl	800260e <HAL_UART_Transmit>
}
 8001b46:	b003      	add	sp, #12
 8001b48:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b4c:	20000150 	.word	0x20000150

08001b50 <HAL_GetTick>:
	hal_sys_tick = 0;
	return HAL_OK;
}
uint32_t HAL_GetTick(void)
{
	return hal_sys_tick++;
 8001b50:	4b02      	ldr	r3, [pc, #8]	; (8001b5c <HAL_GetTick+0xc>)
 8001b52:	6818      	ldr	r0, [r3, #0]
 8001b54:	1c42      	adds	r2, r0, #1
 8001b56:	601a      	str	r2, [r3, #0]
}
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	200001c0 	.word	0x200001c0

08001b60 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b60:	6803      	ldr	r3, [r0, #0]
{
 8001b62:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b66:	07d9      	lsls	r1, r3, #31
{
 8001b68:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b6a:	d411      	bmi.n	8001b90 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b6c:	6823      	ldr	r3, [r4, #0]
 8001b6e:	079a      	lsls	r2, r3, #30
 8001b70:	f100 8086 	bmi.w	8001c80 <HAL_RCC_OscConfig+0x120>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b74:	6823      	ldr	r3, [r4, #0]
 8001b76:	071e      	lsls	r6, r3, #28
 8001b78:	f100 80f4 	bmi.w	8001d64 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b7c:	6823      	ldr	r3, [r4, #0]
 8001b7e:	075d      	lsls	r5, r3, #29
 8001b80:	f100 8140 	bmi.w	8001e04 <HAL_RCC_OscConfig+0x2a4>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b84:	69e2      	ldr	r2, [r4, #28]
 8001b86:	2a00      	cmp	r2, #0
 8001b88:	f040 81cb 	bne.w	8001f22 <HAL_RCC_OscConfig+0x3c2>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	e021      	b.n	8001bd4 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b90:	499a      	ldr	r1, [pc, #616]	; (8001dfc <HAL_RCC_OscConfig+0x29c>)
 8001b92:	684b      	ldr	r3, [r1, #4]
 8001b94:	f003 030c 	and.w	r3, r3, #12
 8001b98:	2b04      	cmp	r3, #4
 8001b9a:	d007      	beq.n	8001bac <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b9c:	684b      	ldr	r3, [r1, #4]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
 8001ba2:	2b08      	cmp	r3, #8
 8001ba4:	d119      	bne.n	8001bda <HAL_RCC_OscConfig+0x7a>
 8001ba6:	684b      	ldr	r3, [r1, #4]
 8001ba8:	03db      	lsls	r3, r3, #15
 8001baa:	d516      	bpl.n	8001bda <HAL_RCC_OscConfig+0x7a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bb0:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb4:	6809      	ldr	r1, [r1, #0]
 8001bb6:	fa93 f3a3 	rbit	r3, r3
 8001bba:	fab3 f383 	clz	r3, r3
 8001bbe:	f003 031f 	and.w	r3, r3, #31
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	420b      	tst	r3, r1
 8001bca:	d0cf      	beq.n	8001b6c <HAL_RCC_OscConfig+0xc>
 8001bcc:	6863      	ldr	r3, [r4, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1cc      	bne.n	8001b6c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001bd2:	2001      	movs	r0, #1
}
 8001bd4:	b002      	add	sp, #8
 8001bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bda:	6862      	ldr	r2, [r4, #4]
 8001bdc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001be0:	d124      	bne.n	8001c2c <HAL_RCC_OscConfig+0xcc>
 8001be2:	680b      	ldr	r3, [r1, #0]
 8001be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be8:	600b      	str	r3, [r1, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bea:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001bec:	68a0      	ldr	r0, [r4, #8]
 8001bee:	f023 030f 	bic.w	r3, r3, #15
 8001bf2:	4303      	orrs	r3, r0
 8001bf4:	62cb      	str	r3, [r1, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bf6:	b34a      	cbz	r2, 8001c4c <HAL_RCC_OscConfig+0xec>
        tickstart = HAL_GetTick();
 8001bf8:	f7ff ffaa 	bl	8001b50 <HAL_GetTick>
 8001bfc:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001c00:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c02:	2701      	movs	r7, #1
 8001c04:	fa96 f3a6 	rbit	r3, r6
 8001c08:	680a      	ldr	r2, [r1, #0]
 8001c0a:	fa96 f3a6 	rbit	r3, r6
 8001c0e:	fab3 f383 	clz	r3, r3
 8001c12:	f003 031f 	and.w	r3, r3, #31
 8001c16:	fa07 f303 	lsl.w	r3, r7, r3
 8001c1a:	4213      	tst	r3, r2
 8001c1c:	d1a6      	bne.n	8001b6c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c1e:	f7ff ff97 	bl	8001b50 <HAL_GetTick>
 8001c22:	1b40      	subs	r0, r0, r5
 8001c24:	2864      	cmp	r0, #100	; 0x64
 8001c26:	d9ed      	bls.n	8001c04 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 8001c28:	2003      	movs	r0, #3
 8001c2a:	e7d3      	b.n	8001bd4 <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c2c:	680b      	ldr	r3, [r1, #0]
 8001c2e:	b932      	cbnz	r2, 8001c3e <HAL_RCC_OscConfig+0xde>
 8001c30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c34:	600b      	str	r3, [r1, #0]
 8001c36:	680b      	ldr	r3, [r1, #0]
 8001c38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c3c:	e7d4      	b.n	8001be8 <HAL_RCC_OscConfig+0x88>
 8001c3e:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001c42:	d1f5      	bne.n	8001c30 <HAL_RCC_OscConfig+0xd0>
 8001c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c48:	600b      	str	r3, [r1, #0]
 8001c4a:	e7ca      	b.n	8001be2 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001c4c:	f7ff ff80 	bl	8001b50 <HAL_GetTick>
 8001c50:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001c54:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c56:	2701      	movs	r7, #1
 8001c58:	fa96 f3a6 	rbit	r3, r6
 8001c5c:	680a      	ldr	r2, [r1, #0]
 8001c5e:	fa96 f3a6 	rbit	r3, r6
 8001c62:	fab3 f383 	clz	r3, r3
 8001c66:	f003 031f 	and.w	r3, r3, #31
 8001c6a:	fa07 f303 	lsl.w	r3, r7, r3
 8001c6e:	4213      	tst	r3, r2
 8001c70:	f43f af7c 	beq.w	8001b6c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c74:	f7ff ff6c 	bl	8001b50 <HAL_GetTick>
 8001c78:	1b40      	subs	r0, r0, r5
 8001c7a:	2864      	cmp	r0, #100	; 0x64
 8001c7c:	d9ec      	bls.n	8001c58 <HAL_RCC_OscConfig+0xf8>
 8001c7e:	e7d3      	b.n	8001c28 <HAL_RCC_OscConfig+0xc8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c80:	495e      	ldr	r1, [pc, #376]	; (8001dfc <HAL_RCC_OscConfig+0x29c>)
 8001c82:	684b      	ldr	r3, [r1, #4]
 8001c84:	f013 0f0c 	tst.w	r3, #12
 8001c88:	d007      	beq.n	8001c9a <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c8a:	684b      	ldr	r3, [r1, #4]
 8001c8c:	f003 030c 	and.w	r3, r3, #12
 8001c90:	2b08      	cmp	r3, #8
 8001c92:	d121      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x178>
 8001c94:	684b      	ldr	r3, [r1, #4]
 8001c96:	03df      	lsls	r7, r3, #15
 8001c98:	d41e      	bmi.n	8001cd8 <HAL_RCC_OscConfig+0x178>
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ca0:	6808      	ldr	r0, [r1, #0]
 8001ca2:	fa93 f3a3 	rbit	r3, r3
 8001ca6:	fab3 f383 	clz	r3, r3
 8001caa:	f003 031f 	and.w	r3, r3, #31
 8001cae:	2201      	movs	r2, #1
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	4203      	tst	r3, r0
 8001cb6:	d002      	beq.n	8001cbe <HAL_RCC_OscConfig+0x15e>
 8001cb8:	6923      	ldr	r3, [r4, #16]
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d189      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cbe:	6808      	ldr	r0, [r1, #0]
 8001cc0:	23f8      	movs	r3, #248	; 0xf8
 8001cc2:	fa93 f3a3 	rbit	r3, r3
 8001cc6:	fab3 f283 	clz	r2, r3
 8001cca:	6963      	ldr	r3, [r4, #20]
 8001ccc:	4093      	lsls	r3, r2
 8001cce:	f020 02f8 	bic.w	r2, r0, #248	; 0xf8
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	600b      	str	r3, [r1, #0]
 8001cd6:	e74d      	b.n	8001b74 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cd8:	6922      	ldr	r2, [r4, #16]
 8001cda:	2501      	movs	r5, #1
 8001cdc:	b302      	cbz	r2, 8001d20 <HAL_RCC_OscConfig+0x1c0>
 8001cde:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 8001ce2:	fab3 f383 	clz	r3, r3
 8001ce6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	2702      	movs	r7, #2
 8001cf2:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8001cf4:	f7ff ff2c 	bl	8001b50 <HAL_GetTick>
 8001cf8:	4606      	mov	r6, r0
 8001cfa:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cfe:	680a      	ldr	r2, [r1, #0]
 8001d00:	fa97 f3a7 	rbit	r3, r7
 8001d04:	fab3 f383 	clz	r3, r3
 8001d08:	f003 031f 	and.w	r3, r3, #31
 8001d0c:	fa05 f303 	lsl.w	r3, r5, r3
 8001d10:	4213      	tst	r3, r2
 8001d12:	d1d4      	bne.n	8001cbe <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d14:	f7ff ff1c 	bl	8001b50 <HAL_GetTick>
 8001d18:	1b80      	subs	r0, r0, r6
 8001d1a:	2802      	cmp	r0, #2
 8001d1c:	d9ed      	bls.n	8001cfa <HAL_RCC_OscConfig+0x19a>
 8001d1e:	e783      	b.n	8001c28 <HAL_RCC_OscConfig+0xc8>
 8001d20:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8001d24:	fab3 f383 	clz	r3, r3
 8001d28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	2702      	movs	r7, #2
 8001d34:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d36:	f7ff ff0b 	bl	8001b50 <HAL_GetTick>
 8001d3a:	4606      	mov	r6, r0
 8001d3c:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d40:	680a      	ldr	r2, [r1, #0]
 8001d42:	fa97 f3a7 	rbit	r3, r7
 8001d46:	fab3 f383 	clz	r3, r3
 8001d4a:	f003 031f 	and.w	r3, r3, #31
 8001d4e:	fa05 f303 	lsl.w	r3, r5, r3
 8001d52:	4213      	tst	r3, r2
 8001d54:	f43f af0e 	beq.w	8001b74 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d58:	f7ff fefa 	bl	8001b50 <HAL_GetTick>
 8001d5c:	1b80      	subs	r0, r0, r6
 8001d5e:	2802      	cmp	r0, #2
 8001d60:	d9ec      	bls.n	8001d3c <HAL_RCC_OscConfig+0x1dc>
 8001d62:	e761      	b.n	8001c28 <HAL_RCC_OscConfig+0xc8>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d64:	69a2      	ldr	r2, [r4, #24]
 8001d66:	4d25      	ldr	r5, [pc, #148]	; (8001dfc <HAL_RCC_OscConfig+0x29c>)
 8001d68:	4825      	ldr	r0, [pc, #148]	; (8001e00 <HAL_RCC_OscConfig+0x2a0>)
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	b312      	cbz	r2, 8001db4 <HAL_RCC_OscConfig+0x254>
 8001d6e:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_ENABLE();
 8001d72:	fab3 f383 	clz	r3, r3
 8001d76:	4403      	add	r3, r0
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	2602      	movs	r6, #2
 8001d7c:	6019      	str	r1, [r3, #0]
      tickstart = HAL_GetTick();
 8001d7e:	f7ff fee7 	bl	8001b50 <HAL_GetTick>
 8001d82:	4607      	mov	r7, r0
 8001d84:	fa96 f3a6 	rbit	r3, r6
 8001d88:	fa96 f3a6 	rbit	r3, r6
 8001d8c:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d90:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001d92:	fa96 f3a6 	rbit	r3, r6
 8001d96:	fab3 f383 	clz	r3, r3
 8001d9a:	f003 031f 	and.w	r3, r3, #31
 8001d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001da2:	4213      	tst	r3, r2
 8001da4:	f47f aeea 	bne.w	8001b7c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001da8:	f7ff fed2 	bl	8001b50 <HAL_GetTick>
 8001dac:	1bc0      	subs	r0, r0, r7
 8001dae:	2802      	cmp	r0, #2
 8001db0:	d9e8      	bls.n	8001d84 <HAL_RCC_OscConfig+0x224>
 8001db2:	e739      	b.n	8001c28 <HAL_RCC_OscConfig+0xc8>
 8001db4:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_DISABLE();
 8001db8:	fab3 f383 	clz	r3, r3
 8001dbc:	4403      	add	r3, r0
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	2602      	movs	r6, #2
 8001dc2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001dc4:	f7ff fec4 	bl	8001b50 <HAL_GetTick>
 8001dc8:	4607      	mov	r7, r0
 8001dca:	fa96 f3a6 	rbit	r3, r6
 8001dce:	fa96 f3a6 	rbit	r3, r6
 8001dd2:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001dd8:	fa96 f3a6 	rbit	r3, r6
 8001ddc:	fab3 f383 	clz	r3, r3
 8001de0:	f003 031f 	and.w	r3, r3, #31
 8001de4:	fa01 f303 	lsl.w	r3, r1, r3
 8001de8:	4213      	tst	r3, r2
 8001dea:	f43f aec7 	beq.w	8001b7c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dee:	f7ff feaf 	bl	8001b50 <HAL_GetTick>
 8001df2:	1bc0      	subs	r0, r0, r7
 8001df4:	2802      	cmp	r0, #2
 8001df6:	d9e8      	bls.n	8001dca <HAL_RCC_OscConfig+0x26a>
 8001df8:	e716      	b.n	8001c28 <HAL_RCC_OscConfig+0xc8>
 8001dfa:	bf00      	nop
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	10908120 	.word	0x10908120
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e04:	498a      	ldr	r1, [pc, #552]	; (8002030 <HAL_RCC_OscConfig+0x4d0>)
 8001e06:	69cb      	ldr	r3, [r1, #28]
 8001e08:	00d8      	lsls	r0, r3, #3
 8001e0a:	d433      	bmi.n	8001e74 <HAL_RCC_OscConfig+0x314>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e0c:	69cb      	ldr	r3, [r1, #28]
 8001e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e12:	61cb      	str	r3, [r1, #28]
 8001e14:	69cb      	ldr	r3, [r1, #28]
 8001e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1a:	9301      	str	r3, [sp, #4]
 8001e1c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001e1e:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e20:	4e84      	ldr	r6, [pc, #528]	; (8002034 <HAL_RCC_OscConfig+0x4d4>)
 8001e22:	6833      	ldr	r3, [r6, #0]
 8001e24:	05da      	lsls	r2, r3, #23
 8001e26:	d527      	bpl.n	8001e78 <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e28:	68e3      	ldr	r3, [r4, #12]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d134      	bne.n	8001e98 <HAL_RCC_OscConfig+0x338>
 8001e2e:	6a0b      	ldr	r3, [r1, #32]
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8001e36:	f7ff fe8b 	bl	8001b50 <HAL_GetTick>
 8001e3a:	2602      	movs	r6, #2
 8001e3c:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e3e:	f04f 0801 	mov.w	r8, #1
 8001e42:	fa96 f3a6 	rbit	r3, r6
 8001e46:	fa96 f3a6 	rbit	r3, r6
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d061      	beq.n	8001f12 <HAL_RCC_OscConfig+0x3b2>
 8001e4e:	6a0a      	ldr	r2, [r1, #32]
 8001e50:	fa96 f3a6 	rbit	r3, r6
 8001e54:	fab3 f383 	clz	r3, r3
 8001e58:	f003 031f 	and.w	r3, r3, #31
 8001e5c:	fa08 f303 	lsl.w	r3, r8, r3
 8001e60:	4213      	tst	r3, r2
 8001e62:	d04e      	beq.n	8001f02 <HAL_RCC_OscConfig+0x3a2>
    if(pwrclkchanged == SET)
 8001e64:	2d00      	cmp	r5, #0
 8001e66:	f43f ae8d 	beq.w	8001b84 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e6a:	69cb      	ldr	r3, [r1, #28]
 8001e6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e70:	61cb      	str	r3, [r1, #28]
 8001e72:	e687      	b.n	8001b84 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001e74:	2500      	movs	r5, #0
 8001e76:	e7d3      	b.n	8001e20 <HAL_RCC_OscConfig+0x2c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e78:	6833      	ldr	r3, [r6, #0]
 8001e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e7e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001e80:	f7ff fe66 	bl	8001b50 <HAL_GetTick>
 8001e84:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e86:	6833      	ldr	r3, [r6, #0]
 8001e88:	05db      	lsls	r3, r3, #23
 8001e8a:	d4cd      	bmi.n	8001e28 <HAL_RCC_OscConfig+0x2c8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e8c:	f7ff fe60 	bl	8001b50 <HAL_GetTick>
 8001e90:	1bc0      	subs	r0, r0, r7
 8001e92:	2864      	cmp	r0, #100	; 0x64
 8001e94:	d9f7      	bls.n	8001e86 <HAL_RCC_OscConfig+0x326>
 8001e96:	e6c7      	b.n	8001c28 <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e98:	bb2b      	cbnz	r3, 8001ee6 <HAL_RCC_OscConfig+0x386>
 8001e9a:	6a0b      	ldr	r3, [r1, #32]
 8001e9c:	f023 0301 	bic.w	r3, r3, #1
 8001ea0:	620b      	str	r3, [r1, #32]
 8001ea2:	6a0b      	ldr	r3, [r1, #32]
 8001ea4:	f023 0304 	bic.w	r3, r3, #4
 8001ea8:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8001eaa:	f7ff fe51 	bl	8001b50 <HAL_GetTick>
 8001eae:	2602      	movs	r6, #2
 8001eb0:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb2:	f04f 0801 	mov.w	r8, #1
 8001eb6:	fa96 f3a6 	rbit	r3, r6
 8001eba:	fa96 f3a6 	rbit	r3, r6
 8001ebe:	b363      	cbz	r3, 8001f1a <HAL_RCC_OscConfig+0x3ba>
 8001ec0:	6a0a      	ldr	r2, [r1, #32]
 8001ec2:	fa96 f3a6 	rbit	r3, r6
 8001ec6:	fab3 f383 	clz	r3, r3
 8001eca:	f003 031f 	and.w	r3, r3, #31
 8001ece:	fa08 f303 	lsl.w	r3, r8, r3
 8001ed2:	4213      	tst	r3, r2
 8001ed4:	d0c6      	beq.n	8001e64 <HAL_RCC_OscConfig+0x304>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ed6:	f7ff fe3b 	bl	8001b50 <HAL_GetTick>
 8001eda:	f241 3388 	movw	r3, #5000	; 0x1388
 8001ede:	1bc0      	subs	r0, r0, r7
 8001ee0:	4298      	cmp	r0, r3
 8001ee2:	d9e8      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x356>
 8001ee4:	e6a0      	b.n	8001c28 <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee6:	2b05      	cmp	r3, #5
 8001ee8:	6a0b      	ldr	r3, [r1, #32]
 8001eea:	d103      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x394>
 8001eec:	f043 0304 	orr.w	r3, r3, #4
 8001ef0:	620b      	str	r3, [r1, #32]
 8001ef2:	e79c      	b.n	8001e2e <HAL_RCC_OscConfig+0x2ce>
 8001ef4:	f023 0301 	bic.w	r3, r3, #1
 8001ef8:	620b      	str	r3, [r1, #32]
 8001efa:	6a0b      	ldr	r3, [r1, #32]
 8001efc:	f023 0304 	bic.w	r3, r3, #4
 8001f00:	e798      	b.n	8001e34 <HAL_RCC_OscConfig+0x2d4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f02:	f7ff fe25 	bl	8001b50 <HAL_GetTick>
 8001f06:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f0a:	1bc0      	subs	r0, r0, r7
 8001f0c:	4298      	cmp	r0, r3
 8001f0e:	d998      	bls.n	8001e42 <HAL_RCC_OscConfig+0x2e2>
 8001f10:	e68a      	b.n	8001c28 <HAL_RCC_OscConfig+0xc8>
 8001f12:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f16:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001f18:	e79a      	b.n	8001e50 <HAL_RCC_OscConfig+0x2f0>
 8001f1a:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f1e:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001f20:	e7cf      	b.n	8001ec2 <HAL_RCC_OscConfig+0x362>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f22:	4943      	ldr	r1, [pc, #268]	; (8002030 <HAL_RCC_OscConfig+0x4d0>)
 8001f24:	684b      	ldr	r3, [r1, #4]
 8001f26:	f003 030c 	and.w	r3, r3, #12
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	f43f ae51 	beq.w	8001bd2 <HAL_RCC_OscConfig+0x72>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f30:	2a02      	cmp	r2, #2
 8001f32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f36:	d154      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x482>
 8001f38:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001f3c:	fab3 f383 	clz	r3, r3
 8001f40:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f44:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f4e:	f7ff fdff 	bl	8001b50 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f52:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8002038 <HAL_RCC_OscConfig+0x4d8>
        tickstart = HAL_GetTick();
 8001f56:	4606      	mov	r6, r0
 8001f58:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5c:	2501      	movs	r5, #1
 8001f5e:	fa97 f3a7 	rbit	r3, r7
 8001f62:	680a      	ldr	r2, [r1, #0]
 8001f64:	fa97 f3a7 	rbit	r3, r7
 8001f68:	fab3 f383 	clz	r3, r3
 8001f6c:	f003 031f 	and.w	r3, r3, #31
 8001f70:	fa05 f303 	lsl.w	r3, r5, r3
 8001f74:	4213      	tst	r3, r2
 8001f76:	d12e      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x476>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f78:	e9d4 0308 	ldrd	r0, r3, [r4, #32]
 8001f7c:	684a      	ldr	r2, [r1, #4]
 8001f7e:	4303      	orrs	r3, r0
 8001f80:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001f84:	4313      	orrs	r3, r2
 8001f86:	604b      	str	r3, [r1, #4]
 8001f88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f8c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001f90:	fab3 f383 	clz	r3, r3
 8001f94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f9c:	009b      	lsls	r3, r3, #2
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f9e:	4f26      	ldr	r7, [pc, #152]	; (8002038 <HAL_RCC_OscConfig+0x4d8>)
        __HAL_RCC_PLL_ENABLE();
 8001fa0:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8001fa2:	f7ff fdd5 	bl	8001b50 <HAL_GetTick>
 8001fa6:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001faa:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fac:	2601      	movs	r6, #1
 8001fae:	fa95 f3a5 	rbit	r3, r5
 8001fb2:	680a      	ldr	r2, [r1, #0]
 8001fb4:	fa95 f3a5 	rbit	r3, r5
 8001fb8:	fab3 f383 	clz	r3, r3
 8001fbc:	f003 031f 	and.w	r3, r3, #31
 8001fc0:	fa06 f303 	lsl.w	r3, r6, r3
 8001fc4:	4213      	tst	r3, r2
 8001fc6:	f47f ade1 	bne.w	8001b8c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fca:	f7ff fdc1 	bl	8001b50 <HAL_GetTick>
 8001fce:	1b00      	subs	r0, r0, r4
 8001fd0:	42b8      	cmp	r0, r7
 8001fd2:	d9ec      	bls.n	8001fae <HAL_RCC_OscConfig+0x44e>
 8001fd4:	e628      	b.n	8001c28 <HAL_RCC_OscConfig+0xc8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fd6:	f7ff fdbb 	bl	8001b50 <HAL_GetTick>
 8001fda:	1b80      	subs	r0, r0, r6
 8001fdc:	4540      	cmp	r0, r8
 8001fde:	d9be      	bls.n	8001f5e <HAL_RCC_OscConfig+0x3fe>
 8001fe0:	e622      	b.n	8001c28 <HAL_RCC_OscConfig+0xc8>
 8001fe2:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001fe6:	fab3 f383 	clz	r3, r3
 8001fea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ff8:	f7ff fdaa 	bl	8001b50 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ffc:	4f0e      	ldr	r7, [pc, #56]	; (8002038 <HAL_RCC_OscConfig+0x4d8>)
        tickstart = HAL_GetTick();
 8001ffe:	4604      	mov	r4, r0
 8002000:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002004:	2601      	movs	r6, #1
 8002006:	fa95 f3a5 	rbit	r3, r5
 800200a:	680a      	ldr	r2, [r1, #0]
 800200c:	fa95 f3a5 	rbit	r3, r5
 8002010:	fab3 f383 	clz	r3, r3
 8002014:	f003 031f 	and.w	r3, r3, #31
 8002018:	fa06 f303 	lsl.w	r3, r6, r3
 800201c:	4213      	tst	r3, r2
 800201e:	f43f adb5 	beq.w	8001b8c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002022:	f7ff fd95 	bl	8001b50 <HAL_GetTick>
 8002026:	1b00      	subs	r0, r0, r4
 8002028:	42b8      	cmp	r0, r7
 800202a:	d9ec      	bls.n	8002006 <HAL_RCC_OscConfig+0x4a6>
 800202c:	e5fc      	b.n	8001c28 <HAL_RCC_OscConfig+0xc8>
 800202e:	bf00      	nop
 8002030:	40021000 	.word	0x40021000
 8002034:	40007000 	.word	0x40007000
 8002038:	00030d40 	.word	0x00030d40

0800203c <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800203c:	4a50      	ldr	r2, [pc, #320]	; (8002180 <HAL_RCC_ClockConfig+0x144>)
{
 800203e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002040:	6813      	ldr	r3, [r2, #0]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	428b      	cmp	r3, r1
{
 8002048:	4604      	mov	r4, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800204a:	d31b      	bcc.n	8002084 <HAL_RCC_ClockConfig+0x48>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800204c:	6822      	ldr	r2, [r4, #0]
 800204e:	0790      	lsls	r0, r2, #30
 8002050:	d424      	bmi.n	800209c <HAL_RCC_ClockConfig+0x60>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002052:	07d2      	lsls	r2, r2, #31
 8002054:	d42a      	bmi.n	80020ac <HAL_RCC_ClockConfig+0x70>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002056:	4a4a      	ldr	r2, [pc, #296]	; (8002180 <HAL_RCC_ClockConfig+0x144>)
 8002058:	6813      	ldr	r3, [r2, #0]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	428b      	cmp	r3, r1
 8002060:	d87a      	bhi.n	8002158 <HAL_RCC_ClockConfig+0x11c>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002062:	6820      	ldr	r0, [r4, #0]
 8002064:	0743      	lsls	r3, r0, #29
 8002066:	f100 8082 	bmi.w	800216e <HAL_RCC_ClockConfig+0x132>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800206a:	f010 0008 	ands.w	r0, r0, #8
 800206e:	d014      	beq.n	800209a <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002070:	4a44      	ldr	r2, [pc, #272]	; (8002184 <HAL_RCC_ClockConfig+0x148>)
 8002072:	6921      	ldr	r1, [r4, #16]
 8002074:	6853      	ldr	r3, [r2, #4]
 8002076:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800207a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800207e:	6053      	str	r3, [r2, #4]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 8002080:	2000      	movs	r0, #0
 8002082:	e00a      	b.n	800209a <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002084:	6813      	ldr	r3, [r2, #0]
 8002086:	f023 0307 	bic.w	r3, r3, #7
 800208a:	430b      	orrs	r3, r1
 800208c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800208e:	6813      	ldr	r3, [r2, #0]
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	428b      	cmp	r3, r1
 8002096:	d0d9      	beq.n	800204c <HAL_RCC_ClockConfig+0x10>
      return HAL_ERROR;
 8002098:	2001      	movs	r0, #1
}
 800209a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800209c:	4839      	ldr	r0, [pc, #228]	; (8002184 <HAL_RCC_ClockConfig+0x148>)
 800209e:	68a5      	ldr	r5, [r4, #8]
 80020a0:	6843      	ldr	r3, [r0, #4]
 80020a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020a6:	432b      	orrs	r3, r5
 80020a8:	6043      	str	r3, [r0, #4]
 80020aa:	e7d2      	b.n	8002052 <HAL_RCC_ClockConfig+0x16>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ac:	6862      	ldr	r2, [r4, #4]
 80020ae:	4d35      	ldr	r5, [pc, #212]	; (8002184 <HAL_RCC_ClockConfig+0x148>)
 80020b0:	2a01      	cmp	r2, #1
 80020b2:	d127      	bne.n	8002104 <HAL_RCC_ClockConfig+0xc8>
 80020b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020b8:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020bc:	6828      	ldr	r0, [r5, #0]
 80020be:	fa93 f3a3 	rbit	r3, r3
 80020c2:	fab3 f383 	clz	r3, r3
 80020c6:	f003 031f 	and.w	r3, r3, #31
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	4203      	tst	r3, r0
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d0:	d0e2      	beq.n	8002098 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020d2:	686b      	ldr	r3, [r5, #4]
 80020d4:	f023 0303 	bic.w	r3, r3, #3
 80020d8:	431a      	orrs	r2, r3
 80020da:	606a      	str	r2, [r5, #4]
    tickstart = HAL_GetTick();
 80020dc:	f7ff fd38 	bl	8001b50 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020e0:	6863      	ldr	r3, [r4, #4]
 80020e2:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 80020e4:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e6:	f241 3788 	movw	r7, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ea:	d11e      	bne.n	800212a <HAL_RCC_ClockConfig+0xee>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80020ec:	686b      	ldr	r3, [r5, #4]
 80020ee:	f003 030c 	and.w	r3, r3, #12
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	d0af      	beq.n	8002056 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020f6:	f7ff fd2b 	bl	8001b50 <HAL_GetTick>
 80020fa:	1b80      	subs	r0, r0, r6
 80020fc:	42b8      	cmp	r0, r7
 80020fe:	d9f5      	bls.n	80020ec <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 8002100:	2003      	movs	r0, #3
 8002102:	e7ca      	b.n	800209a <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002104:	2a02      	cmp	r2, #2
 8002106:	bf0c      	ite	eq
 8002108:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 800210c:	2302      	movne	r3, #2
 800210e:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002112:	682e      	ldr	r6, [r5, #0]
 8002114:	fa93 f3a3 	rbit	r3, r3
 8002118:	fab3 f383 	clz	r3, r3
 800211c:	f003 031f 	and.w	r3, r3, #31
 8002120:	2001      	movs	r0, #1
 8002122:	fa00 f303 	lsl.w	r3, r0, r3
 8002126:	4233      	tst	r3, r6
 8002128:	e7d2      	b.n	80020d0 <HAL_RCC_ClockConfig+0x94>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800212a:	2b02      	cmp	r3, #2
 800212c:	d10f      	bne.n	800214e <HAL_RCC_ClockConfig+0x112>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800212e:	686b      	ldr	r3, [r5, #4]
 8002130:	f003 030c 	and.w	r3, r3, #12
 8002134:	2b08      	cmp	r3, #8
 8002136:	d08e      	beq.n	8002056 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002138:	f7ff fd0a 	bl	8001b50 <HAL_GetTick>
 800213c:	1b80      	subs	r0, r0, r6
 800213e:	42b8      	cmp	r0, r7
 8002140:	d9f5      	bls.n	800212e <HAL_RCC_ClockConfig+0xf2>
 8002142:	e7dd      	b.n	8002100 <HAL_RCC_ClockConfig+0xc4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002144:	f7ff fd04 	bl	8001b50 <HAL_GetTick>
 8002148:	1b80      	subs	r0, r0, r6
 800214a:	42b8      	cmp	r0, r7
 800214c:	d8d8      	bhi.n	8002100 <HAL_RCC_ClockConfig+0xc4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800214e:	686b      	ldr	r3, [r5, #4]
 8002150:	f013 0f0c 	tst.w	r3, #12
 8002154:	d1f6      	bne.n	8002144 <HAL_RCC_ClockConfig+0x108>
 8002156:	e77e      	b.n	8002056 <HAL_RCC_ClockConfig+0x1a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002158:	6813      	ldr	r3, [r2, #0]
 800215a:	f023 0307 	bic.w	r3, r3, #7
 800215e:	430b      	orrs	r3, r1
 8002160:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002162:	6813      	ldr	r3, [r2, #0]
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	428b      	cmp	r3, r1
 800216a:	d195      	bne.n	8002098 <HAL_RCC_ClockConfig+0x5c>
 800216c:	e779      	b.n	8002062 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800216e:	4905      	ldr	r1, [pc, #20]	; (8002184 <HAL_RCC_ClockConfig+0x148>)
 8002170:	68e3      	ldr	r3, [r4, #12]
 8002172:	684a      	ldr	r2, [r1, #4]
 8002174:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002178:	431a      	orrs	r2, r3
 800217a:	604a      	str	r2, [r1, #4]
 800217c:	e775      	b.n	800206a <HAL_RCC_ClockConfig+0x2e>
 800217e:	bf00      	nop
 8002180:	40022000 	.word	0x40022000
 8002184:	40021000 	.word	0x40021000

08002188 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002188:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800218c:	f8df 8174 	ldr.w	r8, [pc, #372]	; 8002304 <HAL_GPIO_Init+0x17c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002190:	4c5d      	ldr	r4, [pc, #372]	; (8002308 <HAL_GPIO_Init+0x180>)
  uint32_t position = 0x00U;
 8002192:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002194:	f04f 0901 	mov.w	r9, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002198:	680a      	ldr	r2, [r1, #0]
 800219a:	fa32 f503 	lsrs.w	r5, r2, r3
 800219e:	d102      	bne.n	80021a6 <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  }
}
 80021a0:	b003      	add	sp, #12
 80021a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80021a6:	fa09 fa03 	lsl.w	sl, r9, r3
    if(iocurrent)
 80021aa:	ea1a 0202 	ands.w	r2, sl, r2
 80021ae:	f000 809e 	beq.w	80022ee <HAL_GPIO_Init+0x166>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021b2:	684d      	ldr	r5, [r1, #4]
 80021b4:	f025 0e10 	bic.w	lr, r5, #16
 80021b8:	f1be 0f02 	cmp.w	lr, #2
 80021bc:	d114      	bne.n	80021e8 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 80021be:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 80021c2:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021c6:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80021ca:	f8dc 6020 	ldr.w	r6, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021ce:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80021d2:	270f      	movs	r7, #15
 80021d4:	fa07 f70b 	lsl.w	r7, r7, fp
 80021d8:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021dc:	690e      	ldr	r6, [r1, #16]
 80021de:	fa06 f60b 	lsl.w	r6, r6, fp
 80021e2:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 80021e4:	f8cc 6020 	str.w	r6, [ip, #32]
      temp = GPIOx->MODER;
 80021e8:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80021f0:	2603      	movs	r6, #3
 80021f2:	fa06 f70c 	lsl.w	r7, r6, ip
 80021f6:	ea2b 0b07 	bic.w	fp, fp, r7
 80021fa:	43fe      	mvns	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021fc:	f005 0703 	and.w	r7, r5, #3
 8002200:	fa07 f70c 	lsl.w	r7, r7, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002204:	f10e 3eff 	add.w	lr, lr, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002208:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800220c:	f1be 0f01 	cmp.w	lr, #1
      GPIOx->MODER = temp;
 8002210:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002212:	d811      	bhi.n	8002238 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR;
 8002214:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002216:	ea06 0e07 	and.w	lr, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 800221a:	68cf      	ldr	r7, [r1, #12]
 800221c:	fa07 f70c 	lsl.w	r7, r7, ip
 8002220:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8002224:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002226:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002228:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800222c:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8002230:	409f      	lsls	r7, r3
 8002232:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8002236:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8002238:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800223a:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800223c:	688e      	ldr	r6, [r1, #8]
 800223e:	fa06 f60c 	lsl.w	r6, r6, ip
 8002242:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8002244:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002246:	00ee      	lsls	r6, r5, #3
 8002248:	d551      	bpl.n	80022ee <HAL_GPIO_Init+0x166>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800224a:	f8d8 6018 	ldr.w	r6, [r8, #24]
 800224e:	f046 0601 	orr.w	r6, r6, #1
 8002252:	f8c8 6018 	str.w	r6, [r8, #24]
 8002256:	f8d8 6018 	ldr.w	r6, [r8, #24]
 800225a:	f023 0703 	bic.w	r7, r3, #3
 800225e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8002262:	f006 0601 	and.w	r6, r6, #1
 8002266:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800226a:	9601      	str	r6, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800226c:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002270:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8002272:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8002274:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002278:	f04f 0c0f 	mov.w	ip, #15
 800227c:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002280:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8002284:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002288:	d033      	beq.n	80022f2 <HAL_GPIO_Init+0x16a>
 800228a:	4e20      	ldr	r6, [pc, #128]	; (800230c <HAL_GPIO_Init+0x184>)
 800228c:	42b0      	cmp	r0, r6
 800228e:	d032      	beq.n	80022f6 <HAL_GPIO_Init+0x16e>
 8002290:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002294:	42b0      	cmp	r0, r6
 8002296:	d030      	beq.n	80022fa <HAL_GPIO_Init+0x172>
 8002298:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800229c:	42b0      	cmp	r0, r6
 800229e:	d02e      	beq.n	80022fe <HAL_GPIO_Init+0x176>
 80022a0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80022a4:	42b0      	cmp	r0, r6
 80022a6:	bf0c      	ite	eq
 80022a8:	2604      	moveq	r6, #4
 80022aa:	2605      	movne	r6, #5
 80022ac:	fa06 f60e 	lsl.w	r6, r6, lr
 80022b0:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 80022b4:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 80022b6:	6826      	ldr	r6, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 80022b8:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022ba:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80022be:	bf0c      	ite	eq
 80022c0:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80022c2:	4316      	orrne	r6, r2
        EXTI->IMR = temp;
 80022c4:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 80022c6:	6866      	ldr	r6, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022c8:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80022cc:	bf0c      	ite	eq
 80022ce:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80022d0:	4316      	orrne	r6, r2
        EXTI->EMR = temp;
 80022d2:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 80022d4:	68a6      	ldr	r6, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022d6:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80022da:	bf0c      	ite	eq
 80022dc:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80022de:	4316      	orrne	r6, r2
        EXTI->RTSR = temp;
 80022e0:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 80022e2:	68e6      	ldr	r6, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022e4:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 80022e6:	bf54      	ite	pl
 80022e8:	403e      	andpl	r6, r7
          temp |= iocurrent;
 80022ea:	4316      	orrmi	r6, r2
        EXTI->FTSR = temp;
 80022ec:	60e6      	str	r6, [r4, #12]
    position++;
 80022ee:	3301      	adds	r3, #1
 80022f0:	e752      	b.n	8002198 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80022f2:	2600      	movs	r6, #0
 80022f4:	e7da      	b.n	80022ac <HAL_GPIO_Init+0x124>
 80022f6:	2601      	movs	r6, #1
 80022f8:	e7d8      	b.n	80022ac <HAL_GPIO_Init+0x124>
 80022fa:	2602      	movs	r6, #2
 80022fc:	e7d6      	b.n	80022ac <HAL_GPIO_Init+0x124>
 80022fe:	2603      	movs	r6, #3
 8002300:	e7d4      	b.n	80022ac <HAL_GPIO_Init+0x124>
 8002302:	bf00      	nop
 8002304:	40021000 	.word	0x40021000
 8002308:	40010400 	.word	0x40010400
 800230c:	48000400 	.word	0x48000400

08002310 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002310:	b10a      	cbz	r2, 8002316 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002312:	6181      	str	r1, [r0, #24]
 8002314:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002316:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002318:	4770      	bx	lr
 800231a:	0000      	movs	r0, r0

0800231c <UART_SetConfig>:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800231c:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800231e:	6881      	ldr	r1, [r0, #8]
 8002320:	69c3      	ldr	r3, [r0, #28]
{
 8002322:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002324:	6905      	ldr	r5, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002326:	6814      	ldr	r4, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002328:	4329      	orrs	r1, r5
 800232a:	6945      	ldr	r5, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800232c:	f424 4416 	bic.w	r4, r4, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002330:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002332:	f024 040c 	bic.w	r4, r4, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002336:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002338:	4321      	orrs	r1, r4
 800233a:	6011      	str	r1, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800233c:	6851      	ldr	r1, [r2, #4]
 800233e:	68c4      	ldr	r4, [r0, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002340:	6a05      	ldr	r5, [r0, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002342:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8002346:	4321      	orrs	r1, r4
 8002348:	6051      	str	r1, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800234a:	6894      	ldr	r4, [r2, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800234c:	6981      	ldr	r1, [r0, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800234e:	f424 6430 	bic.w	r4, r4, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002352:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002354:	4321      	orrs	r1, r4
 8002356:	6091      	str	r1, [r2, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002358:	4962      	ldr	r1, [pc, #392]	; (80024e4 <UART_SetConfig+0x1c8>)
 800235a:	428a      	cmp	r2, r1
 800235c:	d116      	bne.n	800238c <UART_SetConfig+0x70>
 800235e:	f501 4158 	add.w	r1, r1, #55296	; 0xd800
 8002362:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8002364:	f001 0103 	and.w	r1, r1, #3
 8002368:	3901      	subs	r1, #1
 800236a:	2902      	cmp	r1, #2
 800236c:	f200 80b2 	bhi.w	80024d4 <UART_SetConfig+0x1b8>
 8002370:	4c5d      	ldr	r4, [pc, #372]	; (80024e8 <UART_SetConfig+0x1cc>)

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002372:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002376:	5c61      	ldrb	r1, [r4, r1]
 8002378:	d177      	bne.n	800246a <UART_SetConfig+0x14e>
  {
    switch (clocksource)
 800237a:	2908      	cmp	r1, #8
 800237c:	d872      	bhi.n	8002464 <UART_SetConfig+0x148>
 800237e:	e8df f001 	tbb	[pc, r1]
 8002382:	acac      	.short	0xacac
 8002384:	71ac7124 	.word	0x71ac7124
 8002388:	7171      	.short	0x7171
 800238a:	a4          	.byte	0xa4
 800238b:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800238c:	4957      	ldr	r1, [pc, #348]	; (80024ec <UART_SetConfig+0x1d0>)
 800238e:	428a      	cmp	r2, r1
 8002390:	d12c      	bne.n	80023ec <UART_SetConfig+0xd0>
 8002392:	f501 31e6 	add.w	r1, r1, #117760	; 0x1cc00
 8002396:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8002398:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
 800239c:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80023a0:	f000 8090 	beq.w	80024c4 <UART_SetConfig+0x1a8>
 80023a4:	d80b      	bhi.n	80023be <UART_SetConfig+0xa2>
 80023a6:	2900      	cmp	r1, #0
 80023a8:	f000 8094 	beq.w	80024d4 <UART_SetConfig+0x1b8>
 80023ac:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80023b0:	f000 8090 	beq.w	80024d4 <UART_SetConfig+0x1b8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023b8:	d054      	beq.n	8002464 <UART_SetConfig+0x148>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80023ba:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 80023bc:	e015      	b.n	80023ea <UART_SetConfig+0xce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023be:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 80023c2:	d1f7      	bne.n	80023b4 <UART_SetConfig+0x98>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023c8:	d166      	bne.n	8002498 <UART_SetConfig+0x17c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80023ca:	6841      	ldr	r1, [r0, #4]
 80023cc:	084b      	lsrs	r3, r1, #1
 80023ce:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80023d2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80023d6:	fbb3 f3f1 	udiv	r3, r3, r1
  HAL_StatusTypeDef ret               = HAL_OK;
 80023da:	2000      	movs	r0, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80023dc:	b29b      	uxth	r3, r3
    brrtemp = usartdiv & 0xFFF0U;
 80023de:	f023 010f 	bic.w	r1, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80023e2:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 80023e6:	430b      	orrs	r3, r1
 80023e8:	60d3      	str	r3, [r2, #12]

}
 80023ea:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023ec:	4940      	ldr	r1, [pc, #256]	; (80024f0 <UART_SetConfig+0x1d4>)
 80023ee:	428a      	cmp	r2, r1
 80023f0:	d110      	bne.n	8002414 <UART_SetConfig+0xf8>
 80023f2:	f501 31e4 	add.w	r1, r1, #116736	; 0x1c800
 80023f6:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80023f8:	f401 2140 	and.w	r1, r1, #786432	; 0xc0000
 80023fc:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 8002400:	d060      	beq.n	80024c4 <UART_SetConfig+0x1a8>
 8002402:	d804      	bhi.n	800240e <UART_SetConfig+0xf2>
 8002404:	2900      	cmp	r1, #0
 8002406:	d065      	beq.n	80024d4 <UART_SetConfig+0x1b8>
 8002408:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 800240c:	e7d0      	b.n	80023b0 <UART_SetConfig+0x94>
 800240e:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 8002412:	e7d6      	b.n	80023c2 <UART_SetConfig+0xa6>
 8002414:	4937      	ldr	r1, [pc, #220]	; (80024f4 <UART_SetConfig+0x1d8>)
 8002416:	428a      	cmp	r2, r1
 8002418:	d110      	bne.n	800243c <UART_SetConfig+0x120>
 800241a:	f501 31e2 	add.w	r1, r1, #115712	; 0x1c400
 800241e:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8002420:	f401 1140 	and.w	r1, r1, #3145728	; 0x300000
 8002424:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8002428:	d04c      	beq.n	80024c4 <UART_SetConfig+0x1a8>
 800242a:	d804      	bhi.n	8002436 <UART_SetConfig+0x11a>
 800242c:	2900      	cmp	r1, #0
 800242e:	d051      	beq.n	80024d4 <UART_SetConfig+0x1b8>
 8002430:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8002434:	e7bc      	b.n	80023b0 <UART_SetConfig+0x94>
 8002436:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 800243a:	e7c2      	b.n	80023c2 <UART_SetConfig+0xa6>
 800243c:	492e      	ldr	r1, [pc, #184]	; (80024f8 <UART_SetConfig+0x1dc>)
 800243e:	428a      	cmp	r2, r1
 8002440:	d1b8      	bne.n	80023b4 <UART_SetConfig+0x98>
 8002442:	f501 31e0 	add.w	r1, r1, #114688	; 0x1c000
 8002446:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8002448:	f401 0140 	and.w	r1, r1, #12582912	; 0xc00000
 800244c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002450:	d038      	beq.n	80024c4 <UART_SetConfig+0x1a8>
 8002452:	d804      	bhi.n	800245e <UART_SetConfig+0x142>
 8002454:	2900      	cmp	r1, #0
 8002456:	d03d      	beq.n	80024d4 <UART_SetConfig+0x1b8>
 8002458:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800245c:	e7a8      	b.n	80023b0 <UART_SetConfig+0x94>
 800245e:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8002462:	e7ae      	b.n	80023c2 <UART_SetConfig+0xa6>
        ret = HAL_ERROR;
 8002464:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8002466:	2300      	movs	r3, #0
 8002468:	e7b9      	b.n	80023de <UART_SetConfig+0xc2>
    switch (clocksource)
 800246a:	2908      	cmp	r1, #8
 800246c:	d8a5      	bhi.n	80023ba <UART_SetConfig+0x9e>
 800246e:	a301      	add	r3, pc, #4	; (adr r3, 8002474 <UART_SetConfig+0x158>)
 8002470:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8002474:	080024b1 	.word	0x080024b1
 8002478:	080024b1 	.word	0x080024b1
 800247c:	08002499 	.word	0x08002499
 8002480:	080023bb 	.word	0x080023bb
 8002484:	080024b1 	.word	0x080024b1
 8002488:	080023bb 	.word	0x080023bb
 800248c:	080023bb 	.word	0x080023bb
 8002490:	080023bb 	.word	0x080023bb
 8002494:	080024bb 	.word	0x080024bb
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002498:	6841      	ldr	r1, [r0, #4]
 800249a:	084b      	lsrs	r3, r1, #1
 800249c:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80024a0:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80024a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80024ac:	2000      	movs	r0, #0
        break;
 80024ae:	e79c      	b.n	80023ea <UART_SetConfig+0xce>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80024b0:	6841      	ldr	r1, [r0, #4]
 80024b2:	084b      	lsrs	r3, r1, #1
 80024b4:	f503 03e1 	add.w	r3, r3, #7372800	; 0x708000
 80024b8:	e7f4      	b.n	80024a4 <UART_SetConfig+0x188>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80024ba:	6841      	ldr	r1, [r0, #4]
 80024bc:	084b      	lsrs	r3, r1, #1
 80024be:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80024c2:	e7ef      	b.n	80024a4 <UART_SetConfig+0x188>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024c8:	d1f7      	bne.n	80024ba <UART_SetConfig+0x19e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80024ca:	6841      	ldr	r1, [r0, #4]
 80024cc:	084b      	lsrs	r3, r1, #1
 80024ce:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80024d2:	e780      	b.n	80023d6 <UART_SetConfig+0xba>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024d8:	d1ea      	bne.n	80024b0 <UART_SetConfig+0x194>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80024da:	6841      	ldr	r1, [r0, #4]
 80024dc:	084b      	lsrs	r3, r1, #1
 80024de:	f503 0361 	add.w	r3, r3, #14745600	; 0xe10000
 80024e2:	e778      	b.n	80023d6 <UART_SetConfig+0xba>
 80024e4:	40013800 	.word	0x40013800
 80024e8:	08004a88 	.word	0x08004a88
 80024ec:	40004400 	.word	0x40004400
 80024f0:	40004800 	.word	0x40004800
 80024f4:	40004c00 	.word	0x40004c00
 80024f8:	40005000 	.word	0x40005000

080024fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80024fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024fe:	9f06      	ldr	r7, [sp, #24]
 8002500:	4604      	mov	r4, r0
 8002502:	4615      	mov	r5, r2
 8002504:	461e      	mov	r6, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002506:	6822      	ldr	r2, [r4, #0]
 8002508:	69d3      	ldr	r3, [r2, #28]
 800250a:	ea31 0303 	bics.w	r3, r1, r3
 800250e:	bf0c      	ite	eq
 8002510:	2301      	moveq	r3, #1
 8002512:	2300      	movne	r3, #0
 8002514:	42ab      	cmp	r3, r5
 8002516:	d001      	beq.n	800251c <UART_WaitOnFlagUntilTimeout+0x20>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002518:	2000      	movs	r0, #0
 800251a:	e014      	b.n	8002546 <UART_WaitOnFlagUntilTimeout+0x4a>
    if(Timeout != HAL_MAX_DELAY)
 800251c:	1c7b      	adds	r3, r7, #1
 800251e:	d0f3      	beq.n	8002508 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002520:	b997      	cbnz	r7, 8002548 <UART_WaitOnFlagUntilTimeout+0x4c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002522:	6823      	ldr	r3, [r4, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800252a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800252c:	689a      	ldr	r2, [r3, #8]
 800252e:	f022 0201 	bic.w	r2, r2, #1
 8002532:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8002534:	2320      	movs	r3, #32
 8002536:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800253a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 800253e:	2300      	movs	r3, #0
 8002540:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8002544:	2003      	movs	r0, #3
}
 8002546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002548:	f7ff fb02 	bl	8001b50 <HAL_GetTick>
 800254c:	1b80      	subs	r0, r0, r6
 800254e:	42b8      	cmp	r0, r7
 8002550:	d9d9      	bls.n	8002506 <UART_WaitOnFlagUntilTimeout+0xa>
 8002552:	e7e6      	b.n	8002522 <UART_WaitOnFlagUntilTimeout+0x26>

08002554 <UART_CheckIdleState>:
{
 8002554:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002556:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002558:	2100      	movs	r1, #0
 800255a:	66c1      	str	r1, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 800255c:	f7ff faf8 	bl	8001b50 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002560:	6823      	ldr	r3, [r4, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8002566:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002568:	d417      	bmi.n	800259a <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800256a:	6823      	ldr	r3, [r4, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	075b      	lsls	r3, r3, #29
 8002570:	d50a      	bpl.n	8002588 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002572:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	2200      	movs	r2, #0
 800257a:	462b      	mov	r3, r5
 800257c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002580:	4620      	mov	r0, r4
 8002582:	f7ff ffbb 	bl	80024fc <UART_WaitOnFlagUntilTimeout>
 8002586:	b9a0      	cbnz	r0, 80025b2 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8002588:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800258a:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 800258c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8002590:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8002594:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8002598:	e00c      	b.n	80025b4 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800259a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800259e:	9300      	str	r3, [sp, #0]
 80025a0:	460a      	mov	r2, r1
 80025a2:	4603      	mov	r3, r0
 80025a4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80025a8:	4620      	mov	r0, r4
 80025aa:	f7ff ffa7 	bl	80024fc <UART_WaitOnFlagUntilTimeout>
 80025ae:	2800      	cmp	r0, #0
 80025b0:	d0db      	beq.n	800256a <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80025b2:	2003      	movs	r0, #3
}
 80025b4:	b003      	add	sp, #12
 80025b6:	bd30      	pop	{r4, r5, pc}

080025b8 <HAL_UART_Init>:
{
 80025b8:	b510      	push	{r4, lr}
  if(huart == NULL)
 80025ba:	4604      	mov	r4, r0
 80025bc:	b328      	cbz	r0, 800260a <HAL_UART_Init+0x52>
  if(huart->gState == HAL_UART_STATE_RESET)
 80025be:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80025c2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80025c6:	b90b      	cbnz	r3, 80025cc <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 80025c8:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
  __HAL_UART_DISABLE(huart);
 80025cc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80025ce:	2324      	movs	r3, #36	; 0x24
 80025d0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80025d4:	6813      	ldr	r3, [r2, #0]
 80025d6:	f023 0301 	bic.w	r3, r3, #1
 80025da:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025dc:	4620      	mov	r0, r4
 80025de:	f7ff fe9d 	bl	800231c <UART_SetConfig>
 80025e2:	2801      	cmp	r0, #1
 80025e4:	d011      	beq.n	800260a <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025e6:	6823      	ldr	r3, [r4, #0]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025f0:	689a      	ldr	r2, [r3, #8]
 80025f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025f6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	f042 0201 	orr.w	r2, r2, #1
  return UART_CheckIdleState(huart);
 80025fe:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002600:	601a      	str	r2, [r3, #0]
}
 8002602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return UART_CheckIdleState(huart);
 8002606:	f7ff bfa5 	b.w	8002554 <UART_CheckIdleState>
}
 800260a:	2001      	movs	r0, #1
 800260c:	bd10      	pop	{r4, pc}

0800260e <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800260e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002610:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002612:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002616:	2b20      	cmp	r3, #32
{
 8002618:	460d      	mov	r5, r1
 800261a:	4604      	mov	r4, r0
 800261c:	4611      	mov	r1, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800261e:	d14a      	bne.n	80026b6 <HAL_UART_Transmit+0xa8>
  {
    if((pData == NULL ) || (Size == 0U))
 8002620:	2d00      	cmp	r5, #0
 8002622:	d046      	beq.n	80026b2 <HAL_UART_Transmit+0xa4>
 8002624:	2a00      	cmp	r2, #0
 8002626:	d044      	beq.n	80026b2 <HAL_UART_Transmit+0xa4>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002628:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800262c:	2b01      	cmp	r3, #1
 800262e:	d042      	beq.n	80026b6 <HAL_UART_Transmit+0xa8>
 8002630:	2301      	movs	r3, #1
 8002632:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002636:	2300      	movs	r3, #0
 8002638:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800263a:	2321      	movs	r3, #33	; 0x21
 800263c:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002640:	f7ff fa86 	bl	8001b50 <HAL_GetTick>

    huart->TxXferSize = Size;
 8002644:	f8a4 1050 	strh.w	r1, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8002648:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 800264a:	f8a4 1052 	strh.w	r1, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 800264e:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8002652:	b292      	uxth	r2, r2
 8002654:	b962      	cbnz	r2, 8002670 <HAL_UART_Transmit+0x62>
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002656:	9600      	str	r6, [sp, #0]
 8002658:	463b      	mov	r3, r7
 800265a:	2140      	movs	r1, #64	; 0x40
 800265c:	4620      	mov	r0, r4
 800265e:	f7ff ff4d 	bl	80024fc <UART_WaitOnFlagUntilTimeout>
 8002662:	b998      	cbnz	r0, 800268c <HAL_UART_Transmit+0x7e>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002664:	2320      	movs	r3, #32
 8002666:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800266a:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 800266e:	e00e      	b.n	800268e <HAL_UART_Transmit+0x80>
      huart->TxXferCount--;
 8002670:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002674:	9600      	str	r6, [sp, #0]
      huart->TxXferCount--;
 8002676:	3a01      	subs	r2, #1
 8002678:	b292      	uxth	r2, r2
 800267a:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800267e:	463b      	mov	r3, r7
 8002680:	2200      	movs	r2, #0
 8002682:	2180      	movs	r1, #128	; 0x80
 8002684:	4620      	mov	r0, r4
 8002686:	f7ff ff39 	bl	80024fc <UART_WaitOnFlagUntilTimeout>
 800268a:	b110      	cbz	r0, 8002692 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 800268c:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800268e:	b003      	add	sp, #12
 8002690:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002692:	68a3      	ldr	r3, [r4, #8]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002694:	6822      	ldr	r2, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800269a:	d107      	bne.n	80026ac <HAL_UART_Transmit+0x9e>
 800269c:	6923      	ldr	r3, [r4, #16]
 800269e:	b92b      	cbnz	r3, 80026ac <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80026a0:	f835 3b02 	ldrh.w	r3, [r5], #2
 80026a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80026a8:	8513      	strh	r3, [r2, #40]	; 0x28
 80026aa:	e7d0      	b.n	800264e <HAL_UART_Transmit+0x40>
 80026ac:	f815 3b01 	ldrb.w	r3, [r5], #1
 80026b0:	e7fa      	b.n	80026a8 <HAL_UART_Transmit+0x9a>
      return  HAL_ERROR;
 80026b2:	2001      	movs	r0, #1
 80026b4:	e7eb      	b.n	800268e <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 80026b6:	2002      	movs	r0, #2
 80026b8:	e7e9      	b.n	800268e <HAL_UART_Transmit+0x80>

080026ba <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026ba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80026be:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80026c0:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80026c4:	2b20      	cmp	r3, #32
{
 80026c6:	460d      	mov	r5, r1
 80026c8:	4604      	mov	r4, r0
 80026ca:	4611      	mov	r1, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 80026cc:	d15c      	bne.n	8002788 <HAL_UART_Receive+0xce>
  {
    if((pData == NULL ) || (Size == 0U))
 80026ce:	2d00      	cmp	r5, #0
 80026d0:	d058      	beq.n	8002784 <HAL_UART_Receive+0xca>
 80026d2:	2a00      	cmp	r2, #0
 80026d4:	d056      	beq.n	8002784 <HAL_UART_Receive+0xca>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026d6:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d054      	beq.n	8002788 <HAL_UART_Receive+0xce>
 80026de:	2301      	movs	r3, #1
 80026e0:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->Instance->ICR = 0xFFFFFFFF;
 80026e4:	6803      	ldr	r3, [r0, #0]
 80026e6:	f04f 32ff 	mov.w	r2, #4294967295
 80026ea:	621a      	str	r2, [r3, #32]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ec:	2300      	movs	r3, #0
 80026ee:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026f0:	2322      	movs	r3, #34	; 0x22
 80026f2:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80026f6:	f7ff fa2b 	bl	8001b50 <HAL_GetTick>

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80026fa:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 80026fc:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8002700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8002704:	4680      	mov	r8, r0
    huart->RxXferCount = Size;
 8002706:	f8a4 105a 	strh.w	r1, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 800270a:	d115      	bne.n	8002738 <HAL_UART_Receive+0x7e>
 800270c:	6923      	ldr	r3, [r4, #16]
 800270e:	b98b      	cbnz	r3, 8002734 <HAL_UART_Receive+0x7a>
 8002710:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002714:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8002718:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 800271c:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8002720:	b280      	uxth	r0, r0
 8002722:	b980      	cbnz	r0, 8002746 <HAL_UART_Receive+0x8c>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002724:	2320      	movs	r3, #32
 8002726:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800272a:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  }
  else
  {
    return HAL_BUSY;
  }
}
 800272e:	b002      	add	sp, #8
 8002730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 8002734:	23ff      	movs	r3, #255	; 0xff
 8002736:	e7ed      	b.n	8002714 <HAL_UART_Receive+0x5a>
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1ed      	bne.n	8002718 <HAL_UART_Receive+0x5e>
 800273c:	6923      	ldr	r3, [r4, #16]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0f8      	beq.n	8002734 <HAL_UART_Receive+0x7a>
 8002742:	237f      	movs	r3, #127	; 0x7f
 8002744:	e7e6      	b.n	8002714 <HAL_UART_Receive+0x5a>
      huart->RxXferCount--;
 8002746:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800274a:	9600      	str	r6, [sp, #0]
      huart->RxXferCount--;
 800274c:	3a01      	subs	r2, #1
 800274e:	b292      	uxth	r2, r2
 8002750:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002754:	4643      	mov	r3, r8
 8002756:	2200      	movs	r2, #0
 8002758:	2120      	movs	r1, #32
 800275a:	4620      	mov	r0, r4
 800275c:	f7ff fece 	bl	80024fc <UART_WaitOnFlagUntilTimeout>
 8002760:	b9a0      	cbnz	r0, 800278c <HAL_UART_Receive+0xd2>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002762:	68a2      	ldr	r2, [r4, #8]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8002764:	6823      	ldr	r3, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002766:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800276a:	d106      	bne.n	800277a <HAL_UART_Receive+0xc0>
 800276c:	6922      	ldr	r2, [r4, #16]
 800276e:	b922      	cbnz	r2, 800277a <HAL_UART_Receive+0xc0>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8002770:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002772:	403b      	ands	r3, r7
 8002774:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 8002778:	e7d0      	b.n	800271c <HAL_UART_Receive+0x62>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800277a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800277c:	403b      	ands	r3, r7
 800277e:	f805 3b01 	strb.w	r3, [r5], #1
 8002782:	e7cb      	b.n	800271c <HAL_UART_Receive+0x62>
      return  HAL_ERROR;
 8002784:	2001      	movs	r0, #1
 8002786:	e7d2      	b.n	800272e <HAL_UART_Receive+0x74>
    return HAL_BUSY;
 8002788:	2002      	movs	r0, #2
 800278a:	e7d0      	b.n	800272e <HAL_UART_Receive+0x74>
        return HAL_TIMEOUT;
 800278c:	2003      	movs	r0, #3
 800278e:	e7ce      	b.n	800272e <HAL_UART_Receive+0x74>

08002790 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002790:	4a0a      	ldr	r2, [pc, #40]	; (80027bc <_sbrk+0x2c>)
 8002792:	6811      	ldr	r1, [r2, #0]
{
 8002794:	b508      	push	{r3, lr}
 8002796:	4603      	mov	r3, r0
	if (heap_end == 0)
 8002798:	b909      	cbnz	r1, 800279e <_sbrk+0xe>
		heap_end = &end;
 800279a:	4909      	ldr	r1, [pc, #36]	; (80027c0 <_sbrk+0x30>)
 800279c:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 800279e:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80027a0:	4669      	mov	r1, sp
 80027a2:	4403      	add	r3, r0
 80027a4:	428b      	cmp	r3, r1
 80027a6:	d906      	bls.n	80027b6 <_sbrk+0x26>
	{
		errno = ENOMEM;
 80027a8:	f000 fd52 	bl	8003250 <__errno>
 80027ac:	230c      	movs	r3, #12
 80027ae:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80027b0:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 80027b4:	bd08      	pop	{r3, pc}
	heap_end += incr;
 80027b6:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 80027b8:	e7fc      	b.n	80027b4 <_sbrk+0x24>
 80027ba:	bf00      	nop
 80027bc:	200001c8 	.word	0x200001c8
 80027c0:	200001e0 	.word	0x200001e0

080027c4 <Reset_Handler>:
 80027c4:	2100      	movs	r1, #0
 80027c6:	e003      	b.n	80027d0 <LoopCopyDataInit>

080027c8 <CopyDataInit>:
 80027c8:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <LoopForever+0x2>)
 80027ca:	585b      	ldr	r3, [r3, r1]
 80027cc:	5043      	str	r3, [r0, r1]
 80027ce:	3104      	adds	r1, #4

080027d0 <LoopCopyDataInit>:
 80027d0:	480a      	ldr	r0, [pc, #40]	; (80027fc <LoopForever+0x6>)
 80027d2:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <LoopForever+0xa>)
 80027d4:	1842      	adds	r2, r0, r1
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d3f6      	bcc.n	80027c8 <CopyDataInit>
 80027da:	4a0a      	ldr	r2, [pc, #40]	; (8002804 <LoopForever+0xe>)
 80027dc:	e002      	b.n	80027e4 <LoopFillZerobss>

080027de <FillZerobss>:
 80027de:	2300      	movs	r3, #0
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	3204      	adds	r2, #4

080027e4 <LoopFillZerobss>:
 80027e4:	4b08      	ldr	r3, [pc, #32]	; (8002808 <LoopForever+0x12>)
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d3f9      	bcc.n	80027de <FillZerobss>
 80027ea:	f3af 8000 	nop.w
 80027ee:	f000 fd49 	bl	8003284 <__libc_init_array>
 80027f2:	f7fe fc05 	bl	8001000 <main>

080027f6 <LoopForever>:
 80027f6:	e7fe      	b.n	80027f6 <LoopForever>
 80027f8:	08005054 	.word	0x08005054
 80027fc:	20000000 	.word	0x20000000
 8002800:	20000068 	.word	0x20000068
 8002804:	20000068 	.word	0x20000068
 8002808:	200001dc 	.word	0x200001dc

0800280c <BusFault_Handler>:
 800280c:	e7fe      	b.n	800280c <BusFault_Handler>
 800280e:	0000      	movs	r0, r0

08002810 <tanh>:
 8002810:	4a3c      	ldr	r2, [pc, #240]	; (8002904 <tanh+0xf4>)
 8002812:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002816:	4293      	cmp	r3, r2
 8002818:	b570      	push	{r4, r5, r6, lr}
 800281a:	4606      	mov	r6, r0
 800281c:	460d      	mov	r5, r1
 800281e:	460c      	mov	r4, r1
 8002820:	dd11      	ble.n	8002846 <tanh+0x36>
 8002822:	2d00      	cmp	r5, #0
 8002824:	4602      	mov	r2, r0
 8002826:	460b      	mov	r3, r1
 8002828:	f04f 0000 	mov.w	r0, #0
 800282c:	4936      	ldr	r1, [pc, #216]	; (8002908 <tanh+0xf8>)
 800282e:	db39      	blt.n	80028a4 <tanh+0x94>
 8002830:	f7fd ffb4 	bl	800079c <__aeabi_ddiv>
 8002834:	4b34      	ldr	r3, [pc, #208]	; (8002908 <tanh+0xf8>)
 8002836:	2200      	movs	r2, #0
 8002838:	f7fd fcd0 	bl	80001dc <__adddf3>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4610      	mov	r0, r2
 8002842:	4619      	mov	r1, r3
 8002844:	bd70      	pop	{r4, r5, r6, pc}
 8002846:	4a31      	ldr	r2, [pc, #196]	; (800290c <tanh+0xfc>)
 8002848:	4293      	cmp	r3, r2
 800284a:	dd08      	ble.n	800285e <tanh+0x4e>
 800284c:	4b2e      	ldr	r3, [pc, #184]	; (8002908 <tanh+0xf8>)
 800284e:	2200      	movs	r2, #0
 8002850:	2c00      	cmp	r4, #0
 8002852:	bfb8      	it	lt
 8002854:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002858:	4610      	mov	r0, r2
 800285a:	4619      	mov	r1, r3
 800285c:	bd70      	pop	{r4, r5, r6, pc}
 800285e:	f1b3 5f72 	cmp.w	r3, #1015021568	; 0x3c800000
 8002862:	db2a      	blt.n	80028ba <tanh+0xaa>
 8002864:	4a2a      	ldr	r2, [pc, #168]	; (8002910 <tanh+0x100>)
 8002866:	4293      	cmp	r3, r2
 8002868:	dd32      	ble.n	80028d0 <tanh+0xc0>
 800286a:	f000 fcb1 	bl	80031d0 <fabs>
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	f7fd fcb3 	bl	80001dc <__adddf3>
 8002876:	f000 fa63 	bl	8002d40 <expm1>
 800287a:	2200      	movs	r2, #0
 800287c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002880:	f7fd fcac 	bl	80001dc <__adddf3>
 8002884:	4602      	mov	r2, r0
 8002886:	460b      	mov	r3, r1
 8002888:	2000      	movs	r0, #0
 800288a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800288e:	f7fd ff85 	bl	800079c <__aeabi_ddiv>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	2000      	movs	r0, #0
 8002898:	491b      	ldr	r1, [pc, #108]	; (8002908 <tanh+0xf8>)
 800289a:	f7fd fc9d 	bl	80001d8 <__aeabi_dsub>
 800289e:	4602      	mov	r2, r0
 80028a0:	460b      	mov	r3, r1
 80028a2:	e7d5      	b.n	8002850 <tanh+0x40>
 80028a4:	f7fd ff7a 	bl	800079c <__aeabi_ddiv>
 80028a8:	4b17      	ldr	r3, [pc, #92]	; (8002908 <tanh+0xf8>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	f7fd fc94 	bl	80001d8 <__aeabi_dsub>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	4610      	mov	r0, r2
 80028b6:	4619      	mov	r1, r3
 80028b8:	bd70      	pop	{r4, r5, r6, pc}
 80028ba:	4b13      	ldr	r3, [pc, #76]	; (8002908 <tanh+0xf8>)
 80028bc:	2200      	movs	r2, #0
 80028be:	f7fd fc8d 	bl	80001dc <__adddf3>
 80028c2:	4632      	mov	r2, r6
 80028c4:	462b      	mov	r3, r5
 80028c6:	f7fd fe3f 	bl	8000548 <__aeabi_dmul>
 80028ca:	4602      	mov	r2, r0
 80028cc:	460b      	mov	r3, r1
 80028ce:	e7b7      	b.n	8002840 <tanh+0x30>
 80028d0:	f000 fc7e 	bl	80031d0 <fabs>
 80028d4:	2200      	movs	r2, #0
 80028d6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80028da:	f7fd fe35 	bl	8000548 <__aeabi_dmul>
 80028de:	f000 fa2f 	bl	8002d40 <expm1>
 80028e2:	2200      	movs	r2, #0
 80028e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028e8:	4606      	mov	r6, r0
 80028ea:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 80028ee:	f7fd fc75 	bl	80001dc <__adddf3>
 80028f2:	4602      	mov	r2, r0
 80028f4:	460b      	mov	r3, r1
 80028f6:	4630      	mov	r0, r6
 80028f8:	4629      	mov	r1, r5
 80028fa:	f7fd ff4f 	bl	800079c <__aeabi_ddiv>
 80028fe:	4602      	mov	r2, r0
 8002900:	460b      	mov	r3, r1
 8002902:	e7a5      	b.n	8002850 <tanh+0x40>
 8002904:	7fefffff 	.word	0x7fefffff
 8002908:	3ff00000 	.word	0x3ff00000
 800290c:	4035ffff 	.word	0x4035ffff
 8002910:	3fefffff 	.word	0x3fefffff
 8002914:	00000000 	.word	0x00000000

08002918 <exp>:
 8002918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800291a:	4604      	mov	r4, r0
 800291c:	460d      	mov	r5, r1
 800291e:	f000 f83b 	bl	8002998 <__ieee754_exp>
 8002922:	4b1b      	ldr	r3, [pc, #108]	; (8002990 <exp+0x78>)
 8002924:	f993 3000 	ldrsb.w	r3, [r3]
 8002928:	3301      	adds	r3, #1
 800292a:	4606      	mov	r6, r0
 800292c:	460f      	mov	r7, r1
 800292e:	d014      	beq.n	800295a <exp+0x42>
 8002930:	4620      	mov	r0, r4
 8002932:	4629      	mov	r1, r5
 8002934:	f000 fc50 	bl	80031d8 <finite>
 8002938:	b178      	cbz	r0, 800295a <exp+0x42>
 800293a:	a311      	add	r3, pc, #68	; (adr r3, 8002980 <exp+0x68>)
 800293c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002940:	4620      	mov	r0, r4
 8002942:	4629      	mov	r1, r5
 8002944:	f7fe f890 	bl	8000a68 <__aeabi_dcmpgt>
 8002948:	b988      	cbnz	r0, 800296e <exp+0x56>
 800294a:	a30f      	add	r3, pc, #60	; (adr r3, 8002988 <exp+0x70>)
 800294c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002950:	4620      	mov	r0, r4
 8002952:	4629      	mov	r1, r5
 8002954:	f7fe f86a 	bl	8000a2c <__aeabi_dcmplt>
 8002958:	b910      	cbnz	r0, 8002960 <exp+0x48>
 800295a:	4630      	mov	r0, r6
 800295c:	4639      	mov	r1, r7
 800295e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002960:	f000 fc76 	bl	8003250 <__errno>
 8002964:	2322      	movs	r3, #34	; 0x22
 8002966:	6003      	str	r3, [r0, #0]
 8002968:	2600      	movs	r6, #0
 800296a:	2700      	movs	r7, #0
 800296c:	e7f5      	b.n	800295a <exp+0x42>
 800296e:	f000 fc6f 	bl	8003250 <__errno>
 8002972:	2322      	movs	r3, #34	; 0x22
 8002974:	4f07      	ldr	r7, [pc, #28]	; (8002994 <exp+0x7c>)
 8002976:	6003      	str	r3, [r0, #0]
 8002978:	2600      	movs	r6, #0
 800297a:	e7ee      	b.n	800295a <exp+0x42>
 800297c:	f3af 8000 	nop.w
 8002980:	fefa39ef 	.word	0xfefa39ef
 8002984:	40862e42 	.word	0x40862e42
 8002988:	d52d3051 	.word	0xd52d3051
 800298c:	c0874910 	.word	0xc0874910
 8002990:	20000000 	.word	0x20000000
 8002994:	7ff00000 	.word	0x7ff00000

08002998 <__ieee754_exp>:
 8002998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800299c:	4fd4      	ldr	r7, [pc, #848]	; (8002cf0 <__ieee754_exp+0x358>)
 800299e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80029a2:	42ba      	cmp	r2, r7
 80029a4:	b087      	sub	sp, #28
 80029a6:	4605      	mov	r5, r0
 80029a8:	460c      	mov	r4, r1
 80029aa:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 80029ae:	d912      	bls.n	80029d6 <__ieee754_exp+0x3e>
 80029b0:	4fd0      	ldr	r7, [pc, #832]	; (8002cf4 <__ieee754_exp+0x35c>)
 80029b2:	42ba      	cmp	r2, r7
 80029b4:	d92b      	bls.n	8002a0e <__ieee754_exp+0x76>
 80029b6:	f3c1 0313 	ubfx	r3, r1, #0, #20
 80029ba:	4303      	orrs	r3, r0
 80029bc:	4602      	mov	r2, r0
 80029be:	f040 8157 	bne.w	8002c70 <__ieee754_exp+0x2d8>
 80029c2:	2e00      	cmp	r6, #0
 80029c4:	f000 80ee 	beq.w	8002ba4 <__ieee754_exp+0x20c>
 80029c8:	2500      	movs	r5, #0
 80029ca:	462c      	mov	r4, r5
 80029cc:	4628      	mov	r0, r5
 80029ce:	4621      	mov	r1, r4
 80029d0:	b007      	add	sp, #28
 80029d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029d6:	4bc8      	ldr	r3, [pc, #800]	; (8002cf8 <__ieee754_exp+0x360>)
 80029d8:	429a      	cmp	r2, r3
 80029da:	d855      	bhi.n	8002a88 <__ieee754_exp+0xf0>
 80029dc:	4bc7      	ldr	r3, [pc, #796]	; (8002cfc <__ieee754_exp+0x364>)
 80029de:	429a      	cmp	r2, r3
 80029e0:	f200 80e5 	bhi.w	8002bae <__ieee754_exp+0x216>
 80029e4:	a3ac      	add	r3, pc, #688	; (adr r3, 8002c98 <__ieee754_exp+0x300>)
 80029e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ea:	f7fd fbf7 	bl	80001dc <__adddf3>
 80029ee:	4bc4      	ldr	r3, [pc, #784]	; (8002d00 <__ieee754_exp+0x368>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	f7fe f839 	bl	8000a68 <__aeabi_dcmpgt>
 80029f6:	2800      	cmp	r0, #0
 80029f8:	f000 80d9 	beq.w	8002bae <__ieee754_exp+0x216>
 80029fc:	4628      	mov	r0, r5
 80029fe:	4621      	mov	r1, r4
 8002a00:	4bbf      	ldr	r3, [pc, #764]	; (8002d00 <__ieee754_exp+0x368>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	f7fd fbea 	bl	80001dc <__adddf3>
 8002a08:	4605      	mov	r5, r0
 8002a0a:	460c      	mov	r4, r1
 8002a0c:	e0ca      	b.n	8002ba4 <__ieee754_exp+0x20c>
 8002a0e:	a3a4      	add	r3, pc, #656	; (adr r3, 8002ca0 <__ieee754_exp+0x308>)
 8002a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a14:	f7fe f828 	bl	8000a68 <__aeabi_dcmpgt>
 8002a18:	2800      	cmp	r0, #0
 8002a1a:	f040 8133 	bne.w	8002c84 <__ieee754_exp+0x2ec>
 8002a1e:	a3a2      	add	r3, pc, #648	; (adr r3, 8002ca8 <__ieee754_exp+0x310>)
 8002a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a24:	4628      	mov	r0, r5
 8002a26:	4621      	mov	r1, r4
 8002a28:	f7fe f800 	bl	8000a2c <__aeabi_dcmplt>
 8002a2c:	2800      	cmp	r0, #0
 8002a2e:	d1cb      	bne.n	80029c8 <__ieee754_exp+0x30>
 8002a30:	4bb4      	ldr	r3, [pc, #720]	; (8002d04 <__ieee754_exp+0x36c>)
 8002a32:	4628      	mov	r0, r5
 8002a34:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8002a38:	4621      	mov	r1, r4
 8002a3a:	a39d      	add	r3, pc, #628	; (adr r3, 8002cb0 <__ieee754_exp+0x318>)
 8002a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a40:	f7fd fd82 	bl	8000548 <__aeabi_dmul>
 8002a44:	e9d6 2300 	ldrd	r2, r3, [r6]
 8002a48:	f7fd fbc8 	bl	80001dc <__adddf3>
 8002a4c:	f7fe f816 	bl	8000a7c <__aeabi_d2iz>
 8002a50:	9001      	str	r0, [sp, #4]
 8002a52:	f7fd fd0f 	bl	8000474 <__aeabi_i2d>
 8002a56:	a398      	add	r3, pc, #608	; (adr r3, 8002cb8 <__ieee754_exp+0x320>)
 8002a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5c:	4606      	mov	r6, r0
 8002a5e:	460f      	mov	r7, r1
 8002a60:	f7fd fd72 	bl	8000548 <__aeabi_dmul>
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	4628      	mov	r0, r5
 8002a6a:	4621      	mov	r1, r4
 8002a6c:	f7fd fbb4 	bl	80001d8 <__aeabi_dsub>
 8002a70:	a393      	add	r3, pc, #588	; (adr r3, 8002cc0 <__ieee754_exp+0x328>)
 8002a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a76:	4680      	mov	r8, r0
 8002a78:	4689      	mov	r9, r1
 8002a7a:	4630      	mov	r0, r6
 8002a7c:	4639      	mov	r1, r7
 8002a7e:	f7fd fd63 	bl	8000548 <__aeabi_dmul>
 8002a82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002a86:	e017      	b.n	8002ab8 <__ieee754_exp+0x120>
 8002a88:	4b9f      	ldr	r3, [pc, #636]	; (8002d08 <__ieee754_exp+0x370>)
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d8d0      	bhi.n	8002a30 <__ieee754_exp+0x98>
 8002a8e:	4b9f      	ldr	r3, [pc, #636]	; (8002d0c <__ieee754_exp+0x374>)
 8002a90:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8002a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a98:	f7fd fb9e 	bl	80001d8 <__aeabi_dsub>
 8002a9c:	4b9c      	ldr	r3, [pc, #624]	; (8002d10 <__ieee754_exp+0x378>)
 8002a9e:	00f4      	lsls	r4, r6, #3
 8002aa0:	4423      	add	r3, r4
 8002aa2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002aa6:	f1c6 0a01 	rsb	sl, r6, #1
 8002aaa:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8002aae:	ebaa 0306 	sub.w	r3, sl, r6
 8002ab2:	4680      	mov	r8, r0
 8002ab4:	4689      	mov	r9, r1
 8002ab6:	9301      	str	r3, [sp, #4]
 8002ab8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002abc:	4640      	mov	r0, r8
 8002abe:	4649      	mov	r1, r9
 8002ac0:	f7fd fb8a 	bl	80001d8 <__aeabi_dsub>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4682      	mov	sl, r0
 8002aca:	468b      	mov	fp, r1
 8002acc:	4605      	mov	r5, r0
 8002ace:	460c      	mov	r4, r1
 8002ad0:	f7fd fd3a 	bl	8000548 <__aeabi_dmul>
 8002ad4:	a37c      	add	r3, pc, #496	; (adr r3, 8002cc8 <__ieee754_exp+0x330>)
 8002ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ada:	4606      	mov	r6, r0
 8002adc:	460f      	mov	r7, r1
 8002ade:	f7fd fd33 	bl	8000548 <__aeabi_dmul>
 8002ae2:	a37b      	add	r3, pc, #492	; (adr r3, 8002cd0 <__ieee754_exp+0x338>)
 8002ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae8:	f7fd fb76 	bl	80001d8 <__aeabi_dsub>
 8002aec:	4632      	mov	r2, r6
 8002aee:	463b      	mov	r3, r7
 8002af0:	f7fd fd2a 	bl	8000548 <__aeabi_dmul>
 8002af4:	a378      	add	r3, pc, #480	; (adr r3, 8002cd8 <__ieee754_exp+0x340>)
 8002af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002afa:	f7fd fb6f 	bl	80001dc <__adddf3>
 8002afe:	4632      	mov	r2, r6
 8002b00:	463b      	mov	r3, r7
 8002b02:	f7fd fd21 	bl	8000548 <__aeabi_dmul>
 8002b06:	a376      	add	r3, pc, #472	; (adr r3, 8002ce0 <__ieee754_exp+0x348>)
 8002b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0c:	f7fd fb64 	bl	80001d8 <__aeabi_dsub>
 8002b10:	4632      	mov	r2, r6
 8002b12:	463b      	mov	r3, r7
 8002b14:	f7fd fd18 	bl	8000548 <__aeabi_dmul>
 8002b18:	a373      	add	r3, pc, #460	; (adr r3, 8002ce8 <__ieee754_exp+0x350>)
 8002b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1e:	f7fd fb5d 	bl	80001dc <__adddf3>
 8002b22:	4632      	mov	r2, r6
 8002b24:	463b      	mov	r3, r7
 8002b26:	f7fd fd0f 	bl	8000548 <__aeabi_dmul>
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	4659      	mov	r1, fp
 8002b30:	4650      	mov	r0, sl
 8002b32:	f7fd fb51 	bl	80001d8 <__aeabi_dsub>
 8002b36:	9b01      	ldr	r3, [sp, #4]
 8002b38:	4606      	mov	r6, r0
 8002b3a:	460f      	mov	r7, r1
 8002b3c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d06d      	beq.n	8002c20 <__ieee754_exp+0x288>
 8002b44:	4632      	mov	r2, r6
 8002b46:	463b      	mov	r3, r7
 8002b48:	4650      	mov	r0, sl
 8002b4a:	4659      	mov	r1, fp
 8002b4c:	f7fd fcfc 	bl	8000548 <__aeabi_dmul>
 8002b50:	4632      	mov	r2, r6
 8002b52:	4604      	mov	r4, r0
 8002b54:	460d      	mov	r5, r1
 8002b56:	463b      	mov	r3, r7
 8002b58:	2000      	movs	r0, #0
 8002b5a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002b5e:	f7fd fb3b 	bl	80001d8 <__aeabi_dsub>
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	4620      	mov	r0, r4
 8002b68:	4629      	mov	r1, r5
 8002b6a:	f7fd fe17 	bl	800079c <__aeabi_ddiv>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b76:	f7fd fb2f 	bl	80001d8 <__aeabi_dsub>
 8002b7a:	4642      	mov	r2, r8
 8002b7c:	464b      	mov	r3, r9
 8002b7e:	f7fd fb2b 	bl	80001d8 <__aeabi_dsub>
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	2000      	movs	r0, #0
 8002b88:	495d      	ldr	r1, [pc, #372]	; (8002d00 <__ieee754_exp+0x368>)
 8002b8a:	f7fd fb25 	bl	80001d8 <__aeabi_dsub>
 8002b8e:	9c01      	ldr	r4, [sp, #4]
 8002b90:	f46f 737f 	mvn.w	r3, #1020	; 0x3fc
 8002b94:	429c      	cmp	r4, r3
 8002b96:	4602      	mov	r2, r0
 8002b98:	f2c0 80bc 	blt.w	8002d14 <__ieee754_exp+0x37c>
 8002b9c:	eb01 5304 	add.w	r3, r1, r4, lsl #20
 8002ba0:	4605      	mov	r5, r0
 8002ba2:	461c      	mov	r4, r3
 8002ba4:	4628      	mov	r0, r5
 8002ba6:	4621      	mov	r1, r4
 8002ba8:	b007      	add	sp, #28
 8002baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bae:	462a      	mov	r2, r5
 8002bb0:	4623      	mov	r3, r4
 8002bb2:	4628      	mov	r0, r5
 8002bb4:	4621      	mov	r1, r4
 8002bb6:	f7fd fcc7 	bl	8000548 <__aeabi_dmul>
 8002bba:	a343      	add	r3, pc, #268	; (adr r3, 8002cc8 <__ieee754_exp+0x330>)
 8002bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc0:	4606      	mov	r6, r0
 8002bc2:	460f      	mov	r7, r1
 8002bc4:	f7fd fcc0 	bl	8000548 <__aeabi_dmul>
 8002bc8:	a341      	add	r3, pc, #260	; (adr r3, 8002cd0 <__ieee754_exp+0x338>)
 8002bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bce:	f7fd fb03 	bl	80001d8 <__aeabi_dsub>
 8002bd2:	4632      	mov	r2, r6
 8002bd4:	463b      	mov	r3, r7
 8002bd6:	f7fd fcb7 	bl	8000548 <__aeabi_dmul>
 8002bda:	a33f      	add	r3, pc, #252	; (adr r3, 8002cd8 <__ieee754_exp+0x340>)
 8002bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be0:	f7fd fafc 	bl	80001dc <__adddf3>
 8002be4:	4632      	mov	r2, r6
 8002be6:	463b      	mov	r3, r7
 8002be8:	f7fd fcae 	bl	8000548 <__aeabi_dmul>
 8002bec:	a33c      	add	r3, pc, #240	; (adr r3, 8002ce0 <__ieee754_exp+0x348>)
 8002bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf2:	f7fd faf1 	bl	80001d8 <__aeabi_dsub>
 8002bf6:	4632      	mov	r2, r6
 8002bf8:	463b      	mov	r3, r7
 8002bfa:	f7fd fca5 	bl	8000548 <__aeabi_dmul>
 8002bfe:	a33a      	add	r3, pc, #232	; (adr r3, 8002ce8 <__ieee754_exp+0x350>)
 8002c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c04:	f7fd faea 	bl	80001dc <__adddf3>
 8002c08:	4632      	mov	r2, r6
 8002c0a:	463b      	mov	r3, r7
 8002c0c:	f7fd fc9c 	bl	8000548 <__aeabi_dmul>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4628      	mov	r0, r5
 8002c16:	4621      	mov	r1, r4
 8002c18:	f7fd fade 	bl	80001d8 <__aeabi_dsub>
 8002c1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002c20:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8002c24:	4628      	mov	r0, r5
 8002c26:	4642      	mov	r2, r8
 8002c28:	464b      	mov	r3, r9
 8002c2a:	4621      	mov	r1, r4
 8002c2c:	f7fd fc8c 	bl	8000548 <__aeabi_dmul>
 8002c30:	2200      	movs	r2, #0
 8002c32:	4606      	mov	r6, r0
 8002c34:	460f      	mov	r7, r1
 8002c36:	4640      	mov	r0, r8
 8002c38:	4649      	mov	r1, r9
 8002c3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c3e:	f7fd facb 	bl	80001d8 <__aeabi_dsub>
 8002c42:	4602      	mov	r2, r0
 8002c44:	460b      	mov	r3, r1
 8002c46:	4630      	mov	r0, r6
 8002c48:	4639      	mov	r1, r7
 8002c4a:	f7fd fda7 	bl	800079c <__aeabi_ddiv>
 8002c4e:	462a      	mov	r2, r5
 8002c50:	4623      	mov	r3, r4
 8002c52:	f7fd fac1 	bl	80001d8 <__aeabi_dsub>
 8002c56:	4602      	mov	r2, r0
 8002c58:	460b      	mov	r3, r1
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	4928      	ldr	r1, [pc, #160]	; (8002d00 <__ieee754_exp+0x368>)
 8002c5e:	f7fd fabb 	bl	80001d8 <__aeabi_dsub>
 8002c62:	4605      	mov	r5, r0
 8002c64:	460c      	mov	r4, r1
 8002c66:	4628      	mov	r0, r5
 8002c68:	4621      	mov	r1, r4
 8002c6a:	b007      	add	sp, #28
 8002c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c70:	460b      	mov	r3, r1
 8002c72:	f7fd fab3 	bl	80001dc <__adddf3>
 8002c76:	4605      	mov	r5, r0
 8002c78:	460c      	mov	r4, r1
 8002c7a:	4628      	mov	r0, r5
 8002c7c:	4621      	mov	r1, r4
 8002c7e:	b007      	add	sp, #28
 8002c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c84:	a304      	add	r3, pc, #16	; (adr r3, 8002c98 <__ieee754_exp+0x300>)
 8002c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8a:	4610      	mov	r0, r2
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	f7fd fc5b 	bl	8000548 <__aeabi_dmul>
 8002c92:	4605      	mov	r5, r0
 8002c94:	460c      	mov	r4, r1
 8002c96:	e785      	b.n	8002ba4 <__ieee754_exp+0x20c>
 8002c98:	8800759c 	.word	0x8800759c
 8002c9c:	7e37e43c 	.word	0x7e37e43c
 8002ca0:	fefa39ef 	.word	0xfefa39ef
 8002ca4:	40862e42 	.word	0x40862e42
 8002ca8:	d52d3051 	.word	0xd52d3051
 8002cac:	c0874910 	.word	0xc0874910
 8002cb0:	652b82fe 	.word	0x652b82fe
 8002cb4:	3ff71547 	.word	0x3ff71547
 8002cb8:	fee00000 	.word	0xfee00000
 8002cbc:	3fe62e42 	.word	0x3fe62e42
 8002cc0:	35793c76 	.word	0x35793c76
 8002cc4:	3dea39ef 	.word	0x3dea39ef
 8002cc8:	72bea4d0 	.word	0x72bea4d0
 8002ccc:	3e663769 	.word	0x3e663769
 8002cd0:	c5d26bf1 	.word	0xc5d26bf1
 8002cd4:	3ebbbd41 	.word	0x3ebbbd41
 8002cd8:	af25de2c 	.word	0xaf25de2c
 8002cdc:	3f11566a 	.word	0x3f11566a
 8002ce0:	16bebd93 	.word	0x16bebd93
 8002ce4:	3f66c16c 	.word	0x3f66c16c
 8002ce8:	5555553e 	.word	0x5555553e
 8002cec:	3fc55555 	.word	0x3fc55555
 8002cf0:	40862e41 	.word	0x40862e41
 8002cf4:	7fefffff 	.word	0x7fefffff
 8002cf8:	3fd62e42 	.word	0x3fd62e42
 8002cfc:	3e2fffff 	.word	0x3e2fffff
 8002d00:	3ff00000 	.word	0x3ff00000
 8002d04:	08004db0 	.word	0x08004db0
 8002d08:	3ff0a2b1 	.word	0x3ff0a2b1
 8002d0c:	08004dc0 	.word	0x08004dc0
 8002d10:	08004dd0 	.word	0x08004dd0
 8002d14:	9801      	ldr	r0, [sp, #4]
 8002d16:	f500 7a7a 	add.w	sl, r0, #1000	; 0x3e8
 8002d1a:	eb01 530a 	add.w	r3, r1, sl, lsl #20
 8002d1e:	4610      	mov	r0, r2
 8002d20:	4619      	mov	r1, r3
 8002d22:	2200      	movs	r2, #0
 8002d24:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8002d28:	f7fd fc0e 	bl	8000548 <__aeabi_dmul>
 8002d2c:	4605      	mov	r5, r0
 8002d2e:	460c      	mov	r4, r1
 8002d30:	4628      	mov	r0, r5
 8002d32:	4621      	mov	r1, r4
 8002d34:	b007      	add	sp, #28
 8002d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d3a:	bf00      	nop
 8002d3c:	0000      	movs	r0, r0
 8002d3e:	0000      	movs	r0, r0

08002d40 <expm1>:
 8002d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d44:	4ad8      	ldr	r2, [pc, #864]	; (80030a8 <expm1+0x368>)
 8002d46:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	b085      	sub	sp, #20
 8002d4e:	4605      	mov	r5, r0
 8002d50:	460c      	mov	r4, r1
 8002d52:	460e      	mov	r6, r1
 8002d54:	f240 8103 	bls.w	8002f5e <expm1+0x21e>
 8002d58:	4ad4      	ldr	r2, [pc, #848]	; (80030ac <expm1+0x36c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	f200 80f0 	bhi.w	8002f40 <expm1+0x200>
 8002d60:	2e00      	cmp	r6, #0
 8002d62:	4628      	mov	r0, r5
 8002d64:	4621      	mov	r1, r4
 8002d66:	f2c0 8159 	blt.w	800301c <expm1+0x2dc>
 8002d6a:	a3b9      	add	r3, pc, #740	; (adr r3, 8003050 <expm1+0x310>)
 8002d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d70:	f7fd fbea 	bl	8000548 <__aeabi_dmul>
 8002d74:	460b      	mov	r3, r1
 8002d76:	49ce      	ldr	r1, [pc, #824]	; (80030b0 <expm1+0x370>)
 8002d78:	4602      	mov	r2, r0
 8002d7a:	2000      	movs	r0, #0
 8002d7c:	f7fd fa2e 	bl	80001dc <__adddf3>
 8002d80:	f7fd fe7c 	bl	8000a7c <__aeabi_d2iz>
 8002d84:	9001      	str	r0, [sp, #4]
 8002d86:	f7fd fb75 	bl	8000474 <__aeabi_i2d>
 8002d8a:	a3b3      	add	r3, pc, #716	; (adr r3, 8003058 <expm1+0x318>)
 8002d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d90:	4606      	mov	r6, r0
 8002d92:	460f      	mov	r7, r1
 8002d94:	f7fd fbd8 	bl	8000548 <__aeabi_dmul>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	4628      	mov	r0, r5
 8002d9e:	4621      	mov	r1, r4
 8002da0:	f7fd fa1a 	bl	80001d8 <__aeabi_dsub>
 8002da4:	a3ae      	add	r3, pc, #696	; (adr r3, 8003060 <expm1+0x320>)
 8002da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002daa:	4604      	mov	r4, r0
 8002dac:	460d      	mov	r5, r1
 8002dae:	4630      	mov	r0, r6
 8002db0:	4639      	mov	r1, r7
 8002db2:	f7fd fbc9 	bl	8000548 <__aeabi_dmul>
 8002db6:	4606      	mov	r6, r0
 8002db8:	460f      	mov	r7, r1
 8002dba:	4632      	mov	r2, r6
 8002dbc:	463b      	mov	r3, r7
 8002dbe:	4620      	mov	r0, r4
 8002dc0:	4629      	mov	r1, r5
 8002dc2:	f7fd fa09 	bl	80001d8 <__aeabi_dsub>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	4620      	mov	r0, r4
 8002dcc:	4629      	mov	r1, r5
 8002dce:	461c      	mov	r4, r3
 8002dd0:	4615      	mov	r5, r2
 8002dd2:	f7fd fa01 	bl	80001d8 <__aeabi_dsub>
 8002dd6:	4632      	mov	r2, r6
 8002dd8:	463b      	mov	r3, r7
 8002dda:	f7fd f9fd 	bl	80001d8 <__aeabi_dsub>
 8002dde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002de2:	4bb3      	ldr	r3, [pc, #716]	; (80030b0 <expm1+0x370>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	4628      	mov	r0, r5
 8002de8:	4621      	mov	r1, r4
 8002dea:	f7fd fbad 	bl	8000548 <__aeabi_dmul>
 8002dee:	4606      	mov	r6, r0
 8002df0:	460f      	mov	r7, r1
 8002df2:	4632      	mov	r2, r6
 8002df4:	463b      	mov	r3, r7
 8002df6:	4628      	mov	r0, r5
 8002df8:	4621      	mov	r1, r4
 8002dfa:	f7fd fba5 	bl	8000548 <__aeabi_dmul>
 8002dfe:	a39a      	add	r3, pc, #616	; (adr r3, 8003068 <expm1+0x328>)
 8002e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e04:	4682      	mov	sl, r0
 8002e06:	468b      	mov	fp, r1
 8002e08:	f7fd fb9e 	bl	8000548 <__aeabi_dmul>
 8002e0c:	a398      	add	r3, pc, #608	; (adr r3, 8003070 <expm1+0x330>)
 8002e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e12:	f7fd f9e3 	bl	80001dc <__adddf3>
 8002e16:	4652      	mov	r2, sl
 8002e18:	465b      	mov	r3, fp
 8002e1a:	f7fd fb95 	bl	8000548 <__aeabi_dmul>
 8002e1e:	a396      	add	r3, pc, #600	; (adr r3, 8003078 <expm1+0x338>)
 8002e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e24:	f7fd f9d8 	bl	80001d8 <__aeabi_dsub>
 8002e28:	4652      	mov	r2, sl
 8002e2a:	465b      	mov	r3, fp
 8002e2c:	f7fd fb8c 	bl	8000548 <__aeabi_dmul>
 8002e30:	a393      	add	r3, pc, #588	; (adr r3, 8003080 <expm1+0x340>)
 8002e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e36:	f7fd f9d1 	bl	80001dc <__adddf3>
 8002e3a:	4652      	mov	r2, sl
 8002e3c:	465b      	mov	r3, fp
 8002e3e:	f7fd fb83 	bl	8000548 <__aeabi_dmul>
 8002e42:	a391      	add	r3, pc, #580	; (adr r3, 8003088 <expm1+0x348>)
 8002e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e48:	f7fd f9c6 	bl	80001d8 <__aeabi_dsub>
 8002e4c:	4652      	mov	r2, sl
 8002e4e:	465b      	mov	r3, fp
 8002e50:	f7fd fb7a 	bl	8000548 <__aeabi_dmul>
 8002e54:	4b97      	ldr	r3, [pc, #604]	; (80030b4 <expm1+0x374>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	f7fd f9c0 	bl	80001dc <__adddf3>
 8002e5c:	4680      	mov	r8, r0
 8002e5e:	4689      	mov	r9, r1
 8002e60:	4642      	mov	r2, r8
 8002e62:	464b      	mov	r3, r9
 8002e64:	4630      	mov	r0, r6
 8002e66:	4639      	mov	r1, r7
 8002e68:	f7fd fb6e 	bl	8000548 <__aeabi_dmul>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	2000      	movs	r0, #0
 8002e72:	4991      	ldr	r1, [pc, #580]	; (80030b8 <expm1+0x378>)
 8002e74:	f7fd f9b0 	bl	80001d8 <__aeabi_dsub>
 8002e78:	4606      	mov	r6, r0
 8002e7a:	460f      	mov	r7, r1
 8002e7c:	4632      	mov	r2, r6
 8002e7e:	4640      	mov	r0, r8
 8002e80:	4649      	mov	r1, r9
 8002e82:	463b      	mov	r3, r7
 8002e84:	f7fd f9a8 	bl	80001d8 <__aeabi_dsub>
 8002e88:	4632      	mov	r2, r6
 8002e8a:	4680      	mov	r8, r0
 8002e8c:	4689      	mov	r9, r1
 8002e8e:	463b      	mov	r3, r7
 8002e90:	4628      	mov	r0, r5
 8002e92:	4621      	mov	r1, r4
 8002e94:	f7fd fb58 	bl	8000548 <__aeabi_dmul>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	2000      	movs	r0, #0
 8002e9e:	4987      	ldr	r1, [pc, #540]	; (80030bc <expm1+0x37c>)
 8002ea0:	f7fd f99a 	bl	80001d8 <__aeabi_dsub>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	4640      	mov	r0, r8
 8002eaa:	4649      	mov	r1, r9
 8002eac:	f7fd fc76 	bl	800079c <__aeabi_ddiv>
 8002eb0:	4652      	mov	r2, sl
 8002eb2:	465b      	mov	r3, fp
 8002eb4:	f7fd fb48 	bl	8000548 <__aeabi_dmul>
 8002eb8:	9e01      	ldr	r6, [sp, #4]
 8002eba:	4602      	mov	r2, r0
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	2e00      	cmp	r6, #0
 8002ec0:	d057      	beq.n	8002f72 <expm1+0x232>
 8002ec2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8002ec6:	4632      	mov	r2, r6
 8002ec8:	463b      	mov	r3, r7
 8002eca:	f7fd f985 	bl	80001d8 <__aeabi_dsub>
 8002ece:	462a      	mov	r2, r5
 8002ed0:	4623      	mov	r3, r4
 8002ed2:	f7fd fb39 	bl	8000548 <__aeabi_dmul>
 8002ed6:	4632      	mov	r2, r6
 8002ed8:	463b      	mov	r3, r7
 8002eda:	f7fd f97d 	bl	80001d8 <__aeabi_dsub>
 8002ede:	465b      	mov	r3, fp
 8002ee0:	4652      	mov	r2, sl
 8002ee2:	f7fd f979 	bl	80001d8 <__aeabi_dsub>
 8002ee6:	9b01      	ldr	r3, [sp, #4]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	4606      	mov	r6, r0
 8002eec:	460f      	mov	r7, r1
 8002eee:	f000 8115 	beq.w	800311c <expm1+0x3dc>
 8002ef2:	9b01      	ldr	r3, [sp, #4]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	f000 80f5 	beq.w	80030e4 <expm1+0x3a4>
 8002efa:	9b01      	ldr	r3, [sp, #4]
 8002efc:	3301      	adds	r3, #1
 8002efe:	2b39      	cmp	r3, #57	; 0x39
 8002f00:	d878      	bhi.n	8002ff4 <expm1+0x2b4>
 8002f02:	9f01      	ldr	r7, [sp, #4]
 8002f04:	2f13      	cmp	r7, #19
 8002f06:	f300 811a 	bgt.w	800313e <expm1+0x3fe>
 8002f0a:	462a      	mov	r2, r5
 8002f0c:	4623      	mov	r3, r4
 8002f0e:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8002f12:	f7fd f961 	bl	80001d8 <__aeabi_dsub>
 8002f16:	413e      	asrs	r6, r7
 8002f18:	f1c6 557f 	rsb	r5, r6, #1069547520	; 0x3fc00000
 8002f1c:	2400      	movs	r4, #0
 8002f1e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8002f22:	4602      	mov	r2, r0
 8002f24:	460b      	mov	r3, r1
 8002f26:	4620      	mov	r0, r4
 8002f28:	4629      	mov	r1, r5
 8002f2a:	f7fd f955 	bl	80001d8 <__aeabi_dsub>
 8002f2e:	eb01 5307 	add.w	r3, r1, r7, lsl #20
 8002f32:	4605      	mov	r5, r0
 8002f34:	461c      	mov	r4, r3
 8002f36:	4628      	mov	r0, r5
 8002f38:	4621      	mov	r1, r4
 8002f3a:	b005      	add	sp, #20
 8002f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f40:	4a5f      	ldr	r2, [pc, #380]	; (80030c0 <expm1+0x380>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d93d      	bls.n	8002fc2 <expm1+0x282>
 8002f46:	f3c1 0313 	ubfx	r3, r1, #0, #20
 8002f4a:	4303      	orrs	r3, r0
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	f000 8109 	beq.w	8003164 <expm1+0x424>
 8002f52:	460b      	mov	r3, r1
 8002f54:	f7fd f942 	bl	80001dc <__adddf3>
 8002f58:	4605      	mov	r5, r0
 8002f5a:	460c      	mov	r4, r1
 8002f5c:	e019      	b.n	8002f92 <expm1+0x252>
 8002f5e:	4a59      	ldr	r2, [pc, #356]	; (80030c4 <expm1+0x384>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d81b      	bhi.n	8002f9c <expm1+0x25c>
 8002f64:	4a58      	ldr	r2, [pc, #352]	; (80030c8 <expm1+0x388>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	f240 80b4 	bls.w	80030d4 <expm1+0x394>
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	9301      	str	r3, [sp, #4]
 8002f70:	e737      	b.n	8002de2 <expm1+0xa2>
 8002f72:	4628      	mov	r0, r5
 8002f74:	4621      	mov	r1, r4
 8002f76:	f7fd fae7 	bl	8000548 <__aeabi_dmul>
 8002f7a:	4652      	mov	r2, sl
 8002f7c:	465b      	mov	r3, fp
 8002f7e:	f7fd f92b 	bl	80001d8 <__aeabi_dsub>
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	4628      	mov	r0, r5
 8002f88:	4621      	mov	r1, r4
 8002f8a:	f7fd f925 	bl	80001d8 <__aeabi_dsub>
 8002f8e:	4605      	mov	r5, r0
 8002f90:	460c      	mov	r4, r1
 8002f92:	4628      	mov	r0, r5
 8002f94:	4621      	mov	r1, r4
 8002f96:	b005      	add	sp, #20
 8002f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f9c:	4a4b      	ldr	r2, [pc, #300]	; (80030cc <expm1+0x38c>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	f200 80f7 	bhi.w	8003192 <expm1+0x452>
 8002fa4:	2900      	cmp	r1, #0
 8002fa6:	a32c      	add	r3, pc, #176	; (adr r3, 8003058 <expm1+0x318>)
 8002fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fac:	db17      	blt.n	8002fde <expm1+0x29e>
 8002fae:	f7fd f913 	bl	80001d8 <__aeabi_dsub>
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	a72a      	add	r7, pc, #168	; (adr r7, 8003060 <expm1+0x320>)
 8002fb6:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002fba:	4604      	mov	r4, r0
 8002fbc:	460d      	mov	r5, r1
 8002fbe:	9301      	str	r3, [sp, #4]
 8002fc0:	e6fb      	b.n	8002dba <expm1+0x7a>
 8002fc2:	a333      	add	r3, pc, #204	; (adr r3, 8003090 <expm1+0x350>)
 8002fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc8:	f7fd fd4e 	bl	8000a68 <__aeabi_dcmpgt>
 8002fcc:	2800      	cmp	r0, #0
 8002fce:	f43f aec7 	beq.w	8002d60 <expm1+0x20>
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	b005      	add	sp, #20
 8002fd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fda:	f000 b927 	b.w	800322c <__math_oflow>
 8002fde:	f7fd f8fd 	bl	80001dc <__adddf3>
 8002fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe6:	a72c      	add	r7, pc, #176	; (adr r7, 8003098 <expm1+0x358>)
 8002fe8:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002fec:	4604      	mov	r4, r0
 8002fee:	460d      	mov	r5, r1
 8002ff0:	9301      	str	r3, [sp, #4]
 8002ff2:	e6e2      	b.n	8002dba <expm1+0x7a>
 8002ff4:	462a      	mov	r2, r5
 8002ff6:	4623      	mov	r3, r4
 8002ff8:	f7fd f8ee 	bl	80001d8 <__aeabi_dsub>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	2000      	movs	r0, #0
 8003002:	492c      	ldr	r1, [pc, #176]	; (80030b4 <expm1+0x374>)
 8003004:	f7fd f8e8 	bl	80001d8 <__aeabi_dsub>
 8003008:	9a01      	ldr	r2, [sp, #4]
 800300a:	4b2a      	ldr	r3, [pc, #168]	; (80030b4 <expm1+0x374>)
 800300c:	eb01 5102 	add.w	r1, r1, r2, lsl #20
 8003010:	2200      	movs	r2, #0
 8003012:	f7fd f8e1 	bl	80001d8 <__aeabi_dsub>
 8003016:	4605      	mov	r5, r0
 8003018:	460c      	mov	r4, r1
 800301a:	e7ba      	b.n	8002f92 <expm1+0x252>
 800301c:	a320      	add	r3, pc, #128	; (adr r3, 80030a0 <expm1+0x360>)
 800301e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003022:	f7fd f8db 	bl	80001dc <__adddf3>
 8003026:	2200      	movs	r2, #0
 8003028:	2300      	movs	r3, #0
 800302a:	f7fd fcff 	bl	8000a2c <__aeabi_dcmplt>
 800302e:	2800      	cmp	r0, #0
 8003030:	f040 809b 	bne.w	800316a <expm1+0x42a>
 8003034:	a306      	add	r3, pc, #24	; (adr r3, 8003050 <expm1+0x310>)
 8003036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303a:	4628      	mov	r0, r5
 800303c:	4621      	mov	r1, r4
 800303e:	f7fd fa83 	bl	8000548 <__aeabi_dmul>
 8003042:	4602      	mov	r2, r0
 8003044:	460b      	mov	r3, r1
 8003046:	2000      	movs	r0, #0
 8003048:	4921      	ldr	r1, [pc, #132]	; (80030d0 <expm1+0x390>)
 800304a:	e697      	b.n	8002d7c <expm1+0x3c>
 800304c:	f3af 8000 	nop.w
 8003050:	652b82fe 	.word	0x652b82fe
 8003054:	3ff71547 	.word	0x3ff71547
 8003058:	fee00000 	.word	0xfee00000
 800305c:	3fe62e42 	.word	0x3fe62e42
 8003060:	35793c76 	.word	0x35793c76
 8003064:	3dea39ef 	.word	0x3dea39ef
 8003068:	6e09c32d 	.word	0x6e09c32d
 800306c:	be8afdb7 	.word	0xbe8afdb7
 8003070:	86e65239 	.word	0x86e65239
 8003074:	3ed0cfca 	.word	0x3ed0cfca
 8003078:	9eaadbb7 	.word	0x9eaadbb7
 800307c:	3f14ce19 	.word	0x3f14ce19
 8003080:	19fe5585 	.word	0x19fe5585
 8003084:	3f5a01a0 	.word	0x3f5a01a0
 8003088:	111110f4 	.word	0x111110f4
 800308c:	3fa11111 	.word	0x3fa11111
 8003090:	fefa39ef 	.word	0xfefa39ef
 8003094:	40862e42 	.word	0x40862e42
 8003098:	35793c76 	.word	0x35793c76
 800309c:	bdea39ef 	.word	0xbdea39ef
 80030a0:	c2f8f359 	.word	0xc2f8f359
 80030a4:	01a56e1f 	.word	0x01a56e1f
 80030a8:	40436879 	.word	0x40436879
 80030ac:	40862e41 	.word	0x40862e41
 80030b0:	3fe00000 	.word	0x3fe00000
 80030b4:	3ff00000 	.word	0x3ff00000
 80030b8:	40080000 	.word	0x40080000
 80030bc:	40180000 	.word	0x40180000
 80030c0:	7fefffff 	.word	0x7fefffff
 80030c4:	3fd62e42 	.word	0x3fd62e42
 80030c8:	3c8fffff 	.word	0x3c8fffff
 80030cc:	3ff0a2b1 	.word	0x3ff0a2b1
 80030d0:	bfe00000 	.word	0xbfe00000
 80030d4:	a336      	add	r3, pc, #216	; (adr r3, 80031b0 <expm1+0x470>)
 80030d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030da:	f7fd f87f 	bl	80001dc <__adddf3>
 80030de:	4602      	mov	r2, r0
 80030e0:	460b      	mov	r3, r1
 80030e2:	e74c      	b.n	8002f7e <expm1+0x23e>
 80030e4:	4b36      	ldr	r3, [pc, #216]	; (80031c0 <expm1+0x480>)
 80030e6:	4628      	mov	r0, r5
 80030e8:	4621      	mov	r1, r4
 80030ea:	2200      	movs	r2, #0
 80030ec:	f7fd fc9e 	bl	8000a2c <__aeabi_dcmplt>
 80030f0:	2800      	cmp	r0, #0
 80030f2:	d03d      	beq.n	8003170 <expm1+0x430>
 80030f4:	4b33      	ldr	r3, [pc, #204]	; (80031c4 <expm1+0x484>)
 80030f6:	4628      	mov	r0, r5
 80030f8:	4621      	mov	r1, r4
 80030fa:	2200      	movs	r2, #0
 80030fc:	f7fd f86e 	bl	80001dc <__adddf3>
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	4630      	mov	r0, r6
 8003106:	4639      	mov	r1, r7
 8003108:	f7fd f866 	bl	80001d8 <__aeabi_dsub>
 800310c:	2200      	movs	r2, #0
 800310e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8003112:	f7fd fa19 	bl	8000548 <__aeabi_dmul>
 8003116:	4605      	mov	r5, r0
 8003118:	460c      	mov	r4, r1
 800311a:	e73a      	b.n	8002f92 <expm1+0x252>
 800311c:	4628      	mov	r0, r5
 800311e:	4621      	mov	r1, r4
 8003120:	4632      	mov	r2, r6
 8003122:	463b      	mov	r3, r7
 8003124:	f7fd f858 	bl	80001d8 <__aeabi_dsub>
 8003128:	4b26      	ldr	r3, [pc, #152]	; (80031c4 <expm1+0x484>)
 800312a:	2200      	movs	r2, #0
 800312c:	f7fd fa0c 	bl	8000548 <__aeabi_dmul>
 8003130:	4b24      	ldr	r3, [pc, #144]	; (80031c4 <expm1+0x484>)
 8003132:	2200      	movs	r2, #0
 8003134:	f7fd f850 	bl	80001d8 <__aeabi_dsub>
 8003138:	4605      	mov	r5, r0
 800313a:	460c      	mov	r4, r1
 800313c:	e729      	b.n	8002f92 <expm1+0x252>
 800313e:	9f01      	ldr	r7, [sp, #4]
 8003140:	f5c7 767f 	rsb	r6, r7, #1020	; 0x3fc
 8003144:	3603      	adds	r6, #3
 8003146:	0533      	lsls	r3, r6, #20
 8003148:	2200      	movs	r2, #0
 800314a:	f7fd f847 	bl	80001dc <__adddf3>
 800314e:	4602      	mov	r2, r0
 8003150:	460b      	mov	r3, r1
 8003152:	4628      	mov	r0, r5
 8003154:	4621      	mov	r1, r4
 8003156:	f7fd f83f 	bl	80001d8 <__aeabi_dsub>
 800315a:	4b1b      	ldr	r3, [pc, #108]	; (80031c8 <expm1+0x488>)
 800315c:	2200      	movs	r2, #0
 800315e:	f7fd f83d 	bl	80001dc <__adddf3>
 8003162:	e6e4      	b.n	8002f2e <expm1+0x1ee>
 8003164:	2900      	cmp	r1, #0
 8003166:	f6bf af14 	bge.w	8002f92 <expm1+0x252>
 800316a:	4c18      	ldr	r4, [pc, #96]	; (80031cc <expm1+0x48c>)
 800316c:	2500      	movs	r5, #0
 800316e:	e710      	b.n	8002f92 <expm1+0x252>
 8003170:	4628      	mov	r0, r5
 8003172:	4621      	mov	r1, r4
 8003174:	4632      	mov	r2, r6
 8003176:	463b      	mov	r3, r7
 8003178:	f7fd f82e 	bl	80001d8 <__aeabi_dsub>
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	f7fd f82c 	bl	80001dc <__adddf3>
 8003184:	4b10      	ldr	r3, [pc, #64]	; (80031c8 <expm1+0x488>)
 8003186:	2200      	movs	r2, #0
 8003188:	f7fd f828 	bl	80001dc <__adddf3>
 800318c:	4605      	mov	r5, r0
 800318e:	460c      	mov	r4, r1
 8003190:	e6ff      	b.n	8002f92 <expm1+0x252>
 8003192:	a309      	add	r3, pc, #36	; (adr r3, 80031b8 <expm1+0x478>)
 8003194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003198:	f7fd f9d6 	bl	8000548 <__aeabi_dmul>
 800319c:	2c00      	cmp	r4, #0
 800319e:	4602      	mov	r2, r0
 80031a0:	460b      	mov	r3, r1
 80031a2:	f04f 0000 	mov.w	r0, #0
 80031a6:	f6ff af4f 	blt.w	8003048 <expm1+0x308>
 80031aa:	4906      	ldr	r1, [pc, #24]	; (80031c4 <expm1+0x484>)
 80031ac:	e5e6      	b.n	8002d7c <expm1+0x3c>
 80031ae:	bf00      	nop
 80031b0:	8800759c 	.word	0x8800759c
 80031b4:	7e37e43c 	.word	0x7e37e43c
 80031b8:	652b82fe 	.word	0x652b82fe
 80031bc:	3ff71547 	.word	0x3ff71547
 80031c0:	bfd00000 	.word	0xbfd00000
 80031c4:	3fe00000 	.word	0x3fe00000
 80031c8:	3ff00000 	.word	0x3ff00000
 80031cc:	bff00000 	.word	0xbff00000

080031d0 <fabs>:
 80031d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop

080031d8 <finite>:
 80031d8:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80031dc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80031e0:	0fc0      	lsrs	r0, r0, #31
 80031e2:	4770      	bx	lr

080031e4 <with_errno>:
 80031e4:	b5d0      	push	{r4, r6, r7, lr}
 80031e6:	4606      	mov	r6, r0
 80031e8:	460f      	mov	r7, r1
 80031ea:	4614      	mov	r4, r2
 80031ec:	f000 f830 	bl	8003250 <__errno>
 80031f0:	4603      	mov	r3, r0
 80031f2:	4639      	mov	r1, r7
 80031f4:	4630      	mov	r0, r6
 80031f6:	601c      	str	r4, [r3, #0]
 80031f8:	bdd0      	pop	{r4, r6, r7, pc}
 80031fa:	bf00      	nop

080031fc <xflow>:
 80031fc:	b530      	push	{r4, r5, lr}
 80031fe:	b083      	sub	sp, #12
 8003200:	b180      	cbz	r0, 8003224 <xflow+0x28>
 8003202:	4614      	mov	r4, r2
 8003204:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
 8003208:	e9cd 4500 	strd	r4, r5, [sp]
 800320c:	4610      	mov	r0, r2
 800320e:	4619      	mov	r1, r3
 8003210:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003214:	f7fd f998 	bl	8000548 <__aeabi_dmul>
 8003218:	2222      	movs	r2, #34	; 0x22
 800321a:	b003      	add	sp, #12
 800321c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003220:	f7ff bfe0 	b.w	80031e4 <with_errno>
 8003224:	4614      	mov	r4, r2
 8003226:	461d      	mov	r5, r3
 8003228:	e7ee      	b.n	8003208 <xflow+0xc>
 800322a:	bf00      	nop

0800322c <__math_oflow>:
 800322c:	2200      	movs	r2, #0
 800322e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8003232:	f7ff bfe3 	b.w	80031fc <xflow>
 8003236:	bf00      	nop

08003238 <atoi>:
 8003238:	220a      	movs	r2, #10
 800323a:	2100      	movs	r1, #0
 800323c:	f000 bab0 	b.w	80037a0 <strtol>

08003240 <calloc>:
 8003240:	4b02      	ldr	r3, [pc, #8]	; (800324c <calloc+0xc>)
 8003242:	460a      	mov	r2, r1
 8003244:	4601      	mov	r1, r0
 8003246:	6818      	ldr	r0, [r3, #0]
 8003248:	f000 b866 	b.w	8003318 <_calloc_r>
 800324c:	20000004 	.word	0x20000004

08003250 <__errno>:
 8003250:	4b01      	ldr	r3, [pc, #4]	; (8003258 <__errno+0x8>)
 8003252:	6818      	ldr	r0, [r3, #0]
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	20000004 	.word	0x20000004

0800325c <exit>:
 800325c:	b508      	push	{r3, lr}
 800325e:	4b07      	ldr	r3, [pc, #28]	; (800327c <exit+0x20>)
 8003260:	4604      	mov	r4, r0
 8003262:	b113      	cbz	r3, 800326a <exit+0xe>
 8003264:	2100      	movs	r1, #0
 8003266:	f3af 8000 	nop.w
 800326a:	4b05      	ldr	r3, [pc, #20]	; (8003280 <exit+0x24>)
 800326c:	6818      	ldr	r0, [r3, #0]
 800326e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003270:	b103      	cbz	r3, 8003274 <exit+0x18>
 8003272:	4798      	blx	r3
 8003274:	4620      	mov	r0, r4
 8003276:	f001 fa21 	bl	80046bc <_exit>
 800327a:	bf00      	nop
 800327c:	00000000 	.word	0x00000000
 8003280:	08004de0 	.word	0x08004de0

08003284 <__libc_init_array>:
 8003284:	b570      	push	{r4, r5, r6, lr}
 8003286:	4d0d      	ldr	r5, [pc, #52]	; (80032bc <__libc_init_array+0x38>)
 8003288:	4c0d      	ldr	r4, [pc, #52]	; (80032c0 <__libc_init_array+0x3c>)
 800328a:	1b64      	subs	r4, r4, r5
 800328c:	10a4      	asrs	r4, r4, #2
 800328e:	2600      	movs	r6, #0
 8003290:	42a6      	cmp	r6, r4
 8003292:	d109      	bne.n	80032a8 <__libc_init_array+0x24>
 8003294:	4d0b      	ldr	r5, [pc, #44]	; (80032c4 <__libc_init_array+0x40>)
 8003296:	4c0c      	ldr	r4, [pc, #48]	; (80032c8 <__libc_init_array+0x44>)
 8003298:	f001 fa12 	bl	80046c0 <_init>
 800329c:	1b64      	subs	r4, r4, r5
 800329e:	10a4      	asrs	r4, r4, #2
 80032a0:	2600      	movs	r6, #0
 80032a2:	42a6      	cmp	r6, r4
 80032a4:	d105      	bne.n	80032b2 <__libc_init_array+0x2e>
 80032a6:	bd70      	pop	{r4, r5, r6, pc}
 80032a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80032ac:	4798      	blx	r3
 80032ae:	3601      	adds	r6, #1
 80032b0:	e7ee      	b.n	8003290 <__libc_init_array+0xc>
 80032b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80032b6:	4798      	blx	r3
 80032b8:	3601      	adds	r6, #1
 80032ba:	e7f2      	b.n	80032a2 <__libc_init_array+0x1e>
 80032bc:	0800504c 	.word	0x0800504c
 80032c0:	0800504c 	.word	0x0800504c
 80032c4:	0800504c 	.word	0x0800504c
 80032c8:	08005050 	.word	0x08005050

080032cc <malloc>:
 80032cc:	4b02      	ldr	r3, [pc, #8]	; (80032d8 <malloc+0xc>)
 80032ce:	4601      	mov	r1, r0
 80032d0:	6818      	ldr	r0, [r3, #0]
 80032d2:	f000 b879 	b.w	80033c8 <_malloc_r>
 80032d6:	bf00      	nop
 80032d8:	20000004 	.word	0x20000004

080032dc <free>:
 80032dc:	4b02      	ldr	r3, [pc, #8]	; (80032e8 <free+0xc>)
 80032de:	4601      	mov	r1, r0
 80032e0:	6818      	ldr	r0, [r3, #0]
 80032e2:	f000 b827 	b.w	8003334 <_free_r>
 80032e6:	bf00      	nop
 80032e8:	20000004 	.word	0x20000004

080032ec <memcpy>:
 80032ec:	440a      	add	r2, r1
 80032ee:	4291      	cmp	r1, r2
 80032f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80032f4:	d100      	bne.n	80032f8 <memcpy+0xc>
 80032f6:	4770      	bx	lr
 80032f8:	b510      	push	{r4, lr}
 80032fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80032fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003302:	4291      	cmp	r1, r2
 8003304:	d1f9      	bne.n	80032fa <memcpy+0xe>
 8003306:	bd10      	pop	{r4, pc}

08003308 <memset>:
 8003308:	4402      	add	r2, r0
 800330a:	4603      	mov	r3, r0
 800330c:	4293      	cmp	r3, r2
 800330e:	d100      	bne.n	8003312 <memset+0xa>
 8003310:	4770      	bx	lr
 8003312:	f803 1b01 	strb.w	r1, [r3], #1
 8003316:	e7f9      	b.n	800330c <memset+0x4>

08003318 <_calloc_r>:
 8003318:	b538      	push	{r3, r4, r5, lr}
 800331a:	fb02 f501 	mul.w	r5, r2, r1
 800331e:	4629      	mov	r1, r5
 8003320:	f000 f852 	bl	80033c8 <_malloc_r>
 8003324:	4604      	mov	r4, r0
 8003326:	b118      	cbz	r0, 8003330 <_calloc_r+0x18>
 8003328:	462a      	mov	r2, r5
 800332a:	2100      	movs	r1, #0
 800332c:	f7ff ffec 	bl	8003308 <memset>
 8003330:	4620      	mov	r0, r4
 8003332:	bd38      	pop	{r3, r4, r5, pc}

08003334 <_free_r>:
 8003334:	b538      	push	{r3, r4, r5, lr}
 8003336:	4605      	mov	r5, r0
 8003338:	2900      	cmp	r1, #0
 800333a:	d041      	beq.n	80033c0 <_free_r+0x8c>
 800333c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003340:	1f0c      	subs	r4, r1, #4
 8003342:	2b00      	cmp	r3, #0
 8003344:	bfb8      	it	lt
 8003346:	18e4      	addlt	r4, r4, r3
 8003348:	f000 fd40 	bl	8003dcc <__malloc_lock>
 800334c:	4a1d      	ldr	r2, [pc, #116]	; (80033c4 <_free_r+0x90>)
 800334e:	6813      	ldr	r3, [r2, #0]
 8003350:	b933      	cbnz	r3, 8003360 <_free_r+0x2c>
 8003352:	6063      	str	r3, [r4, #4]
 8003354:	6014      	str	r4, [r2, #0]
 8003356:	4628      	mov	r0, r5
 8003358:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800335c:	f000 bd3c 	b.w	8003dd8 <__malloc_unlock>
 8003360:	42a3      	cmp	r3, r4
 8003362:	d908      	bls.n	8003376 <_free_r+0x42>
 8003364:	6820      	ldr	r0, [r4, #0]
 8003366:	1821      	adds	r1, r4, r0
 8003368:	428b      	cmp	r3, r1
 800336a:	bf01      	itttt	eq
 800336c:	6819      	ldreq	r1, [r3, #0]
 800336e:	685b      	ldreq	r3, [r3, #4]
 8003370:	1809      	addeq	r1, r1, r0
 8003372:	6021      	streq	r1, [r4, #0]
 8003374:	e7ed      	b.n	8003352 <_free_r+0x1e>
 8003376:	461a      	mov	r2, r3
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	b10b      	cbz	r3, 8003380 <_free_r+0x4c>
 800337c:	42a3      	cmp	r3, r4
 800337e:	d9fa      	bls.n	8003376 <_free_r+0x42>
 8003380:	6811      	ldr	r1, [r2, #0]
 8003382:	1850      	adds	r0, r2, r1
 8003384:	42a0      	cmp	r0, r4
 8003386:	d10b      	bne.n	80033a0 <_free_r+0x6c>
 8003388:	6820      	ldr	r0, [r4, #0]
 800338a:	4401      	add	r1, r0
 800338c:	1850      	adds	r0, r2, r1
 800338e:	4283      	cmp	r3, r0
 8003390:	6011      	str	r1, [r2, #0]
 8003392:	d1e0      	bne.n	8003356 <_free_r+0x22>
 8003394:	6818      	ldr	r0, [r3, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	6053      	str	r3, [r2, #4]
 800339a:	4401      	add	r1, r0
 800339c:	6011      	str	r1, [r2, #0]
 800339e:	e7da      	b.n	8003356 <_free_r+0x22>
 80033a0:	d902      	bls.n	80033a8 <_free_r+0x74>
 80033a2:	230c      	movs	r3, #12
 80033a4:	602b      	str	r3, [r5, #0]
 80033a6:	e7d6      	b.n	8003356 <_free_r+0x22>
 80033a8:	6820      	ldr	r0, [r4, #0]
 80033aa:	1821      	adds	r1, r4, r0
 80033ac:	428b      	cmp	r3, r1
 80033ae:	bf04      	itt	eq
 80033b0:	6819      	ldreq	r1, [r3, #0]
 80033b2:	685b      	ldreq	r3, [r3, #4]
 80033b4:	6063      	str	r3, [r4, #4]
 80033b6:	bf04      	itt	eq
 80033b8:	1809      	addeq	r1, r1, r0
 80033ba:	6021      	streq	r1, [r4, #0]
 80033bc:	6054      	str	r4, [r2, #4]
 80033be:	e7ca      	b.n	8003356 <_free_r+0x22>
 80033c0:	bd38      	pop	{r3, r4, r5, pc}
 80033c2:	bf00      	nop
 80033c4:	200001cc 	.word	0x200001cc

080033c8 <_malloc_r>:
 80033c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ca:	1ccd      	adds	r5, r1, #3
 80033cc:	f025 0503 	bic.w	r5, r5, #3
 80033d0:	3508      	adds	r5, #8
 80033d2:	2d0c      	cmp	r5, #12
 80033d4:	bf38      	it	cc
 80033d6:	250c      	movcc	r5, #12
 80033d8:	2d00      	cmp	r5, #0
 80033da:	4606      	mov	r6, r0
 80033dc:	db01      	blt.n	80033e2 <_malloc_r+0x1a>
 80033de:	42a9      	cmp	r1, r5
 80033e0:	d903      	bls.n	80033ea <_malloc_r+0x22>
 80033e2:	230c      	movs	r3, #12
 80033e4:	6033      	str	r3, [r6, #0]
 80033e6:	2000      	movs	r0, #0
 80033e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033ea:	f000 fcef 	bl	8003dcc <__malloc_lock>
 80033ee:	4921      	ldr	r1, [pc, #132]	; (8003474 <_malloc_r+0xac>)
 80033f0:	680a      	ldr	r2, [r1, #0]
 80033f2:	4614      	mov	r4, r2
 80033f4:	b99c      	cbnz	r4, 800341e <_malloc_r+0x56>
 80033f6:	4f20      	ldr	r7, [pc, #128]	; (8003478 <_malloc_r+0xb0>)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	b923      	cbnz	r3, 8003406 <_malloc_r+0x3e>
 80033fc:	4621      	mov	r1, r4
 80033fe:	4630      	mov	r0, r6
 8003400:	f000 f8de 	bl	80035c0 <_sbrk_r>
 8003404:	6038      	str	r0, [r7, #0]
 8003406:	4629      	mov	r1, r5
 8003408:	4630      	mov	r0, r6
 800340a:	f000 f8d9 	bl	80035c0 <_sbrk_r>
 800340e:	1c43      	adds	r3, r0, #1
 8003410:	d123      	bne.n	800345a <_malloc_r+0x92>
 8003412:	230c      	movs	r3, #12
 8003414:	6033      	str	r3, [r6, #0]
 8003416:	4630      	mov	r0, r6
 8003418:	f000 fcde 	bl	8003dd8 <__malloc_unlock>
 800341c:	e7e3      	b.n	80033e6 <_malloc_r+0x1e>
 800341e:	6823      	ldr	r3, [r4, #0]
 8003420:	1b5b      	subs	r3, r3, r5
 8003422:	d417      	bmi.n	8003454 <_malloc_r+0x8c>
 8003424:	2b0b      	cmp	r3, #11
 8003426:	d903      	bls.n	8003430 <_malloc_r+0x68>
 8003428:	6023      	str	r3, [r4, #0]
 800342a:	441c      	add	r4, r3
 800342c:	6025      	str	r5, [r4, #0]
 800342e:	e004      	b.n	800343a <_malloc_r+0x72>
 8003430:	6863      	ldr	r3, [r4, #4]
 8003432:	42a2      	cmp	r2, r4
 8003434:	bf0c      	ite	eq
 8003436:	600b      	streq	r3, [r1, #0]
 8003438:	6053      	strne	r3, [r2, #4]
 800343a:	4630      	mov	r0, r6
 800343c:	f000 fccc 	bl	8003dd8 <__malloc_unlock>
 8003440:	f104 000b 	add.w	r0, r4, #11
 8003444:	1d23      	adds	r3, r4, #4
 8003446:	f020 0007 	bic.w	r0, r0, #7
 800344a:	1ac2      	subs	r2, r0, r3
 800344c:	d0cc      	beq.n	80033e8 <_malloc_r+0x20>
 800344e:	1a1b      	subs	r3, r3, r0
 8003450:	50a3      	str	r3, [r4, r2]
 8003452:	e7c9      	b.n	80033e8 <_malloc_r+0x20>
 8003454:	4622      	mov	r2, r4
 8003456:	6864      	ldr	r4, [r4, #4]
 8003458:	e7cc      	b.n	80033f4 <_malloc_r+0x2c>
 800345a:	1cc4      	adds	r4, r0, #3
 800345c:	f024 0403 	bic.w	r4, r4, #3
 8003460:	42a0      	cmp	r0, r4
 8003462:	d0e3      	beq.n	800342c <_malloc_r+0x64>
 8003464:	1a21      	subs	r1, r4, r0
 8003466:	4630      	mov	r0, r6
 8003468:	f000 f8aa 	bl	80035c0 <_sbrk_r>
 800346c:	3001      	adds	r0, #1
 800346e:	d1dd      	bne.n	800342c <_malloc_r+0x64>
 8003470:	e7cf      	b.n	8003412 <_malloc_r+0x4a>
 8003472:	bf00      	nop
 8003474:	200001cc 	.word	0x200001cc
 8003478:	200001d0 	.word	0x200001d0

0800347c <iprintf>:
 800347c:	b40f      	push	{r0, r1, r2, r3}
 800347e:	4b0a      	ldr	r3, [pc, #40]	; (80034a8 <iprintf+0x2c>)
 8003480:	b513      	push	{r0, r1, r4, lr}
 8003482:	681c      	ldr	r4, [r3, #0]
 8003484:	b124      	cbz	r4, 8003490 <iprintf+0x14>
 8003486:	69a3      	ldr	r3, [r4, #24]
 8003488:	b913      	cbnz	r3, 8003490 <iprintf+0x14>
 800348a:	4620      	mov	r0, r4
 800348c:	f000 fb86 	bl	8003b9c <__sinit>
 8003490:	ab05      	add	r3, sp, #20
 8003492:	9a04      	ldr	r2, [sp, #16]
 8003494:	68a1      	ldr	r1, [r4, #8]
 8003496:	9301      	str	r3, [sp, #4]
 8003498:	4620      	mov	r0, r4
 800349a:	f000 fccb 	bl	8003e34 <_vfiprintf_r>
 800349e:	b002      	add	sp, #8
 80034a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034a4:	b004      	add	sp, #16
 80034a6:	4770      	bx	lr
 80034a8:	20000004 	.word	0x20000004

080034ac <putchar>:
 80034ac:	b538      	push	{r3, r4, r5, lr}
 80034ae:	4b08      	ldr	r3, [pc, #32]	; (80034d0 <putchar+0x24>)
 80034b0:	681c      	ldr	r4, [r3, #0]
 80034b2:	4605      	mov	r5, r0
 80034b4:	b124      	cbz	r4, 80034c0 <putchar+0x14>
 80034b6:	69a3      	ldr	r3, [r4, #24]
 80034b8:	b913      	cbnz	r3, 80034c0 <putchar+0x14>
 80034ba:	4620      	mov	r0, r4
 80034bc:	f000 fb6e 	bl	8003b9c <__sinit>
 80034c0:	68a2      	ldr	r2, [r4, #8]
 80034c2:	4629      	mov	r1, r5
 80034c4:	4620      	mov	r0, r4
 80034c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80034ca:	f000 bf77 	b.w	80043bc <_putc_r>
 80034ce:	bf00      	nop
 80034d0:	20000004 	.word	0x20000004

080034d4 <_puts_r>:
 80034d4:	b570      	push	{r4, r5, r6, lr}
 80034d6:	460e      	mov	r6, r1
 80034d8:	4605      	mov	r5, r0
 80034da:	b118      	cbz	r0, 80034e4 <_puts_r+0x10>
 80034dc:	6983      	ldr	r3, [r0, #24]
 80034de:	b90b      	cbnz	r3, 80034e4 <_puts_r+0x10>
 80034e0:	f000 fb5c 	bl	8003b9c <__sinit>
 80034e4:	69ab      	ldr	r3, [r5, #24]
 80034e6:	68ac      	ldr	r4, [r5, #8]
 80034e8:	b913      	cbnz	r3, 80034f0 <_puts_r+0x1c>
 80034ea:	4628      	mov	r0, r5
 80034ec:	f000 fb56 	bl	8003b9c <__sinit>
 80034f0:	4b2c      	ldr	r3, [pc, #176]	; (80035a4 <_puts_r+0xd0>)
 80034f2:	429c      	cmp	r4, r3
 80034f4:	d120      	bne.n	8003538 <_puts_r+0x64>
 80034f6:	686c      	ldr	r4, [r5, #4]
 80034f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034fa:	07db      	lsls	r3, r3, #31
 80034fc:	d405      	bmi.n	800350a <_puts_r+0x36>
 80034fe:	89a3      	ldrh	r3, [r4, #12]
 8003500:	0598      	lsls	r0, r3, #22
 8003502:	d402      	bmi.n	800350a <_puts_r+0x36>
 8003504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003506:	f000 fbf9 	bl	8003cfc <__retarget_lock_acquire_recursive>
 800350a:	89a3      	ldrh	r3, [r4, #12]
 800350c:	0719      	lsls	r1, r3, #28
 800350e:	d51d      	bpl.n	800354c <_puts_r+0x78>
 8003510:	6923      	ldr	r3, [r4, #16]
 8003512:	b1db      	cbz	r3, 800354c <_puts_r+0x78>
 8003514:	3e01      	subs	r6, #1
 8003516:	68a3      	ldr	r3, [r4, #8]
 8003518:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800351c:	3b01      	subs	r3, #1
 800351e:	60a3      	str	r3, [r4, #8]
 8003520:	bb39      	cbnz	r1, 8003572 <_puts_r+0x9e>
 8003522:	2b00      	cmp	r3, #0
 8003524:	da38      	bge.n	8003598 <_puts_r+0xc4>
 8003526:	4622      	mov	r2, r4
 8003528:	210a      	movs	r1, #10
 800352a:	4628      	mov	r0, r5
 800352c:	f000 f942 	bl	80037b4 <__swbuf_r>
 8003530:	3001      	adds	r0, #1
 8003532:	d011      	beq.n	8003558 <_puts_r+0x84>
 8003534:	250a      	movs	r5, #10
 8003536:	e011      	b.n	800355c <_puts_r+0x88>
 8003538:	4b1b      	ldr	r3, [pc, #108]	; (80035a8 <_puts_r+0xd4>)
 800353a:	429c      	cmp	r4, r3
 800353c:	d101      	bne.n	8003542 <_puts_r+0x6e>
 800353e:	68ac      	ldr	r4, [r5, #8]
 8003540:	e7da      	b.n	80034f8 <_puts_r+0x24>
 8003542:	4b1a      	ldr	r3, [pc, #104]	; (80035ac <_puts_r+0xd8>)
 8003544:	429c      	cmp	r4, r3
 8003546:	bf08      	it	eq
 8003548:	68ec      	ldreq	r4, [r5, #12]
 800354a:	e7d5      	b.n	80034f8 <_puts_r+0x24>
 800354c:	4621      	mov	r1, r4
 800354e:	4628      	mov	r0, r5
 8003550:	f000 f982 	bl	8003858 <__swsetup_r>
 8003554:	2800      	cmp	r0, #0
 8003556:	d0dd      	beq.n	8003514 <_puts_r+0x40>
 8003558:	f04f 35ff 	mov.w	r5, #4294967295
 800355c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800355e:	07da      	lsls	r2, r3, #31
 8003560:	d405      	bmi.n	800356e <_puts_r+0x9a>
 8003562:	89a3      	ldrh	r3, [r4, #12]
 8003564:	059b      	lsls	r3, r3, #22
 8003566:	d402      	bmi.n	800356e <_puts_r+0x9a>
 8003568:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800356a:	f000 fbc8 	bl	8003cfe <__retarget_lock_release_recursive>
 800356e:	4628      	mov	r0, r5
 8003570:	bd70      	pop	{r4, r5, r6, pc}
 8003572:	2b00      	cmp	r3, #0
 8003574:	da04      	bge.n	8003580 <_puts_r+0xac>
 8003576:	69a2      	ldr	r2, [r4, #24]
 8003578:	429a      	cmp	r2, r3
 800357a:	dc06      	bgt.n	800358a <_puts_r+0xb6>
 800357c:	290a      	cmp	r1, #10
 800357e:	d004      	beq.n	800358a <_puts_r+0xb6>
 8003580:	6823      	ldr	r3, [r4, #0]
 8003582:	1c5a      	adds	r2, r3, #1
 8003584:	6022      	str	r2, [r4, #0]
 8003586:	7019      	strb	r1, [r3, #0]
 8003588:	e7c5      	b.n	8003516 <_puts_r+0x42>
 800358a:	4622      	mov	r2, r4
 800358c:	4628      	mov	r0, r5
 800358e:	f000 f911 	bl	80037b4 <__swbuf_r>
 8003592:	3001      	adds	r0, #1
 8003594:	d1bf      	bne.n	8003516 <_puts_r+0x42>
 8003596:	e7df      	b.n	8003558 <_puts_r+0x84>
 8003598:	6823      	ldr	r3, [r4, #0]
 800359a:	250a      	movs	r5, #10
 800359c:	1c5a      	adds	r2, r3, #1
 800359e:	6022      	str	r2, [r4, #0]
 80035a0:	701d      	strb	r5, [r3, #0]
 80035a2:	e7db      	b.n	800355c <_puts_r+0x88>
 80035a4:	08004fd8 	.word	0x08004fd8
 80035a8:	08004ff8 	.word	0x08004ff8
 80035ac:	08004fb8 	.word	0x08004fb8

080035b0 <puts>:
 80035b0:	4b02      	ldr	r3, [pc, #8]	; (80035bc <puts+0xc>)
 80035b2:	4601      	mov	r1, r0
 80035b4:	6818      	ldr	r0, [r3, #0]
 80035b6:	f7ff bf8d 	b.w	80034d4 <_puts_r>
 80035ba:	bf00      	nop
 80035bc:	20000004 	.word	0x20000004

080035c0 <_sbrk_r>:
 80035c0:	b538      	push	{r3, r4, r5, lr}
 80035c2:	4d06      	ldr	r5, [pc, #24]	; (80035dc <_sbrk_r+0x1c>)
 80035c4:	2300      	movs	r3, #0
 80035c6:	4604      	mov	r4, r0
 80035c8:	4608      	mov	r0, r1
 80035ca:	602b      	str	r3, [r5, #0]
 80035cc:	f7ff f8e0 	bl	8002790 <_sbrk>
 80035d0:	1c43      	adds	r3, r0, #1
 80035d2:	d102      	bne.n	80035da <_sbrk_r+0x1a>
 80035d4:	682b      	ldr	r3, [r5, #0]
 80035d6:	b103      	cbz	r3, 80035da <_sbrk_r+0x1a>
 80035d8:	6023      	str	r3, [r4, #0]
 80035da:	bd38      	pop	{r3, r4, r5, pc}
 80035dc:	200001d8 	.word	0x200001d8

080035e0 <strcpy>:
 80035e0:	4603      	mov	r3, r0
 80035e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80035e6:	f803 2b01 	strb.w	r2, [r3], #1
 80035ea:	2a00      	cmp	r2, #0
 80035ec:	d1f9      	bne.n	80035e2 <strcpy+0x2>
 80035ee:	4770      	bx	lr

080035f0 <strtok>:
 80035f0:	4b16      	ldr	r3, [pc, #88]	; (800364c <strtok+0x5c>)
 80035f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035f6:	681f      	ldr	r7, [r3, #0]
 80035f8:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80035fa:	4605      	mov	r5, r0
 80035fc:	460e      	mov	r6, r1
 80035fe:	b9ec      	cbnz	r4, 800363c <strtok+0x4c>
 8003600:	2050      	movs	r0, #80	; 0x50
 8003602:	f7ff fe63 	bl	80032cc <malloc>
 8003606:	4602      	mov	r2, r0
 8003608:	65b8      	str	r0, [r7, #88]	; 0x58
 800360a:	b920      	cbnz	r0, 8003616 <strtok+0x26>
 800360c:	4b10      	ldr	r3, [pc, #64]	; (8003650 <strtok+0x60>)
 800360e:	4811      	ldr	r0, [pc, #68]	; (8003654 <strtok+0x64>)
 8003610:	2157      	movs	r1, #87	; 0x57
 8003612:	f000 f98f 	bl	8003934 <__assert_func>
 8003616:	e9c0 4400 	strd	r4, r4, [r0]
 800361a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800361e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003622:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003626:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800362a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800362e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003632:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003636:	6184      	str	r4, [r0, #24]
 8003638:	7704      	strb	r4, [r0, #28]
 800363a:	6244      	str	r4, [r0, #36]	; 0x24
 800363c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800363e:	4631      	mov	r1, r6
 8003640:	4628      	mov	r0, r5
 8003642:	2301      	movs	r3, #1
 8003644:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003648:	f000 b806 	b.w	8003658 <__strtok_r>
 800364c:	20000004 	.word	0x20000004
 8003650:	08004de4 	.word	0x08004de4
 8003654:	08004dfb 	.word	0x08004dfb

08003658 <__strtok_r>:
 8003658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800365a:	b908      	cbnz	r0, 8003660 <__strtok_r+0x8>
 800365c:	6810      	ldr	r0, [r2, #0]
 800365e:	b188      	cbz	r0, 8003684 <__strtok_r+0x2c>
 8003660:	4604      	mov	r4, r0
 8003662:	4620      	mov	r0, r4
 8003664:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003668:	460f      	mov	r7, r1
 800366a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800366e:	b91e      	cbnz	r6, 8003678 <__strtok_r+0x20>
 8003670:	b965      	cbnz	r5, 800368c <__strtok_r+0x34>
 8003672:	6015      	str	r5, [r2, #0]
 8003674:	4628      	mov	r0, r5
 8003676:	e005      	b.n	8003684 <__strtok_r+0x2c>
 8003678:	42b5      	cmp	r5, r6
 800367a:	d1f6      	bne.n	800366a <__strtok_r+0x12>
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1f0      	bne.n	8003662 <__strtok_r+0xa>
 8003680:	6014      	str	r4, [r2, #0]
 8003682:	7003      	strb	r3, [r0, #0]
 8003684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003686:	461c      	mov	r4, r3
 8003688:	e00c      	b.n	80036a4 <__strtok_r+0x4c>
 800368a:	b915      	cbnz	r5, 8003692 <__strtok_r+0x3a>
 800368c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003690:	460e      	mov	r6, r1
 8003692:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003696:	42ab      	cmp	r3, r5
 8003698:	d1f7      	bne.n	800368a <__strtok_r+0x32>
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0f3      	beq.n	8003686 <__strtok_r+0x2e>
 800369e:	2300      	movs	r3, #0
 80036a0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80036a4:	6014      	str	r4, [r2, #0]
 80036a6:	e7ed      	b.n	8003684 <__strtok_r+0x2c>

080036a8 <_strtol_l.constprop.0>:
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036ae:	4680      	mov	r8, r0
 80036b0:	d001      	beq.n	80036b6 <_strtol_l.constprop.0+0xe>
 80036b2:	2b24      	cmp	r3, #36	; 0x24
 80036b4:	d906      	bls.n	80036c4 <_strtol_l.constprop.0+0x1c>
 80036b6:	f7ff fdcb 	bl	8003250 <__errno>
 80036ba:	2316      	movs	r3, #22
 80036bc:	6003      	str	r3, [r0, #0]
 80036be:	2000      	movs	r0, #0
 80036c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036c4:	4f35      	ldr	r7, [pc, #212]	; (800379c <_strtol_l.constprop.0+0xf4>)
 80036c6:	460d      	mov	r5, r1
 80036c8:	4628      	mov	r0, r5
 80036ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80036ce:	5de6      	ldrb	r6, [r4, r7]
 80036d0:	f016 0608 	ands.w	r6, r6, #8
 80036d4:	d1f8      	bne.n	80036c8 <_strtol_l.constprop.0+0x20>
 80036d6:	2c2d      	cmp	r4, #45	; 0x2d
 80036d8:	d12f      	bne.n	800373a <_strtol_l.constprop.0+0x92>
 80036da:	782c      	ldrb	r4, [r5, #0]
 80036dc:	2601      	movs	r6, #1
 80036de:	1c85      	adds	r5, r0, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d057      	beq.n	8003794 <_strtol_l.constprop.0+0xec>
 80036e4:	2b10      	cmp	r3, #16
 80036e6:	d109      	bne.n	80036fc <_strtol_l.constprop.0+0x54>
 80036e8:	2c30      	cmp	r4, #48	; 0x30
 80036ea:	d107      	bne.n	80036fc <_strtol_l.constprop.0+0x54>
 80036ec:	7828      	ldrb	r0, [r5, #0]
 80036ee:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80036f2:	2858      	cmp	r0, #88	; 0x58
 80036f4:	d149      	bne.n	800378a <_strtol_l.constprop.0+0xe2>
 80036f6:	786c      	ldrb	r4, [r5, #1]
 80036f8:	2310      	movs	r3, #16
 80036fa:	3502      	adds	r5, #2
 80036fc:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8003700:	f10e 3eff 	add.w	lr, lr, #4294967295
 8003704:	2700      	movs	r7, #0
 8003706:	fbbe f9f3 	udiv	r9, lr, r3
 800370a:	4638      	mov	r0, r7
 800370c:	fb03 ea19 	mls	sl, r3, r9, lr
 8003710:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8003714:	f1bc 0f09 	cmp.w	ip, #9
 8003718:	d814      	bhi.n	8003744 <_strtol_l.constprop.0+0x9c>
 800371a:	4664      	mov	r4, ip
 800371c:	42a3      	cmp	r3, r4
 800371e:	dd22      	ble.n	8003766 <_strtol_l.constprop.0+0xbe>
 8003720:	2f00      	cmp	r7, #0
 8003722:	db1d      	blt.n	8003760 <_strtol_l.constprop.0+0xb8>
 8003724:	4581      	cmp	r9, r0
 8003726:	d31b      	bcc.n	8003760 <_strtol_l.constprop.0+0xb8>
 8003728:	d101      	bne.n	800372e <_strtol_l.constprop.0+0x86>
 800372a:	45a2      	cmp	sl, r4
 800372c:	db18      	blt.n	8003760 <_strtol_l.constprop.0+0xb8>
 800372e:	fb00 4003 	mla	r0, r0, r3, r4
 8003732:	2701      	movs	r7, #1
 8003734:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003738:	e7ea      	b.n	8003710 <_strtol_l.constprop.0+0x68>
 800373a:	2c2b      	cmp	r4, #43	; 0x2b
 800373c:	bf04      	itt	eq
 800373e:	782c      	ldrbeq	r4, [r5, #0]
 8003740:	1c85      	addeq	r5, r0, #2
 8003742:	e7cd      	b.n	80036e0 <_strtol_l.constprop.0+0x38>
 8003744:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8003748:	f1bc 0f19 	cmp.w	ip, #25
 800374c:	d801      	bhi.n	8003752 <_strtol_l.constprop.0+0xaa>
 800374e:	3c37      	subs	r4, #55	; 0x37
 8003750:	e7e4      	b.n	800371c <_strtol_l.constprop.0+0x74>
 8003752:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8003756:	f1bc 0f19 	cmp.w	ip, #25
 800375a:	d804      	bhi.n	8003766 <_strtol_l.constprop.0+0xbe>
 800375c:	3c57      	subs	r4, #87	; 0x57
 800375e:	e7dd      	b.n	800371c <_strtol_l.constprop.0+0x74>
 8003760:	f04f 37ff 	mov.w	r7, #4294967295
 8003764:	e7e6      	b.n	8003734 <_strtol_l.constprop.0+0x8c>
 8003766:	2f00      	cmp	r7, #0
 8003768:	da07      	bge.n	800377a <_strtol_l.constprop.0+0xd2>
 800376a:	2322      	movs	r3, #34	; 0x22
 800376c:	f8c8 3000 	str.w	r3, [r8]
 8003770:	4670      	mov	r0, lr
 8003772:	2a00      	cmp	r2, #0
 8003774:	d0a4      	beq.n	80036c0 <_strtol_l.constprop.0+0x18>
 8003776:	1e69      	subs	r1, r5, #1
 8003778:	e005      	b.n	8003786 <_strtol_l.constprop.0+0xde>
 800377a:	b106      	cbz	r6, 800377e <_strtol_l.constprop.0+0xd6>
 800377c:	4240      	negs	r0, r0
 800377e:	2a00      	cmp	r2, #0
 8003780:	d09e      	beq.n	80036c0 <_strtol_l.constprop.0+0x18>
 8003782:	2f00      	cmp	r7, #0
 8003784:	d1f7      	bne.n	8003776 <_strtol_l.constprop.0+0xce>
 8003786:	6011      	str	r1, [r2, #0]
 8003788:	e79a      	b.n	80036c0 <_strtol_l.constprop.0+0x18>
 800378a:	2430      	movs	r4, #48	; 0x30
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1b5      	bne.n	80036fc <_strtol_l.constprop.0+0x54>
 8003790:	2308      	movs	r3, #8
 8003792:	e7b3      	b.n	80036fc <_strtol_l.constprop.0+0x54>
 8003794:	2c30      	cmp	r4, #48	; 0x30
 8003796:	d0a9      	beq.n	80036ec <_strtol_l.constprop.0+0x44>
 8003798:	230a      	movs	r3, #10
 800379a:	e7af      	b.n	80036fc <_strtol_l.constprop.0+0x54>
 800379c:	08004eb7 	.word	0x08004eb7

080037a0 <strtol>:
 80037a0:	4613      	mov	r3, r2
 80037a2:	460a      	mov	r2, r1
 80037a4:	4601      	mov	r1, r0
 80037a6:	4802      	ldr	r0, [pc, #8]	; (80037b0 <strtol+0x10>)
 80037a8:	6800      	ldr	r0, [r0, #0]
 80037aa:	f7ff bf7d 	b.w	80036a8 <_strtol_l.constprop.0>
 80037ae:	bf00      	nop
 80037b0:	20000004 	.word	0x20000004

080037b4 <__swbuf_r>:
 80037b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037b6:	460e      	mov	r6, r1
 80037b8:	4614      	mov	r4, r2
 80037ba:	4605      	mov	r5, r0
 80037bc:	b118      	cbz	r0, 80037c6 <__swbuf_r+0x12>
 80037be:	6983      	ldr	r3, [r0, #24]
 80037c0:	b90b      	cbnz	r3, 80037c6 <__swbuf_r+0x12>
 80037c2:	f000 f9eb 	bl	8003b9c <__sinit>
 80037c6:	4b21      	ldr	r3, [pc, #132]	; (800384c <__swbuf_r+0x98>)
 80037c8:	429c      	cmp	r4, r3
 80037ca:	d12b      	bne.n	8003824 <__swbuf_r+0x70>
 80037cc:	686c      	ldr	r4, [r5, #4]
 80037ce:	69a3      	ldr	r3, [r4, #24]
 80037d0:	60a3      	str	r3, [r4, #8]
 80037d2:	89a3      	ldrh	r3, [r4, #12]
 80037d4:	071a      	lsls	r2, r3, #28
 80037d6:	d52f      	bpl.n	8003838 <__swbuf_r+0x84>
 80037d8:	6923      	ldr	r3, [r4, #16]
 80037da:	b36b      	cbz	r3, 8003838 <__swbuf_r+0x84>
 80037dc:	6923      	ldr	r3, [r4, #16]
 80037de:	6820      	ldr	r0, [r4, #0]
 80037e0:	1ac0      	subs	r0, r0, r3
 80037e2:	6963      	ldr	r3, [r4, #20]
 80037e4:	b2f6      	uxtb	r6, r6
 80037e6:	4283      	cmp	r3, r0
 80037e8:	4637      	mov	r7, r6
 80037ea:	dc04      	bgt.n	80037f6 <__swbuf_r+0x42>
 80037ec:	4621      	mov	r1, r4
 80037ee:	4628      	mov	r0, r5
 80037f0:	f000 f940 	bl	8003a74 <_fflush_r>
 80037f4:	bb30      	cbnz	r0, 8003844 <__swbuf_r+0x90>
 80037f6:	68a3      	ldr	r3, [r4, #8]
 80037f8:	3b01      	subs	r3, #1
 80037fa:	60a3      	str	r3, [r4, #8]
 80037fc:	6823      	ldr	r3, [r4, #0]
 80037fe:	1c5a      	adds	r2, r3, #1
 8003800:	6022      	str	r2, [r4, #0]
 8003802:	701e      	strb	r6, [r3, #0]
 8003804:	6963      	ldr	r3, [r4, #20]
 8003806:	3001      	adds	r0, #1
 8003808:	4283      	cmp	r3, r0
 800380a:	d004      	beq.n	8003816 <__swbuf_r+0x62>
 800380c:	89a3      	ldrh	r3, [r4, #12]
 800380e:	07db      	lsls	r3, r3, #31
 8003810:	d506      	bpl.n	8003820 <__swbuf_r+0x6c>
 8003812:	2e0a      	cmp	r6, #10
 8003814:	d104      	bne.n	8003820 <__swbuf_r+0x6c>
 8003816:	4621      	mov	r1, r4
 8003818:	4628      	mov	r0, r5
 800381a:	f000 f92b 	bl	8003a74 <_fflush_r>
 800381e:	b988      	cbnz	r0, 8003844 <__swbuf_r+0x90>
 8003820:	4638      	mov	r0, r7
 8003822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003824:	4b0a      	ldr	r3, [pc, #40]	; (8003850 <__swbuf_r+0x9c>)
 8003826:	429c      	cmp	r4, r3
 8003828:	d101      	bne.n	800382e <__swbuf_r+0x7a>
 800382a:	68ac      	ldr	r4, [r5, #8]
 800382c:	e7cf      	b.n	80037ce <__swbuf_r+0x1a>
 800382e:	4b09      	ldr	r3, [pc, #36]	; (8003854 <__swbuf_r+0xa0>)
 8003830:	429c      	cmp	r4, r3
 8003832:	bf08      	it	eq
 8003834:	68ec      	ldreq	r4, [r5, #12]
 8003836:	e7ca      	b.n	80037ce <__swbuf_r+0x1a>
 8003838:	4621      	mov	r1, r4
 800383a:	4628      	mov	r0, r5
 800383c:	f000 f80c 	bl	8003858 <__swsetup_r>
 8003840:	2800      	cmp	r0, #0
 8003842:	d0cb      	beq.n	80037dc <__swbuf_r+0x28>
 8003844:	f04f 37ff 	mov.w	r7, #4294967295
 8003848:	e7ea      	b.n	8003820 <__swbuf_r+0x6c>
 800384a:	bf00      	nop
 800384c:	08004fd8 	.word	0x08004fd8
 8003850:	08004ff8 	.word	0x08004ff8
 8003854:	08004fb8 	.word	0x08004fb8

08003858 <__swsetup_r>:
 8003858:	4b32      	ldr	r3, [pc, #200]	; (8003924 <__swsetup_r+0xcc>)
 800385a:	b570      	push	{r4, r5, r6, lr}
 800385c:	681d      	ldr	r5, [r3, #0]
 800385e:	4606      	mov	r6, r0
 8003860:	460c      	mov	r4, r1
 8003862:	b125      	cbz	r5, 800386e <__swsetup_r+0x16>
 8003864:	69ab      	ldr	r3, [r5, #24]
 8003866:	b913      	cbnz	r3, 800386e <__swsetup_r+0x16>
 8003868:	4628      	mov	r0, r5
 800386a:	f000 f997 	bl	8003b9c <__sinit>
 800386e:	4b2e      	ldr	r3, [pc, #184]	; (8003928 <__swsetup_r+0xd0>)
 8003870:	429c      	cmp	r4, r3
 8003872:	d10f      	bne.n	8003894 <__swsetup_r+0x3c>
 8003874:	686c      	ldr	r4, [r5, #4]
 8003876:	89a3      	ldrh	r3, [r4, #12]
 8003878:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800387c:	0719      	lsls	r1, r3, #28
 800387e:	d42c      	bmi.n	80038da <__swsetup_r+0x82>
 8003880:	06dd      	lsls	r5, r3, #27
 8003882:	d411      	bmi.n	80038a8 <__swsetup_r+0x50>
 8003884:	2309      	movs	r3, #9
 8003886:	6033      	str	r3, [r6, #0]
 8003888:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800388c:	81a3      	strh	r3, [r4, #12]
 800388e:	f04f 30ff 	mov.w	r0, #4294967295
 8003892:	e03e      	b.n	8003912 <__swsetup_r+0xba>
 8003894:	4b25      	ldr	r3, [pc, #148]	; (800392c <__swsetup_r+0xd4>)
 8003896:	429c      	cmp	r4, r3
 8003898:	d101      	bne.n	800389e <__swsetup_r+0x46>
 800389a:	68ac      	ldr	r4, [r5, #8]
 800389c:	e7eb      	b.n	8003876 <__swsetup_r+0x1e>
 800389e:	4b24      	ldr	r3, [pc, #144]	; (8003930 <__swsetup_r+0xd8>)
 80038a0:	429c      	cmp	r4, r3
 80038a2:	bf08      	it	eq
 80038a4:	68ec      	ldreq	r4, [r5, #12]
 80038a6:	e7e6      	b.n	8003876 <__swsetup_r+0x1e>
 80038a8:	0758      	lsls	r0, r3, #29
 80038aa:	d512      	bpl.n	80038d2 <__swsetup_r+0x7a>
 80038ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80038ae:	b141      	cbz	r1, 80038c2 <__swsetup_r+0x6a>
 80038b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80038b4:	4299      	cmp	r1, r3
 80038b6:	d002      	beq.n	80038be <__swsetup_r+0x66>
 80038b8:	4630      	mov	r0, r6
 80038ba:	f7ff fd3b 	bl	8003334 <_free_r>
 80038be:	2300      	movs	r3, #0
 80038c0:	6363      	str	r3, [r4, #52]	; 0x34
 80038c2:	89a3      	ldrh	r3, [r4, #12]
 80038c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80038c8:	81a3      	strh	r3, [r4, #12]
 80038ca:	2300      	movs	r3, #0
 80038cc:	6063      	str	r3, [r4, #4]
 80038ce:	6923      	ldr	r3, [r4, #16]
 80038d0:	6023      	str	r3, [r4, #0]
 80038d2:	89a3      	ldrh	r3, [r4, #12]
 80038d4:	f043 0308 	orr.w	r3, r3, #8
 80038d8:	81a3      	strh	r3, [r4, #12]
 80038da:	6923      	ldr	r3, [r4, #16]
 80038dc:	b94b      	cbnz	r3, 80038f2 <__swsetup_r+0x9a>
 80038de:	89a3      	ldrh	r3, [r4, #12]
 80038e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80038e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038e8:	d003      	beq.n	80038f2 <__swsetup_r+0x9a>
 80038ea:	4621      	mov	r1, r4
 80038ec:	4630      	mov	r0, r6
 80038ee:	f000 fa2d 	bl	8003d4c <__smakebuf_r>
 80038f2:	89a0      	ldrh	r0, [r4, #12]
 80038f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80038f8:	f010 0301 	ands.w	r3, r0, #1
 80038fc:	d00a      	beq.n	8003914 <__swsetup_r+0xbc>
 80038fe:	2300      	movs	r3, #0
 8003900:	60a3      	str	r3, [r4, #8]
 8003902:	6963      	ldr	r3, [r4, #20]
 8003904:	425b      	negs	r3, r3
 8003906:	61a3      	str	r3, [r4, #24]
 8003908:	6923      	ldr	r3, [r4, #16]
 800390a:	b943      	cbnz	r3, 800391e <__swsetup_r+0xc6>
 800390c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003910:	d1ba      	bne.n	8003888 <__swsetup_r+0x30>
 8003912:	bd70      	pop	{r4, r5, r6, pc}
 8003914:	0781      	lsls	r1, r0, #30
 8003916:	bf58      	it	pl
 8003918:	6963      	ldrpl	r3, [r4, #20]
 800391a:	60a3      	str	r3, [r4, #8]
 800391c:	e7f4      	b.n	8003908 <__swsetup_r+0xb0>
 800391e:	2000      	movs	r0, #0
 8003920:	e7f7      	b.n	8003912 <__swsetup_r+0xba>
 8003922:	bf00      	nop
 8003924:	20000004 	.word	0x20000004
 8003928:	08004fd8 	.word	0x08004fd8
 800392c:	08004ff8 	.word	0x08004ff8
 8003930:	08004fb8 	.word	0x08004fb8

08003934 <__assert_func>:
 8003934:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003936:	4614      	mov	r4, r2
 8003938:	461a      	mov	r2, r3
 800393a:	4b09      	ldr	r3, [pc, #36]	; (8003960 <__assert_func+0x2c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4605      	mov	r5, r0
 8003940:	68d8      	ldr	r0, [r3, #12]
 8003942:	b14c      	cbz	r4, 8003958 <__assert_func+0x24>
 8003944:	4b07      	ldr	r3, [pc, #28]	; (8003964 <__assert_func+0x30>)
 8003946:	9100      	str	r1, [sp, #0]
 8003948:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800394c:	4906      	ldr	r1, [pc, #24]	; (8003968 <__assert_func+0x34>)
 800394e:	462b      	mov	r3, r5
 8003950:	f000 f9a2 	bl	8003c98 <fiprintf>
 8003954:	f000 fdd0 	bl	80044f8 <abort>
 8003958:	4b04      	ldr	r3, [pc, #16]	; (800396c <__assert_func+0x38>)
 800395a:	461c      	mov	r4, r3
 800395c:	e7f3      	b.n	8003946 <__assert_func+0x12>
 800395e:	bf00      	nop
 8003960:	20000004 	.word	0x20000004
 8003964:	08004e7a 	.word	0x08004e7a
 8003968:	08004e87 	.word	0x08004e87
 800396c:	08004da9 	.word	0x08004da9

08003970 <__sflush_r>:
 8003970:	898a      	ldrh	r2, [r1, #12]
 8003972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003974:	4605      	mov	r5, r0
 8003976:	0710      	lsls	r0, r2, #28
 8003978:	460c      	mov	r4, r1
 800397a:	d457      	bmi.n	8003a2c <__sflush_r+0xbc>
 800397c:	684b      	ldr	r3, [r1, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	dc04      	bgt.n	800398c <__sflush_r+0x1c>
 8003982:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003984:	2b00      	cmp	r3, #0
 8003986:	dc01      	bgt.n	800398c <__sflush_r+0x1c>
 8003988:	2000      	movs	r0, #0
 800398a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800398c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800398e:	2e00      	cmp	r6, #0
 8003990:	d0fa      	beq.n	8003988 <__sflush_r+0x18>
 8003992:	2300      	movs	r3, #0
 8003994:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003998:	682f      	ldr	r7, [r5, #0]
 800399a:	602b      	str	r3, [r5, #0]
 800399c:	d032      	beq.n	8003a04 <__sflush_r+0x94>
 800399e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80039a0:	89a3      	ldrh	r3, [r4, #12]
 80039a2:	075a      	lsls	r2, r3, #29
 80039a4:	d505      	bpl.n	80039b2 <__sflush_r+0x42>
 80039a6:	6863      	ldr	r3, [r4, #4]
 80039a8:	1ac0      	subs	r0, r0, r3
 80039aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80039ac:	b10b      	cbz	r3, 80039b2 <__sflush_r+0x42>
 80039ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039b0:	1ac0      	subs	r0, r0, r3
 80039b2:	2300      	movs	r3, #0
 80039b4:	4602      	mov	r2, r0
 80039b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80039b8:	6a21      	ldr	r1, [r4, #32]
 80039ba:	4628      	mov	r0, r5
 80039bc:	47b0      	blx	r6
 80039be:	1c43      	adds	r3, r0, #1
 80039c0:	89a3      	ldrh	r3, [r4, #12]
 80039c2:	d106      	bne.n	80039d2 <__sflush_r+0x62>
 80039c4:	6829      	ldr	r1, [r5, #0]
 80039c6:	291d      	cmp	r1, #29
 80039c8:	d82c      	bhi.n	8003a24 <__sflush_r+0xb4>
 80039ca:	4a29      	ldr	r2, [pc, #164]	; (8003a70 <__sflush_r+0x100>)
 80039cc:	40ca      	lsrs	r2, r1
 80039ce:	07d6      	lsls	r6, r2, #31
 80039d0:	d528      	bpl.n	8003a24 <__sflush_r+0xb4>
 80039d2:	2200      	movs	r2, #0
 80039d4:	6062      	str	r2, [r4, #4]
 80039d6:	04d9      	lsls	r1, r3, #19
 80039d8:	6922      	ldr	r2, [r4, #16]
 80039da:	6022      	str	r2, [r4, #0]
 80039dc:	d504      	bpl.n	80039e8 <__sflush_r+0x78>
 80039de:	1c42      	adds	r2, r0, #1
 80039e0:	d101      	bne.n	80039e6 <__sflush_r+0x76>
 80039e2:	682b      	ldr	r3, [r5, #0]
 80039e4:	b903      	cbnz	r3, 80039e8 <__sflush_r+0x78>
 80039e6:	6560      	str	r0, [r4, #84]	; 0x54
 80039e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80039ea:	602f      	str	r7, [r5, #0]
 80039ec:	2900      	cmp	r1, #0
 80039ee:	d0cb      	beq.n	8003988 <__sflush_r+0x18>
 80039f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80039f4:	4299      	cmp	r1, r3
 80039f6:	d002      	beq.n	80039fe <__sflush_r+0x8e>
 80039f8:	4628      	mov	r0, r5
 80039fa:	f7ff fc9b 	bl	8003334 <_free_r>
 80039fe:	2000      	movs	r0, #0
 8003a00:	6360      	str	r0, [r4, #52]	; 0x34
 8003a02:	e7c2      	b.n	800398a <__sflush_r+0x1a>
 8003a04:	6a21      	ldr	r1, [r4, #32]
 8003a06:	2301      	movs	r3, #1
 8003a08:	4628      	mov	r0, r5
 8003a0a:	47b0      	blx	r6
 8003a0c:	1c41      	adds	r1, r0, #1
 8003a0e:	d1c7      	bne.n	80039a0 <__sflush_r+0x30>
 8003a10:	682b      	ldr	r3, [r5, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0c4      	beq.n	80039a0 <__sflush_r+0x30>
 8003a16:	2b1d      	cmp	r3, #29
 8003a18:	d001      	beq.n	8003a1e <__sflush_r+0xae>
 8003a1a:	2b16      	cmp	r3, #22
 8003a1c:	d101      	bne.n	8003a22 <__sflush_r+0xb2>
 8003a1e:	602f      	str	r7, [r5, #0]
 8003a20:	e7b2      	b.n	8003988 <__sflush_r+0x18>
 8003a22:	89a3      	ldrh	r3, [r4, #12]
 8003a24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a28:	81a3      	strh	r3, [r4, #12]
 8003a2a:	e7ae      	b.n	800398a <__sflush_r+0x1a>
 8003a2c:	690f      	ldr	r7, [r1, #16]
 8003a2e:	2f00      	cmp	r7, #0
 8003a30:	d0aa      	beq.n	8003988 <__sflush_r+0x18>
 8003a32:	0793      	lsls	r3, r2, #30
 8003a34:	680e      	ldr	r6, [r1, #0]
 8003a36:	bf08      	it	eq
 8003a38:	694b      	ldreq	r3, [r1, #20]
 8003a3a:	600f      	str	r7, [r1, #0]
 8003a3c:	bf18      	it	ne
 8003a3e:	2300      	movne	r3, #0
 8003a40:	1bf6      	subs	r6, r6, r7
 8003a42:	608b      	str	r3, [r1, #8]
 8003a44:	2e00      	cmp	r6, #0
 8003a46:	dd9f      	ble.n	8003988 <__sflush_r+0x18>
 8003a48:	6a21      	ldr	r1, [r4, #32]
 8003a4a:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003a4e:	4633      	mov	r3, r6
 8003a50:	463a      	mov	r2, r7
 8003a52:	4628      	mov	r0, r5
 8003a54:	47e0      	blx	ip
 8003a56:	2800      	cmp	r0, #0
 8003a58:	dc06      	bgt.n	8003a68 <__sflush_r+0xf8>
 8003a5a:	89a3      	ldrh	r3, [r4, #12]
 8003a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a60:	81a3      	strh	r3, [r4, #12]
 8003a62:	f04f 30ff 	mov.w	r0, #4294967295
 8003a66:	e790      	b.n	800398a <__sflush_r+0x1a>
 8003a68:	4407      	add	r7, r0
 8003a6a:	1a36      	subs	r6, r6, r0
 8003a6c:	e7ea      	b.n	8003a44 <__sflush_r+0xd4>
 8003a6e:	bf00      	nop
 8003a70:	20400001 	.word	0x20400001

08003a74 <_fflush_r>:
 8003a74:	b538      	push	{r3, r4, r5, lr}
 8003a76:	690b      	ldr	r3, [r1, #16]
 8003a78:	4605      	mov	r5, r0
 8003a7a:	460c      	mov	r4, r1
 8003a7c:	b913      	cbnz	r3, 8003a84 <_fflush_r+0x10>
 8003a7e:	2500      	movs	r5, #0
 8003a80:	4628      	mov	r0, r5
 8003a82:	bd38      	pop	{r3, r4, r5, pc}
 8003a84:	b118      	cbz	r0, 8003a8e <_fflush_r+0x1a>
 8003a86:	6983      	ldr	r3, [r0, #24]
 8003a88:	b90b      	cbnz	r3, 8003a8e <_fflush_r+0x1a>
 8003a8a:	f000 f887 	bl	8003b9c <__sinit>
 8003a8e:	4b14      	ldr	r3, [pc, #80]	; (8003ae0 <_fflush_r+0x6c>)
 8003a90:	429c      	cmp	r4, r3
 8003a92:	d11b      	bne.n	8003acc <_fflush_r+0x58>
 8003a94:	686c      	ldr	r4, [r5, #4]
 8003a96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d0ef      	beq.n	8003a7e <_fflush_r+0xa>
 8003a9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003aa0:	07d0      	lsls	r0, r2, #31
 8003aa2:	d404      	bmi.n	8003aae <_fflush_r+0x3a>
 8003aa4:	0599      	lsls	r1, r3, #22
 8003aa6:	d402      	bmi.n	8003aae <_fflush_r+0x3a>
 8003aa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003aaa:	f000 f927 	bl	8003cfc <__retarget_lock_acquire_recursive>
 8003aae:	4628      	mov	r0, r5
 8003ab0:	4621      	mov	r1, r4
 8003ab2:	f7ff ff5d 	bl	8003970 <__sflush_r>
 8003ab6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ab8:	07da      	lsls	r2, r3, #31
 8003aba:	4605      	mov	r5, r0
 8003abc:	d4e0      	bmi.n	8003a80 <_fflush_r+0xc>
 8003abe:	89a3      	ldrh	r3, [r4, #12]
 8003ac0:	059b      	lsls	r3, r3, #22
 8003ac2:	d4dd      	bmi.n	8003a80 <_fflush_r+0xc>
 8003ac4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ac6:	f000 f91a 	bl	8003cfe <__retarget_lock_release_recursive>
 8003aca:	e7d9      	b.n	8003a80 <_fflush_r+0xc>
 8003acc:	4b05      	ldr	r3, [pc, #20]	; (8003ae4 <_fflush_r+0x70>)
 8003ace:	429c      	cmp	r4, r3
 8003ad0:	d101      	bne.n	8003ad6 <_fflush_r+0x62>
 8003ad2:	68ac      	ldr	r4, [r5, #8]
 8003ad4:	e7df      	b.n	8003a96 <_fflush_r+0x22>
 8003ad6:	4b04      	ldr	r3, [pc, #16]	; (8003ae8 <_fflush_r+0x74>)
 8003ad8:	429c      	cmp	r4, r3
 8003ada:	bf08      	it	eq
 8003adc:	68ec      	ldreq	r4, [r5, #12]
 8003ade:	e7da      	b.n	8003a96 <_fflush_r+0x22>
 8003ae0:	08004fd8 	.word	0x08004fd8
 8003ae4:	08004ff8 	.word	0x08004ff8
 8003ae8:	08004fb8 	.word	0x08004fb8

08003aec <std>:
 8003aec:	2300      	movs	r3, #0
 8003aee:	b510      	push	{r4, lr}
 8003af0:	4604      	mov	r4, r0
 8003af2:	e9c0 3300 	strd	r3, r3, [r0]
 8003af6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003afa:	6083      	str	r3, [r0, #8]
 8003afc:	8181      	strh	r1, [r0, #12]
 8003afe:	6643      	str	r3, [r0, #100]	; 0x64
 8003b00:	81c2      	strh	r2, [r0, #14]
 8003b02:	6183      	str	r3, [r0, #24]
 8003b04:	4619      	mov	r1, r3
 8003b06:	2208      	movs	r2, #8
 8003b08:	305c      	adds	r0, #92	; 0x5c
 8003b0a:	f7ff fbfd 	bl	8003308 <memset>
 8003b0e:	4b05      	ldr	r3, [pc, #20]	; (8003b24 <std+0x38>)
 8003b10:	6263      	str	r3, [r4, #36]	; 0x24
 8003b12:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <std+0x3c>)
 8003b14:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b16:	4b05      	ldr	r3, [pc, #20]	; (8003b2c <std+0x40>)
 8003b18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b1a:	4b05      	ldr	r3, [pc, #20]	; (8003b30 <std+0x44>)
 8003b1c:	6224      	str	r4, [r4, #32]
 8003b1e:	6323      	str	r3, [r4, #48]	; 0x30
 8003b20:	bd10      	pop	{r4, pc}
 8003b22:	bf00      	nop
 8003b24:	0800444d 	.word	0x0800444d
 8003b28:	0800446f 	.word	0x0800446f
 8003b2c:	080044a7 	.word	0x080044a7
 8003b30:	080044cb 	.word	0x080044cb

08003b34 <_cleanup_r>:
 8003b34:	4901      	ldr	r1, [pc, #4]	; (8003b3c <_cleanup_r+0x8>)
 8003b36:	f000 b8c1 	b.w	8003cbc <_fwalk_reent>
 8003b3a:	bf00      	nop
 8003b3c:	08003a75 	.word	0x08003a75

08003b40 <__sfmoreglue>:
 8003b40:	b570      	push	{r4, r5, r6, lr}
 8003b42:	2268      	movs	r2, #104	; 0x68
 8003b44:	1e4d      	subs	r5, r1, #1
 8003b46:	4355      	muls	r5, r2
 8003b48:	460e      	mov	r6, r1
 8003b4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003b4e:	f7ff fc3b 	bl	80033c8 <_malloc_r>
 8003b52:	4604      	mov	r4, r0
 8003b54:	b140      	cbz	r0, 8003b68 <__sfmoreglue+0x28>
 8003b56:	2100      	movs	r1, #0
 8003b58:	e9c0 1600 	strd	r1, r6, [r0]
 8003b5c:	300c      	adds	r0, #12
 8003b5e:	60a0      	str	r0, [r4, #8]
 8003b60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003b64:	f7ff fbd0 	bl	8003308 <memset>
 8003b68:	4620      	mov	r0, r4
 8003b6a:	bd70      	pop	{r4, r5, r6, pc}

08003b6c <__sfp_lock_acquire>:
 8003b6c:	4801      	ldr	r0, [pc, #4]	; (8003b74 <__sfp_lock_acquire+0x8>)
 8003b6e:	f000 b8c5 	b.w	8003cfc <__retarget_lock_acquire_recursive>
 8003b72:	bf00      	nop
 8003b74:	200001d5 	.word	0x200001d5

08003b78 <__sfp_lock_release>:
 8003b78:	4801      	ldr	r0, [pc, #4]	; (8003b80 <__sfp_lock_release+0x8>)
 8003b7a:	f000 b8c0 	b.w	8003cfe <__retarget_lock_release_recursive>
 8003b7e:	bf00      	nop
 8003b80:	200001d5 	.word	0x200001d5

08003b84 <__sinit_lock_acquire>:
 8003b84:	4801      	ldr	r0, [pc, #4]	; (8003b8c <__sinit_lock_acquire+0x8>)
 8003b86:	f000 b8b9 	b.w	8003cfc <__retarget_lock_acquire_recursive>
 8003b8a:	bf00      	nop
 8003b8c:	200001d6 	.word	0x200001d6

08003b90 <__sinit_lock_release>:
 8003b90:	4801      	ldr	r0, [pc, #4]	; (8003b98 <__sinit_lock_release+0x8>)
 8003b92:	f000 b8b4 	b.w	8003cfe <__retarget_lock_release_recursive>
 8003b96:	bf00      	nop
 8003b98:	200001d6 	.word	0x200001d6

08003b9c <__sinit>:
 8003b9c:	b510      	push	{r4, lr}
 8003b9e:	4604      	mov	r4, r0
 8003ba0:	f7ff fff0 	bl	8003b84 <__sinit_lock_acquire>
 8003ba4:	69a3      	ldr	r3, [r4, #24]
 8003ba6:	b11b      	cbz	r3, 8003bb0 <__sinit+0x14>
 8003ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bac:	f7ff bff0 	b.w	8003b90 <__sinit_lock_release>
 8003bb0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003bb4:	6523      	str	r3, [r4, #80]	; 0x50
 8003bb6:	4b13      	ldr	r3, [pc, #76]	; (8003c04 <__sinit+0x68>)
 8003bb8:	4a13      	ldr	r2, [pc, #76]	; (8003c08 <__sinit+0x6c>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	62a2      	str	r2, [r4, #40]	; 0x28
 8003bbe:	42a3      	cmp	r3, r4
 8003bc0:	bf04      	itt	eq
 8003bc2:	2301      	moveq	r3, #1
 8003bc4:	61a3      	streq	r3, [r4, #24]
 8003bc6:	4620      	mov	r0, r4
 8003bc8:	f000 f820 	bl	8003c0c <__sfp>
 8003bcc:	6060      	str	r0, [r4, #4]
 8003bce:	4620      	mov	r0, r4
 8003bd0:	f000 f81c 	bl	8003c0c <__sfp>
 8003bd4:	60a0      	str	r0, [r4, #8]
 8003bd6:	4620      	mov	r0, r4
 8003bd8:	f000 f818 	bl	8003c0c <__sfp>
 8003bdc:	2200      	movs	r2, #0
 8003bde:	60e0      	str	r0, [r4, #12]
 8003be0:	2104      	movs	r1, #4
 8003be2:	6860      	ldr	r0, [r4, #4]
 8003be4:	f7ff ff82 	bl	8003aec <std>
 8003be8:	68a0      	ldr	r0, [r4, #8]
 8003bea:	2201      	movs	r2, #1
 8003bec:	2109      	movs	r1, #9
 8003bee:	f7ff ff7d 	bl	8003aec <std>
 8003bf2:	68e0      	ldr	r0, [r4, #12]
 8003bf4:	2202      	movs	r2, #2
 8003bf6:	2112      	movs	r1, #18
 8003bf8:	f7ff ff78 	bl	8003aec <std>
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	61a3      	str	r3, [r4, #24]
 8003c00:	e7d2      	b.n	8003ba8 <__sinit+0xc>
 8003c02:	bf00      	nop
 8003c04:	08004de0 	.word	0x08004de0
 8003c08:	08003b35 	.word	0x08003b35

08003c0c <__sfp>:
 8003c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c0e:	4607      	mov	r7, r0
 8003c10:	f7ff ffac 	bl	8003b6c <__sfp_lock_acquire>
 8003c14:	4b1e      	ldr	r3, [pc, #120]	; (8003c90 <__sfp+0x84>)
 8003c16:	681e      	ldr	r6, [r3, #0]
 8003c18:	69b3      	ldr	r3, [r6, #24]
 8003c1a:	b913      	cbnz	r3, 8003c22 <__sfp+0x16>
 8003c1c:	4630      	mov	r0, r6
 8003c1e:	f7ff ffbd 	bl	8003b9c <__sinit>
 8003c22:	3648      	adds	r6, #72	; 0x48
 8003c24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	d503      	bpl.n	8003c34 <__sfp+0x28>
 8003c2c:	6833      	ldr	r3, [r6, #0]
 8003c2e:	b30b      	cbz	r3, 8003c74 <__sfp+0x68>
 8003c30:	6836      	ldr	r6, [r6, #0]
 8003c32:	e7f7      	b.n	8003c24 <__sfp+0x18>
 8003c34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003c38:	b9d5      	cbnz	r5, 8003c70 <__sfp+0x64>
 8003c3a:	4b16      	ldr	r3, [pc, #88]	; (8003c94 <__sfp+0x88>)
 8003c3c:	60e3      	str	r3, [r4, #12]
 8003c3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003c42:	6665      	str	r5, [r4, #100]	; 0x64
 8003c44:	f000 f859 	bl	8003cfa <__retarget_lock_init_recursive>
 8003c48:	f7ff ff96 	bl	8003b78 <__sfp_lock_release>
 8003c4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003c50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003c54:	6025      	str	r5, [r4, #0]
 8003c56:	61a5      	str	r5, [r4, #24]
 8003c58:	2208      	movs	r2, #8
 8003c5a:	4629      	mov	r1, r5
 8003c5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003c60:	f7ff fb52 	bl	8003308 <memset>
 8003c64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003c68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c70:	3468      	adds	r4, #104	; 0x68
 8003c72:	e7d9      	b.n	8003c28 <__sfp+0x1c>
 8003c74:	2104      	movs	r1, #4
 8003c76:	4638      	mov	r0, r7
 8003c78:	f7ff ff62 	bl	8003b40 <__sfmoreglue>
 8003c7c:	4604      	mov	r4, r0
 8003c7e:	6030      	str	r0, [r6, #0]
 8003c80:	2800      	cmp	r0, #0
 8003c82:	d1d5      	bne.n	8003c30 <__sfp+0x24>
 8003c84:	f7ff ff78 	bl	8003b78 <__sfp_lock_release>
 8003c88:	230c      	movs	r3, #12
 8003c8a:	603b      	str	r3, [r7, #0]
 8003c8c:	e7ee      	b.n	8003c6c <__sfp+0x60>
 8003c8e:	bf00      	nop
 8003c90:	08004de0 	.word	0x08004de0
 8003c94:	ffff0001 	.word	0xffff0001

08003c98 <fiprintf>:
 8003c98:	b40e      	push	{r1, r2, r3}
 8003c9a:	b503      	push	{r0, r1, lr}
 8003c9c:	4601      	mov	r1, r0
 8003c9e:	ab03      	add	r3, sp, #12
 8003ca0:	4805      	ldr	r0, [pc, #20]	; (8003cb8 <fiprintf+0x20>)
 8003ca2:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ca6:	6800      	ldr	r0, [r0, #0]
 8003ca8:	9301      	str	r3, [sp, #4]
 8003caa:	f000 f8c3 	bl	8003e34 <_vfiprintf_r>
 8003cae:	b002      	add	sp, #8
 8003cb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cb4:	b003      	add	sp, #12
 8003cb6:	4770      	bx	lr
 8003cb8:	20000004 	.word	0x20000004

08003cbc <_fwalk_reent>:
 8003cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cc0:	4606      	mov	r6, r0
 8003cc2:	4688      	mov	r8, r1
 8003cc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003cc8:	2700      	movs	r7, #0
 8003cca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003cce:	f1b9 0901 	subs.w	r9, r9, #1
 8003cd2:	d505      	bpl.n	8003ce0 <_fwalk_reent+0x24>
 8003cd4:	6824      	ldr	r4, [r4, #0]
 8003cd6:	2c00      	cmp	r4, #0
 8003cd8:	d1f7      	bne.n	8003cca <_fwalk_reent+0xe>
 8003cda:	4638      	mov	r0, r7
 8003cdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ce0:	89ab      	ldrh	r3, [r5, #12]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d907      	bls.n	8003cf6 <_fwalk_reent+0x3a>
 8003ce6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003cea:	3301      	adds	r3, #1
 8003cec:	d003      	beq.n	8003cf6 <_fwalk_reent+0x3a>
 8003cee:	4629      	mov	r1, r5
 8003cf0:	4630      	mov	r0, r6
 8003cf2:	47c0      	blx	r8
 8003cf4:	4307      	orrs	r7, r0
 8003cf6:	3568      	adds	r5, #104	; 0x68
 8003cf8:	e7e9      	b.n	8003cce <_fwalk_reent+0x12>

08003cfa <__retarget_lock_init_recursive>:
 8003cfa:	4770      	bx	lr

08003cfc <__retarget_lock_acquire_recursive>:
 8003cfc:	4770      	bx	lr

08003cfe <__retarget_lock_release_recursive>:
 8003cfe:	4770      	bx	lr

08003d00 <__swhatbuf_r>:
 8003d00:	b570      	push	{r4, r5, r6, lr}
 8003d02:	460e      	mov	r6, r1
 8003d04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d08:	2900      	cmp	r1, #0
 8003d0a:	b096      	sub	sp, #88	; 0x58
 8003d0c:	4614      	mov	r4, r2
 8003d0e:	461d      	mov	r5, r3
 8003d10:	da08      	bge.n	8003d24 <__swhatbuf_r+0x24>
 8003d12:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	602a      	str	r2, [r5, #0]
 8003d1a:	061a      	lsls	r2, r3, #24
 8003d1c:	d410      	bmi.n	8003d40 <__swhatbuf_r+0x40>
 8003d1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d22:	e00e      	b.n	8003d42 <__swhatbuf_r+0x42>
 8003d24:	466a      	mov	r2, sp
 8003d26:	f000 fbff 	bl	8004528 <_fstat_r>
 8003d2a:	2800      	cmp	r0, #0
 8003d2c:	dbf1      	blt.n	8003d12 <__swhatbuf_r+0x12>
 8003d2e:	9a01      	ldr	r2, [sp, #4]
 8003d30:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003d34:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003d38:	425a      	negs	r2, r3
 8003d3a:	415a      	adcs	r2, r3
 8003d3c:	602a      	str	r2, [r5, #0]
 8003d3e:	e7ee      	b.n	8003d1e <__swhatbuf_r+0x1e>
 8003d40:	2340      	movs	r3, #64	; 0x40
 8003d42:	2000      	movs	r0, #0
 8003d44:	6023      	str	r3, [r4, #0]
 8003d46:	b016      	add	sp, #88	; 0x58
 8003d48:	bd70      	pop	{r4, r5, r6, pc}
 8003d4a:	0000      	movs	r0, r0

08003d4c <__smakebuf_r>:
 8003d4c:	898b      	ldrh	r3, [r1, #12]
 8003d4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003d50:	079d      	lsls	r5, r3, #30
 8003d52:	4606      	mov	r6, r0
 8003d54:	460c      	mov	r4, r1
 8003d56:	d507      	bpl.n	8003d68 <__smakebuf_r+0x1c>
 8003d58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003d5c:	6023      	str	r3, [r4, #0]
 8003d5e:	6123      	str	r3, [r4, #16]
 8003d60:	2301      	movs	r3, #1
 8003d62:	6163      	str	r3, [r4, #20]
 8003d64:	b002      	add	sp, #8
 8003d66:	bd70      	pop	{r4, r5, r6, pc}
 8003d68:	ab01      	add	r3, sp, #4
 8003d6a:	466a      	mov	r2, sp
 8003d6c:	f7ff ffc8 	bl	8003d00 <__swhatbuf_r>
 8003d70:	9900      	ldr	r1, [sp, #0]
 8003d72:	4605      	mov	r5, r0
 8003d74:	4630      	mov	r0, r6
 8003d76:	f7ff fb27 	bl	80033c8 <_malloc_r>
 8003d7a:	b948      	cbnz	r0, 8003d90 <__smakebuf_r+0x44>
 8003d7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d80:	059a      	lsls	r2, r3, #22
 8003d82:	d4ef      	bmi.n	8003d64 <__smakebuf_r+0x18>
 8003d84:	f023 0303 	bic.w	r3, r3, #3
 8003d88:	f043 0302 	orr.w	r3, r3, #2
 8003d8c:	81a3      	strh	r3, [r4, #12]
 8003d8e:	e7e3      	b.n	8003d58 <__smakebuf_r+0xc>
 8003d90:	4b0d      	ldr	r3, [pc, #52]	; (8003dc8 <__smakebuf_r+0x7c>)
 8003d92:	62b3      	str	r3, [r6, #40]	; 0x28
 8003d94:	89a3      	ldrh	r3, [r4, #12]
 8003d96:	6020      	str	r0, [r4, #0]
 8003d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d9c:	81a3      	strh	r3, [r4, #12]
 8003d9e:	9b00      	ldr	r3, [sp, #0]
 8003da0:	6163      	str	r3, [r4, #20]
 8003da2:	9b01      	ldr	r3, [sp, #4]
 8003da4:	6120      	str	r0, [r4, #16]
 8003da6:	b15b      	cbz	r3, 8003dc0 <__smakebuf_r+0x74>
 8003da8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003dac:	4630      	mov	r0, r6
 8003dae:	f000 fbcd 	bl	800454c <_isatty_r>
 8003db2:	b128      	cbz	r0, 8003dc0 <__smakebuf_r+0x74>
 8003db4:	89a3      	ldrh	r3, [r4, #12]
 8003db6:	f023 0303 	bic.w	r3, r3, #3
 8003dba:	f043 0301 	orr.w	r3, r3, #1
 8003dbe:	81a3      	strh	r3, [r4, #12]
 8003dc0:	89a0      	ldrh	r0, [r4, #12]
 8003dc2:	4305      	orrs	r5, r0
 8003dc4:	81a5      	strh	r5, [r4, #12]
 8003dc6:	e7cd      	b.n	8003d64 <__smakebuf_r+0x18>
 8003dc8:	08003b35 	.word	0x08003b35

08003dcc <__malloc_lock>:
 8003dcc:	4801      	ldr	r0, [pc, #4]	; (8003dd4 <__malloc_lock+0x8>)
 8003dce:	f7ff bf95 	b.w	8003cfc <__retarget_lock_acquire_recursive>
 8003dd2:	bf00      	nop
 8003dd4:	200001d4 	.word	0x200001d4

08003dd8 <__malloc_unlock>:
 8003dd8:	4801      	ldr	r0, [pc, #4]	; (8003de0 <__malloc_unlock+0x8>)
 8003dda:	f7ff bf90 	b.w	8003cfe <__retarget_lock_release_recursive>
 8003dde:	bf00      	nop
 8003de0:	200001d4 	.word	0x200001d4

08003de4 <__sfputc_r>:
 8003de4:	6893      	ldr	r3, [r2, #8]
 8003de6:	3b01      	subs	r3, #1
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	b410      	push	{r4}
 8003dec:	6093      	str	r3, [r2, #8]
 8003dee:	da07      	bge.n	8003e00 <__sfputc_r+0x1c>
 8003df0:	6994      	ldr	r4, [r2, #24]
 8003df2:	42a3      	cmp	r3, r4
 8003df4:	db01      	blt.n	8003dfa <__sfputc_r+0x16>
 8003df6:	290a      	cmp	r1, #10
 8003df8:	d102      	bne.n	8003e00 <__sfputc_r+0x1c>
 8003dfa:	bc10      	pop	{r4}
 8003dfc:	f7ff bcda 	b.w	80037b4 <__swbuf_r>
 8003e00:	6813      	ldr	r3, [r2, #0]
 8003e02:	1c58      	adds	r0, r3, #1
 8003e04:	6010      	str	r0, [r2, #0]
 8003e06:	7019      	strb	r1, [r3, #0]
 8003e08:	4608      	mov	r0, r1
 8003e0a:	bc10      	pop	{r4}
 8003e0c:	4770      	bx	lr

08003e0e <__sfputs_r>:
 8003e0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e10:	4606      	mov	r6, r0
 8003e12:	460f      	mov	r7, r1
 8003e14:	4614      	mov	r4, r2
 8003e16:	18d5      	adds	r5, r2, r3
 8003e18:	42ac      	cmp	r4, r5
 8003e1a:	d101      	bne.n	8003e20 <__sfputs_r+0x12>
 8003e1c:	2000      	movs	r0, #0
 8003e1e:	e007      	b.n	8003e30 <__sfputs_r+0x22>
 8003e20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e24:	463a      	mov	r2, r7
 8003e26:	4630      	mov	r0, r6
 8003e28:	f7ff ffdc 	bl	8003de4 <__sfputc_r>
 8003e2c:	1c43      	adds	r3, r0, #1
 8003e2e:	d1f3      	bne.n	8003e18 <__sfputs_r+0xa>
 8003e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e32:	0000      	movs	r0, r0

08003e34 <_vfiprintf_r>:
 8003e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e38:	460d      	mov	r5, r1
 8003e3a:	b09d      	sub	sp, #116	; 0x74
 8003e3c:	4614      	mov	r4, r2
 8003e3e:	4698      	mov	r8, r3
 8003e40:	4606      	mov	r6, r0
 8003e42:	b118      	cbz	r0, 8003e4c <_vfiprintf_r+0x18>
 8003e44:	6983      	ldr	r3, [r0, #24]
 8003e46:	b90b      	cbnz	r3, 8003e4c <_vfiprintf_r+0x18>
 8003e48:	f7ff fea8 	bl	8003b9c <__sinit>
 8003e4c:	4b89      	ldr	r3, [pc, #548]	; (8004074 <_vfiprintf_r+0x240>)
 8003e4e:	429d      	cmp	r5, r3
 8003e50:	d11b      	bne.n	8003e8a <_vfiprintf_r+0x56>
 8003e52:	6875      	ldr	r5, [r6, #4]
 8003e54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e56:	07d9      	lsls	r1, r3, #31
 8003e58:	d405      	bmi.n	8003e66 <_vfiprintf_r+0x32>
 8003e5a:	89ab      	ldrh	r3, [r5, #12]
 8003e5c:	059a      	lsls	r2, r3, #22
 8003e5e:	d402      	bmi.n	8003e66 <_vfiprintf_r+0x32>
 8003e60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e62:	f7ff ff4b 	bl	8003cfc <__retarget_lock_acquire_recursive>
 8003e66:	89ab      	ldrh	r3, [r5, #12]
 8003e68:	071b      	lsls	r3, r3, #28
 8003e6a:	d501      	bpl.n	8003e70 <_vfiprintf_r+0x3c>
 8003e6c:	692b      	ldr	r3, [r5, #16]
 8003e6e:	b9eb      	cbnz	r3, 8003eac <_vfiprintf_r+0x78>
 8003e70:	4629      	mov	r1, r5
 8003e72:	4630      	mov	r0, r6
 8003e74:	f7ff fcf0 	bl	8003858 <__swsetup_r>
 8003e78:	b1c0      	cbz	r0, 8003eac <_vfiprintf_r+0x78>
 8003e7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e7c:	07dc      	lsls	r4, r3, #31
 8003e7e:	d50e      	bpl.n	8003e9e <_vfiprintf_r+0x6a>
 8003e80:	f04f 30ff 	mov.w	r0, #4294967295
 8003e84:	b01d      	add	sp, #116	; 0x74
 8003e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e8a:	4b7b      	ldr	r3, [pc, #492]	; (8004078 <_vfiprintf_r+0x244>)
 8003e8c:	429d      	cmp	r5, r3
 8003e8e:	d101      	bne.n	8003e94 <_vfiprintf_r+0x60>
 8003e90:	68b5      	ldr	r5, [r6, #8]
 8003e92:	e7df      	b.n	8003e54 <_vfiprintf_r+0x20>
 8003e94:	4b79      	ldr	r3, [pc, #484]	; (800407c <_vfiprintf_r+0x248>)
 8003e96:	429d      	cmp	r5, r3
 8003e98:	bf08      	it	eq
 8003e9a:	68f5      	ldreq	r5, [r6, #12]
 8003e9c:	e7da      	b.n	8003e54 <_vfiprintf_r+0x20>
 8003e9e:	89ab      	ldrh	r3, [r5, #12]
 8003ea0:	0598      	lsls	r0, r3, #22
 8003ea2:	d4ed      	bmi.n	8003e80 <_vfiprintf_r+0x4c>
 8003ea4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ea6:	f7ff ff2a 	bl	8003cfe <__retarget_lock_release_recursive>
 8003eaa:	e7e9      	b.n	8003e80 <_vfiprintf_r+0x4c>
 8003eac:	2300      	movs	r3, #0
 8003eae:	9309      	str	r3, [sp, #36]	; 0x24
 8003eb0:	2320      	movs	r3, #32
 8003eb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003eb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8003eba:	2330      	movs	r3, #48	; 0x30
 8003ebc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004080 <_vfiprintf_r+0x24c>
 8003ec0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ec4:	f04f 0901 	mov.w	r9, #1
 8003ec8:	4623      	mov	r3, r4
 8003eca:	469a      	mov	sl, r3
 8003ecc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ed0:	b10a      	cbz	r2, 8003ed6 <_vfiprintf_r+0xa2>
 8003ed2:	2a25      	cmp	r2, #37	; 0x25
 8003ed4:	d1f9      	bne.n	8003eca <_vfiprintf_r+0x96>
 8003ed6:	ebba 0b04 	subs.w	fp, sl, r4
 8003eda:	d00b      	beq.n	8003ef4 <_vfiprintf_r+0xc0>
 8003edc:	465b      	mov	r3, fp
 8003ede:	4622      	mov	r2, r4
 8003ee0:	4629      	mov	r1, r5
 8003ee2:	4630      	mov	r0, r6
 8003ee4:	f7ff ff93 	bl	8003e0e <__sfputs_r>
 8003ee8:	3001      	adds	r0, #1
 8003eea:	f000 80aa 	beq.w	8004042 <_vfiprintf_r+0x20e>
 8003eee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ef0:	445a      	add	r2, fp
 8003ef2:	9209      	str	r2, [sp, #36]	; 0x24
 8003ef4:	f89a 3000 	ldrb.w	r3, [sl]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 80a2 	beq.w	8004042 <_vfiprintf_r+0x20e>
 8003efe:	2300      	movs	r3, #0
 8003f00:	f04f 32ff 	mov.w	r2, #4294967295
 8003f04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f08:	f10a 0a01 	add.w	sl, sl, #1
 8003f0c:	9304      	str	r3, [sp, #16]
 8003f0e:	9307      	str	r3, [sp, #28]
 8003f10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f14:	931a      	str	r3, [sp, #104]	; 0x68
 8003f16:	4654      	mov	r4, sl
 8003f18:	2205      	movs	r2, #5
 8003f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f1e:	4858      	ldr	r0, [pc, #352]	; (8004080 <_vfiprintf_r+0x24c>)
 8003f20:	f7fc fe06 	bl	8000b30 <memchr>
 8003f24:	9a04      	ldr	r2, [sp, #16]
 8003f26:	b9d8      	cbnz	r0, 8003f60 <_vfiprintf_r+0x12c>
 8003f28:	06d1      	lsls	r1, r2, #27
 8003f2a:	bf44      	itt	mi
 8003f2c:	2320      	movmi	r3, #32
 8003f2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f32:	0713      	lsls	r3, r2, #28
 8003f34:	bf44      	itt	mi
 8003f36:	232b      	movmi	r3, #43	; 0x2b
 8003f38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f3c:	f89a 3000 	ldrb.w	r3, [sl]
 8003f40:	2b2a      	cmp	r3, #42	; 0x2a
 8003f42:	d015      	beq.n	8003f70 <_vfiprintf_r+0x13c>
 8003f44:	9a07      	ldr	r2, [sp, #28]
 8003f46:	4654      	mov	r4, sl
 8003f48:	2000      	movs	r0, #0
 8003f4a:	f04f 0c0a 	mov.w	ip, #10
 8003f4e:	4621      	mov	r1, r4
 8003f50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f54:	3b30      	subs	r3, #48	; 0x30
 8003f56:	2b09      	cmp	r3, #9
 8003f58:	d94e      	bls.n	8003ff8 <_vfiprintf_r+0x1c4>
 8003f5a:	b1b0      	cbz	r0, 8003f8a <_vfiprintf_r+0x156>
 8003f5c:	9207      	str	r2, [sp, #28]
 8003f5e:	e014      	b.n	8003f8a <_vfiprintf_r+0x156>
 8003f60:	eba0 0308 	sub.w	r3, r0, r8
 8003f64:	fa09 f303 	lsl.w	r3, r9, r3
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	9304      	str	r3, [sp, #16]
 8003f6c:	46a2      	mov	sl, r4
 8003f6e:	e7d2      	b.n	8003f16 <_vfiprintf_r+0xe2>
 8003f70:	9b03      	ldr	r3, [sp, #12]
 8003f72:	1d19      	adds	r1, r3, #4
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	9103      	str	r1, [sp, #12]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	bfbb      	ittet	lt
 8003f7c:	425b      	neglt	r3, r3
 8003f7e:	f042 0202 	orrlt.w	r2, r2, #2
 8003f82:	9307      	strge	r3, [sp, #28]
 8003f84:	9307      	strlt	r3, [sp, #28]
 8003f86:	bfb8      	it	lt
 8003f88:	9204      	strlt	r2, [sp, #16]
 8003f8a:	7823      	ldrb	r3, [r4, #0]
 8003f8c:	2b2e      	cmp	r3, #46	; 0x2e
 8003f8e:	d10c      	bne.n	8003faa <_vfiprintf_r+0x176>
 8003f90:	7863      	ldrb	r3, [r4, #1]
 8003f92:	2b2a      	cmp	r3, #42	; 0x2a
 8003f94:	d135      	bne.n	8004002 <_vfiprintf_r+0x1ce>
 8003f96:	9b03      	ldr	r3, [sp, #12]
 8003f98:	1d1a      	adds	r2, r3, #4
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	9203      	str	r2, [sp, #12]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	bfb8      	it	lt
 8003fa2:	f04f 33ff 	movlt.w	r3, #4294967295
 8003fa6:	3402      	adds	r4, #2
 8003fa8:	9305      	str	r3, [sp, #20]
 8003faa:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004084 <_vfiprintf_r+0x250>
 8003fae:	7821      	ldrb	r1, [r4, #0]
 8003fb0:	2203      	movs	r2, #3
 8003fb2:	4650      	mov	r0, sl
 8003fb4:	f7fc fdbc 	bl	8000b30 <memchr>
 8003fb8:	b140      	cbz	r0, 8003fcc <_vfiprintf_r+0x198>
 8003fba:	2340      	movs	r3, #64	; 0x40
 8003fbc:	eba0 000a 	sub.w	r0, r0, sl
 8003fc0:	fa03 f000 	lsl.w	r0, r3, r0
 8003fc4:	9b04      	ldr	r3, [sp, #16]
 8003fc6:	4303      	orrs	r3, r0
 8003fc8:	3401      	adds	r4, #1
 8003fca:	9304      	str	r3, [sp, #16]
 8003fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fd0:	482d      	ldr	r0, [pc, #180]	; (8004088 <_vfiprintf_r+0x254>)
 8003fd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003fd6:	2206      	movs	r2, #6
 8003fd8:	f7fc fdaa 	bl	8000b30 <memchr>
 8003fdc:	2800      	cmp	r0, #0
 8003fde:	d03f      	beq.n	8004060 <_vfiprintf_r+0x22c>
 8003fe0:	4b2a      	ldr	r3, [pc, #168]	; (800408c <_vfiprintf_r+0x258>)
 8003fe2:	bb1b      	cbnz	r3, 800402c <_vfiprintf_r+0x1f8>
 8003fe4:	9b03      	ldr	r3, [sp, #12]
 8003fe6:	3307      	adds	r3, #7
 8003fe8:	f023 0307 	bic.w	r3, r3, #7
 8003fec:	3308      	adds	r3, #8
 8003fee:	9303      	str	r3, [sp, #12]
 8003ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ff2:	443b      	add	r3, r7
 8003ff4:	9309      	str	r3, [sp, #36]	; 0x24
 8003ff6:	e767      	b.n	8003ec8 <_vfiprintf_r+0x94>
 8003ff8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ffc:	460c      	mov	r4, r1
 8003ffe:	2001      	movs	r0, #1
 8004000:	e7a5      	b.n	8003f4e <_vfiprintf_r+0x11a>
 8004002:	2300      	movs	r3, #0
 8004004:	3401      	adds	r4, #1
 8004006:	9305      	str	r3, [sp, #20]
 8004008:	4619      	mov	r1, r3
 800400a:	f04f 0c0a 	mov.w	ip, #10
 800400e:	4620      	mov	r0, r4
 8004010:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004014:	3a30      	subs	r2, #48	; 0x30
 8004016:	2a09      	cmp	r2, #9
 8004018:	d903      	bls.n	8004022 <_vfiprintf_r+0x1ee>
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0c5      	beq.n	8003faa <_vfiprintf_r+0x176>
 800401e:	9105      	str	r1, [sp, #20]
 8004020:	e7c3      	b.n	8003faa <_vfiprintf_r+0x176>
 8004022:	fb0c 2101 	mla	r1, ip, r1, r2
 8004026:	4604      	mov	r4, r0
 8004028:	2301      	movs	r3, #1
 800402a:	e7f0      	b.n	800400e <_vfiprintf_r+0x1da>
 800402c:	ab03      	add	r3, sp, #12
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	462a      	mov	r2, r5
 8004032:	4b17      	ldr	r3, [pc, #92]	; (8004090 <_vfiprintf_r+0x25c>)
 8004034:	a904      	add	r1, sp, #16
 8004036:	4630      	mov	r0, r6
 8004038:	f3af 8000 	nop.w
 800403c:	4607      	mov	r7, r0
 800403e:	1c78      	adds	r0, r7, #1
 8004040:	d1d6      	bne.n	8003ff0 <_vfiprintf_r+0x1bc>
 8004042:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004044:	07d9      	lsls	r1, r3, #31
 8004046:	d405      	bmi.n	8004054 <_vfiprintf_r+0x220>
 8004048:	89ab      	ldrh	r3, [r5, #12]
 800404a:	059a      	lsls	r2, r3, #22
 800404c:	d402      	bmi.n	8004054 <_vfiprintf_r+0x220>
 800404e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004050:	f7ff fe55 	bl	8003cfe <__retarget_lock_release_recursive>
 8004054:	89ab      	ldrh	r3, [r5, #12]
 8004056:	065b      	lsls	r3, r3, #25
 8004058:	f53f af12 	bmi.w	8003e80 <_vfiprintf_r+0x4c>
 800405c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800405e:	e711      	b.n	8003e84 <_vfiprintf_r+0x50>
 8004060:	ab03      	add	r3, sp, #12
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	462a      	mov	r2, r5
 8004066:	4b0a      	ldr	r3, [pc, #40]	; (8004090 <_vfiprintf_r+0x25c>)
 8004068:	a904      	add	r1, sp, #16
 800406a:	4630      	mov	r0, r6
 800406c:	f000 f880 	bl	8004170 <_printf_i>
 8004070:	e7e4      	b.n	800403c <_vfiprintf_r+0x208>
 8004072:	bf00      	nop
 8004074:	08004fd8 	.word	0x08004fd8
 8004078:	08004ff8 	.word	0x08004ff8
 800407c:	08004fb8 	.word	0x08004fb8
 8004080:	08005018 	.word	0x08005018
 8004084:	0800501e 	.word	0x0800501e
 8004088:	08005022 	.word	0x08005022
 800408c:	00000000 	.word	0x00000000
 8004090:	08003e0f 	.word	0x08003e0f

08004094 <_printf_common>:
 8004094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004098:	4616      	mov	r6, r2
 800409a:	4699      	mov	r9, r3
 800409c:	688a      	ldr	r2, [r1, #8]
 800409e:	690b      	ldr	r3, [r1, #16]
 80040a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040a4:	4293      	cmp	r3, r2
 80040a6:	bfb8      	it	lt
 80040a8:	4613      	movlt	r3, r2
 80040aa:	6033      	str	r3, [r6, #0]
 80040ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040b0:	4607      	mov	r7, r0
 80040b2:	460c      	mov	r4, r1
 80040b4:	b10a      	cbz	r2, 80040ba <_printf_common+0x26>
 80040b6:	3301      	adds	r3, #1
 80040b8:	6033      	str	r3, [r6, #0]
 80040ba:	6823      	ldr	r3, [r4, #0]
 80040bc:	0699      	lsls	r1, r3, #26
 80040be:	bf42      	ittt	mi
 80040c0:	6833      	ldrmi	r3, [r6, #0]
 80040c2:	3302      	addmi	r3, #2
 80040c4:	6033      	strmi	r3, [r6, #0]
 80040c6:	6825      	ldr	r5, [r4, #0]
 80040c8:	f015 0506 	ands.w	r5, r5, #6
 80040cc:	d106      	bne.n	80040dc <_printf_common+0x48>
 80040ce:	f104 0a19 	add.w	sl, r4, #25
 80040d2:	68e3      	ldr	r3, [r4, #12]
 80040d4:	6832      	ldr	r2, [r6, #0]
 80040d6:	1a9b      	subs	r3, r3, r2
 80040d8:	42ab      	cmp	r3, r5
 80040da:	dc26      	bgt.n	800412a <_printf_common+0x96>
 80040dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040e0:	1e13      	subs	r3, r2, #0
 80040e2:	6822      	ldr	r2, [r4, #0]
 80040e4:	bf18      	it	ne
 80040e6:	2301      	movne	r3, #1
 80040e8:	0692      	lsls	r2, r2, #26
 80040ea:	d42b      	bmi.n	8004144 <_printf_common+0xb0>
 80040ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040f0:	4649      	mov	r1, r9
 80040f2:	4638      	mov	r0, r7
 80040f4:	47c0      	blx	r8
 80040f6:	3001      	adds	r0, #1
 80040f8:	d01e      	beq.n	8004138 <_printf_common+0xa4>
 80040fa:	6823      	ldr	r3, [r4, #0]
 80040fc:	68e5      	ldr	r5, [r4, #12]
 80040fe:	6832      	ldr	r2, [r6, #0]
 8004100:	f003 0306 	and.w	r3, r3, #6
 8004104:	2b04      	cmp	r3, #4
 8004106:	bf08      	it	eq
 8004108:	1aad      	subeq	r5, r5, r2
 800410a:	68a3      	ldr	r3, [r4, #8]
 800410c:	6922      	ldr	r2, [r4, #16]
 800410e:	bf0c      	ite	eq
 8004110:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004114:	2500      	movne	r5, #0
 8004116:	4293      	cmp	r3, r2
 8004118:	bfc4      	itt	gt
 800411a:	1a9b      	subgt	r3, r3, r2
 800411c:	18ed      	addgt	r5, r5, r3
 800411e:	2600      	movs	r6, #0
 8004120:	341a      	adds	r4, #26
 8004122:	42b5      	cmp	r5, r6
 8004124:	d11a      	bne.n	800415c <_printf_common+0xc8>
 8004126:	2000      	movs	r0, #0
 8004128:	e008      	b.n	800413c <_printf_common+0xa8>
 800412a:	2301      	movs	r3, #1
 800412c:	4652      	mov	r2, sl
 800412e:	4649      	mov	r1, r9
 8004130:	4638      	mov	r0, r7
 8004132:	47c0      	blx	r8
 8004134:	3001      	adds	r0, #1
 8004136:	d103      	bne.n	8004140 <_printf_common+0xac>
 8004138:	f04f 30ff 	mov.w	r0, #4294967295
 800413c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004140:	3501      	adds	r5, #1
 8004142:	e7c6      	b.n	80040d2 <_printf_common+0x3e>
 8004144:	18e1      	adds	r1, r4, r3
 8004146:	1c5a      	adds	r2, r3, #1
 8004148:	2030      	movs	r0, #48	; 0x30
 800414a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800414e:	4422      	add	r2, r4
 8004150:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004154:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004158:	3302      	adds	r3, #2
 800415a:	e7c7      	b.n	80040ec <_printf_common+0x58>
 800415c:	2301      	movs	r3, #1
 800415e:	4622      	mov	r2, r4
 8004160:	4649      	mov	r1, r9
 8004162:	4638      	mov	r0, r7
 8004164:	47c0      	blx	r8
 8004166:	3001      	adds	r0, #1
 8004168:	d0e6      	beq.n	8004138 <_printf_common+0xa4>
 800416a:	3601      	adds	r6, #1
 800416c:	e7d9      	b.n	8004122 <_printf_common+0x8e>
 800416e:	0000      	movs	r0, r0

08004170 <_printf_i>:
 8004170:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004174:	7e0f      	ldrb	r7, [r1, #24]
 8004176:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004178:	2f78      	cmp	r7, #120	; 0x78
 800417a:	4691      	mov	r9, r2
 800417c:	4680      	mov	r8, r0
 800417e:	460c      	mov	r4, r1
 8004180:	469a      	mov	sl, r3
 8004182:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004186:	d807      	bhi.n	8004198 <_printf_i+0x28>
 8004188:	2f62      	cmp	r7, #98	; 0x62
 800418a:	d80a      	bhi.n	80041a2 <_printf_i+0x32>
 800418c:	2f00      	cmp	r7, #0
 800418e:	f000 80d8 	beq.w	8004342 <_printf_i+0x1d2>
 8004192:	2f58      	cmp	r7, #88	; 0x58
 8004194:	f000 80a3 	beq.w	80042de <_printf_i+0x16e>
 8004198:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800419c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80041a0:	e03a      	b.n	8004218 <_printf_i+0xa8>
 80041a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80041a6:	2b15      	cmp	r3, #21
 80041a8:	d8f6      	bhi.n	8004198 <_printf_i+0x28>
 80041aa:	a101      	add	r1, pc, #4	; (adr r1, 80041b0 <_printf_i+0x40>)
 80041ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041b0:	08004209 	.word	0x08004209
 80041b4:	0800421d 	.word	0x0800421d
 80041b8:	08004199 	.word	0x08004199
 80041bc:	08004199 	.word	0x08004199
 80041c0:	08004199 	.word	0x08004199
 80041c4:	08004199 	.word	0x08004199
 80041c8:	0800421d 	.word	0x0800421d
 80041cc:	08004199 	.word	0x08004199
 80041d0:	08004199 	.word	0x08004199
 80041d4:	08004199 	.word	0x08004199
 80041d8:	08004199 	.word	0x08004199
 80041dc:	08004329 	.word	0x08004329
 80041e0:	0800424d 	.word	0x0800424d
 80041e4:	0800430b 	.word	0x0800430b
 80041e8:	08004199 	.word	0x08004199
 80041ec:	08004199 	.word	0x08004199
 80041f0:	0800434b 	.word	0x0800434b
 80041f4:	08004199 	.word	0x08004199
 80041f8:	0800424d 	.word	0x0800424d
 80041fc:	08004199 	.word	0x08004199
 8004200:	08004199 	.word	0x08004199
 8004204:	08004313 	.word	0x08004313
 8004208:	682b      	ldr	r3, [r5, #0]
 800420a:	1d1a      	adds	r2, r3, #4
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	602a      	str	r2, [r5, #0]
 8004210:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004214:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004218:	2301      	movs	r3, #1
 800421a:	e0a3      	b.n	8004364 <_printf_i+0x1f4>
 800421c:	6820      	ldr	r0, [r4, #0]
 800421e:	6829      	ldr	r1, [r5, #0]
 8004220:	0606      	lsls	r6, r0, #24
 8004222:	f101 0304 	add.w	r3, r1, #4
 8004226:	d50a      	bpl.n	800423e <_printf_i+0xce>
 8004228:	680e      	ldr	r6, [r1, #0]
 800422a:	602b      	str	r3, [r5, #0]
 800422c:	2e00      	cmp	r6, #0
 800422e:	da03      	bge.n	8004238 <_printf_i+0xc8>
 8004230:	232d      	movs	r3, #45	; 0x2d
 8004232:	4276      	negs	r6, r6
 8004234:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004238:	485e      	ldr	r0, [pc, #376]	; (80043b4 <_printf_i+0x244>)
 800423a:	230a      	movs	r3, #10
 800423c:	e019      	b.n	8004272 <_printf_i+0x102>
 800423e:	680e      	ldr	r6, [r1, #0]
 8004240:	602b      	str	r3, [r5, #0]
 8004242:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004246:	bf18      	it	ne
 8004248:	b236      	sxthne	r6, r6
 800424a:	e7ef      	b.n	800422c <_printf_i+0xbc>
 800424c:	682b      	ldr	r3, [r5, #0]
 800424e:	6820      	ldr	r0, [r4, #0]
 8004250:	1d19      	adds	r1, r3, #4
 8004252:	6029      	str	r1, [r5, #0]
 8004254:	0601      	lsls	r1, r0, #24
 8004256:	d501      	bpl.n	800425c <_printf_i+0xec>
 8004258:	681e      	ldr	r6, [r3, #0]
 800425a:	e002      	b.n	8004262 <_printf_i+0xf2>
 800425c:	0646      	lsls	r6, r0, #25
 800425e:	d5fb      	bpl.n	8004258 <_printf_i+0xe8>
 8004260:	881e      	ldrh	r6, [r3, #0]
 8004262:	4854      	ldr	r0, [pc, #336]	; (80043b4 <_printf_i+0x244>)
 8004264:	2f6f      	cmp	r7, #111	; 0x6f
 8004266:	bf0c      	ite	eq
 8004268:	2308      	moveq	r3, #8
 800426a:	230a      	movne	r3, #10
 800426c:	2100      	movs	r1, #0
 800426e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004272:	6865      	ldr	r5, [r4, #4]
 8004274:	60a5      	str	r5, [r4, #8]
 8004276:	2d00      	cmp	r5, #0
 8004278:	bfa2      	ittt	ge
 800427a:	6821      	ldrge	r1, [r4, #0]
 800427c:	f021 0104 	bicge.w	r1, r1, #4
 8004280:	6021      	strge	r1, [r4, #0]
 8004282:	b90e      	cbnz	r6, 8004288 <_printf_i+0x118>
 8004284:	2d00      	cmp	r5, #0
 8004286:	d04d      	beq.n	8004324 <_printf_i+0x1b4>
 8004288:	4615      	mov	r5, r2
 800428a:	fbb6 f1f3 	udiv	r1, r6, r3
 800428e:	fb03 6711 	mls	r7, r3, r1, r6
 8004292:	5dc7      	ldrb	r7, [r0, r7]
 8004294:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004298:	4637      	mov	r7, r6
 800429a:	42bb      	cmp	r3, r7
 800429c:	460e      	mov	r6, r1
 800429e:	d9f4      	bls.n	800428a <_printf_i+0x11a>
 80042a0:	2b08      	cmp	r3, #8
 80042a2:	d10b      	bne.n	80042bc <_printf_i+0x14c>
 80042a4:	6823      	ldr	r3, [r4, #0]
 80042a6:	07de      	lsls	r6, r3, #31
 80042a8:	d508      	bpl.n	80042bc <_printf_i+0x14c>
 80042aa:	6923      	ldr	r3, [r4, #16]
 80042ac:	6861      	ldr	r1, [r4, #4]
 80042ae:	4299      	cmp	r1, r3
 80042b0:	bfde      	ittt	le
 80042b2:	2330      	movle	r3, #48	; 0x30
 80042b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80042b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80042bc:	1b52      	subs	r2, r2, r5
 80042be:	6122      	str	r2, [r4, #16]
 80042c0:	f8cd a000 	str.w	sl, [sp]
 80042c4:	464b      	mov	r3, r9
 80042c6:	aa03      	add	r2, sp, #12
 80042c8:	4621      	mov	r1, r4
 80042ca:	4640      	mov	r0, r8
 80042cc:	f7ff fee2 	bl	8004094 <_printf_common>
 80042d0:	3001      	adds	r0, #1
 80042d2:	d14c      	bne.n	800436e <_printf_i+0x1fe>
 80042d4:	f04f 30ff 	mov.w	r0, #4294967295
 80042d8:	b004      	add	sp, #16
 80042da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042de:	4835      	ldr	r0, [pc, #212]	; (80043b4 <_printf_i+0x244>)
 80042e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80042e4:	6829      	ldr	r1, [r5, #0]
 80042e6:	6823      	ldr	r3, [r4, #0]
 80042e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80042ec:	6029      	str	r1, [r5, #0]
 80042ee:	061d      	lsls	r5, r3, #24
 80042f0:	d514      	bpl.n	800431c <_printf_i+0x1ac>
 80042f2:	07df      	lsls	r7, r3, #31
 80042f4:	bf44      	itt	mi
 80042f6:	f043 0320 	orrmi.w	r3, r3, #32
 80042fa:	6023      	strmi	r3, [r4, #0]
 80042fc:	b91e      	cbnz	r6, 8004306 <_printf_i+0x196>
 80042fe:	6823      	ldr	r3, [r4, #0]
 8004300:	f023 0320 	bic.w	r3, r3, #32
 8004304:	6023      	str	r3, [r4, #0]
 8004306:	2310      	movs	r3, #16
 8004308:	e7b0      	b.n	800426c <_printf_i+0xfc>
 800430a:	6823      	ldr	r3, [r4, #0]
 800430c:	f043 0320 	orr.w	r3, r3, #32
 8004310:	6023      	str	r3, [r4, #0]
 8004312:	2378      	movs	r3, #120	; 0x78
 8004314:	4828      	ldr	r0, [pc, #160]	; (80043b8 <_printf_i+0x248>)
 8004316:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800431a:	e7e3      	b.n	80042e4 <_printf_i+0x174>
 800431c:	0659      	lsls	r1, r3, #25
 800431e:	bf48      	it	mi
 8004320:	b2b6      	uxthmi	r6, r6
 8004322:	e7e6      	b.n	80042f2 <_printf_i+0x182>
 8004324:	4615      	mov	r5, r2
 8004326:	e7bb      	b.n	80042a0 <_printf_i+0x130>
 8004328:	682b      	ldr	r3, [r5, #0]
 800432a:	6826      	ldr	r6, [r4, #0]
 800432c:	6961      	ldr	r1, [r4, #20]
 800432e:	1d18      	adds	r0, r3, #4
 8004330:	6028      	str	r0, [r5, #0]
 8004332:	0635      	lsls	r5, r6, #24
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	d501      	bpl.n	800433c <_printf_i+0x1cc>
 8004338:	6019      	str	r1, [r3, #0]
 800433a:	e002      	b.n	8004342 <_printf_i+0x1d2>
 800433c:	0670      	lsls	r0, r6, #25
 800433e:	d5fb      	bpl.n	8004338 <_printf_i+0x1c8>
 8004340:	8019      	strh	r1, [r3, #0]
 8004342:	2300      	movs	r3, #0
 8004344:	6123      	str	r3, [r4, #16]
 8004346:	4615      	mov	r5, r2
 8004348:	e7ba      	b.n	80042c0 <_printf_i+0x150>
 800434a:	682b      	ldr	r3, [r5, #0]
 800434c:	1d1a      	adds	r2, r3, #4
 800434e:	602a      	str	r2, [r5, #0]
 8004350:	681d      	ldr	r5, [r3, #0]
 8004352:	6862      	ldr	r2, [r4, #4]
 8004354:	2100      	movs	r1, #0
 8004356:	4628      	mov	r0, r5
 8004358:	f7fc fbea 	bl	8000b30 <memchr>
 800435c:	b108      	cbz	r0, 8004362 <_printf_i+0x1f2>
 800435e:	1b40      	subs	r0, r0, r5
 8004360:	6060      	str	r0, [r4, #4]
 8004362:	6863      	ldr	r3, [r4, #4]
 8004364:	6123      	str	r3, [r4, #16]
 8004366:	2300      	movs	r3, #0
 8004368:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800436c:	e7a8      	b.n	80042c0 <_printf_i+0x150>
 800436e:	6923      	ldr	r3, [r4, #16]
 8004370:	462a      	mov	r2, r5
 8004372:	4649      	mov	r1, r9
 8004374:	4640      	mov	r0, r8
 8004376:	47d0      	blx	sl
 8004378:	3001      	adds	r0, #1
 800437a:	d0ab      	beq.n	80042d4 <_printf_i+0x164>
 800437c:	6823      	ldr	r3, [r4, #0]
 800437e:	079b      	lsls	r3, r3, #30
 8004380:	d413      	bmi.n	80043aa <_printf_i+0x23a>
 8004382:	68e0      	ldr	r0, [r4, #12]
 8004384:	9b03      	ldr	r3, [sp, #12]
 8004386:	4298      	cmp	r0, r3
 8004388:	bfb8      	it	lt
 800438a:	4618      	movlt	r0, r3
 800438c:	e7a4      	b.n	80042d8 <_printf_i+0x168>
 800438e:	2301      	movs	r3, #1
 8004390:	4632      	mov	r2, r6
 8004392:	4649      	mov	r1, r9
 8004394:	4640      	mov	r0, r8
 8004396:	47d0      	blx	sl
 8004398:	3001      	adds	r0, #1
 800439a:	d09b      	beq.n	80042d4 <_printf_i+0x164>
 800439c:	3501      	adds	r5, #1
 800439e:	68e3      	ldr	r3, [r4, #12]
 80043a0:	9903      	ldr	r1, [sp, #12]
 80043a2:	1a5b      	subs	r3, r3, r1
 80043a4:	42ab      	cmp	r3, r5
 80043a6:	dcf2      	bgt.n	800438e <_printf_i+0x21e>
 80043a8:	e7eb      	b.n	8004382 <_printf_i+0x212>
 80043aa:	2500      	movs	r5, #0
 80043ac:	f104 0619 	add.w	r6, r4, #25
 80043b0:	e7f5      	b.n	800439e <_printf_i+0x22e>
 80043b2:	bf00      	nop
 80043b4:	08005029 	.word	0x08005029
 80043b8:	0800503a 	.word	0x0800503a

080043bc <_putc_r>:
 80043bc:	b570      	push	{r4, r5, r6, lr}
 80043be:	460d      	mov	r5, r1
 80043c0:	4614      	mov	r4, r2
 80043c2:	4606      	mov	r6, r0
 80043c4:	b118      	cbz	r0, 80043ce <_putc_r+0x12>
 80043c6:	6983      	ldr	r3, [r0, #24]
 80043c8:	b90b      	cbnz	r3, 80043ce <_putc_r+0x12>
 80043ca:	f7ff fbe7 	bl	8003b9c <__sinit>
 80043ce:	4b1c      	ldr	r3, [pc, #112]	; (8004440 <_putc_r+0x84>)
 80043d0:	429c      	cmp	r4, r3
 80043d2:	d124      	bne.n	800441e <_putc_r+0x62>
 80043d4:	6874      	ldr	r4, [r6, #4]
 80043d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043d8:	07d8      	lsls	r0, r3, #31
 80043da:	d405      	bmi.n	80043e8 <_putc_r+0x2c>
 80043dc:	89a3      	ldrh	r3, [r4, #12]
 80043de:	0599      	lsls	r1, r3, #22
 80043e0:	d402      	bmi.n	80043e8 <_putc_r+0x2c>
 80043e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043e4:	f7ff fc8a 	bl	8003cfc <__retarget_lock_acquire_recursive>
 80043e8:	68a3      	ldr	r3, [r4, #8]
 80043ea:	3b01      	subs	r3, #1
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	60a3      	str	r3, [r4, #8]
 80043f0:	da05      	bge.n	80043fe <_putc_r+0x42>
 80043f2:	69a2      	ldr	r2, [r4, #24]
 80043f4:	4293      	cmp	r3, r2
 80043f6:	db1c      	blt.n	8004432 <_putc_r+0x76>
 80043f8:	b2eb      	uxtb	r3, r5
 80043fa:	2b0a      	cmp	r3, #10
 80043fc:	d019      	beq.n	8004432 <_putc_r+0x76>
 80043fe:	6823      	ldr	r3, [r4, #0]
 8004400:	1c5a      	adds	r2, r3, #1
 8004402:	6022      	str	r2, [r4, #0]
 8004404:	701d      	strb	r5, [r3, #0]
 8004406:	b2ed      	uxtb	r5, r5
 8004408:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800440a:	07da      	lsls	r2, r3, #31
 800440c:	d405      	bmi.n	800441a <_putc_r+0x5e>
 800440e:	89a3      	ldrh	r3, [r4, #12]
 8004410:	059b      	lsls	r3, r3, #22
 8004412:	d402      	bmi.n	800441a <_putc_r+0x5e>
 8004414:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004416:	f7ff fc72 	bl	8003cfe <__retarget_lock_release_recursive>
 800441a:	4628      	mov	r0, r5
 800441c:	bd70      	pop	{r4, r5, r6, pc}
 800441e:	4b09      	ldr	r3, [pc, #36]	; (8004444 <_putc_r+0x88>)
 8004420:	429c      	cmp	r4, r3
 8004422:	d101      	bne.n	8004428 <_putc_r+0x6c>
 8004424:	68b4      	ldr	r4, [r6, #8]
 8004426:	e7d6      	b.n	80043d6 <_putc_r+0x1a>
 8004428:	4b07      	ldr	r3, [pc, #28]	; (8004448 <_putc_r+0x8c>)
 800442a:	429c      	cmp	r4, r3
 800442c:	bf08      	it	eq
 800442e:	68f4      	ldreq	r4, [r6, #12]
 8004430:	e7d1      	b.n	80043d6 <_putc_r+0x1a>
 8004432:	4629      	mov	r1, r5
 8004434:	4622      	mov	r2, r4
 8004436:	4630      	mov	r0, r6
 8004438:	f7ff f9bc 	bl	80037b4 <__swbuf_r>
 800443c:	4605      	mov	r5, r0
 800443e:	e7e3      	b.n	8004408 <_putc_r+0x4c>
 8004440:	08004fd8 	.word	0x08004fd8
 8004444:	08004ff8 	.word	0x08004ff8
 8004448:	08004fb8 	.word	0x08004fb8

0800444c <__sread>:
 800444c:	b510      	push	{r4, lr}
 800444e:	460c      	mov	r4, r1
 8004450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004454:	f000 f89c 	bl	8004590 <_read_r>
 8004458:	2800      	cmp	r0, #0
 800445a:	bfab      	itete	ge
 800445c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800445e:	89a3      	ldrhlt	r3, [r4, #12]
 8004460:	181b      	addge	r3, r3, r0
 8004462:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004466:	bfac      	ite	ge
 8004468:	6563      	strge	r3, [r4, #84]	; 0x54
 800446a:	81a3      	strhlt	r3, [r4, #12]
 800446c:	bd10      	pop	{r4, pc}

0800446e <__swrite>:
 800446e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004472:	461f      	mov	r7, r3
 8004474:	898b      	ldrh	r3, [r1, #12]
 8004476:	05db      	lsls	r3, r3, #23
 8004478:	4605      	mov	r5, r0
 800447a:	460c      	mov	r4, r1
 800447c:	4616      	mov	r6, r2
 800447e:	d505      	bpl.n	800448c <__swrite+0x1e>
 8004480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004484:	2302      	movs	r3, #2
 8004486:	2200      	movs	r2, #0
 8004488:	f000 f870 	bl	800456c <_lseek_r>
 800448c:	89a3      	ldrh	r3, [r4, #12]
 800448e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004492:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004496:	81a3      	strh	r3, [r4, #12]
 8004498:	4632      	mov	r2, r6
 800449a:	463b      	mov	r3, r7
 800449c:	4628      	mov	r0, r5
 800449e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044a2:	f000 b817 	b.w	80044d4 <_write_r>

080044a6 <__sseek>:
 80044a6:	b510      	push	{r4, lr}
 80044a8:	460c      	mov	r4, r1
 80044aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044ae:	f000 f85d 	bl	800456c <_lseek_r>
 80044b2:	1c43      	adds	r3, r0, #1
 80044b4:	89a3      	ldrh	r3, [r4, #12]
 80044b6:	bf15      	itete	ne
 80044b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80044ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80044be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80044c2:	81a3      	strheq	r3, [r4, #12]
 80044c4:	bf18      	it	ne
 80044c6:	81a3      	strhne	r3, [r4, #12]
 80044c8:	bd10      	pop	{r4, pc}

080044ca <__sclose>:
 80044ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044ce:	f000 b81b 	b.w	8004508 <_close_r>
 80044d2:	0000      	movs	r0, r0

080044d4 <_write_r>:
 80044d4:	b538      	push	{r3, r4, r5, lr}
 80044d6:	4d07      	ldr	r5, [pc, #28]	; (80044f4 <_write_r+0x20>)
 80044d8:	4604      	mov	r4, r0
 80044da:	4608      	mov	r0, r1
 80044dc:	4611      	mov	r1, r2
 80044de:	2200      	movs	r2, #0
 80044e0:	602a      	str	r2, [r5, #0]
 80044e2:	461a      	mov	r2, r3
 80044e4:	f000 f8e2 	bl	80046ac <_write>
 80044e8:	1c43      	adds	r3, r0, #1
 80044ea:	d102      	bne.n	80044f2 <_write_r+0x1e>
 80044ec:	682b      	ldr	r3, [r5, #0]
 80044ee:	b103      	cbz	r3, 80044f2 <_write_r+0x1e>
 80044f0:	6023      	str	r3, [r4, #0]
 80044f2:	bd38      	pop	{r3, r4, r5, pc}
 80044f4:	200001d8 	.word	0x200001d8

080044f8 <abort>:
 80044f8:	b508      	push	{r3, lr}
 80044fa:	2006      	movs	r0, #6
 80044fc:	f000 f882 	bl	8004604 <raise>
 8004500:	2001      	movs	r0, #1
 8004502:	f000 f8db 	bl	80046bc <_exit>
 8004506:	0000      	movs	r0, r0

08004508 <_close_r>:
 8004508:	b538      	push	{r3, r4, r5, lr}
 800450a:	4d06      	ldr	r5, [pc, #24]	; (8004524 <_close_r+0x1c>)
 800450c:	2300      	movs	r3, #0
 800450e:	4604      	mov	r4, r0
 8004510:	4608      	mov	r0, r1
 8004512:	602b      	str	r3, [r5, #0]
 8004514:	f000 f892 	bl	800463c <_close>
 8004518:	1c43      	adds	r3, r0, #1
 800451a:	d102      	bne.n	8004522 <_close_r+0x1a>
 800451c:	682b      	ldr	r3, [r5, #0]
 800451e:	b103      	cbz	r3, 8004522 <_close_r+0x1a>
 8004520:	6023      	str	r3, [r4, #0]
 8004522:	bd38      	pop	{r3, r4, r5, pc}
 8004524:	200001d8 	.word	0x200001d8

08004528 <_fstat_r>:
 8004528:	b538      	push	{r3, r4, r5, lr}
 800452a:	4d07      	ldr	r5, [pc, #28]	; (8004548 <_fstat_r+0x20>)
 800452c:	2300      	movs	r3, #0
 800452e:	4604      	mov	r4, r0
 8004530:	4608      	mov	r0, r1
 8004532:	4611      	mov	r1, r2
 8004534:	602b      	str	r3, [r5, #0]
 8004536:	f000 f889 	bl	800464c <_fstat>
 800453a:	1c43      	adds	r3, r0, #1
 800453c:	d102      	bne.n	8004544 <_fstat_r+0x1c>
 800453e:	682b      	ldr	r3, [r5, #0]
 8004540:	b103      	cbz	r3, 8004544 <_fstat_r+0x1c>
 8004542:	6023      	str	r3, [r4, #0]
 8004544:	bd38      	pop	{r3, r4, r5, pc}
 8004546:	bf00      	nop
 8004548:	200001d8 	.word	0x200001d8

0800454c <_isatty_r>:
 800454c:	b538      	push	{r3, r4, r5, lr}
 800454e:	4d06      	ldr	r5, [pc, #24]	; (8004568 <_isatty_r+0x1c>)
 8004550:	2300      	movs	r3, #0
 8004552:	4604      	mov	r4, r0
 8004554:	4608      	mov	r0, r1
 8004556:	602b      	str	r3, [r5, #0]
 8004558:	f000 f888 	bl	800466c <_isatty>
 800455c:	1c43      	adds	r3, r0, #1
 800455e:	d102      	bne.n	8004566 <_isatty_r+0x1a>
 8004560:	682b      	ldr	r3, [r5, #0]
 8004562:	b103      	cbz	r3, 8004566 <_isatty_r+0x1a>
 8004564:	6023      	str	r3, [r4, #0]
 8004566:	bd38      	pop	{r3, r4, r5, pc}
 8004568:	200001d8 	.word	0x200001d8

0800456c <_lseek_r>:
 800456c:	b538      	push	{r3, r4, r5, lr}
 800456e:	4d07      	ldr	r5, [pc, #28]	; (800458c <_lseek_r+0x20>)
 8004570:	4604      	mov	r4, r0
 8004572:	4608      	mov	r0, r1
 8004574:	4611      	mov	r1, r2
 8004576:	2200      	movs	r2, #0
 8004578:	602a      	str	r2, [r5, #0]
 800457a:	461a      	mov	r2, r3
 800457c:	f000 f886 	bl	800468c <_lseek>
 8004580:	1c43      	adds	r3, r0, #1
 8004582:	d102      	bne.n	800458a <_lseek_r+0x1e>
 8004584:	682b      	ldr	r3, [r5, #0]
 8004586:	b103      	cbz	r3, 800458a <_lseek_r+0x1e>
 8004588:	6023      	str	r3, [r4, #0]
 800458a:	bd38      	pop	{r3, r4, r5, pc}
 800458c:	200001d8 	.word	0x200001d8

08004590 <_read_r>:
 8004590:	b538      	push	{r3, r4, r5, lr}
 8004592:	4d07      	ldr	r5, [pc, #28]	; (80045b0 <_read_r+0x20>)
 8004594:	4604      	mov	r4, r0
 8004596:	4608      	mov	r0, r1
 8004598:	4611      	mov	r1, r2
 800459a:	2200      	movs	r2, #0
 800459c:	602a      	str	r2, [r5, #0]
 800459e:	461a      	mov	r2, r3
 80045a0:	f000 f87c 	bl	800469c <_read>
 80045a4:	1c43      	adds	r3, r0, #1
 80045a6:	d102      	bne.n	80045ae <_read_r+0x1e>
 80045a8:	682b      	ldr	r3, [r5, #0]
 80045aa:	b103      	cbz	r3, 80045ae <_read_r+0x1e>
 80045ac:	6023      	str	r3, [r4, #0]
 80045ae:	bd38      	pop	{r3, r4, r5, pc}
 80045b0:	200001d8 	.word	0x200001d8

080045b4 <_raise_r>:
 80045b4:	291f      	cmp	r1, #31
 80045b6:	b538      	push	{r3, r4, r5, lr}
 80045b8:	4604      	mov	r4, r0
 80045ba:	460d      	mov	r5, r1
 80045bc:	d904      	bls.n	80045c8 <_raise_r+0x14>
 80045be:	2316      	movs	r3, #22
 80045c0:	6003      	str	r3, [r0, #0]
 80045c2:	f04f 30ff 	mov.w	r0, #4294967295
 80045c6:	bd38      	pop	{r3, r4, r5, pc}
 80045c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80045ca:	b112      	cbz	r2, 80045d2 <_raise_r+0x1e>
 80045cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80045d0:	b94b      	cbnz	r3, 80045e6 <_raise_r+0x32>
 80045d2:	4620      	mov	r0, r4
 80045d4:	f000 f830 	bl	8004638 <_getpid_r>
 80045d8:	462a      	mov	r2, r5
 80045da:	4601      	mov	r1, r0
 80045dc:	4620      	mov	r0, r4
 80045de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045e2:	f000 b817 	b.w	8004614 <_kill_r>
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d00a      	beq.n	8004600 <_raise_r+0x4c>
 80045ea:	1c59      	adds	r1, r3, #1
 80045ec:	d103      	bne.n	80045f6 <_raise_r+0x42>
 80045ee:	2316      	movs	r3, #22
 80045f0:	6003      	str	r3, [r0, #0]
 80045f2:	2001      	movs	r0, #1
 80045f4:	e7e7      	b.n	80045c6 <_raise_r+0x12>
 80045f6:	2400      	movs	r4, #0
 80045f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80045fc:	4628      	mov	r0, r5
 80045fe:	4798      	blx	r3
 8004600:	2000      	movs	r0, #0
 8004602:	e7e0      	b.n	80045c6 <_raise_r+0x12>

08004604 <raise>:
 8004604:	4b02      	ldr	r3, [pc, #8]	; (8004610 <raise+0xc>)
 8004606:	4601      	mov	r1, r0
 8004608:	6818      	ldr	r0, [r3, #0]
 800460a:	f7ff bfd3 	b.w	80045b4 <_raise_r>
 800460e:	bf00      	nop
 8004610:	20000004 	.word	0x20000004

08004614 <_kill_r>:
 8004614:	b538      	push	{r3, r4, r5, lr}
 8004616:	4d07      	ldr	r5, [pc, #28]	; (8004634 <_kill_r+0x20>)
 8004618:	2300      	movs	r3, #0
 800461a:	4604      	mov	r4, r0
 800461c:	4608      	mov	r0, r1
 800461e:	4611      	mov	r1, r2
 8004620:	602b      	str	r3, [r5, #0]
 8004622:	f000 f82b 	bl	800467c <_kill>
 8004626:	1c43      	adds	r3, r0, #1
 8004628:	d102      	bne.n	8004630 <_kill_r+0x1c>
 800462a:	682b      	ldr	r3, [r5, #0]
 800462c:	b103      	cbz	r3, 8004630 <_kill_r+0x1c>
 800462e:	6023      	str	r3, [r4, #0]
 8004630:	bd38      	pop	{r3, r4, r5, pc}
 8004632:	bf00      	nop
 8004634:	200001d8 	.word	0x200001d8

08004638 <_getpid_r>:
 8004638:	f000 b810 	b.w	800465c <_getpid>

0800463c <_close>:
 800463c:	4b02      	ldr	r3, [pc, #8]	; (8004648 <_close+0xc>)
 800463e:	2258      	movs	r2, #88	; 0x58
 8004640:	601a      	str	r2, [r3, #0]
 8004642:	f04f 30ff 	mov.w	r0, #4294967295
 8004646:	4770      	bx	lr
 8004648:	200001d8 	.word	0x200001d8

0800464c <_fstat>:
 800464c:	4b02      	ldr	r3, [pc, #8]	; (8004658 <_fstat+0xc>)
 800464e:	2258      	movs	r2, #88	; 0x58
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	f04f 30ff 	mov.w	r0, #4294967295
 8004656:	4770      	bx	lr
 8004658:	200001d8 	.word	0x200001d8

0800465c <_getpid>:
 800465c:	4b02      	ldr	r3, [pc, #8]	; (8004668 <_getpid+0xc>)
 800465e:	2258      	movs	r2, #88	; 0x58
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	f04f 30ff 	mov.w	r0, #4294967295
 8004666:	4770      	bx	lr
 8004668:	200001d8 	.word	0x200001d8

0800466c <_isatty>:
 800466c:	4b02      	ldr	r3, [pc, #8]	; (8004678 <_isatty+0xc>)
 800466e:	2258      	movs	r2, #88	; 0x58
 8004670:	601a      	str	r2, [r3, #0]
 8004672:	2000      	movs	r0, #0
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	200001d8 	.word	0x200001d8

0800467c <_kill>:
 800467c:	4b02      	ldr	r3, [pc, #8]	; (8004688 <_kill+0xc>)
 800467e:	2258      	movs	r2, #88	; 0x58
 8004680:	601a      	str	r2, [r3, #0]
 8004682:	f04f 30ff 	mov.w	r0, #4294967295
 8004686:	4770      	bx	lr
 8004688:	200001d8 	.word	0x200001d8

0800468c <_lseek>:
 800468c:	4b02      	ldr	r3, [pc, #8]	; (8004698 <_lseek+0xc>)
 800468e:	2258      	movs	r2, #88	; 0x58
 8004690:	601a      	str	r2, [r3, #0]
 8004692:	f04f 30ff 	mov.w	r0, #4294967295
 8004696:	4770      	bx	lr
 8004698:	200001d8 	.word	0x200001d8

0800469c <_read>:
 800469c:	4b02      	ldr	r3, [pc, #8]	; (80046a8 <_read+0xc>)
 800469e:	2258      	movs	r2, #88	; 0x58
 80046a0:	601a      	str	r2, [r3, #0]
 80046a2:	f04f 30ff 	mov.w	r0, #4294967295
 80046a6:	4770      	bx	lr
 80046a8:	200001d8 	.word	0x200001d8

080046ac <_write>:
 80046ac:	4b02      	ldr	r3, [pc, #8]	; (80046b8 <_write+0xc>)
 80046ae:	2258      	movs	r2, #88	; 0x58
 80046b0:	601a      	str	r2, [r3, #0]
 80046b2:	f04f 30ff 	mov.w	r0, #4294967295
 80046b6:	4770      	bx	lr
 80046b8:	200001d8 	.word	0x200001d8

080046bc <_exit>:
 80046bc:	e7fe      	b.n	80046bc <_exit>
 80046be:	bf00      	nop

080046c0 <_init>:
 80046c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046c2:	bf00      	nop
 80046c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046c6:	bc08      	pop	{r3}
 80046c8:	469e      	mov	lr, r3
 80046ca:	4770      	bx	lr

080046cc <_fini>:
 80046cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ce:	bf00      	nop
 80046d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046d2:	bc08      	pop	{r3}
 80046d4:	469e      	mov	lr, r3
 80046d6:	4770      	bx	lr
