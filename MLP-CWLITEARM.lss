
MLP-CWLITEARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011a4  08004c30  08004c30  00014c30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dd4  08005dd4  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08005dd4  08005dd4  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005dd4  08005dd4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005dd4  08005dd4  00015dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005dd8  08005dd8  00015dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005ddc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000068  08005e44  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  200001dc  08005e44  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005eb0  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f4b  00000000  00000000  00025f42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000351f  00000000  00000000  00026e8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000218  00000000  00000000  0002a3ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000004d0  00000000  00000000  0002a5c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003938  00000000  00000000  0002aa94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00001acc  00000000  00000000  0002e3cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000004d  00000000  00000000  0002fe98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019d8  00000000  00000000  0002fee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000021c  00000000  00000000  000318c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000291  00000000  00000000  00031adc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004c14 	.word	0x08004c14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004c14 	.word	0x08004c14

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	0000      	movs	r0, r0
 8000ace:	0000      	movs	r0, r0

08000ad0 <memchr>:
 8000ad0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000ad4:	2a10      	cmp	r2, #16
 8000ad6:	db2b      	blt.n	8000b30 <memchr+0x60>
 8000ad8:	f010 0f07 	tst.w	r0, #7
 8000adc:	d008      	beq.n	8000af0 <memchr+0x20>
 8000ade:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000ae2:	3a01      	subs	r2, #1
 8000ae4:	428b      	cmp	r3, r1
 8000ae6:	d02d      	beq.n	8000b44 <memchr+0x74>
 8000ae8:	f010 0f07 	tst.w	r0, #7
 8000aec:	b342      	cbz	r2, 8000b40 <memchr+0x70>
 8000aee:	d1f6      	bne.n	8000ade <memchr+0xe>
 8000af0:	b4f0      	push	{r4, r5, r6, r7}
 8000af2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000af6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8000afa:	f022 0407 	bic.w	r4, r2, #7
 8000afe:	f07f 0700 	mvns.w	r7, #0
 8000b02:	2300      	movs	r3, #0
 8000b04:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000b08:	3c08      	subs	r4, #8
 8000b0a:	ea85 0501 	eor.w	r5, r5, r1
 8000b0e:	ea86 0601 	eor.w	r6, r6, r1
 8000b12:	fa85 f547 	uadd8	r5, r5, r7
 8000b16:	faa3 f587 	sel	r5, r3, r7
 8000b1a:	fa86 f647 	uadd8	r6, r6, r7
 8000b1e:	faa5 f687 	sel	r6, r5, r7
 8000b22:	b98e      	cbnz	r6, 8000b48 <memchr+0x78>
 8000b24:	d1ee      	bne.n	8000b04 <memchr+0x34>
 8000b26:	bcf0      	pop	{r4, r5, r6, r7}
 8000b28:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000b2c:	f002 0207 	and.w	r2, r2, #7
 8000b30:	b132      	cbz	r2, 8000b40 <memchr+0x70>
 8000b32:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000b36:	3a01      	subs	r2, #1
 8000b38:	ea83 0301 	eor.w	r3, r3, r1
 8000b3c:	b113      	cbz	r3, 8000b44 <memchr+0x74>
 8000b3e:	d1f8      	bne.n	8000b32 <memchr+0x62>
 8000b40:	2000      	movs	r0, #0
 8000b42:	4770      	bx	lr
 8000b44:	3801      	subs	r0, #1
 8000b46:	4770      	bx	lr
 8000b48:	2d00      	cmp	r5, #0
 8000b4a:	bf06      	itte	eq
 8000b4c:	4635      	moveq	r5, r6
 8000b4e:	3803      	subeq	r0, #3
 8000b50:	3807      	subne	r0, #7
 8000b52:	f015 0f01 	tst.w	r5, #1
 8000b56:	d107      	bne.n	8000b68 <memchr+0x98>
 8000b58:	3001      	adds	r0, #1
 8000b5a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8000b5e:	bf02      	ittt	eq
 8000b60:	3001      	addeq	r0, #1
 8000b62:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000b66:	3001      	addeq	r0, #1
 8000b68:	bcf0      	pop	{r4, r5, r6, r7}
 8000b6a:	3801      	subs	r0, #1
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <strcmp>:
 8000b70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000b74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000b78:	2a01      	cmp	r2, #1
 8000b7a:	bf28      	it	cs
 8000b7c:	429a      	cmpcs	r2, r3
 8000b7e:	d0f7      	beq.n	8000b70 <strcmp>
 8000b80:	1ad0      	subs	r0, r2, r3
 8000b82:	4770      	bx	lr

08000b84 <strlen>:
 8000b84:	4603      	mov	r3, r0
 8000b86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b8a:	2a00      	cmp	r2, #0
 8000b8c:	d1fb      	bne.n	8000b86 <strlen+0x2>
 8000b8e:	1a18      	subs	r0, r3, r0
 8000b90:	3801      	subs	r0, #1
 8000b92:	4770      	bx	lr

08000b94 <mlp>:

//     // Return a dummy value (assuming simpleserial_addcmd doesn't need a meaningful return value)
//     return 0;
// }

uint8_t  mlp(uint8_t arg1, uint8_t arg2, uint8_t arg3, uint8_t *arg4) {
 8000b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // putch(' ');
    // putch('\n');


    //HARDCODED VALS
    char *hardcoded_args[] = {
 8000b98:	4daf      	ldr	r5, [pc, #700]	; (8000e58 <mlp+0x2c4>)
uint8_t  mlp(uint8_t arg1, uint8_t arg2, uint8_t arg3, uint8_t *arg4) {
 8000b9a:	f6ad 2dcc 	subw	sp, sp, #2764	; 0xacc
    simpleserial_put('r', 1, (uint8_t *)0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	2072      	movs	r0, #114	; 0x72
 8000ba4:	f000 feae 	bl	8001904 <simpleserial_put>
    char *hardcoded_args[] = {
 8000ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000baa:	ac05      	add	r4, sp, #20
 8000bac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    };

    int new_argc = sizeof(hardcoded_args) / sizeof(char *) - 1; // Exclude the NULL sentinel

    // Allocate memory for the new new_argv
    char **new_argv = (char **)malloc(new_argc * sizeof(char *));
 8000bbe:	2038      	movs	r0, #56	; 0x38
 8000bc0:	f003 f80c 	bl	8003bdc <malloc>
 8000bc4:	ac05      	add	r4, sp, #20
 8000bc6:	4605      	mov	r5, r0

    // Copy the hardcoded strings to the new new_argv
    for (int i = 0; i < new_argc; i++) {
 8000bc8:	1f06      	subs	r6, r0, #4
 8000bca:	f100 0834 	add.w	r8, r0, #52	; 0x34
        new_argv[i] = (char *)malloc((strlen(hardcoded_args[i]) + 1) * sizeof(char));
 8000bce:	f854 7b04 	ldr.w	r7, [r4], #4
 8000bd2:	4638      	mov	r0, r7
 8000bd4:	f7ff ffd6 	bl	8000b84 <strlen>
 8000bd8:	3001      	adds	r0, #1
 8000bda:	f002 ffff 	bl	8003bdc <malloc>
 8000bde:	f846 0f04 	str.w	r0, [r6, #4]!
        strcpy(new_argv[i], hardcoded_args[i]);
 8000be2:	4639      	mov	r1, r7
 8000be4:	f003 fcc5 	bl	8004572 <strcpy>
    for (int i = 0; i < new_argc; i++) {
 8000be8:	4546      	cmp	r6, r8
 8000bea:	d1f0      	bne.n	8000bce <mlp+0x3a>
    //     exit(0);
    // }


    // Create memory for training parameters struct
    param = (parameters*)malloc(sizeof(parameters));
 8000bec:	2040      	movs	r0, #64	; 0x40
 8000bee:	f002 fff5 	bl	8003bdc <malloc>
 8000bf2:	4c9a      	ldr	r4, [pc, #616]	; (8000e5c <mlp+0x2c8>)
 8000bf4:	4606      	mov	r6, r0
 8000bf6:	6020      	str	r0, [r4, #0]

    // Number of hidden layers
    param->n_hidden = atoi(new_argv[1]);
 8000bf8:	6868      	ldr	r0, [r5, #4]
 8000bfa:	f002 fb95 	bl	8003328 <atoi>
 8000bfe:	6030      	str	r0, [r6, #0]
    // Sanity check of number of hidden layers
    if (param->n_hidden < 0) {
 8000c00:	6826      	ldr	r6, [r4, #0]
 8000c02:	6830      	ldr	r0, [r6, #0]
 8000c04:	2800      	cmp	r0, #0
 8000c06:	da05      	bge.n	8000c14 <mlp+0x80>
        printf("Error: Number of hidden layers should be >= 0\n");
 8000c08:	4895      	ldr	r0, [pc, #596]	; (8000e60 <mlp+0x2cc>)
    char* tok;
    for (i = 0, tok = strtok(new_argv[2], ","); i < param->n_hidden; i++) {
        param->hidden_layers_size[i] = atoi(tok);
        // Sanity check of size of hidden layer
        if (param->hidden_layers_size[i] <= 0) {
            printf("Error: Hidden layer sizes should be positive\n");
 8000c0a:	f003 fc57 	bl	80044bc <puts>
            exit(0);
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f002 fb9c 	bl	800334c <exit>
    param->hidden_layers_size = (int*)malloc(param->n_hidden * sizeof(int));
 8000c14:	0080      	lsls	r0, r0, #2
 8000c16:	f002 ffe1 	bl	8003bdc <malloc>
    for (i = 0, tok = strtok(new_argv[2], ","); i < param->n_hidden; i++) {
 8000c1a:	4992      	ldr	r1, [pc, #584]	; (8000e64 <mlp+0x2d0>)
    param->hidden_layers_size = (int*)malloc(param->n_hidden * sizeof(int));
 8000c1c:	6070      	str	r0, [r6, #4]
    for (i = 0, tok = strtok(new_argv[2], ","); i < param->n_hidden; i++) {
 8000c1e:	68a8      	ldr	r0, [r5, #8]
        }
        tok = strtok(NULL, ",");
 8000c20:	f8df 8240 	ldr.w	r8, [pc, #576]	; 8000e64 <mlp+0x2d0>
    for (i = 0, tok = strtok(new_argv[2], ","); i < param->n_hidden; i++) {
 8000c24:	f003 fcae 	bl	8004584 <strtok>
 8000c28:	2600      	movs	r6, #0
 8000c2a:	6827      	ldr	r7, [r4, #0]
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	42b3      	cmp	r3, r6
 8000c30:	dc1c      	bgt.n	8000c6c <mlp+0xd8>
    }

    // Hidden activation functions - Activation functions for each hidden layer
    param->hidden_activation_functions = (int*)malloc(param->n_hidden * sizeof(int));
 8000c32:	0098      	lsls	r0, r3, #2
 8000c34:	f002 ffd2 	bl	8003bdc <malloc>
    for (i = 0, tok = strtok(new_argv[3], ","); i < param->n_hidden; i++) {
 8000c38:	498a      	ldr	r1, [pc, #552]	; (8000e64 <mlp+0x2d0>)
    param->hidden_activation_functions = (int*)malloc(param->n_hidden * sizeof(int));
 8000c3a:	60b8      	str	r0, [r7, #8]
    for (i = 0, tok = strtok(new_argv[3], ","); i < param->n_hidden; i++) {
 8000c3c:	68e8      	ldr	r0, [r5, #12]
        if (strcmp(tok, "identity") == 0) {
            param->hidden_activation_functions[i] = 1;
        }
        else if (strcmp(tok, "sigmoid") == 0) {
 8000c3e:	f8df a228 	ldr.w	sl, [pc, #552]	; 8000e68 <mlp+0x2d4>
            param->hidden_activation_functions[i] = 2;
        }
        else if (strcmp(tok, "tanh") == 0) {
 8000c42:	f8df b228 	ldr.w	fp, [pc, #552]	; 8000e6c <mlp+0x2d8>
    for (i = 0, tok = strtok(new_argv[3], ","); i < param->n_hidden; i++) {
 8000c46:	f003 fc9d 	bl	8004584 <strtok>
 8000c4a:	2600      	movs	r6, #0
 8000c4c:	4681      	mov	r9, r0
 8000c4e:	46b0      	mov	r8, r6
 8000c50:	6827      	ldr	r7, [r4, #0]
 8000c52:	683a      	ldr	r2, [r7, #0]
 8000c54:	4542      	cmp	r2, r8
 8000c56:	dc1c      	bgt.n	8000c92 <mlp+0xfe>

        tok = strtok(NULL, ",");
    }

    // Output layer size
    param->output_layer_size = atoi(new_argv[4]);
 8000c58:	6928      	ldr	r0, [r5, #16]
 8000c5a:	f002 fb65 	bl	8003328 <atoi>
    if (param->output_layer_size <= 0) {
 8000c5e:	6826      	ldr	r6, [r4, #0]
    param->output_layer_size = atoi(new_argv[4]);
 8000c60:	6238      	str	r0, [r7, #32]
    if (param->output_layer_size <= 0) {
 8000c62:	6a33      	ldr	r3, [r6, #32]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	dc4a      	bgt.n	8000cfe <mlp+0x16a>
        printf("Output layer size should be positive\n");
 8000c68:	4881      	ldr	r0, [pc, #516]	; (8000e70 <mlp+0x2dc>)
 8000c6a:	e7ce      	b.n	8000c0a <mlp+0x76>
        param->hidden_layers_size[i] = atoi(tok);
 8000c6c:	687f      	ldr	r7, [r7, #4]
 8000c6e:	f002 fb5b 	bl	8003328 <atoi>
        if (param->hidden_layers_size[i] <= 0) {
 8000c72:	6823      	ldr	r3, [r4, #0]
        param->hidden_layers_size[i] = atoi(tok);
 8000c74:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
        if (param->hidden_layers_size[i] <= 0) {
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	dc01      	bgt.n	8000c86 <mlp+0xf2>
            printf("Error: Hidden layer sizes should be positive\n");
 8000c82:	487c      	ldr	r0, [pc, #496]	; (8000e74 <mlp+0x2e0>)
 8000c84:	e7c1      	b.n	8000c0a <mlp+0x76>
        tok = strtok(NULL, ",");
 8000c86:	4641      	mov	r1, r8
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f003 fc7b 	bl	8004584 <strtok>
    for (i = 0, tok = strtok(new_argv[2], ","); i < param->n_hidden; i++) {
 8000c8e:	3601      	adds	r6, #1
 8000c90:	e7cb      	b.n	8000c2a <mlp+0x96>
        if (strcmp(tok, "identity") == 0) {
 8000c92:	4979      	ldr	r1, [pc, #484]	; (8000e78 <mlp+0x2e4>)
 8000c94:	4648      	mov	r0, r9
 8000c96:	f7ff ff6b 	bl	8000b70 <strcmp>
 8000c9a:	b958      	cbnz	r0, 8000cb4 <mlp+0x120>
            param->hidden_activation_functions[i] = 1;
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	2201      	movs	r2, #1
            param->hidden_activation_functions[i] = 5;
 8000ca0:	519a      	str	r2, [r3, r6]
        tok = strtok(NULL, ",");
 8000ca2:	4970      	ldr	r1, [pc, #448]	; (8000e64 <mlp+0x2d0>)
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	f003 fc6d 	bl	8004584 <strtok>
    for (i = 0, tok = strtok(new_argv[3], ","); i < param->n_hidden; i++) {
 8000caa:	f108 0801 	add.w	r8, r8, #1
        tok = strtok(NULL, ",");
 8000cae:	4681      	mov	r9, r0
    for (i = 0, tok = strtok(new_argv[3], ","); i < param->n_hidden; i++) {
 8000cb0:	3604      	adds	r6, #4
 8000cb2:	e7cd      	b.n	8000c50 <mlp+0xbc>
        else if (strcmp(tok, "sigmoid") == 0) {
 8000cb4:	4651      	mov	r1, sl
 8000cb6:	4648      	mov	r0, r9
 8000cb8:	f7ff ff5a 	bl	8000b70 <strcmp>
 8000cbc:	b910      	cbnz	r0, 8000cc4 <mlp+0x130>
            param->hidden_activation_functions[i] = 2;
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	2202      	movs	r2, #2
 8000cc2:	e7ed      	b.n	8000ca0 <mlp+0x10c>
        else if (strcmp(tok, "tanh") == 0) {
 8000cc4:	4659      	mov	r1, fp
 8000cc6:	4648      	mov	r0, r9
 8000cc8:	f7ff ff52 	bl	8000b70 <strcmp>
 8000ccc:	b910      	cbnz	r0, 8000cd4 <mlp+0x140>
            param->hidden_activation_functions[i] = 3;
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	2203      	movs	r2, #3
 8000cd2:	e7e5      	b.n	8000ca0 <mlp+0x10c>
        else if (strcmp(tok, "relu") == 0) {
 8000cd4:	4969      	ldr	r1, [pc, #420]	; (8000e7c <mlp+0x2e8>)
 8000cd6:	4648      	mov	r0, r9
 8000cd8:	f7ff ff4a 	bl	8000b70 <strcmp>
 8000cdc:	b910      	cbnz	r0, 8000ce4 <mlp+0x150>
            param->hidden_activation_functions[i] = 4;
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	2204      	movs	r2, #4
 8000ce2:	e7dd      	b.n	8000ca0 <mlp+0x10c>
        else if (strcmp(tok, "softmax") == 0) {
 8000ce4:	4966      	ldr	r1, [pc, #408]	; (8000e80 <mlp+0x2ec>)
 8000ce6:	4648      	mov	r0, r9
 8000ce8:	f7ff ff42 	bl	8000b70 <strcmp>
 8000cec:	b910      	cbnz	r0, 8000cf4 <mlp+0x160>
            param->hidden_activation_functions[i] = 5;
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	2205      	movs	r2, #5
 8000cf2:	e7d5      	b.n	8000ca0 <mlp+0x10c>
            printf("Error: Invalid value for hidden activation function\n");
 8000cf4:	4863      	ldr	r0, [pc, #396]	; (8000e84 <mlp+0x2f0>)
 8000cf6:	f003 fbe1 	bl	80044bc <puts>
            printf("Input either identity or sigmoid or tanh or relu or softmax for hidden activation function\n");
 8000cfa:	4863      	ldr	r0, [pc, #396]	; (8000e88 <mlp+0x2f4>)
 8000cfc:	e785      	b.n	8000c0a <mlp+0x76>
        exit(0);
    }

    // Output activation function
    if (strcmp(new_argv[5], "identity") == 0) {
 8000cfe:	696f      	ldr	r7, [r5, #20]
 8000d00:	495d      	ldr	r1, [pc, #372]	; (8000e78 <mlp+0x2e4>)
 8000d02:	4638      	mov	r0, r7
 8000d04:	f7ff ff34 	bl	8000b70 <strcmp>
 8000d08:	b998      	cbnz	r0, 8000d32 <mlp+0x19e>
        param->output_activation_function = 1;
 8000d0a:	2301      	movs	r3, #1
    }
    else if (strcmp(new_argv[5], "relu") == 0) {
        param->output_activation_function = 4;
    }
    else if (strcmp(new_argv[5], "softmax") == 0) {
        param->output_activation_function = 5;
 8000d0c:	6273      	str	r3, [r6, #36]	; 0x24
        exit(0);
    }


    // L2 Regularization parameter
    param->learning_rate = atoi(new_argv[6]);
 8000d0e:	69a8      	ldr	r0, [r5, #24]
 8000d10:	f002 fb0a 	bl	8003328 <atoi>
 8000d14:	f7ff fbae 	bl	8000474 <__aeabi_i2d>
 8000d18:	6826      	ldr	r6, [r4, #0]
 8000d1a:	e9c6 0104 	strd	r0, r1, [r6, #16]

    // Max. number of iterations
    param->n_iterations_max = atoi(new_argv[7]);
 8000d1e:	69e8      	ldr	r0, [r5, #28]
 8000d20:	f002 fb02 	bl	8003328 <atoi>
    if (param->n_iterations_max <= 0) {
 8000d24:	6825      	ldr	r5, [r4, #0]
    param->n_iterations_max = atoi(new_argv[7]);
 8000d26:	61b0      	str	r0, [r6, #24]
    if (param->n_iterations_max <= 0) {
 8000d28:	69ab      	ldr	r3, [r5, #24]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	dc22      	bgt.n	8000d74 <mlp+0x1e0>
        printf("Max. number of iterations value should be positive\n");
 8000d2e:	4857      	ldr	r0, [pc, #348]	; (8000e8c <mlp+0x2f8>)
 8000d30:	e76b      	b.n	8000c0a <mlp+0x76>
    else if (strcmp(new_argv[5], "sigmoid") == 0) {
 8000d32:	494d      	ldr	r1, [pc, #308]	; (8000e68 <mlp+0x2d4>)
 8000d34:	4638      	mov	r0, r7
 8000d36:	f7ff ff1b 	bl	8000b70 <strcmp>
 8000d3a:	b908      	cbnz	r0, 8000d40 <mlp+0x1ac>
        param->output_activation_function = 2;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	e7e5      	b.n	8000d0c <mlp+0x178>
    else if (strcmp(new_argv[5], "tanh") == 0) {
 8000d40:	494a      	ldr	r1, [pc, #296]	; (8000e6c <mlp+0x2d8>)
 8000d42:	4638      	mov	r0, r7
 8000d44:	f7ff ff14 	bl	8000b70 <strcmp>
 8000d48:	b908      	cbnz	r0, 8000d4e <mlp+0x1ba>
        param->output_activation_function = 3;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	e7de      	b.n	8000d0c <mlp+0x178>
    else if (strcmp(new_argv[5], "relu") == 0) {
 8000d4e:	494b      	ldr	r1, [pc, #300]	; (8000e7c <mlp+0x2e8>)
 8000d50:	4638      	mov	r0, r7
 8000d52:	f7ff ff0d 	bl	8000b70 <strcmp>
 8000d56:	b908      	cbnz	r0, 8000d5c <mlp+0x1c8>
        param->output_activation_function = 4;
 8000d58:	2304      	movs	r3, #4
 8000d5a:	e7d7      	b.n	8000d0c <mlp+0x178>
    else if (strcmp(new_argv[5], "softmax") == 0) {
 8000d5c:	4948      	ldr	r1, [pc, #288]	; (8000e80 <mlp+0x2ec>)
 8000d5e:	4638      	mov	r0, r7
 8000d60:	f7ff ff06 	bl	8000b70 <strcmp>
 8000d64:	b908      	cbnz	r0, 8000d6a <mlp+0x1d6>
        param->output_activation_function = 5;
 8000d66:	2305      	movs	r3, #5
 8000d68:	e7d0      	b.n	8000d0c <mlp+0x178>
        printf("Error: Invalid value for output activation function\n");
 8000d6a:	4849      	ldr	r0, [pc, #292]	; (8000e90 <mlp+0x2fc>)
 8000d6c:	f003 fba6 	bl	80044bc <puts>
        printf("Input either identity or sigmoid or tanh or relu or softmax for output activation function\n");
 8000d70:	4848      	ldr	r0, [pc, #288]	; (8000e94 <mlp+0x300>)
 8000d72:	e74a      	b.n	8000c0a <mlp+0x76>
    //    param->data_train[i] = (double*)malloc(param->feature_size * sizeof(double));

    // Read the train dataset from the csv into the 2D array
    //read_csv(train_filename, param->train_sample_size, param->feature_size, param->data_train);
    
    double test_lines[][5] = {
 8000d74:	4948      	ldr	r1, [pc, #288]	; (8000e98 <mlp+0x304>)
 8000d76:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d7a:	a8be      	add	r0, sp, #760	; 0x2f8
 8000d7c:	f002 ff3e 	bl	8003bfc <memcpy>
    //param->test_sample_size = atoi(new_argv[12]);
    // Feature size = Number of input features + 1 output feature
    //param->feature_size = atoi(new_argv[13]);

   // Create 2D array memory for the test data
    param->data_test = (double **)malloc(test_sample_size * sizeof(double *));
 8000d80:	20c8      	movs	r0, #200	; 0xc8
 8000d82:	f002 ff2b 	bl	8003bdc <malloc>
 8000d86:	f50d 783e 	add.w	r8, sp, #760	; 0x2f8
 8000d8a:	62e8      	str	r0, [r5, #44]	; 0x2c
 8000d8c:	f04f 0900 	mov.w	r9, #0
    for (int i = 0; i < test_sample_size; i++) {
        param->data_test[i] = (double *)malloc(feature_size * sizeof(double));
 8000d90:	2028      	movs	r0, #40	; 0x28
 8000d92:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 8000d94:	f002 ff22 	bl	8003bdc <malloc>
 8000d98:	f847 0009 	str.w	r0, [r7, r9]
        memcpy(param->data_test[i], test_lines[i], feature_size * sizeof(double));
 8000d9c:	4647      	mov	r7, r8
        param->data_test[i] = (double *)malloc(feature_size * sizeof(double));
 8000d9e:	4606      	mov	r6, r0
        memcpy(param->data_test[i], test_lines[i], feature_size * sizeof(double));
 8000da0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000da2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000da4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000da6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000da8:	e897 0003 	ldmia.w	r7, {r0, r1}
    for (int i = 0; i < test_sample_size; i++) {
 8000dac:	f109 0904 	add.w	r9, r9, #4
 8000db0:	f1b9 0fc8 	cmp.w	r9, #200	; 0xc8
        memcpy(param->data_test[i], test_lines[i], feature_size * sizeof(double));
 8000db4:	e886 0003 	stmia.w	r6, {r0, r1}
    for (int i = 0; i < test_sample_size; i++) {
 8000db8:	f108 0828 	add.w	r8, r8, #40	; 0x28
 8000dbc:	d1e8      	bne.n	8000d90 <mlp+0x1fc>

    // Read the test dataset from the csv into the 2D array
    //read_csv(test_filename, param->test_sample_size, param->feature_size, param->data_test);

    // Total number of layers
    int n_layers = param->n_hidden + 2;
 8000dbe:	682f      	ldr	r7, [r5, #0]
    param->test_sample_size = test_sample_size;
 8000dc0:	2332      	movs	r3, #50	; 0x32
 8000dc2:	63ab      	str	r3, [r5, #56]	; 0x38
    param->feature_size = feature_size;
 8000dc4:	2305      	movs	r3, #5
 8000dc6:	632b      	str	r3, [r5, #48]	; 0x30

    // Save the sizes of layers in an array
    layer_sizes = (int*)calloc(n_layers, sizeof(int));
 8000dc8:	2104      	movs	r1, #4
 8000dca:	1cb8      	adds	r0, r7, #2
 8000dcc:	f002 fab0 	bl	8003330 <calloc>

    layer_sizes[0] = param->feature_size - 1;
 8000dd0:	2304      	movs	r3, #4
 8000dd2:	6003      	str	r3, [r0, #0]
    layer_sizes[n_layers-1] = param->output_layer_size;
 8000dd4:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
 8000dd8:	3301      	adds	r3, #1
 8000dda:	6a2a      	ldr	r2, [r5, #32]
 8000ddc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    layer_sizes = (int*)calloc(n_layers, sizeof(int));
 8000de0:	4606      	mov	r6, r0
 8000de2:	6060      	str	r0, [r4, #4]

    for (i = 1; i < n_layers-1 ; i++)
 8000de4:	2301      	movs	r3, #1
 8000de6:	429f      	cmp	r7, r3
 8000de8:	da22      	bge.n	8000e30 <mlp+0x29c>
        layer_sizes[i] = param->hidden_layers_size[i-1];

    // Create memory for the weight matrices between layers
    // weight is a pointer to the array of 2D arrays between the layers
    param->weight = (double***)calloc(n_layers - 1, sizeof(double**));
 8000dea:	2104      	movs	r1, #4
 8000dec:	1c78      	adds	r0, r7, #1
 8000dee:	f002 fa9f 	bl	8003330 <calloc>

    // Each 2D array between two layers i and i+1 is of size ((layer_size[i]+1) x layer_size[i+1])
    // The weight matrix includes weights for the bias terms too
    for (i = 0; i < n_layers-1; i++)
 8000df2:	f04f 0900 	mov.w	r9, #0
    param->weight = (double***)calloc(n_layers - 1, sizeof(double**));
 8000df6:	4680      	mov	r8, r0
 8000df8:	63e8      	str	r0, [r5, #60]	; 0x3c
    for (i = 0; i < n_layers-1; i++)
 8000dfa:	454f      	cmp	r7, r9
 8000dfc:	da21      	bge.n	8000e42 <mlp+0x2ae>
 8000dfe:	46b1      	mov	r9, r6
 8000e00:	46b3      	mov	fp, r6
        param->weight[i] = (double**)calloc(layer_sizes[i]+1, sizeof(double*));

    int j;
    for (i = 0; i < n_layers-1; i++)
 8000e02:	f04f 0a00 	mov.w	sl, #0
 8000e06:	4557      	cmp	r7, sl
 8000e08:	da61      	bge.n	8000ece <mlp+0x33a>
        for (j = 0; j < layer_sizes[i]+1; j++)
            param->weight[i][j] = (double*)calloc(layer_sizes[i+1], sizeof(double));

    double weights[] = {
 8000e0a:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 8000e0e:	4923      	ldr	r1, [pc, #140]	; (8000e9c <mlp+0x308>)
 8000e10:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8000e14:	4650      	mov	r0, sl
 8000e16:	f002 fef1 	bl	8003bfc <memcpy>
    0.661625, -0.322602, -0.528113, -0.431437, -0.429017, -0.452627, -0.327129, -0.325360, 0.160116, 0.749951, -0.733778, 0.178550, -0.541029, 0.356270, 0.768002, 0.112665, -0.033648, -0.269000, 0.185479, -0.177941,
    0.099907, -0.994370, 0.701389, -0.158393, -0.674160
    };

    int weightIndex = 0;
    for (int i = 0; i < n_layers - 1; i++) {
 8000e1a:	2300      	movs	r3, #0
    int weightIndex = 0;
 8000e1c:	469c      	mov	ip, r3
 8000e1e:	f8cd a00c 	str.w	sl, [sp, #12]
    for (int i = 0; i < n_layers - 1; i++) {
 8000e22:	429f      	cmp	r7, r3
 8000e24:	db79      	blt.n	8000f1a <mlp+0x386>
        for (int j = 0; j < layer_sizes[i] + 1; j++) {
 8000e26:	f859 2b04 	ldr.w	r2, [r9], #4
 8000e2a:	9202      	str	r2, [sp, #8]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	e064      	b.n	8000efa <mlp+0x366>
        layer_sizes[i] = param->hidden_layers_size[i-1];
 8000e30:	686a      	ldr	r2, [r5, #4]
 8000e32:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8000e36:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8000e3a:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    for (i = 1; i < n_layers-1 ; i++)
 8000e3e:	3301      	adds	r3, #1
 8000e40:	e7d1      	b.n	8000de6 <mlp+0x252>
        param->weight[i] = (double**)calloc(layer_sizes[i]+1, sizeof(double*));
 8000e42:	f856 0029 	ldr.w	r0, [r6, r9, lsl #2]
 8000e46:	2104      	movs	r1, #4
 8000e48:	3001      	adds	r0, #1
 8000e4a:	f002 fa71 	bl	8003330 <calloc>
 8000e4e:	f848 0029 	str.w	r0, [r8, r9, lsl #2]
    for (i = 0; i < n_layers-1; i++)
 8000e52:	f109 0901 	add.w	r9, r9, #1
 8000e56:	e7d0      	b.n	8000dfa <mlp+0x266>
 8000e58:	08004c30 	.word	0x08004c30
 8000e5c:	20000084 	.word	0x20000084
 8000e60:	08005759 	.word	0x08005759
 8000e64:	08005b2d 	.word	0x08005b2d
 8000e68:	08005715 	.word	0x08005715
 8000e6c:	08005710 	.word	0x08005710
 8000e70:	08005859 	.word	0x08005859
 8000e74:	08005787 	.word	0x08005787
 8000e78:	080057b4 	.word	0x080057b4
 8000e7c:	080057bd 	.word	0x080057bd
 8000e80:	080057c2 	.word	0x080057c2
 8000e84:	080057ca 	.word	0x080057ca
 8000e88:	080057fe 	.word	0x080057fe
 8000e8c:	0800590d 	.word	0x0800590d
 8000e90:	0800587e 	.word	0x0800587e
 8000e94:	080058b2 	.word	0x080058b2
 8000e98:	08004c70 	.word	0x08004c70
 8000e9c:	08005440 	.word	0x08005440
            param->weight[i][j] = (double*)calloc(layer_sizes[i+1], sizeof(double));
 8000ea0:	f858 202a 	ldr.w	r2, [r8, sl, lsl #2]
 8000ea4:	f8db 0004 	ldr.w	r0, [fp, #4]
 8000ea8:	9301      	str	r3, [sp, #4]
 8000eaa:	2108      	movs	r1, #8
 8000eac:	9200      	str	r2, [sp, #0]
 8000eae:	f002 fa3f 	bl	8003330 <calloc>
 8000eb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8000eb6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
        for (j = 0; j < layer_sizes[i]+1; j++)
 8000eba:	3301      	adds	r3, #1
 8000ebc:	f8db 2000 	ldr.w	r2, [fp]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	daed      	bge.n	8000ea0 <mlp+0x30c>
    for (i = 0; i < n_layers-1; i++)
 8000ec4:	f10a 0a01 	add.w	sl, sl, #1
 8000ec8:	f10b 0b04 	add.w	fp, fp, #4
 8000ecc:	e79b      	b.n	8000e06 <mlp+0x272>
        for (j = 0; j < layer_sizes[i]+1; j++)
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e7f4      	b.n	8000ebc <mlp+0x328>
            for (int k = 0; k < layer_sizes[i + 1]; k++) {
                param->weight[i][j][k] = weights[weightIndex++];
 8000ed2:	9901      	ldr	r1, [sp, #4]
 8000ed4:	e8f1 ab02 	ldrd	sl, fp, [r1], #8
 8000ed8:	9101      	str	r1, [sp, #4]
 8000eda:	f858 1023 	ldr.w	r1, [r8, r3, lsl #2]
 8000ede:	f851 100e 	ldr.w	r1, [r1, lr]
 8000ee2:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8000ee6:	e9c1 ab00 	strd	sl, fp, [r1]
            for (int k = 0; k < layer_sizes[i + 1]; k++) {
 8000eea:	3001      	adds	r0, #1
 8000eec:	9900      	ldr	r1, [sp, #0]
 8000eee:	4281      	cmp	r1, r0
 8000ef0:	dcef      	bgt.n	8000ed2 <mlp+0x33e>
 8000ef2:	2900      	cmp	r1, #0
 8000ef4:	bfa8      	it	ge
 8000ef6:	448c      	addge	ip, r1
        for (int j = 0; j < layer_sizes[i] + 1; j++) {
 8000ef8:	3201      	adds	r2, #1
 8000efa:	9902      	ldr	r1, [sp, #8]
 8000efc:	4291      	cmp	r1, r2
 8000efe:	db0a      	blt.n	8000f16 <mlp+0x382>
            for (int k = 0; k < layer_sizes[i + 1]; k++) {
 8000f00:	f8d9 1000 	ldr.w	r1, [r9]
 8000f04:	9100      	str	r1, [sp, #0]
 8000f06:	0091      	lsls	r1, r2, #2
 8000f08:	468e      	mov	lr, r1
 8000f0a:	9903      	ldr	r1, [sp, #12]
 8000f0c:	eb01 01cc 	add.w	r1, r1, ip, lsl #3
 8000f10:	9101      	str	r1, [sp, #4]
 8000f12:	2000      	movs	r0, #0
 8000f14:	e7ea      	b.n	8000eec <mlp+0x358>
    for (int i = 0; i < n_layers - 1; i++) {
 8000f16:	3301      	adds	r3, #1
 8000f18:	e783      	b.n	8000e22 <mlp+0x28e>

    // Classify the test data using the trained parameter weights
    //printf("Classifying:\n");
    //printf("------------\n");
    
    mlp_classifier(param, layer_sizes);
 8000f1a:	4631      	mov	r1, r6
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	f000 f949 	bl	80011b4 <mlp_classifier>
    //while(1)
        //simpleserial_get();
    //printf("\nDone.\nOutput file generated\n");

    // Free the memory allocated in Heap
    for (i = 0; i < n_layers-1; i++)
 8000f22:	2600      	movs	r6, #0
 8000f24:	42b7      	cmp	r7, r6
 8000f26:	db42      	blt.n	8000fae <mlp+0x41a>
 8000f28:	ea4f 0886 	mov.w	r8, r6, lsl #2
        for (j = 0; j < layer_sizes[i]+1; j++)
 8000f2c:	2500      	movs	r5, #0
 8000f2e:	e006      	b.n	8000f3e <mlp+0x3aa>
            free(param->weight[i][j]);
 8000f30:	f852 3008 	ldr.w	r3, [r2, r8]
 8000f34:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8000f38:	f002 fe58 	bl	8003bec <free>
        for (j = 0; j < layer_sizes[i]+1; j++)
 8000f3c:	3501      	adds	r5, #1
            free(param->weight[i][j]);
 8000f3e:	6823      	ldr	r3, [r4, #0]
 8000f40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
        for (j = 0; j < layer_sizes[i]+1; j++)
 8000f42:	6863      	ldr	r3, [r4, #4]
 8000f44:	f853 3008 	ldr.w	r3, [r3, r8]
 8000f48:	42ab      	cmp	r3, r5
 8000f4a:	daf1      	bge.n	8000f30 <mlp+0x39c>
    for (i = 0; i < n_layers-1; i++)
 8000f4c:	3601      	adds	r6, #1
 8000f4e:	e7e9      	b.n	8000f24 <mlp+0x390>

    for (i = 0; i < n_layers-1; i++)
        free(param->weight[i]);
 8000f50:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8000f54:	f002 fe4a 	bl	8003bec <free>
    for (i = 0; i < n_layers-1; i++)
 8000f58:	3501      	adds	r5, #1
        free(param->weight[i]);
 8000f5a:	6823      	ldr	r3, [r4, #0]
    for (i = 0; i < n_layers-1; i++)
 8000f5c:	42af      	cmp	r7, r5
        free(param->weight[i]);
 8000f5e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    for (i = 0; i < n_layers-1; i++)
 8000f60:	daf6      	bge.n	8000f50 <mlp+0x3bc>

    free(param->weight);
 8000f62:	f002 fe43 	bl	8003bec <free>

    free(layer_sizes);
 8000f66:	6860      	ldr	r0, [r4, #4]
 8000f68:	f002 fe40 	bl	8003bec <free>

    for (i = 0; i < param->train_sample_size; i++)
 8000f6c:	2500      	movs	r5, #0
 8000f6e:	6823      	ldr	r3, [r4, #0]
 8000f70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f72:	42aa      	cmp	r2, r5
 8000f74:	dc1d      	bgt.n	8000fb2 <mlp+0x41e>
        free(param->data_train[i]);

    for (i = 0; i < param->test_sample_size; i++)
 8000f76:	2500      	movs	r5, #0
 8000f78:	6823      	ldr	r3, [r4, #0]
 8000f7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f7c:	42aa      	cmp	r2, r5
 8000f7e:	dc1f      	bgt.n	8000fc0 <mlp+0x42c>
        free(param->data_test[i]);

    free(param->data_train);
 8000f80:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000f82:	f002 fe33 	bl	8003bec <free>
    free(param->data_test);
 8000f86:	6823      	ldr	r3, [r4, #0]
 8000f88:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000f8a:	f002 fe2f 	bl	8003bec <free>
    free(param->hidden_activation_functions);
 8000f8e:	6823      	ldr	r3, [r4, #0]
 8000f90:	6898      	ldr	r0, [r3, #8]
 8000f92:	f002 fe2b 	bl	8003bec <free>
    free(param->hidden_layers_size);
 8000f96:	6823      	ldr	r3, [r4, #0]
 8000f98:	6858      	ldr	r0, [r3, #4]
 8000f9a:	f002 fe27 	bl	8003bec <free>
    free(param);
 8000f9e:	6820      	ldr	r0, [r4, #0]
 8000fa0:	f002 fe24 	bl	8003bec <free>

    return 0;
}
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f60d 2dcc 	addw	sp, sp, #2764	; 0xacc
 8000faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (i = 0; i < n_layers-1; i++)
 8000fae:	2500      	movs	r5, #0
 8000fb0:	e7d3      	b.n	8000f5a <mlp+0x3c6>
        free(param->data_train[i]);
 8000fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb4:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8000fb8:	f002 fe18 	bl	8003bec <free>
    for (i = 0; i < param->train_sample_size; i++)
 8000fbc:	3501      	adds	r5, #1
 8000fbe:	e7d6      	b.n	8000f6e <mlp+0x3da>
        free(param->data_test[i]);
 8000fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8000fc6:	f002 fe11 	bl	8003bec <free>
    for (i = 0; i < param->test_sample_size; i++)
 8000fca:	3501      	adds	r5, #1
 8000fcc:	e7d4      	b.n	8000f78 <mlp+0x3e4>
 8000fce:	bf00      	nop

08000fd0 <main>:

int main(void) {
 8000fd0:	b508      	push	{r3, lr}
    // Initialize UART for serial communication
    platform_init();
 8000fd2:	f000 fd5b 	bl	8001a8c <platform_init>
    init_uart();
 8000fd6:	f000 fd99 	bl	8001b0c <init_uart>
    trigger_setup();
 8000fda:	f000 fdd5 	bl	8001b88 <trigger_setup>
    simpleserial_init();
 8000fde:	f000 fc7f 	bl	80018e0 <simpleserial_init>

    // Add a command to the SimpleSerial module
    simpleserial_addcmd('a', 0, mlp);
 8000fe2:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <main+0x24>)
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	2061      	movs	r0, #97	; 0x61
 8000fe8:	f000 fc60 	bl	80018ac <simpleserial_addcmd>

    //put some value so we can verify if we cna read them.
    while (1){
        simpleserial_get();
 8000fec:	f000 fce0 	bl	80019b0 <simpleserial_get>
    while (1){
 8000ff0:	e7fc      	b.n	8000fec <main+0x1c>
 8000ff2:	bf00      	nop
 8000ff4:	08000b95 	.word	0x08000b95

08000ff8 <mat_mul_classify>:
#include "simpleserial.h"
#include "hal.h"

#define max(x, y) (x > y ? x : y)

void mat_mul_classify(double* a, double** b, double* result, int n, int p) {
 8000ff8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ffc:	4607      	mov	r7, r0
 8000ffe:	4688      	mov	r8, r1
 8001000:	4699      	mov	r9, r3
 8001002:	f1a2 0408 	sub.w	r4, r2, #8
    // matrix a of size 1 x n (array)
    // matrix b of size n x p
    // matrix result of size 1 x p (array)
    // result = a * b
    int j, k;
    for (j = 0; j < p; j++) {
 8001006:	2500      	movs	r5, #0
 8001008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800100a:	429d      	cmp	r5, r3
 800100c:	db01      	blt.n	8001012 <mat_mul_classify+0x1a>
        result[j] = 0.0;
        for (k = 0; k < n; k++)
            result[j] += (a[k] * b[k][j]);
    }
}
 800100e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        result[j] = 0.0;
 8001012:	2200      	movs	r2, #0
 8001014:	2300      	movs	r3, #0
 8001016:	e9e4 2302 	strd	r2, r3, [r4, #8]!
        for (k = 0; k < n; k++)
 800101a:	ea4f 0bc5 	mov.w	fp, r5, lsl #3
 800101e:	f1a7 0a08 	sub.w	sl, r7, #8
 8001022:	2600      	movs	r6, #0
 8001024:	454e      	cmp	r6, r9
 8001026:	db01      	blt.n	800102c <mat_mul_classify+0x34>
    for (j = 0; j < p; j++) {
 8001028:	3501      	adds	r5, #1
 800102a:	e7ed      	b.n	8001008 <mat_mul_classify+0x10>
            result[j] += (a[k] * b[k][j]);
 800102c:	f858 3026 	ldr.w	r3, [r8, r6, lsl #2]
 8001030:	eb03 010b 	add.w	r1, r3, fp
 8001034:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001038:	e9fa 2302 	ldrd	r2, r3, [sl, #8]!
 800103c:	f7ff fa84 	bl	8000548 <__aeabi_dmul>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	e9d4 0100 	ldrd	r0, r1, [r4]
 8001048:	f7ff f8c8 	bl	80001dc <__adddf3>
        for (k = 0; k < n; k++)
 800104c:	3601      	adds	r6, #1
            result[j] += (a[k] * b[k][j]);
 800104e:	e9c4 0100 	strd	r0, r1, [r4]
        for (k = 0; k < n; k++)
 8001052:	e7e7      	b.n	8001024 <mat_mul_classify+0x2c>

08001054 <identity_classify>:

void identity_classify(int n, double* input, double* output) {
 8001054:	b530      	push	{r4, r5, lr}
    output[0] = 1; // Bias term
 8001056:	4d07      	ldr	r5, [pc, #28]	; (8001074 <identity_classify+0x20>)
 8001058:	2400      	movs	r4, #0
 800105a:	e9c2 4500 	strd	r4, r5, [r2]

    int i;
    for (i = 0; i < n; i++) 
 800105e:	3908      	subs	r1, #8
 8001060:	2300      	movs	r3, #0
 8001062:	4283      	cmp	r3, r0
 8001064:	db00      	blt.n	8001068 <identity_classify+0x14>
        output[i+1] = input[i]; // Identity function
}
 8001066:	bd30      	pop	{r4, r5, pc}
        output[i+1] = input[i]; // Identity function
 8001068:	e9f1 4502 	ldrd	r4, r5, [r1, #8]!
    for (i = 0; i < n; i++) 
 800106c:	3301      	adds	r3, #1
        output[i+1] = input[i]; // Identity function
 800106e:	e9e2 4502 	strd	r4, r5, [r2, #8]!
    for (i = 0; i < n; i++) 
 8001072:	e7f6      	b.n	8001062 <identity_classify+0xe>
 8001074:	3ff00000 	.word	0x3ff00000

08001078 <sigmoid_classify>:

void sigmoid_classify(int n, double* input, double* output) {
 8001078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    output[0] = 1; // Bias term
 800107c:	4f12      	ldr	r7, [pc, #72]	; (80010c8 <sigmoid_classify+0x50>)
 800107e:	2600      	movs	r6, #0
 8001080:	e9c2 6700 	strd	r6, r7, [r2]
void sigmoid_classify(int n, double* input, double* output) {
 8001084:	4680      	mov	r8, r0
 8001086:	4614      	mov	r4, r2
 8001088:	f1a1 0508 	sub.w	r5, r1, #8

    int i;
    for (i = 0; i < n; i++) 
 800108c:	f04f 0900 	mov.w	r9, #0
 8001090:	45c1      	cmp	r9, r8
 8001092:	db01      	blt.n	8001098 <sigmoid_classify+0x20>
        output[i+1] = 1.0 / (1.0 + exp(-input[i])); // Sigmoid function
}
 8001094:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        output[i+1] = 1.0 / (1.0 + exp(-input[i])); // Sigmoid function
 8001098:	f855 2f08 	ldr.w	r2, [r5, #8]!
 800109c:	686b      	ldr	r3, [r5, #4]
 800109e:	4610      	mov	r0, r2
 80010a0:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80010a4:	f001 fcb0 	bl	8002a08 <exp>
 80010a8:	4632      	mov	r2, r6
 80010aa:	463b      	mov	r3, r7
 80010ac:	f7ff f896 	bl	80001dc <__adddf3>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	4630      	mov	r0, r6
 80010b6:	4639      	mov	r1, r7
 80010b8:	f7ff fb70 	bl	800079c <__aeabi_ddiv>
    for (i = 0; i < n; i++) 
 80010bc:	f109 0901 	add.w	r9, r9, #1
        output[i+1] = 1.0 / (1.0 + exp(-input[i])); // Sigmoid function
 80010c0:	e9e4 0102 	strd	r0, r1, [r4, #8]!
    for (i = 0; i < n; i++) 
 80010c4:	e7e4      	b.n	8001090 <sigmoid_classify+0x18>
 80010c6:	bf00      	nop
 80010c8:	3ff00000 	.word	0x3ff00000

080010cc <tan_h_classify>:

void tan_h_classify(int n, double* input, double* output) {
 80010cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    output[0] = 1; // Bias term
 80010ce:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <tan_h_classify+0x2c>)
void tan_h_classify(int n, double* input, double* output) {
 80010d0:	4614      	mov	r4, r2
    output[0] = 1; // Bias term
 80010d2:	2200      	movs	r2, #0
 80010d4:	e9c4 2300 	strd	r2, r3, [r4]
void tan_h_classify(int n, double* input, double* output) {
 80010d8:	4606      	mov	r6, r0
 80010da:	f1a1 0508 	sub.w	r5, r1, #8

    int i;
    for (i = 0; i < n; i++) 
 80010de:	2700      	movs	r7, #0
 80010e0:	42b7      	cmp	r7, r6
 80010e2:	db00      	blt.n	80010e6 <tan_h_classify+0x1a>
        output[i+1] = tanh(input[i]); // tanh function
}
 80010e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        output[i+1] = tanh(input[i]); // tanh function
 80010e6:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 80010ea:	f001 fc09 	bl	8002900 <tanh>
    for (i = 0; i < n; i++) 
 80010ee:	3701      	adds	r7, #1
        output[i+1] = tanh(input[i]); // tanh function
 80010f0:	e9e4 0102 	strd	r0, r1, [r4, #8]!
    for (i = 0; i < n; i++) 
 80010f4:	e7f4      	b.n	80010e0 <tan_h_classify+0x14>
 80010f6:	bf00      	nop
 80010f8:	3ff00000 	.word	0x3ff00000

080010fc <relu_classify>:

void relu_classify(int n, double* input, double* output) {
 80010fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    output[0] = 1; // Bias term
 8001100:	4b10      	ldr	r3, [pc, #64]	; (8001144 <relu_classify+0x48>)
void relu_classify(int n, double* input, double* output) {
 8001102:	4614      	mov	r4, r2
    output[0] = 1; // Bias term
 8001104:	2200      	movs	r2, #0
 8001106:	e9c4 2300 	strd	r2, r3, [r4]
void relu_classify(int n, double* input, double* output) {
 800110a:	4682      	mov	sl, r0
 800110c:	f1a1 0508 	sub.w	r5, r1, #8

    int i;
    for (i = 0; i < n; i++) 
 8001110:	f04f 0b00 	mov.w	fp, #0
        output[i+1] = max(0.0, input[i]); // ReLU function
 8001114:	f04f 0800 	mov.w	r8, #0
 8001118:	f04f 0900 	mov.w	r9, #0
    for (i = 0; i < n; i++) 
 800111c:	45d3      	cmp	fp, sl
 800111e:	db01      	blt.n	8001124 <relu_classify+0x28>
}
 8001120:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        output[i+1] = max(0.0, input[i]); // ReLU function
 8001124:	e9f5 6702 	ldrd	r6, r7, [r5, #8]!
 8001128:	4642      	mov	r2, r8
 800112a:	464b      	mov	r3, r9
 800112c:	4630      	mov	r0, r6
 800112e:	4639      	mov	r1, r7
 8001130:	f7ff fc7c 	bl	8000a2c <__aeabi_dcmplt>
 8001134:	b108      	cbz	r0, 800113a <relu_classify+0x3e>
 8001136:	4646      	mov	r6, r8
 8001138:	464f      	mov	r7, r9
 800113a:	e9e4 6702 	strd	r6, r7, [r4, #8]!
    for (i = 0; i < n; i++) 
 800113e:	f10b 0b01 	add.w	fp, fp, #1
 8001142:	e7eb      	b.n	800111c <relu_classify+0x20>
 8001144:	3ff00000 	.word	0x3ff00000

08001148 <softmax_classify>:

void softmax_classify(int n, double* input, double* output) {
    output[0] = 1; // Bias term
 8001148:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <softmax_classify+0x68>)
void softmax_classify(int n, double* input, double* output) {
 800114a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800114e:	4614      	mov	r4, r2
    output[0] = 1; // Bias term
 8001150:	2200      	movs	r2, #0
 8001152:	e9c4 2300 	strd	r2, r3, [r4]

    int i;
    double sum = 0.0;
    for (i = 0; i < n; i++)
 8001156:	f1a1 0508 	sub.w	r5, r1, #8
void softmax_classify(int n, double* input, double* output) {
 800115a:	4680      	mov	r8, r0
    for (i = 0; i < n; i++)
 800115c:	46aa      	mov	sl, r5
    double sum = 0.0;
 800115e:	2600      	movs	r6, #0
 8001160:	2700      	movs	r7, #0
    for (i = 0; i < n; i++)
 8001162:	f04f 0900 	mov.w	r9, #0
 8001166:	45c1      	cmp	r9, r8
 8001168:	db05      	blt.n	8001176 <softmax_classify+0x2e>
        sum += exp(input[i]);

    for (i = 0; i < n; i++) 
 800116a:	f04f 0900 	mov.w	r9, #0
 800116e:	45c1      	cmp	r9, r8
 8001170:	db10      	blt.n	8001194 <softmax_classify+0x4c>
        output[i+1] = exp(input[i]) / sum; // Softmax function
}
 8001172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        sum += exp(input[i]);
 8001176:	e9fa 0102 	ldrd	r0, r1, [sl, #8]!
 800117a:	f001 fc45 	bl	8002a08 <exp>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	4630      	mov	r0, r6
 8001184:	4639      	mov	r1, r7
 8001186:	f7ff f829 	bl	80001dc <__adddf3>
    for (i = 0; i < n; i++)
 800118a:	f109 0901 	add.w	r9, r9, #1
        sum += exp(input[i]);
 800118e:	4606      	mov	r6, r0
 8001190:	460f      	mov	r7, r1
    for (i = 0; i < n; i++)
 8001192:	e7e8      	b.n	8001166 <softmax_classify+0x1e>
        output[i+1] = exp(input[i]) / sum; // Softmax function
 8001194:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 8001198:	f001 fc36 	bl	8002a08 <exp>
 800119c:	4632      	mov	r2, r6
 800119e:	463b      	mov	r3, r7
 80011a0:	f7ff fafc 	bl	800079c <__aeabi_ddiv>
    for (i = 0; i < n; i++) 
 80011a4:	f109 0901 	add.w	r9, r9, #1
        output[i+1] = exp(input[i]) / sum; // Softmax function
 80011a8:	e9e4 0102 	strd	r0, r1, [r4, #8]!
    for (i = 0; i < n; i++) 
 80011ac:	e7df      	b.n	800116e <softmax_classify+0x26>
 80011ae:	bf00      	nop
 80011b0:	3ff00000 	.word	0x3ff00000

080011b4 <mlp_classifier>:

void mlp_classifier(parameters* param, int* layer_sizes) {
 80011b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int n_layers = param->n_hidden + 2;
 80011b8:	6803      	ldr	r3, [r0, #0]
void mlp_classifier(parameters* param, int* layer_sizes) {
 80011ba:	b091      	sub	sp, #68	; 0x44
 80011bc:	4604      	mov	r4, r0
    int n_layers = param->n_hidden + 2;
 80011be:	9308      	str	r3, [sp, #32]
 80011c0:	3302      	adds	r3, #2
void mlp_classifier(parameters* param, int* layer_sizes) {
 80011c2:	4689      	mov	r9, r1

    // Create memory for arrays of inputs to the layers
    double** layer_inputs = (double**)calloc(n_layers, sizeof(double*));
 80011c4:	4618      	mov	r0, r3
 80011c6:	2104      	movs	r1, #4
    int n_layers = param->n_hidden + 2;
 80011c8:	9304      	str	r3, [sp, #16]
    double** layer_inputs = (double**)calloc(n_layers, sizeof(double*));
 80011ca:	f002 f8b1 	bl	8003330 <calloc>

    int i;
    for (i = 0; i < n_layers; i++)
 80011ce:	2500      	movs	r5, #0
    double** layer_inputs = (double**)calloc(n_layers, sizeof(double*));
 80011d0:	9005      	str	r0, [sp, #20]
    for (i = 0; i < n_layers; i++)
 80011d2:	9b04      	ldr	r3, [sp, #16]
 80011d4:	429d      	cmp	r5, r3
 80011d6:	db3c      	blt.n	8001252 <mlp_classifier+0x9e>
        layer_inputs[i] = (double*)calloc(layer_sizes[i], sizeof(double));

    // Create memory for arrays of outputs from the layers
    double** layer_outputs = (double**)calloc(n_layers, sizeof(double*));
 80011d8:	2104      	movs	r1, #4
 80011da:	4618      	mov	r0, r3
 80011dc:	f002 f8a8 	bl	8003330 <calloc>

    for (i = 0; i < n_layers; i++)
 80011e0:	2500      	movs	r5, #0
    double** layer_outputs = (double**)calloc(n_layers, sizeof(double*));
 80011e2:	9003      	str	r0, [sp, #12]
    for (i = 0; i < n_layers; i++)
 80011e4:	9b04      	ldr	r3, [sp, #16]
 80011e6:	429d      	cmp	r5, r3
 80011e8:	db3d      	blt.n	8001266 <mlp_classifier+0xb2>
        layer_outputs[i] = (double*)calloc(layer_sizes[i]+1, sizeof(double));

    // Create memory to store final outputs
    double** final_output = (double**)calloc(param->test_sample_size, sizeof(double*));
 80011ea:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80011ec:	2104      	movs	r1, #4
 80011ee:	4628      	mov	r0, r5
 80011f0:	f002 f89e 	bl	8003330 <calloc>
    for (i = 0; i < param->test_sample_size; i++)
 80011f4:	2600      	movs	r6, #0
    double** final_output = (double**)calloc(param->test_sample_size, sizeof(double*));
 80011f6:	9002      	str	r0, [sp, #8]
    for (i = 0; i < param->test_sample_size; i++)
 80011f8:	42b5      	cmp	r5, r6
 80011fa:	dc3f      	bgt.n	800127c <mlp_classifier+0xc8>
            }
        }
        trigger_low();

        // Fill the output layers's input and output
        mat_mul_classify(layer_outputs[n_layers-2], param->weight[n_layers-2], layer_inputs[n_layers-1], layer_sizes[n_layers-2]+1, layer_sizes[n_layers-1]);
 80011fc:	9b08      	ldr	r3, [sp, #32]
 80011fe:	9a08      	ldr	r2, [sp, #32]
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	9309      	str	r3, [sp, #36]	; 0x24
 8001204:	9b03      	ldr	r3, [sp, #12]
 8001206:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800120a:	930b      	str	r3, [sp, #44]	; 0x2c
 800120c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800120e:	1d1e      	adds	r6, r3, #4
 8001210:	9b05      	ldr	r3, [sp, #20]
 8001212:	4433      	add	r3, r6
 8001214:	930c      	str	r3, [sp, #48]	; 0x30
 8001216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001218:	444b      	add	r3, r9
 800121a:	930d      	str	r3, [sp, #52]	; 0x34
                break;
            case 4: // relu
                relu_classify(layer_sizes[n_layers-1], layer_inputs[n_layers-1], layer_outputs[n_layers-1]);
                break;
            case 5: // softmax
                softmax_classify(layer_sizes[n_layers-1], layer_inputs[n_layers-1], layer_outputs[n_layers-1]);
 800121c:	9b03      	ldr	r3, [sp, #12]
        mat_mul_classify(layer_outputs[n_layers-2], param->weight[n_layers-2], layer_inputs[n_layers-1], layer_sizes[n_layers-2]+1, layer_sizes[n_layers-1]);
 800121e:	eb09 0b06 	add.w	fp, r9, r6
                softmax_classify(layer_sizes[n_layers-1], layer_inputs[n_layers-1], layer_outputs[n_layers-1]);
 8001222:	f04f 0a00 	mov.w	sl, #0
 8001226:	441e      	add	r6, r3
    for (test_example = 0; test_example < param->test_sample_size; test_example++) {
 8001228:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800122a:	4555      	cmp	r5, sl
 800122c:	dc2f      	bgt.n	800128e <mlp_classifier+0xda>
            final_output[test_example][i] = layer_outputs[n_layers-1][i+1];
    }

    //simpleserial_put('r', 1, (uint8_t*)final_output[0]);
    // Find the output class for each test example
    if (param->output_layer_size == 1) { // Binary classification
 800122e:	6a26      	ldr	r6, [r4, #32]
 8001230:	2e01      	cmp	r6, #1
 8001232:	f000 818a 	beq.w	800154a <mlp_classifier+0x396>
            else
                final_output[test_example][0] = 1;
        }
    }
    else { // Multi-class classification
        for (test_example = 0; test_example < param->test_sample_size; test_example++) {
 8001236:	f04f 0a00 	mov.w	sl, #0
 800123a:	4555      	cmp	r5, sl
 800123c:	f340 828c 	ble.w	8001758 <mlp_classifier+0x5a4>
            double max = -1;
            int max_class;
            for (i = 0; i < param->output_layer_size; i++) {
                if (final_output[test_example][i] > max) {
 8001240:	9b02      	ldr	r3, [sp, #8]
 8001242:	f853 b02a 	ldr.w	fp, [r3, sl, lsl #2]
            double max = -1;
 8001246:	4bb2      	ldr	r3, [pc, #712]	; (8001510 <mlp_classifier+0x35c>)
 8001248:	2200      	movs	r2, #0
 800124a:	e9cd 2306 	strd	r2, r3, [sp, #24]
            for (i = 0; i < param->output_layer_size; i++) {
 800124e:	2700      	movs	r7, #0
 8001250:	e193      	b.n	800157a <mlp_classifier+0x3c6>
        layer_inputs[i] = (double*)calloc(layer_sizes[i], sizeof(double));
 8001252:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8001256:	2108      	movs	r1, #8
 8001258:	f002 f86a 	bl	8003330 <calloc>
 800125c:	9b05      	ldr	r3, [sp, #20]
 800125e:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
    for (i = 0; i < n_layers; i++)
 8001262:	3501      	adds	r5, #1
 8001264:	e7b5      	b.n	80011d2 <mlp_classifier+0x1e>
        layer_outputs[i] = (double*)calloc(layer_sizes[i]+1, sizeof(double));
 8001266:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800126a:	2108      	movs	r1, #8
 800126c:	3001      	adds	r0, #1
 800126e:	f002 f85f 	bl	8003330 <calloc>
 8001272:	9b03      	ldr	r3, [sp, #12]
 8001274:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
    for (i = 0; i < n_layers; i++)
 8001278:	3501      	adds	r5, #1
 800127a:	e7b3      	b.n	80011e4 <mlp_classifier+0x30>
        final_output[i] = (double*)calloc(param->output_layer_size, sizeof(double));
 800127c:	6a20      	ldr	r0, [r4, #32]
 800127e:	2108      	movs	r1, #8
 8001280:	f002 f856 	bl	8003330 <calloc>
 8001284:	9b02      	ldr	r3, [sp, #8]
 8001286:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
    for (i = 0; i < param->test_sample_size; i++)
 800128a:	3601      	adds	r6, #1
 800128c:	e7b4      	b.n	80011f8 <mlp_classifier+0x44>
        printf("Classifying test example %d of %d\r", test_example+1, param->test_sample_size);
 800128e:	f10a 0301 	add.w	r3, sl, #1
 8001292:	462a      	mov	r2, r5
 8001294:	4619      	mov	r1, r3
 8001296:	489f      	ldr	r0, [pc, #636]	; (8001514 <mlp_classifier+0x360>)
 8001298:	930f      	str	r3, [sp, #60]	; 0x3c
 800129a:	f003 f875 	bl	8004388 <iprintf>
        layer_outputs[0][0] = 1; // Bias term of input layer
 800129e:	9b03      	ldr	r3, [sp, #12]
        for (i = 0; i < param->feature_size-1; i++)
 80012a0:	6b27      	ldr	r7, [r4, #48]	; 0x30
        layer_outputs[0][0] = 1; // Bias term of input layer
 80012a2:	681d      	ldr	r5, [r3, #0]
 80012a4:	4b9c      	ldr	r3, [pc, #624]	; (8001518 <mlp_classifier+0x364>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	e9c5 2300 	strd	r2, r3, [r5]
        for (i = 0; i < param->feature_size-1; i++)
 80012ac:	3f01      	subs	r7, #1
 80012ae:	ea4f 0c8a 	mov.w	ip, sl, lsl #2
 80012b2:	2300      	movs	r3, #0
 80012b4:	429f      	cmp	r7, r3
 80012b6:	dc24      	bgt.n	8001302 <mlp_classifier+0x14e>
        trigger_high();
 80012b8:	f000 fc8a 	bl	8001bd0 <trigger_high>
        for (i = 1; i < n_layers-1; i++) {
 80012bc:	9f03      	ldr	r7, [sp, #12]
 80012be:	464d      	mov	r5, r9
 80012c0:	2301      	movs	r3, #1
 80012c2:	9306      	str	r3, [sp, #24]
 80012c4:	9a06      	ldr	r2, [sp, #24]
 80012c6:	9b08      	ldr	r3, [sp, #32]
 80012c8:	4293      	cmp	r3, r2
 80012ca:	da2b      	bge.n	8001324 <mlp_classifier+0x170>
        trigger_low();
 80012cc:	f000 fc87 	bl	8001bde <trigger_low>
        mat_mul_classify(layer_outputs[n_layers-2], param->weight[n_layers-2], layer_inputs[n_layers-1], layer_sizes[n_layers-2]+1, layer_sizes[n_layers-1]);
 80012d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80012d2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80012d4:	681d      	ldr	r5, [r3, #0]
 80012d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80012d8:	f8db 2000 	ldr.w	r2, [fp]
 80012dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	9200      	str	r2, [sp, #0]
 80012e2:	5809      	ldr	r1, [r1, r0]
 80012e4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80012e6:	3301      	adds	r3, #1
 80012e8:	6800      	ldr	r0, [r0, #0]
 80012ea:	462a      	mov	r2, r5
 80012ec:	f7ff fe84 	bl	8000ff8 <mat_mul_classify>
        switch (param->output_activation_function) {
 80012f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80012f2:	3b01      	subs	r3, #1
 80012f4:	2b04      	cmp	r3, #4
 80012f6:	d855      	bhi.n	80013a4 <mlp_classifier+0x1f0>
 80012f8:	e8df f003 	tbb	[pc, r3]
 80012fc:	756e675a 	.word	0x756e675a
 8001300:	7c          	.byte	0x7c
 8001301:	00          	.byte	0x00
            layer_outputs[0][i+1] = layer_inputs[0][i] = param->data_test[test_example][i];
 8001302:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001304:	f852 200c 	ldr.w	r2, [r2, ip]
 8001308:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800130c:	e9d2 0100 	ldrd	r0, r1, [r2]
 8001310:	9a05      	ldr	r2, [sp, #20]
 8001312:	6812      	ldr	r2, [r2, #0]
 8001314:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8001318:	e9c2 0100 	strd	r0, r1, [r2]
 800131c:	e9e5 0102 	strd	r0, r1, [r5, #8]!
        for (i = 0; i < param->feature_size-1; i++)
 8001320:	3301      	adds	r3, #1
 8001322:	e7c7      	b.n	80012b4 <mlp_classifier+0x100>
            mat_mul_classify(layer_outputs[i-1], param->weight[i-1], layer_inputs[i], layer_sizes[i-1]+1, layer_sizes[i]);
 8001324:	9b06      	ldr	r3, [sp, #24]
 8001326:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	3b04      	subs	r3, #4
 800132c:	930a      	str	r3, [sp, #40]	; 0x28
 800132e:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8001332:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001334:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 8001338:	682b      	ldr	r3, [r5, #0]
 800133a:	f855 2f04 	ldr.w	r2, [r5, #4]!
 800133e:	9200      	str	r2, [sp, #0]
 8001340:	5809      	ldr	r1, [r1, r0]
 8001342:	f857 0b04 	ldr.w	r0, [r7], #4
 8001346:	3301      	adds	r3, #1
 8001348:	4642      	mov	r2, r8
 800134a:	f7ff fe55 	bl	8000ff8 <mat_mul_classify>
            switch (param->hidden_activation_functions[i-1]) {
 800134e:	68a3      	ldr	r3, [r4, #8]
 8001350:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001352:	589b      	ldr	r3, [r3, r2]
 8001354:	3b01      	subs	r3, #1
 8001356:	2b04      	cmp	r3, #4
 8001358:	d824      	bhi.n	80013a4 <mlp_classifier+0x1f0>
 800135a:	e8df f003 	tbb	[pc, r3]
 800135e:	0b03      	.short	0x0b03
 8001360:	1711      	.short	0x1711
 8001362:	1d          	.byte	0x1d
 8001363:	00          	.byte	0x00
                    identity_classify(layer_sizes[i], layer_inputs[i], layer_outputs[i]);
 8001364:	683a      	ldr	r2, [r7, #0]
 8001366:	6828      	ldr	r0, [r5, #0]
 8001368:	4641      	mov	r1, r8
 800136a:	f7ff fe73 	bl	8001054 <identity_classify>
        for (i = 1; i < n_layers-1; i++) {
 800136e:	9b06      	ldr	r3, [sp, #24]
 8001370:	3301      	adds	r3, #1
 8001372:	e7a6      	b.n	80012c2 <mlp_classifier+0x10e>
                    sigmoid_classify(layer_sizes[i], layer_inputs[i], layer_outputs[i]);
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	6828      	ldr	r0, [r5, #0]
 8001378:	4641      	mov	r1, r8
 800137a:	f7ff fe7d 	bl	8001078 <sigmoid_classify>
                    break;
 800137e:	e7f6      	b.n	800136e <mlp_classifier+0x1ba>
                    tan_h_classify(layer_sizes[i], layer_inputs[i], layer_outputs[i]);
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	6828      	ldr	r0, [r5, #0]
 8001384:	4641      	mov	r1, r8
 8001386:	f7ff fea1 	bl	80010cc <tan_h_classify>
                    break;
 800138a:	e7f0      	b.n	800136e <mlp_classifier+0x1ba>
                    relu_classify(layer_sizes[i], layer_inputs[i], layer_outputs[i]);
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	6828      	ldr	r0, [r5, #0]
 8001390:	4641      	mov	r1, r8
 8001392:	f7ff feb3 	bl	80010fc <relu_classify>
                    break;
 8001396:	e7ea      	b.n	800136e <mlp_classifier+0x1ba>
                    softmax_classify(layer_sizes[i], layer_inputs[i], layer_outputs[i]);
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	6828      	ldr	r0, [r5, #0]
 800139c:	4641      	mov	r1, r8
 800139e:	f7ff fed3 	bl	8001148 <softmax_classify>
                    break;
 80013a2:	e7e4      	b.n	800136e <mlp_classifier+0x1ba>
                    printf("Forward propagation: Invalid hidden activation function\n");
 80013a4:	485d      	ldr	r0, [pc, #372]	; (800151c <mlp_classifier+0x368>)
 80013a6:	f003 f889 	bl	80044bc <puts>
                    exit(0);
 80013aa:	2000      	movs	r0, #0
 80013ac:	f001 ffce 	bl	800334c <exit>
                identity_classify(layer_sizes[n_layers-1], layer_inputs[n_layers-1], layer_outputs[n_layers-1]);
 80013b0:	6832      	ldr	r2, [r6, #0]
 80013b2:	f8db 0000 	ldr.w	r0, [fp]
 80013b6:	4629      	mov	r1, r5
 80013b8:	f7ff fe4c 	bl	8001054 <identity_classify>
        for (i = 0; i < param->output_layer_size; i++)
 80013bc:	6a25      	ldr	r5, [r4, #32]
 80013be:	2300      	movs	r3, #0
 80013c0:	429d      	cmp	r5, r3
 80013c2:	dc1e      	bgt.n	8001402 <mlp_classifier+0x24e>
 80013c4:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 80013c8:	e72e      	b.n	8001228 <mlp_classifier+0x74>
                sigmoid_classify(layer_sizes[n_layers-1], layer_inputs[n_layers-1], layer_outputs[n_layers-1]);
 80013ca:	6832      	ldr	r2, [r6, #0]
 80013cc:	f8db 0000 	ldr.w	r0, [fp]
 80013d0:	4629      	mov	r1, r5
 80013d2:	f7ff fe51 	bl	8001078 <sigmoid_classify>
                break;
 80013d6:	e7f1      	b.n	80013bc <mlp_classifier+0x208>
                tan_h_classify(layer_sizes[n_layers-1], layer_inputs[n_layers-1], layer_outputs[n_layers-1]);
 80013d8:	6832      	ldr	r2, [r6, #0]
 80013da:	f8db 0000 	ldr.w	r0, [fp]
 80013de:	4629      	mov	r1, r5
 80013e0:	f7ff fe74 	bl	80010cc <tan_h_classify>
                break;
 80013e4:	e7ea      	b.n	80013bc <mlp_classifier+0x208>
                relu_classify(layer_sizes[n_layers-1], layer_inputs[n_layers-1], layer_outputs[n_layers-1]);
 80013e6:	6832      	ldr	r2, [r6, #0]
 80013e8:	f8db 0000 	ldr.w	r0, [fp]
 80013ec:	4629      	mov	r1, r5
 80013ee:	f7ff fe85 	bl	80010fc <relu_classify>
                break;
 80013f2:	e7e3      	b.n	80013bc <mlp_classifier+0x208>
                softmax_classify(layer_sizes[n_layers-1], layer_inputs[n_layers-1], layer_outputs[n_layers-1]);
 80013f4:	6832      	ldr	r2, [r6, #0]
 80013f6:	f8db 0000 	ldr.w	r0, [fp]
 80013fa:	4629      	mov	r1, r5
 80013fc:	f7ff fea4 	bl	8001148 <softmax_classify>
                break;
 8001400:	e7dc      	b.n	80013bc <mlp_classifier+0x208>
            final_output[test_example][i] = layer_outputs[n_layers-1][i+1];
 8001402:	6832      	ldr	r2, [r6, #0]
 8001404:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8001408:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
 800140c:	9a02      	ldr	r2, [sp, #8]
 800140e:	f852 202a 	ldr.w	r2, [r2, sl, lsl #2]
 8001412:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8001416:	e9c2 0100 	strd	r0, r1, [r2]
        for (i = 0; i < param->output_layer_size; i++)
 800141a:	3301      	adds	r3, #1
 800141c:	e7d0      	b.n	80013c0 <mlp_classifier+0x20c>
            if (final_output[test_example][0] < 0.5)
 800141e:	9b02      	ldr	r3, [sp, #8]
 8001420:	f853 9028 	ldr.w	r9, [r3, r8, lsl #2]
 8001424:	4632      	mov	r2, r6
 8001426:	e9d9 0100 	ldrd	r0, r1, [r9]
 800142a:	463b      	mov	r3, r7
 800142c:	f7ff fafe 	bl	8000a2c <__aeabi_dcmplt>
 8001430:	2800      	cmp	r0, #0
 8001432:	f040 8087 	bne.w	8001544 <mlp_classifier+0x390>
                final_output[test_example][0] = 1;
 8001436:	4652      	mov	r2, sl
 8001438:	465b      	mov	r3, fp
 800143a:	e9c9 2300 	strd	r2, r3, [r9]
        for (test_example = 0; test_example < param->test_sample_size; test_example++) {
 800143e:	f108 0801 	add.w	r8, r8, #1
 8001442:	4545      	cmp	r5, r8
 8001444:	dceb      	bgt.n	800141e <mlp_classifier+0x26a>
 8001446:	2600      	movs	r6, #0
 8001448:	46b2      	mov	sl, r6
 800144a:	46b0      	mov	r8, r6
 800144c:	46b1      	mov	r9, r6
 800144e:	4637      	mov	r7, r6
    // Calculate the confusion matrix
    if (param->output_layer_size == 1) { // Binary classification
        int true_positive = 0, true_negative = 0, false_positive = 0, false_negative = 0;
        for (test_example = 0; test_example < param->test_sample_size; test_example++) {
            if (final_output[test_example][0] == 0) {
                if (param->data_test[test_example][param->feature_size-1] == 0)
 8001450:	f06f 4b60 	mvn.w	fp, #3758096384	; 0xe0000000
        for (test_example = 0; test_example < param->test_sample_size; test_example++) {
 8001454:	42bd      	cmp	r5, r7
 8001456:	f300 809a 	bgt.w	800158e <mlp_classifier+0x3da>

        // Find the accuracy
        double accuracy = (double)(true_positive + true_negative) / param->test_sample_size;

        // Print confusion matrix
        printf("\n\nConfusion matrix\n");
 800145a:	4831      	ldr	r0, [pc, #196]	; (8001520 <mlp_classifier+0x36c>)
 800145c:	f003 f82e 	bl	80044bc <puts>
        printf("-----------------\n\n");
 8001460:	4830      	ldr	r0, [pc, #192]	; (8001524 <mlp_classifier+0x370>)
 8001462:	f003 f82b 	bl	80044bc <puts>

        printf("\t    |predicted 0\t predicted 1\n");
 8001466:	4830      	ldr	r0, [pc, #192]	; (8001528 <mlp_classifier+0x374>)
 8001468:	f003 f828 	bl	80044bc <puts>
        printf("--------------------------------------------\n");
 800146c:	482f      	ldr	r0, [pc, #188]	; (800152c <mlp_classifier+0x378>)
 800146e:	f003 f825 	bl	80044bc <puts>
        printf("Actual 0    |%d\t\t%d\n\n", true_negative, false_positive);
 8001472:	4652      	mov	r2, sl
 8001474:	4641      	mov	r1, r8
 8001476:	482e      	ldr	r0, [pc, #184]	; (8001530 <mlp_classifier+0x37c>)
 8001478:	f002 ff86 	bl	8004388 <iprintf>
        printf("Actual 1    |%d\t\t%d\n\n", false_negative, true_positive);
 800147c:	464a      	mov	r2, r9
 800147e:	4631      	mov	r1, r6
 8001480:	482c      	ldr	r0, [pc, #176]	; (8001534 <mlp_classifier+0x380>)
 8001482:	f002 ff81 	bl	8004388 <iprintf>
        double accuracy = (double)(true_positive + true_negative) / param->test_sample_size;
 8001486:	eb09 0008 	add.w	r0, r9, r8
 800148a:	f7fe fff3 	bl	8000474 <__aeabi_i2d>
 800148e:	4606      	mov	r6, r0
 8001490:	4628      	mov	r0, r5
 8001492:	460f      	mov	r7, r1
 8001494:	f7fe ffee 	bl	8000474 <__aeabi_i2d>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4630      	mov	r0, r6
 800149e:	4639      	mov	r1, r7
 80014a0:	f7ff f97c 	bl	800079c <__aeabi_ddiv>

        // Print the accuracy
        printf("\nAccuracy: %.2lf\n\n", accuracy * 100);
 80014a4:	4b24      	ldr	r3, [pc, #144]	; (8001538 <mlp_classifier+0x384>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	f7ff f84e 	bl	8000548 <__aeabi_dmul>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4606      	mov	r6, r0
 80014b2:	460f      	mov	r7, r1
 80014b4:	4821      	ldr	r0, [pc, #132]	; (800153c <mlp_classifier+0x388>)
 80014b6:	f002 ff67 	bl	8004388 <iprintf>
        // Scale the double and convert to integer
        int scaled_accuracy = (int)(accuracy * 100); // Assuming you want two decimal places
 80014ba:	4639      	mov	r1, r7
 80014bc:	4630      	mov	r0, r6
 80014be:	f7ff fadd 	bl	8000a7c <__aeabi_d2iz>
        simpleserial_put('r', 1, (uint8_t*)scaled_accuracy);
 80014c2:	2101      	movs	r1, #1
        int scaled_accuracy = (int)(accuracy * 100); // Assuming you want two decimal places
 80014c4:	4602      	mov	r2, r0
        simpleserial_put('r', 1, (uint8_t*)scaled_accuracy);
 80014c6:	2072      	movs	r0, #114	; 0x72
 80014c8:	f000 fa1c 	bl	8001904 <simpleserial_put>
    }


    // Write the final output into a csv file
    char* output_file_name = "data/data_test_output.csv";
    write_csv(output_file_name, param->test_sample_size, param->output_layer_size, final_output);
 80014cc:	9b02      	ldr	r3, [sp, #8]
 80014ce:	6a22      	ldr	r2, [r4, #32]
 80014d0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80014d2:	481b      	ldr	r0, [pc, #108]	; (8001540 <mlp_classifier+0x38c>)
 80014d4:	f000 f958 	bl	8001788 <write_csv>

    // Free the memory allocated in Heap
    for (i = 0; i < param->test_sample_size; i++)
 80014d8:	2500      	movs	r5, #0
 80014da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80014dc:	42ab      	cmp	r3, r5
 80014de:	f300 8126 	bgt.w	800172e <mlp_classifier+0x57a>
        free(final_output[i]);

    free(final_output);
 80014e2:	9802      	ldr	r0, [sp, #8]
 80014e4:	f002 fb82 	bl	8003bec <free>

    for (i = 0; i < n_layers; i++)
 80014e8:	2400      	movs	r4, #0
 80014ea:	9b04      	ldr	r3, [sp, #16]
 80014ec:	429c      	cmp	r4, r3
 80014ee:	f2c0 8125 	blt.w	800173c <mlp_classifier+0x588>
        free(layer_outputs[i]);

    free(layer_outputs);
 80014f2:	9803      	ldr	r0, [sp, #12]
 80014f4:	f002 fb7a 	bl	8003bec <free>

    for (i = 0; i < n_layers; i++)
 80014f8:	2400      	movs	r4, #0
 80014fa:	9b04      	ldr	r3, [sp, #16]
 80014fc:	429c      	cmp	r4, r3
 80014fe:	f2c0 8124 	blt.w	800174a <mlp_classifier+0x596>
        free(layer_inputs[i]);

    free(layer_inputs);
 8001502:	9805      	ldr	r0, [sp, #20]
 8001504:	b011      	add	sp, #68	; 0x44
 8001506:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    free(layer_inputs);
 800150a:	f002 bb6f 	b.w	8003bec <free>
 800150e:	bf00      	nop
 8001510:	bff00000 	.word	0xbff00000
 8001514:	08005940 	.word	0x08005940
 8001518:	3ff00000 	.word	0x3ff00000
 800151c:	08005963 	.word	0x08005963
 8001520:	0800599b 	.word	0x0800599b
 8001524:	080059ae 	.word	0x080059ae
 8001528:	080059c1 	.word	0x080059c1
 800152c:	08005a4e 	.word	0x08005a4e
 8001530:	080059e0 	.word	0x080059e0
 8001534:	080059f6 	.word	0x080059f6
 8001538:	40590000 	.word	0x40590000
 800153c:	08005a0c 	.word	0x08005a0c
 8001540:	08005a8c 	.word	0x08005a8c
                final_output[test_example][0] = 0;
 8001544:	2200      	movs	r2, #0
 8001546:	2300      	movs	r3, #0
 8001548:	e777      	b.n	800143a <mlp_classifier+0x286>
            if (final_output[test_example][0] < 0.5)
 800154a:	4f87      	ldr	r7, [pc, #540]	; (8001768 <mlp_classifier+0x5b4>)
                final_output[test_example][0] = 1;
 800154c:	f8df b21c 	ldr.w	fp, [pc, #540]	; 800176c <mlp_classifier+0x5b8>
        for (test_example = 0; test_example < param->test_sample_size; test_example++) {
 8001550:	f04f 0800 	mov.w	r8, #0
            if (final_output[test_example][0] < 0.5)
 8001554:	2600      	movs	r6, #0
                final_output[test_example][0] = 1;
 8001556:	f04f 0a00 	mov.w	sl, #0
 800155a:	e772      	b.n	8001442 <mlp_classifier+0x28e>
                if (final_output[test_example][i] > max) {
 800155c:	eb0b 03c7 	add.w	r3, fp, r7, lsl #3
 8001560:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001564:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001568:	4640      	mov	r0, r8
 800156a:	4649      	mov	r1, r9
                    max_class = i+1;
 800156c:	3701      	adds	r7, #1
                if (final_output[test_example][i] > max) {
 800156e:	f7ff fa7b 	bl	8000a68 <__aeabi_dcmpgt>
 8001572:	b110      	cbz	r0, 800157a <mlp_classifier+0x3c6>
                    max = final_output[test_example][i];
 8001574:	e9cd 8906 	strd	r8, r9, [sp, #24]
                    max_class = i+1;
 8001578:	970e      	str	r7, [sp, #56]	; 0x38
            for (i = 0; i < param->output_layer_size; i++) {
 800157a:	42be      	cmp	r6, r7
 800157c:	dcee      	bgt.n	800155c <mlp_classifier+0x3a8>
            final_output[test_example][0] = max_class;
 800157e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001580:	f7fe ff78 	bl	8000474 <__aeabi_i2d>
        for (test_example = 0; test_example < param->test_sample_size; test_example++) {
 8001584:	f10a 0a01 	add.w	sl, sl, #1
            final_output[test_example][0] = max_class;
 8001588:	e9cb 0100 	strd	r0, r1, [fp]
        for (test_example = 0; test_example < param->test_sample_size; test_example++) {
 800158c:	e655      	b.n	800123a <mlp_classifier+0x86>
                if (param->data_test[test_example][param->feature_size-1] == 0)
 800158e:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
 8001592:	eb0b 0203 	add.w	r2, fp, r3
 8001596:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
 800159a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800159e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
            if (final_output[test_example][0] == 0) {
 80015a6:	9b02      	ldr	r3, [sp, #8]
 80015a8:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 80015ac:	2200      	movs	r2, #0
 80015ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015b2:	2300      	movs	r3, #0
 80015b4:	f7ff fa30 	bl	8000a18 <__aeabi_dcmpeq>
                if (param->data_test[test_example][param->feature_size-1] == 0)
 80015b8:	2200      	movs	r2, #0
            if (final_output[test_example][0] == 0) {
 80015ba:	b160      	cbz	r0, 80015d6 <mlp_classifier+0x422>
                if (param->data_test[test_example][param->feature_size-1] == 0)
 80015bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80015c0:	2300      	movs	r3, #0
 80015c2:	f7ff fa29 	bl	8000a18 <__aeabi_dcmpeq>
 80015c6:	b118      	cbz	r0, 80015d0 <mlp_classifier+0x41c>
                    ++true_negative;
 80015c8:	f108 0801 	add.w	r8, r8, #1
        for (test_example = 0; test_example < param->test_sample_size; test_example++) {
 80015cc:	3701      	adds	r7, #1
 80015ce:	e741      	b.n	8001454 <mlp_classifier+0x2a0>
                    ++false_positive;
 80015d0:	f10a 0a01 	add.w	sl, sl, #1
 80015d4:	e7fa      	b.n	80015cc <mlp_classifier+0x418>
                if (param->data_test[test_example][param->feature_size-1] == 1)
 80015d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80015da:	4b64      	ldr	r3, [pc, #400]	; (800176c <mlp_classifier+0x5b8>)
 80015dc:	f7ff fa1c 	bl	8000a18 <__aeabi_dcmpeq>
 80015e0:	b110      	cbz	r0, 80015e8 <mlp_classifier+0x434>
                    ++true_positive;
 80015e2:	f109 0901 	add.w	r9, r9, #1
 80015e6:	e7f1      	b.n	80015cc <mlp_classifier+0x418>
                    ++false_negative;
 80015e8:	3601      	adds	r6, #1
 80015ea:	e7ef      	b.n	80015cc <mlp_classifier+0x418>
            confusion_matrix[i] = (int*)calloc(param->output_layer_size, sizeof(int));
 80015ec:	2104      	movs	r1, #4
 80015ee:	4630      	mov	r0, r6
 80015f0:	f001 fe9e 	bl	8003330 <calloc>
 80015f4:	f847 0028 	str.w	r0, [r7, r8, lsl #2]
        for (i = 0; i < param->output_layer_size; i++)
 80015f8:	f108 0801 	add.w	r8, r8, #1
 80015fc:	4546      	cmp	r6, r8
 80015fe:	dcf5      	bgt.n	80015ec <mlp_classifier+0x438>
            actual_class = param->data_test[test_example][param->feature_size-1] - 1;
 8001600:	f8df 9168 	ldr.w	r9, [pc, #360]	; 800176c <mlp_classifier+0x5b8>
        for (test_example = 0; test_example < param->test_sample_size; test_example++) {
 8001604:	2600      	movs	r6, #0
            actual_class = param->data_test[test_example][param->feature_size-1] - 1;
 8001606:	f06f 4b60 	mvn.w	fp, #3758096384	; 0xe0000000
 800160a:	f04f 0800 	mov.w	r8, #0
        for (test_example = 0; test_example < param->test_sample_size; test_example++) {
 800160e:	42b5      	cmp	r5, r6
 8001610:	dc35      	bgt.n	800167e <mlp_classifier+0x4ca>
        printf("\t");
 8001612:	2009      	movs	r0, #9
 8001614:	f002 fed0 	bl	80043b8 <putchar>
            printf("Predicted %d  ", predicted_class);
 8001618:	4e55      	ldr	r6, [pc, #340]	; (8001770 <mlp_classifier+0x5bc>)
        for (predicted_class = 1; predicted_class <= param->output_layer_size; predicted_class++)
 800161a:	2501      	movs	r5, #1
 800161c:	6a23      	ldr	r3, [r4, #32]
 800161e:	42ab      	cmp	r3, r5
 8001620:	da52      	bge.n	80016c8 <mlp_classifier+0x514>
        printf("\n---------------------------------------------------------------------------\n");
 8001622:	4854      	ldr	r0, [pc, #336]	; (8001774 <mlp_classifier+0x5c0>)
            printf("Actual %d | ", actual_class+1);
 8001624:	4d54      	ldr	r5, [pc, #336]	; (8001778 <mlp_classifier+0x5c4>)
                printf("%d\t", confusion_matrix[actual_class][predicted_class]);
 8001626:	f8df 9154 	ldr.w	r9, [pc, #340]	; 800177c <mlp_classifier+0x5c8>
        printf("\n---------------------------------------------------------------------------\n");
 800162a:	f002 ff47 	bl	80044bc <puts>
        for (actual_class = 0; actual_class < param->output_layer_size; actual_class++) {
 800162e:	f04f 0a00 	mov.w	sl, #0
                printf("%d\t", confusion_matrix[actual_class][predicted_class]);
 8001632:	f1a7 0804 	sub.w	r8, r7, #4
        for (actual_class = 0; actual_class < param->output_layer_size; actual_class++) {
 8001636:	6a26      	ldr	r6, [r4, #32]
 8001638:	4556      	cmp	r6, sl
 800163a:	dc4b      	bgt.n	80016d4 <mlp_classifier+0x520>
        double accuracy = 0.0;
 800163c:	f04f 0800 	mov.w	r8, #0
 8001640:	f04f 0900 	mov.w	r9, #0
        for (i = 0; i < param->output_layer_size; i++)
 8001644:	2500      	movs	r5, #0
 8001646:	42ae      	cmp	r6, r5
 8001648:	dc5b      	bgt.n	8001702 <mlp_classifier+0x54e>
        accuracy /= param->test_sample_size;
 800164a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800164c:	f7fe ff12 	bl	8000474 <__aeabi_i2d>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4640      	mov	r0, r8
 8001656:	4649      	mov	r1, r9
 8001658:	f7ff f8a0 	bl	800079c <__aeabi_ddiv>
        printf("\nAccuracy: %.2lf\n\n", accuracy * 100);
 800165c:	4b48      	ldr	r3, [pc, #288]	; (8001780 <mlp_classifier+0x5cc>)
 800165e:	2200      	movs	r2, #0
 8001660:	f7fe ff72 	bl	8000548 <__aeabi_dmul>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4846      	ldr	r0, [pc, #280]	; (8001784 <mlp_classifier+0x5d0>)
 800166a:	f002 fe8d 	bl	8004388 <iprintf>
        for (i = 0; i < param->output_layer_size; i++)
 800166e:	2500      	movs	r5, #0
 8001670:	6a23      	ldr	r3, [r4, #32]
 8001672:	42ab      	cmp	r3, r5
 8001674:	dc55      	bgt.n	8001722 <mlp_classifier+0x56e>
        free(confusion_matrix);
 8001676:	4638      	mov	r0, r7
 8001678:	f002 fab8 	bl	8003bec <free>
 800167c:	e726      	b.n	80014cc <mlp_classifier+0x318>
            actual_class = param->data_test[test_example][param->feature_size-1] - 1;
 800167e:	e9d4 210b 	ldrd	r2, r1, [r4, #44]	; 0x2c
 8001682:	eb0b 0301 	add.w	r3, fp, r1
 8001686:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
 800168a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800168e:	4642      	mov	r2, r8
 8001690:	464b      	mov	r3, r9
 8001692:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001696:	f7fe fd9f 	bl	80001d8 <__aeabi_dsub>
 800169a:	f7ff f9ef 	bl	8000a7c <__aeabi_d2iz>
            predicted_class = final_output[test_example][0] - 1;
 800169e:	9b02      	ldr	r3, [sp, #8]
 80016a0:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 80016a4:	4642      	mov	r2, r8
 80016a6:	464b      	mov	r3, r9
            actual_class = param->data_test[test_example][param->feature_size-1] - 1;
 80016a8:	4682      	mov	sl, r0
            predicted_class = final_output[test_example][0] - 1;
 80016aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80016ae:	f7fe fd93 	bl	80001d8 <__aeabi_dsub>
 80016b2:	f7ff f9e3 	bl	8000a7c <__aeabi_d2iz>
            ++confusion_matrix[actual_class][predicted_class];
 80016b6:	f857 202a 	ldr.w	r2, [r7, sl, lsl #2]
 80016ba:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 80016be:	3301      	adds	r3, #1
 80016c0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
        for (test_example = 0; test_example < param->test_sample_size; test_example++) {
 80016c4:	3601      	adds	r6, #1
 80016c6:	e7a2      	b.n	800160e <mlp_classifier+0x45a>
            printf("Predicted %d  ", predicted_class);
 80016c8:	4629      	mov	r1, r5
 80016ca:	4630      	mov	r0, r6
 80016cc:	f002 fe5c 	bl	8004388 <iprintf>
        for (predicted_class = 1; predicted_class <= param->output_layer_size; predicted_class++)
 80016d0:	3501      	adds	r5, #1
 80016d2:	e7a3      	b.n	800161c <mlp_classifier+0x468>
            printf("Actual %d | ", actual_class+1);
 80016d4:	f10a 0a01 	add.w	sl, sl, #1
 80016d8:	4651      	mov	r1, sl
 80016da:	4628      	mov	r0, r5
 80016dc:	f002 fe54 	bl	8004388 <iprintf>
            for (predicted_class = 0; predicted_class < param->output_layer_size; predicted_class++)
 80016e0:	2600      	movs	r6, #0
 80016e2:	6a23      	ldr	r3, [r4, #32]
 80016e4:	42b3      	cmp	r3, r6
 80016e6:	dc03      	bgt.n	80016f0 <mlp_classifier+0x53c>
            printf("\n");
 80016e8:	200a      	movs	r0, #10
 80016ea:	f002 fe65 	bl	80043b8 <putchar>
        for (actual_class = 0; actual_class < param->output_layer_size; actual_class++) {
 80016ee:	e7a2      	b.n	8001636 <mlp_classifier+0x482>
                printf("%d\t", confusion_matrix[actual_class][predicted_class]);
 80016f0:	f858 302a 	ldr.w	r3, [r8, sl, lsl #2]
 80016f4:	4648      	mov	r0, r9
 80016f6:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 80016fa:	f002 fe45 	bl	8004388 <iprintf>
            for (predicted_class = 0; predicted_class < param->output_layer_size; predicted_class++)
 80016fe:	3601      	adds	r6, #1
 8001700:	e7ef      	b.n	80016e2 <mlp_classifier+0x52e>
            accuracy += confusion_matrix[i][i];
 8001702:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 8001706:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800170a:	f7fe feb3 	bl	8000474 <__aeabi_i2d>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4640      	mov	r0, r8
 8001714:	4649      	mov	r1, r9
 8001716:	f7fe fd61 	bl	80001dc <__adddf3>
        for (i = 0; i < param->output_layer_size; i++)
 800171a:	3501      	adds	r5, #1
            accuracy += confusion_matrix[i][i];
 800171c:	4680      	mov	r8, r0
 800171e:	4689      	mov	r9, r1
        for (i = 0; i < param->output_layer_size; i++)
 8001720:	e791      	b.n	8001646 <mlp_classifier+0x492>
            free(confusion_matrix[i]);
 8001722:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 8001726:	f002 fa61 	bl	8003bec <free>
        for (i = 0; i < param->output_layer_size; i++)
 800172a:	3501      	adds	r5, #1
 800172c:	e7a0      	b.n	8001670 <mlp_classifier+0x4bc>
        free(final_output[i]);
 800172e:	9b02      	ldr	r3, [sp, #8]
 8001730:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001734:	f002 fa5a 	bl	8003bec <free>
    for (i = 0; i < param->test_sample_size; i++)
 8001738:	3501      	adds	r5, #1
 800173a:	e6ce      	b.n	80014da <mlp_classifier+0x326>
        free(layer_outputs[i]);
 800173c:	9b03      	ldr	r3, [sp, #12]
 800173e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001742:	f002 fa53 	bl	8003bec <free>
    for (i = 0; i < n_layers; i++)
 8001746:	3401      	adds	r4, #1
 8001748:	e6cf      	b.n	80014ea <mlp_classifier+0x336>
        free(layer_inputs[i]);
 800174a:	9b05      	ldr	r3, [sp, #20]
 800174c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001750:	f002 fa4c 	bl	8003bec <free>
    for (i = 0; i < n_layers; i++)
 8001754:	3401      	adds	r4, #1
 8001756:	e6d0      	b.n	80014fa <mlp_classifier+0x346>
        int** confusion_matrix = (int**)calloc(param->output_layer_size, sizeof(int*));
 8001758:	2104      	movs	r1, #4
 800175a:	4630      	mov	r0, r6
 800175c:	f001 fde8 	bl	8003330 <calloc>
        for (i = 0; i < param->output_layer_size; i++)
 8001760:	f04f 0800 	mov.w	r8, #0
        int** confusion_matrix = (int**)calloc(param->output_layer_size, sizeof(int*));
 8001764:	4607      	mov	r7, r0
        for (i = 0; i < param->output_layer_size; i++)
 8001766:	e749      	b.n	80015fc <mlp_classifier+0x448>
 8001768:	3fe00000 	.word	0x3fe00000
 800176c:	3ff00000 	.word	0x3ff00000
 8001770:	08005a1f 	.word	0x08005a1f
 8001774:	08005a2e 	.word	0x08005a2e
 8001778:	08005a7b 	.word	0x08005a7b
 800177c:	08005a88 	.word	0x08005a88
 8001780:	40590000 	.word	0x40590000
 8001784:	08005a0c 	.word	0x08005a0c

08001788 <write_csv>:
GitHub: https://github.com/manoharmukku/multilayer-perceptron-in-c
*/

#include "write_csv.h"

void write_csv(char* filename, int rows, int cols, double** data) {
 8001788:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800178c:	9101      	str	r1, [sp, #4]
    FILE* fp = fopen(filename, "w");
 800178e:	4926      	ldr	r1, [pc, #152]	; (8001828 <write_csv+0xa0>)
void write_csv(char* filename, int rows, int cols, double** data) {
 8001790:	4606      	mov	r6, r0
 8001792:	4615      	mov	r5, r2
 8001794:	4699      	mov	r9, r3
    FILE* fp = fopen(filename, "w");
 8001796:	f002 f849 	bl	800382c <fopen>
    if (NULL == fp) {
 800179a:	4604      	mov	r4, r0
 800179c:	bb30      	cbnz	r0, 80017ec <write_csv+0x64>
        printf("Cannot create/open file %s. Make sure you have permission to create/open a file in the directory\n", filename);
 800179e:	4823      	ldr	r0, [pc, #140]	; (800182c <write_csv+0xa4>)
 80017a0:	4631      	mov	r1, r6
 80017a2:	f002 fdf1 	bl	8004388 <iprintf>
        exit(0);
 80017a6:	4620      	mov	r0, r4
 80017a8:	f001 fdd0 	bl	800334c <exit>
    }

    // Create a header in the file with the output layer node numbers
    int i;
    for (i = 1; i <= cols-1; i++)
        fprintf(fp, "Node %d output,", i);
 80017ac:	4632      	mov	r2, r6
 80017ae:	4639      	mov	r1, r7
 80017b0:	4620      	mov	r0, r4
 80017b2:	f002 f843 	bl	800383c <fiprintf>
    for (i = 1; i <= cols-1; i++)
 80017b6:	3601      	adds	r6, #1
 80017b8:	42ae      	cmp	r6, r5
 80017ba:	dbf7      	blt.n	80017ac <write_csv+0x24>
    fprintf(fp, "Node %d output\n", cols);
 80017bc:	462a      	mov	r2, r5
 80017be:	491c      	ldr	r1, [pc, #112]	; (8001830 <write_csv+0xa8>)

    // Dump the matrix into the file element by element
    int j;
    for (i = 0; i < rows; i++) {
        for (j = 0; j <= cols-2; j++) {
            fprintf(fp, "%lf,", data[i][j]);
 80017c0:	f8df a070 	ldr.w	sl, [pc, #112]	; 8001834 <write_csv+0xac>
        }
        fprintf(fp, "%lf\n", data[i][cols-1]);
 80017c4:	f8df b070 	ldr.w	fp, [pc, #112]	; 8001838 <write_csv+0xb0>
    fprintf(fp, "Node %d output\n", cols);
 80017c8:	4620      	mov	r0, r4
        fprintf(fp, "%lf\n", data[i][cols-1]);
 80017ca:	f105 5600 	add.w	r6, r5, #536870912	; 0x20000000
    fprintf(fp, "Node %d output\n", cols);
 80017ce:	f002 f835 	bl	800383c <fiprintf>
        fprintf(fp, "%lf\n", data[i][cols-1]);
 80017d2:	3e01      	subs	r6, #1
 80017d4:	00f6      	lsls	r6, r6, #3
    for (i = 0; i < rows; i++) {
 80017d6:	2700      	movs	r7, #0
        for (j = 0; j <= cols-2; j++) {
 80017d8:	3d01      	subs	r5, #1
    for (i = 0; i < rows; i++) {
 80017da:	9b01      	ldr	r3, [sp, #4]
 80017dc:	429f      	cmp	r7, r3
 80017de:	db1f      	blt.n	8001820 <write_csv+0x98>
    }

    // Close the file
    fclose(fp);
 80017e0:	4620      	mov	r0, r4
 80017e2:	b003      	add	sp, #12
 80017e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fclose(fp);
 80017e8:	f001 be30 	b.w	800344c <fclose>
        fprintf(fp, "Node %d output,", i);
 80017ec:	4f13      	ldr	r7, [pc, #76]	; (800183c <write_csv+0xb4>)
    for (i = 1; i <= cols-1; i++)
 80017ee:	2601      	movs	r6, #1
 80017f0:	e7e2      	b.n	80017b8 <write_csv+0x30>
            fprintf(fp, "%lf,", data[i][j]);
 80017f2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80017f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fa:	4651      	mov	r1, sl
 80017fc:	4620      	mov	r0, r4
 80017fe:	f002 f81d 	bl	800383c <fiprintf>
        for (j = 0; j <= cols-2; j++) {
 8001802:	f108 0801 	add.w	r8, r8, #1
 8001806:	4545      	cmp	r5, r8
            fprintf(fp, "%lf,", data[i][j]);
 8001808:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
        for (j = 0; j <= cols-2; j++) {
 800180c:	dcf1      	bgt.n	80017f2 <write_csv+0x6a>
        fprintf(fp, "%lf\n", data[i][cols-1]);
 800180e:	4433      	add	r3, r6
 8001810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001814:	4659      	mov	r1, fp
 8001816:	4620      	mov	r0, r4
 8001818:	f002 f810 	bl	800383c <fiprintf>
    for (i = 0; i < rows; i++) {
 800181c:	3701      	adds	r7, #1
 800181e:	e7dc      	b.n	80017da <write_csv+0x52>
        for (j = 0; j <= cols-2; j++) {
 8001820:	f04f 0800 	mov.w	r8, #0
 8001824:	e7ef      	b.n	8001806 <write_csv+0x7e>
 8001826:	bf00      	nop
 8001828:	08005aa6 	.word	0x08005aa6
 800182c:	08005aa8 	.word	0x08005aa8
 8001830:	08005b1a 	.word	0x08005b1a
 8001834:	08005b2a 	.word	0x08005b2a
 8001838:	08005b2f 	.word	0x08005b2f
 800183c:	08005b0a 	.word	0x08005b0a

08001840 <ss_crc>:


// 0xA6 formerly 
#define CW_CRC 0x4D 
uint8_t ss_crc(uint8_t *buf, uint8_t len)
{
 8001840:	4603      	mov	r3, r0
	unsigned int k = 0;
	uint8_t crc = 0x00;
	while (len--) {
 8001842:	4401      	add	r1, r0
	uint8_t crc = 0x00;
 8001844:	2000      	movs	r0, #0
	while (len--) {
 8001846:	428b      	cmp	r3, r1
 8001848:	d100      	bne.n	800184c <ss_crc+0xc>
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
		}
	}
	return crc;

}
 800184a:	4770      	bx	lr
		crc ^= *buf++;
 800184c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001850:	4050      	eors	r0, r2
 8001852:	2208      	movs	r2, #8
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8001854:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001858:	ea4f 0040 	mov.w	r0, r0, lsl #1
 800185c:	bf18      	it	ne
 800185e:	f080 004d 	eorne.w	r0, r0, #77	; 0x4d
		for (k = 0; k < 8; k++) {
 8001862:	3a01      	subs	r2, #1
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8001864:	b2c0      	uxtb	r0, r0
		for (k = 0; k < 8; k++) {
 8001866:	d1f5      	bne.n	8001854 <ss_crc+0x14>
 8001868:	e7ed      	b.n	8001846 <ss_crc+0x6>

0800186a <stuff_data>:
    return 0x00;

}

uint8_t stuff_data(uint8_t *buf, uint8_t len)
{
 800186a:	b530      	push	{r4, r5, lr}
	uint8_t i = 1;
	uint8_t last = 0;
 800186c:	2200      	movs	r2, #0
 800186e:	4604      	mov	r4, r0
	uint8_t i = 1;
 8001870:	2301      	movs	r3, #1
	for (; i < len; i++) {
 8001872:	428b      	cmp	r3, r1
 8001874:	d301      	bcc.n	800187a <stuff_data+0x10>
			buf[last] = i - last;
			last = i;
		}
	}
	return 0x00;
}
 8001876:	2000      	movs	r0, #0
 8001878:	bd30      	pop	{r4, r5, pc}
		if (buf[i] == FRAME_BYTE) {
 800187a:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800187e:	b915      	cbnz	r5, 8001886 <stuff_data+0x1c>
			buf[last] = i - last;
 8001880:	1a9d      	subs	r5, r3, r2
 8001882:	5485      	strb	r5, [r0, r2]
 8001884:	461a      	mov	r2, r3
	for (; i < len; i++) {
 8001886:	3301      	adds	r3, #1
 8001888:	b2db      	uxtb	r3, r3
 800188a:	e7f2      	b.n	8001872 <stuff_data+0x8>

0800188c <unstuff_data>:

uint8_t unstuff_data(uint8_t *buf, uint8_t len)
{
 800188c:	b510      	push	{r4, lr}
	uint8_t next = buf[0];
 800188e:	7802      	ldrb	r2, [r0, #0]
	buf[0] = 0x00;
 8001890:	2400      	movs	r4, #0
{
 8001892:	4603      	mov	r3, r0
	buf[0] = 0x00;
 8001894:	7004      	strb	r4, [r0, #0]
	uint8_t next = buf[0];
 8001896:	4610      	mov	r0, r2
	//len -= 1;
	uint8_t tmp = next;
	while ((next < len) && tmp != 0) {
 8001898:	4288      	cmp	r0, r1
 800189a:	d200      	bcs.n	800189e <unstuff_data+0x12>
 800189c:	b902      	cbnz	r2, 80018a0 <unstuff_data+0x14>
		tmp = buf[next];
		buf[next] = FRAME_BYTE;
		next += tmp;
	}
	return next;
}
 800189e:	bd10      	pop	{r4, pc}
		tmp = buf[next];
 80018a0:	5c1a      	ldrb	r2, [r3, r0]
		buf[next] = FRAME_BYTE;
 80018a2:	541c      	strb	r4, [r3, r0]
		next += tmp;
 80018a4:	4410      	add	r0, r2
 80018a6:	b2c0      	uxtb	r0, r0
 80018a8:	e7f6      	b.n	8001898 <unstuff_data+0xc>
 80018aa:	0000      	movs	r0, r0

080018ac <simpleserial_addcmd>:
	simpleserial_addcmd('v', 0, check_version);
    simpleserial_addcmd('w', 0, ss_get_commands);
}

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t, uint8_t, uint8_t, uint8_t*))
{
 80018ac:	b538      	push	{r3, r4, r5, lr}
	if(num_commands >= MAX_SS_CMDS) {
 80018ae:	4d0b      	ldr	r5, [pc, #44]	; (80018dc <simpleserial_addcmd+0x30>)
 80018b0:	682b      	ldr	r3, [r5, #0]
 80018b2:	2b0f      	cmp	r3, #15
 80018b4:	dd04      	ble.n	80018c0 <simpleserial_addcmd+0x14>
		putch('a');
 80018b6:	2061      	movs	r0, #97	; 0x61
		return 1;
	}

	if(len >= MAX_SS_LEN) {
		putch('b');
 80018b8:	f000 f9b2 	bl	8001c20 <putch>
		return 1;
 80018bc:	2001      	movs	r0, #1
	commands[num_commands].len = len;
	commands[num_commands].fp  = fp;
	num_commands++;

	return 0;
}
 80018be:	bd38      	pop	{r3, r4, r5, pc}
	if(len >= MAX_SS_LEN) {
 80018c0:	29ff      	cmp	r1, #255	; 0xff
 80018c2:	d901      	bls.n	80018c8 <simpleserial_addcmd+0x1c>
		putch('b');
 80018c4:	2062      	movs	r0, #98	; 0x62
 80018c6:	e7f7      	b.n	80018b8 <simpleserial_addcmd+0xc>
	commands[num_commands].c   = c;
 80018c8:	240c      	movs	r4, #12
 80018ca:	fb04 5403 	mla	r4, r4, r3, r5
	num_commands++;
 80018ce:	3301      	adds	r3, #1
	commands[num_commands].c   = c;
 80018d0:	7120      	strb	r0, [r4, #4]
	commands[num_commands].fp  = fp;
 80018d2:	e9c4 1202 	strd	r1, r2, [r4, #8]
	num_commands++;
 80018d6:	602b      	str	r3, [r5, #0]
	return 0;
 80018d8:	2000      	movs	r0, #0
 80018da:	e7f0      	b.n	80018be <simpleserial_addcmd+0x12>
 80018dc:	2000008c 	.word	0x2000008c

080018e0 <simpleserial_init>:
{
 80018e0:	b508      	push	{r3, lr}
	simpleserial_addcmd('v', 0, check_version);
 80018e2:	4a06      	ldr	r2, [pc, #24]	; (80018fc <simpleserial_init+0x1c>)
 80018e4:	2100      	movs	r1, #0
 80018e6:	2076      	movs	r0, #118	; 0x76
 80018e8:	f7ff ffe0 	bl	80018ac <simpleserial_addcmd>
}
 80018ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    simpleserial_addcmd('w', 0, ss_get_commands);
 80018f0:	4a03      	ldr	r2, [pc, #12]	; (8001900 <simpleserial_init+0x20>)
 80018f2:	2100      	movs	r1, #0
 80018f4:	2077      	movs	r0, #119	; 0x77
 80018f6:	f7ff bfd9 	b.w	80018ac <simpleserial_addcmd>
 80018fa:	bf00      	nop
 80018fc:	0800195b 	.word	0x0800195b
 8001900:	08001979 	.word	0x08001979

08001904 <simpleserial_put>:
	simpleserial_put('e', 0x01, &err);
	return;
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 8001904:	b570      	push	{r4, r5, r6, lr}
 8001906:	b0c0      	sub	sp, #256	; 0x100
 8001908:	460c      	mov	r4, r1
	uint8_t data_buf[MAX_SS_LEN];
	data_buf[0] = 0x00;
 800190a:	2500      	movs	r5, #0
{
 800190c:	4611      	mov	r1, r2
	data_buf[1] = c;
 800190e:	f88d 0001 	strb.w	r0, [sp, #1]
	data_buf[2] = size;
	int i = 0;
	for (; i < size; i++) {
		data_buf[i + 3] = output[i];
 8001912:	4622      	mov	r2, r4
 8001914:	f10d 0003 	add.w	r0, sp, #3
	data_buf[2] = size;
 8001918:	f88d 4002 	strb.w	r4, [sp, #2]
	data_buf[0] = 0x00;
 800191c:	f88d 5000 	strb.w	r5, [sp]
		data_buf[i + 3] = output[i];
 8001920:	f002 f96c 	bl	8003bfc <memcpy>
	}
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 8001924:	1ca1      	adds	r1, r4, #2
 8001926:	b2c9      	uxtb	r1, r1
 8001928:	f10d 0001 	add.w	r0, sp, #1
 800192c:	f7ff ff88 	bl	8001840 <ss_crc>
 8001930:	eb0d 0304 	add.w	r3, sp, r4
	data_buf[i + 4] = 0x00;
 8001934:	1d26      	adds	r6, r4, #4
	stuff_data(data_buf, i + 5);
 8001936:	1d61      	adds	r1, r4, #5
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 8001938:	70d8      	strb	r0, [r3, #3]
	stuff_data(data_buf, i + 5);
 800193a:	b2c9      	uxtb	r1, r1
 800193c:	4668      	mov	r0, sp
	data_buf[i + 4] = 0x00;
 800193e:	f80d 5006 	strb.w	r5, [sp, r6]
	stuff_data(data_buf, i + 5);
 8001942:	f7ff ff92 	bl	800186a <stuff_data>
	for (int i = 0; i < size + 5; i++) {
 8001946:	466c      	mov	r4, sp
		putch(data_buf[i]);
 8001948:	f814 0b01 	ldrb.w	r0, [r4], #1
	for (int i = 0; i < size + 5; i++) {
 800194c:	3501      	adds	r5, #1
		putch(data_buf[i]);
 800194e:	f000 f967 	bl	8001c20 <putch>
	for (int i = 0; i < size + 5; i++) {
 8001952:	42ae      	cmp	r6, r5
 8001954:	daf8      	bge.n	8001948 <simpleserial_put+0x44>
	}
}
 8001956:	b040      	add	sp, #256	; 0x100
 8001958:	bd70      	pop	{r4, r5, r6, pc}

0800195a <check_version>:
{
 800195a:	b507      	push	{r0, r1, r2, lr}
	uint8_t ver = SS_VER;
 800195c:	2303      	movs	r3, #3
	simpleserial_put('r', 1, &ver);
 800195e:	f10d 0207 	add.w	r2, sp, #7
 8001962:	2101      	movs	r1, #1
 8001964:	2072      	movs	r0, #114	; 0x72
	uint8_t ver = SS_VER;
 8001966:	f88d 3007 	strb.w	r3, [sp, #7]
	simpleserial_put('r', 1, &ver);
 800196a:	f7ff ffcb 	bl	8001904 <simpleserial_put>
}
 800196e:	2000      	movs	r0, #0
 8001970:	b003      	add	sp, #12
 8001972:	f85d fb04 	ldr.w	pc, [sp], #4
 8001976:	0000      	movs	r0, r0

08001978 <ss_get_commands>:
{
 8001978:	b530      	push	{r4, r5, lr}
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 800197a:	480c      	ldr	r0, [pc, #48]	; (80019ac <ss_get_commands+0x34>)
 800197c:	7801      	ldrb	r1, [r0, #0]
{
 800197e:	b085      	sub	sp, #20
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8001980:	2200      	movs	r2, #0
        cmd_chars[i] = commands[i].c;
 8001982:	240c      	movs	r4, #12
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8001984:	b2d3      	uxtb	r3, r2
 8001986:	428b      	cmp	r3, r1
 8001988:	f102 0201 	add.w	r2, r2, #1
 800198c:	db06      	blt.n	800199c <ss_get_commands+0x24>
    simpleserial_put('r', num_commands & 0xFF, (void *)cmd_chars);
 800198e:	466a      	mov	r2, sp
 8001990:	2072      	movs	r0, #114	; 0x72
 8001992:	f7ff ffb7 	bl	8001904 <simpleserial_put>
}
 8001996:	2000      	movs	r0, #0
 8001998:	b005      	add	sp, #20
 800199a:	bd30      	pop	{r4, r5, pc}
        cmd_chars[i] = commands[i].c;
 800199c:	ad04      	add	r5, sp, #16
 800199e:	441d      	add	r5, r3
 80019a0:	fb04 0303 	mla	r3, r4, r3, r0
 80019a4:	791b      	ldrb	r3, [r3, #4]
 80019a6:	f805 3c10 	strb.w	r3, [r5, #-16]
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 80019aa:	e7eb      	b.n	8001984 <ss_get_commands+0xc>
 80019ac:	2000008c 	.word	0x2000008c

080019b0 <simpleserial_get>:
{
 80019b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019b4:	b0c2      	sub	sp, #264	; 0x108
	uint8_t err = 0;
 80019b6:	2500      	movs	r5, #0
 80019b8:	ae02      	add	r6, sp, #8
 80019ba:	f88d 5007 	strb.w	r5, [sp, #7]
	for (int i = 0; i < 4; i++) {
 80019be:	4634      	mov	r4, r6
		data_buf[i] = getch(); //PTR, cmd, scmd, len
 80019c0:	f000 f914 	bl	8001bec <getch>
 80019c4:	f806 0b01 	strb.w	r0, [r6], #1
		if (data_buf[i] == FRAME_BYTE) {
 80019c8:	b958      	cbnz	r0, 80019e2 <simpleserial_get+0x32>
			err = SS_ERR_FRAME_BYTE;
 80019ca:	2305      	movs	r3, #5
		err = SS_ERR_CRC;
 80019cc:	f88d 3007 	strb.w	r3, [sp, #7]
	simpleserial_put('e', 0x01, &err);
 80019d0:	f10d 0207 	add.w	r2, sp, #7
 80019d4:	2101      	movs	r1, #1
 80019d6:	2065      	movs	r0, #101	; 0x65
 80019d8:	f7ff ff94 	bl	8001904 <simpleserial_put>
}
 80019dc:	b042      	add	sp, #264	; 0x108
 80019de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (int i = 0; i < 4; i++) {
 80019e2:	3501      	adds	r5, #1
 80019e4:	2d04      	cmp	r5, #4
 80019e6:	d1eb      	bne.n	80019c0 <simpleserial_get+0x10>
	uint8_t next_frame = unstuff_data(data_buf, 4);
 80019e8:	4629      	mov	r1, r5
 80019ea:	4620      	mov	r0, r4
 80019ec:	f7ff ff4e 	bl	800188c <unstuff_data>
	for(c = 0; c < num_commands; c++)
 80019f0:	4f25      	ldr	r7, [pc, #148]	; (8001a88 <simpleserial_get+0xd8>)
		if(commands[c].c == data_buf[1])
 80019f2:	7861      	ldrb	r1, [r4, #1]
	for(c = 0; c < num_commands; c++)
 80019f4:	683a      	ldr	r2, [r7, #0]
	uint8_t next_frame = unstuff_data(data_buf, 4);
 80019f6:	4680      	mov	r8, r0
	for(c = 0; c < num_commands; c++)
 80019f8:	2300      	movs	r3, #0
		if(commands[c].c == data_buf[1])
 80019fa:	200c      	movs	r0, #12
	for(c = 0; c < num_commands; c++)
 80019fc:	fa5f f983 	uxtb.w	r9, r3
 8001a00:	4591      	cmp	r9, r2
 8001a02:	db02      	blt.n	8001a0a <simpleserial_get+0x5a>
	if (c == num_commands) {
 8001a04:	d107      	bne.n	8001a16 <simpleserial_get+0x66>
		err = SS_ERR_CMD;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e7e0      	b.n	80019cc <simpleserial_get+0x1c>
		if(commands[c].c == data_buf[1])
 8001a0a:	fb00 7609 	mla	r6, r0, r9, r7
 8001a0e:	3301      	adds	r3, #1
 8001a10:	7936      	ldrb	r6, [r6, #4]
 8001a12:	428e      	cmp	r6, r1
 8001a14:	d1f2      	bne.n	80019fc <simpleserial_get+0x4c>
	if ((data_buf[3] + 5) < next_frame) {
 8001a16:	78e3      	ldrb	r3, [r4, #3]
 8001a18:	3305      	adds	r3, #5
 8001a1a:	4543      	cmp	r3, r8
 8001a1c:	da02      	bge.n	8001a24 <simpleserial_get+0x74>
		err = SS_ERR_LEN;
 8001a1e:	2304      	movs	r3, #4
 8001a20:	e7d4      	b.n	80019cc <simpleserial_get+0x1c>
 8001a22:	4635      	mov	r5, r6
		data_buf[i] = getch();
 8001a24:	f000 f8e2 	bl	8001bec <getch>
 8001a28:	5560      	strb	r0, [r4, r5]
		if (data_buf[i] == FRAME_BYTE) {
 8001a2a:	2800      	cmp	r0, #0
 8001a2c:	d0cd      	beq.n	80019ca <simpleserial_get+0x1a>
	for (; i < data_buf[3] + 5; i++) {
 8001a2e:	78e3      	ldrb	r3, [r4, #3]
 8001a30:	1c6e      	adds	r6, r5, #1
 8001a32:	3304      	adds	r3, #4
 8001a34:	42b3      	cmp	r3, r6
 8001a36:	daf4      	bge.n	8001a22 <simpleserial_get+0x72>
	data_buf[i] = getch();
 8001a38:	f000 f8d8 	bl	8001bec <getch>
 8001a3c:	55a0      	strb	r0, [r4, r6]
	if (data_buf[i] != FRAME_BYTE) {
 8001a3e:	2800      	cmp	r0, #0
 8001a40:	d1ed      	bne.n	8001a1e <simpleserial_get+0x6e>
	unstuff_data(data_buf + next_frame, i - next_frame + 1);
 8001a42:	f1c8 0101 	rsb	r1, r8, #1
 8001a46:	fa51 f186 	uxtab	r1, r1, r6
 8001a4a:	b2c9      	uxtb	r1, r1
 8001a4c:	fa5f fa86 	uxtb.w	sl, r6
 8001a50:	eb04 0008 	add.w	r0, r4, r8
 8001a54:	f7ff ff1a 	bl	800188c <unstuff_data>
	uint8_t crc = ss_crc(data_buf+1, i-2);
 8001a58:	f1aa 0102 	sub.w	r1, sl, #2
 8001a5c:	b2c9      	uxtb	r1, r1
 8001a5e:	f10d 0009 	add.w	r0, sp, #9
 8001a62:	f7ff feed 	bl	8001840 <ss_crc>
	if (crc != data_buf[i-1]) {
 8001a66:	5d63      	ldrb	r3, [r4, r5]
 8001a68:	4283      	cmp	r3, r0
 8001a6a:	d001      	beq.n	8001a70 <simpleserial_get+0xc0>
		err = SS_ERR_CRC;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	e7ad      	b.n	80019cc <simpleserial_get+0x1c>
	err = commands[c].fp(data_buf[1], data_buf[2], data_buf[3], data_buf+4);
 8001a70:	230c      	movs	r3, #12
 8001a72:	fb03 7709 	mla	r7, r3, r9, r7
 8001a76:	78e2      	ldrb	r2, [r4, #3]
 8001a78:	68fd      	ldr	r5, [r7, #12]
 8001a7a:	78a1      	ldrb	r1, [r4, #2]
 8001a7c:	7860      	ldrb	r0, [r4, #1]
 8001a7e:	446b      	add	r3, sp
 8001a80:	47a8      	blx	r5
 8001a82:	f88d 0007 	strb.w	r0, [sp, #7]
 8001a86:	e7a3      	b.n	80019d0 <simpleserial_get+0x20>
 8001a88:	2000008c 	.word	0x2000008c

08001a8c <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 8001a8c:	b570      	push	{r4, r5, r6, lr}
 8001a8e:	b096      	sub	sp, #88	; 0x58
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
  #else
     RCC_OscInitTypeDef RCC_OscInitStruct;
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 8001a90:	2400      	movs	r4, #0
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8001a92:	2603      	movs	r6, #3
 8001a94:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001a98:	a80c      	add	r0, sp, #48	; 0x30

     RCC_ClkInitTypeDef RCC_ClkInitStruct;
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8001a9a:	2501      	movs	r5, #1
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8001a9c:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 8001aa0:	9410      	str	r4, [sp, #64]	; 0x40
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 8001aa2:	9414      	str	r4, [sp, #80]	; 0x50
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001aa4:	f000 f8d4 	bl	8001c50 <HAL_RCC_OscConfig>
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8001aa8:	230f      	movs	r3, #15
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
     uint32_t flash_latency = 0;
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 8001aaa:	4621      	mov	r1, r4
 8001aac:	a802      	add	r0, sp, #8
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8001aae:	e9cd 3502 	strd	r3, r5, [sp, #8]
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ab2:	e9cd 4404 	strd	r4, r4, [sp, #16]
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ab6:	9406      	str	r4, [sp, #24]
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 8001ab8:	f000 fb38 	bl	800212c <HAL_RCC_ClockConfig>




#if (PLATFORM==CWLITEARM)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001abc:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <platform_init+0x78>)
 8001abe:	695a      	ldr	r2, [r3, #20]
 8001ac0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001ac4:	615a      	str	r2, [r3, #20]
 8001ac6:	695b      	ldr	r3, [r3, #20]
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001ac8:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001acc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8001ad0:	4c0d      	ldr	r4, [pc, #52]	; (8001b08 <platform_init+0x7c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad2:	9301      	str	r3, [sp, #4]
 8001ad4:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8001ad6:	a907      	add	r1, sp, #28
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 8001ad8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8001adc:	4620      	mov	r0, r4
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8001ade:	e9cd 3507 	strd	r3, r5, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8001ae2:	f000 fbc9 	bl	8002278 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8001ae6:	462a      	mov	r2, r5
 8001ae8:	4620      	mov	r0, r4
 8001aea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aee:	f000 fc87 	bl	8002400 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8001af2:	462a      	mov	r2, r5
 8001af4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001af8:	4620      	mov	r0, r4
 8001afa:	f000 fc81 	bl	8002400 <HAL_GPIO_WritePin>
#endif
}
 8001afe:	b016      	add	sp, #88	; 0x58
 8001b00:	bd70      	pop	{r4, r5, r6, pc}
 8001b02:	bf00      	nop
 8001b04:	40021000 	.word	0x40021000
 8001b08:	48000800 	.word	0x48000800

08001b0c <init_uart>:

void init_uart(void)
{
 8001b0c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 8001b0e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
{
 8001b12:	b088      	sub	sp, #32
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 8001b14:	2302      	movs	r3, #2
 8001b16:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GpioInit.Pull      = GPIO_PULLUP;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e9cd 1305 	strd	r1, r3, [sp, #20]
  GpioInit.Alternate = GPIO_AF7_USART1;
  __GPIOA_CLK_ENABLE();
 8001b22:	4c16      	ldr	r4, [pc, #88]	; (8001b7c <init_uart+0x70>)
  GpioInit.Alternate = GPIO_AF7_USART1;
 8001b24:	2307      	movs	r3, #7
 8001b26:	9307      	str	r3, [sp, #28]
  __GPIOA_CLK_ENABLE();
 8001b28:	6963      	ldr	r3, [r4, #20]
 8001b2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b2e:	6163      	str	r3, [r4, #20]
 8001b30:	6963      	ldr	r3, [r4, #20]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b36:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8001b38:	a903      	add	r1, sp, #12
 8001b3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __GPIOA_CLK_ENABLE();
 8001b3e:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8001b40:	f000 fb9a 	bl	8002278 <HAL_GPIO_Init>

  UartHandle.Instance        = USART1;
 8001b44:	480e      	ldr	r0, [pc, #56]	; (8001b80 <init_uart+0x74>)
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
 8001b46:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8001b84 <init_uart+0x78>
 8001b4a:	f44f 3361 	mov.w	r3, #230400	; 0x38400
 8001b4e:	e9c0 c300 	strd	ip, r3, [r0]
  #else
  UartHandle.Init.BaudRate   = 38400;
  #endif
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8001b52:	2300      	movs	r3, #0
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8001b54:	e9c0 3302 	strd	r3, r3, [r0, #8]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8001b58:	6103      	str	r3, [r0, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8001b5a:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8001b5c:	230c      	movs	r3, #12
 8001b5e:	6143      	str	r3, [r0, #20]
  __USART1_CLK_ENABLE();
 8001b60:	69a3      	ldr	r3, [r4, #24]
 8001b62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b66:	61a3      	str	r3, [r4, #24]
 8001b68:	69a3      	ldr	r3, [r4, #24]
 8001b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b6e:	9302      	str	r3, [sp, #8]
 8001b70:	9b02      	ldr	r3, [sp, #8]
  HAL_UART_Init(&UartHandle);
 8001b72:	f000 fd99 	bl	80026a8 <HAL_UART_Init>
}
 8001b76:	b008      	add	sp, #32
 8001b78:	bd10      	pop	{r4, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	20000150 	.word	0x20000150
 8001b84:	40013800 	.word	0x40013800

08001b88 <trigger_setup>:

void trigger_setup(void)
{
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b88:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <trigger_setup+0x44>)
{
 8001b8a:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8c:	695a      	ldr	r2, [r3, #20]
 8001b8e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001b92:	615a      	str	r2, [r3, #20]
 8001b94:	695b      	ldr	r3, [r3, #20]
{
 8001b96:	b087      	sub	sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	9b00      	ldr	r3, [sp, #0]

  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_12;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8001ba0:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e9cd 4301 	strd	r4, r3, [sp, #4]
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001baa:	2500      	movs	r5, #0
 8001bac:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8001bae:	a901      	add	r1, sp, #4
 8001bb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001bb4:	e9cd 5303 	strd	r5, r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8001bb8:	f000 fb5e 	bl	8002278 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8001bbc:	462a      	mov	r2, r5
 8001bbe:	4621      	mov	r1, r4
 8001bc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc4:	f000 fc1c 	bl	8002400 <HAL_GPIO_WritePin>
}
 8001bc8:	b007      	add	sp, #28
 8001bca:	bd30      	pop	{r4, r5, pc}
 8001bcc:	40021000 	.word	0x40021000

08001bd0 <trigger_high>:

void trigger_high(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bda:	f000 bc11 	b.w	8002400 <HAL_GPIO_WritePin>

08001bde <trigger_low>:
}

void trigger_low(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8001bde:	2200      	movs	r2, #0
 8001be0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001be4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be8:	f000 bc0a 	b.w	8002400 <HAL_GPIO_WritePin>

08001bec <getch>:
}

char getch(void)
{
 8001bec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t d;
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8001bee:	4d0a      	ldr	r5, [pc, #40]	; (8001c18 <getch+0x2c>)
    USART1->ICR |= (1 << 3);
 8001bf0:	4c0a      	ldr	r4, [pc, #40]	; (8001c1c <getch+0x30>)
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8001bf2:	f241 3388 	movw	r3, #5000	; 0x1388
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f10d 0107 	add.w	r1, sp, #7
 8001bfc:	4628      	mov	r0, r5
 8001bfe:	f000 fdd4 	bl	80027aa <HAL_UART_Receive>
 8001c02:	b918      	cbnz	r0, 8001c0c <getch+0x20>
  //putch(d);
  return d;
}
 8001c04:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001c08:	b003      	add	sp, #12
 8001c0a:	bd30      	pop	{r4, r5, pc}
    USART1->ICR |= (1 << 3);
 8001c0c:	6a23      	ldr	r3, [r4, #32]
 8001c0e:	f043 0308 	orr.w	r3, r3, #8
 8001c12:	6223      	str	r3, [r4, #32]
 8001c14:	e7ed      	b.n	8001bf2 <getch+0x6>
 8001c16:	bf00      	nop
 8001c18:	20000150 	.word	0x20000150
 8001c1c:	40013800 	.word	0x40013800

08001c20 <putch>:

void putch(char c)
{
 8001c20:	b507      	push	{r0, r1, r2, lr}
  uint8_t d  = c;
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8001c22:	f241 3388 	movw	r3, #5000	; 0x1388
  uint8_t d  = c;
 8001c26:	f88d 0007 	strb.w	r0, [sp, #7]
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f10d 0107 	add.w	r1, sp, #7
 8001c30:	4802      	ldr	r0, [pc, #8]	; (8001c3c <putch+0x1c>)
 8001c32:	f000 fd64 	bl	80026fe <HAL_UART_Transmit>
}
 8001c36:	b003      	add	sp, #12
 8001c38:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c3c:	20000150 	.word	0x20000150

08001c40 <HAL_GetTick>:
	hal_sys_tick = 0;
	return HAL_OK;
}
uint32_t HAL_GetTick(void)
{
	return hal_sys_tick++;
 8001c40:	4b02      	ldr	r3, [pc, #8]	; (8001c4c <HAL_GetTick+0xc>)
 8001c42:	6818      	ldr	r0, [r3, #0]
 8001c44:	1c42      	adds	r2, r0, #1
 8001c46:	601a      	str	r2, [r3, #0]
}
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	200001c0 	.word	0x200001c0

08001c50 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c50:	6803      	ldr	r3, [r0, #0]
{
 8001c52:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c56:	07d9      	lsls	r1, r3, #31
{
 8001c58:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c5a:	d411      	bmi.n	8001c80 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c5c:	6823      	ldr	r3, [r4, #0]
 8001c5e:	079a      	lsls	r2, r3, #30
 8001c60:	f100 8086 	bmi.w	8001d70 <HAL_RCC_OscConfig+0x120>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c64:	6823      	ldr	r3, [r4, #0]
 8001c66:	071e      	lsls	r6, r3, #28
 8001c68:	f100 80f4 	bmi.w	8001e54 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c6c:	6823      	ldr	r3, [r4, #0]
 8001c6e:	075d      	lsls	r5, r3, #29
 8001c70:	f100 8140 	bmi.w	8001ef4 <HAL_RCC_OscConfig+0x2a4>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c74:	69e2      	ldr	r2, [r4, #28]
 8001c76:	2a00      	cmp	r2, #0
 8001c78:	f040 81cb 	bne.w	8002012 <HAL_RCC_OscConfig+0x3c2>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	e021      	b.n	8001cc4 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c80:	499a      	ldr	r1, [pc, #616]	; (8001eec <HAL_RCC_OscConfig+0x29c>)
 8001c82:	684b      	ldr	r3, [r1, #4]
 8001c84:	f003 030c 	and.w	r3, r3, #12
 8001c88:	2b04      	cmp	r3, #4
 8001c8a:	d007      	beq.n	8001c9c <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c8c:	684b      	ldr	r3, [r1, #4]
 8001c8e:	f003 030c 	and.w	r3, r3, #12
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	d119      	bne.n	8001cca <HAL_RCC_OscConfig+0x7a>
 8001c96:	684b      	ldr	r3, [r1, #4]
 8001c98:	03db      	lsls	r3, r3, #15
 8001c9a:	d516      	bpl.n	8001cca <HAL_RCC_OscConfig+0x7a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ca0:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca4:	6809      	ldr	r1, [r1, #0]
 8001ca6:	fa93 f3a3 	rbit	r3, r3
 8001caa:	fab3 f383 	clz	r3, r3
 8001cae:	f003 031f 	and.w	r3, r3, #31
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	420b      	tst	r3, r1
 8001cba:	d0cf      	beq.n	8001c5c <HAL_RCC_OscConfig+0xc>
 8001cbc:	6863      	ldr	r3, [r4, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1cc      	bne.n	8001c5c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001cc2:	2001      	movs	r0, #1
}
 8001cc4:	b002      	add	sp, #8
 8001cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cca:	6862      	ldr	r2, [r4, #4]
 8001ccc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001cd0:	d124      	bne.n	8001d1c <HAL_RCC_OscConfig+0xcc>
 8001cd2:	680b      	ldr	r3, [r1, #0]
 8001cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd8:	600b      	str	r3, [r1, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cda:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001cdc:	68a0      	ldr	r0, [r4, #8]
 8001cde:	f023 030f 	bic.w	r3, r3, #15
 8001ce2:	4303      	orrs	r3, r0
 8001ce4:	62cb      	str	r3, [r1, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ce6:	b34a      	cbz	r2, 8001d3c <HAL_RCC_OscConfig+0xec>
        tickstart = HAL_GetTick();
 8001ce8:	f7ff ffaa 	bl	8001c40 <HAL_GetTick>
 8001cec:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001cf0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf2:	2701      	movs	r7, #1
 8001cf4:	fa96 f3a6 	rbit	r3, r6
 8001cf8:	680a      	ldr	r2, [r1, #0]
 8001cfa:	fa96 f3a6 	rbit	r3, r6
 8001cfe:	fab3 f383 	clz	r3, r3
 8001d02:	f003 031f 	and.w	r3, r3, #31
 8001d06:	fa07 f303 	lsl.w	r3, r7, r3
 8001d0a:	4213      	tst	r3, r2
 8001d0c:	d1a6      	bne.n	8001c5c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d0e:	f7ff ff97 	bl	8001c40 <HAL_GetTick>
 8001d12:	1b40      	subs	r0, r0, r5
 8001d14:	2864      	cmp	r0, #100	; 0x64
 8001d16:	d9ed      	bls.n	8001cf4 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 8001d18:	2003      	movs	r0, #3
 8001d1a:	e7d3      	b.n	8001cc4 <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d1c:	680b      	ldr	r3, [r1, #0]
 8001d1e:	b932      	cbnz	r2, 8001d2e <HAL_RCC_OscConfig+0xde>
 8001d20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d24:	600b      	str	r3, [r1, #0]
 8001d26:	680b      	ldr	r3, [r1, #0]
 8001d28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d2c:	e7d4      	b.n	8001cd8 <HAL_RCC_OscConfig+0x88>
 8001d2e:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001d32:	d1f5      	bne.n	8001d20 <HAL_RCC_OscConfig+0xd0>
 8001d34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d38:	600b      	str	r3, [r1, #0]
 8001d3a:	e7ca      	b.n	8001cd2 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001d3c:	f7ff ff80 	bl	8001c40 <HAL_GetTick>
 8001d40:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001d44:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d46:	2701      	movs	r7, #1
 8001d48:	fa96 f3a6 	rbit	r3, r6
 8001d4c:	680a      	ldr	r2, [r1, #0]
 8001d4e:	fa96 f3a6 	rbit	r3, r6
 8001d52:	fab3 f383 	clz	r3, r3
 8001d56:	f003 031f 	and.w	r3, r3, #31
 8001d5a:	fa07 f303 	lsl.w	r3, r7, r3
 8001d5e:	4213      	tst	r3, r2
 8001d60:	f43f af7c 	beq.w	8001c5c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d64:	f7ff ff6c 	bl	8001c40 <HAL_GetTick>
 8001d68:	1b40      	subs	r0, r0, r5
 8001d6a:	2864      	cmp	r0, #100	; 0x64
 8001d6c:	d9ec      	bls.n	8001d48 <HAL_RCC_OscConfig+0xf8>
 8001d6e:	e7d3      	b.n	8001d18 <HAL_RCC_OscConfig+0xc8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d70:	495e      	ldr	r1, [pc, #376]	; (8001eec <HAL_RCC_OscConfig+0x29c>)
 8001d72:	684b      	ldr	r3, [r1, #4]
 8001d74:	f013 0f0c 	tst.w	r3, #12
 8001d78:	d007      	beq.n	8001d8a <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d7a:	684b      	ldr	r3, [r1, #4]
 8001d7c:	f003 030c 	and.w	r3, r3, #12
 8001d80:	2b08      	cmp	r3, #8
 8001d82:	d121      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x178>
 8001d84:	684b      	ldr	r3, [r1, #4]
 8001d86:	03df      	lsls	r7, r3, #15
 8001d88:	d41e      	bmi.n	8001dc8 <HAL_RCC_OscConfig+0x178>
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d90:	6808      	ldr	r0, [r1, #0]
 8001d92:	fa93 f3a3 	rbit	r3, r3
 8001d96:	fab3 f383 	clz	r3, r3
 8001d9a:	f003 031f 	and.w	r3, r3, #31
 8001d9e:	2201      	movs	r2, #1
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	4203      	tst	r3, r0
 8001da6:	d002      	beq.n	8001dae <HAL_RCC_OscConfig+0x15e>
 8001da8:	6923      	ldr	r3, [r4, #16]
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d189      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dae:	6808      	ldr	r0, [r1, #0]
 8001db0:	23f8      	movs	r3, #248	; 0xf8
 8001db2:	fa93 f3a3 	rbit	r3, r3
 8001db6:	fab3 f283 	clz	r2, r3
 8001dba:	6963      	ldr	r3, [r4, #20]
 8001dbc:	4093      	lsls	r3, r2
 8001dbe:	f020 02f8 	bic.w	r2, r0, #248	; 0xf8
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	600b      	str	r3, [r1, #0]
 8001dc6:	e74d      	b.n	8001c64 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dc8:	6922      	ldr	r2, [r4, #16]
 8001dca:	2501      	movs	r5, #1
 8001dcc:	b302      	cbz	r2, 8001e10 <HAL_RCC_OscConfig+0x1c0>
 8001dce:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 8001dd2:	fab3 f383 	clz	r3, r3
 8001dd6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001dda:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	2702      	movs	r7, #2
 8001de2:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8001de4:	f7ff ff2c 	bl	8001c40 <HAL_GetTick>
 8001de8:	4606      	mov	r6, r0
 8001dea:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dee:	680a      	ldr	r2, [r1, #0]
 8001df0:	fa97 f3a7 	rbit	r3, r7
 8001df4:	fab3 f383 	clz	r3, r3
 8001df8:	f003 031f 	and.w	r3, r3, #31
 8001dfc:	fa05 f303 	lsl.w	r3, r5, r3
 8001e00:	4213      	tst	r3, r2
 8001e02:	d1d4      	bne.n	8001dae <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e04:	f7ff ff1c 	bl	8001c40 <HAL_GetTick>
 8001e08:	1b80      	subs	r0, r0, r6
 8001e0a:	2802      	cmp	r0, #2
 8001e0c:	d9ed      	bls.n	8001dea <HAL_RCC_OscConfig+0x19a>
 8001e0e:	e783      	b.n	8001d18 <HAL_RCC_OscConfig+0xc8>
 8001e10:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8001e14:	fab3 f383 	clz	r3, r3
 8001e18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	2702      	movs	r7, #2
 8001e24:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001e26:	f7ff ff0b 	bl	8001c40 <HAL_GetTick>
 8001e2a:	4606      	mov	r6, r0
 8001e2c:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e30:	680a      	ldr	r2, [r1, #0]
 8001e32:	fa97 f3a7 	rbit	r3, r7
 8001e36:	fab3 f383 	clz	r3, r3
 8001e3a:	f003 031f 	and.w	r3, r3, #31
 8001e3e:	fa05 f303 	lsl.w	r3, r5, r3
 8001e42:	4213      	tst	r3, r2
 8001e44:	f43f af0e 	beq.w	8001c64 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e48:	f7ff fefa 	bl	8001c40 <HAL_GetTick>
 8001e4c:	1b80      	subs	r0, r0, r6
 8001e4e:	2802      	cmp	r0, #2
 8001e50:	d9ec      	bls.n	8001e2c <HAL_RCC_OscConfig+0x1dc>
 8001e52:	e761      	b.n	8001d18 <HAL_RCC_OscConfig+0xc8>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e54:	69a2      	ldr	r2, [r4, #24]
 8001e56:	4d25      	ldr	r5, [pc, #148]	; (8001eec <HAL_RCC_OscConfig+0x29c>)
 8001e58:	4825      	ldr	r0, [pc, #148]	; (8001ef0 <HAL_RCC_OscConfig+0x2a0>)
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	b312      	cbz	r2, 8001ea4 <HAL_RCC_OscConfig+0x254>
 8001e5e:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_ENABLE();
 8001e62:	fab3 f383 	clz	r3, r3
 8001e66:	4403      	add	r3, r0
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	2602      	movs	r6, #2
 8001e6c:	6019      	str	r1, [r3, #0]
      tickstart = HAL_GetTick();
 8001e6e:	f7ff fee7 	bl	8001c40 <HAL_GetTick>
 8001e72:	4607      	mov	r7, r0
 8001e74:	fa96 f3a6 	rbit	r3, r6
 8001e78:	fa96 f3a6 	rbit	r3, r6
 8001e7c:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e80:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001e82:	fa96 f3a6 	rbit	r3, r6
 8001e86:	fab3 f383 	clz	r3, r3
 8001e8a:	f003 031f 	and.w	r3, r3, #31
 8001e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e92:	4213      	tst	r3, r2
 8001e94:	f47f aeea 	bne.w	8001c6c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e98:	f7ff fed2 	bl	8001c40 <HAL_GetTick>
 8001e9c:	1bc0      	subs	r0, r0, r7
 8001e9e:	2802      	cmp	r0, #2
 8001ea0:	d9e8      	bls.n	8001e74 <HAL_RCC_OscConfig+0x224>
 8001ea2:	e739      	b.n	8001d18 <HAL_RCC_OscConfig+0xc8>
 8001ea4:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_DISABLE();
 8001ea8:	fab3 f383 	clz	r3, r3
 8001eac:	4403      	add	r3, r0
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	2602      	movs	r6, #2
 8001eb2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001eb4:	f7ff fec4 	bl	8001c40 <HAL_GetTick>
 8001eb8:	4607      	mov	r7, r0
 8001eba:	fa96 f3a6 	rbit	r3, r6
 8001ebe:	fa96 f3a6 	rbit	r3, r6
 8001ec2:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001ec8:	fa96 f3a6 	rbit	r3, r6
 8001ecc:	fab3 f383 	clz	r3, r3
 8001ed0:	f003 031f 	and.w	r3, r3, #31
 8001ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed8:	4213      	tst	r3, r2
 8001eda:	f43f aec7 	beq.w	8001c6c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ede:	f7ff feaf 	bl	8001c40 <HAL_GetTick>
 8001ee2:	1bc0      	subs	r0, r0, r7
 8001ee4:	2802      	cmp	r0, #2
 8001ee6:	d9e8      	bls.n	8001eba <HAL_RCC_OscConfig+0x26a>
 8001ee8:	e716      	b.n	8001d18 <HAL_RCC_OscConfig+0xc8>
 8001eea:	bf00      	nop
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	10908120 	.word	0x10908120
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ef4:	498a      	ldr	r1, [pc, #552]	; (8002120 <HAL_RCC_OscConfig+0x4d0>)
 8001ef6:	69cb      	ldr	r3, [r1, #28]
 8001ef8:	00d8      	lsls	r0, r3, #3
 8001efa:	d433      	bmi.n	8001f64 <HAL_RCC_OscConfig+0x314>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001efc:	69cb      	ldr	r3, [r1, #28]
 8001efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f02:	61cb      	str	r3, [r1, #28]
 8001f04:	69cb      	ldr	r3, [r1, #28]
 8001f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0a:	9301      	str	r3, [sp, #4]
 8001f0c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001f0e:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f10:	4e84      	ldr	r6, [pc, #528]	; (8002124 <HAL_RCC_OscConfig+0x4d4>)
 8001f12:	6833      	ldr	r3, [r6, #0]
 8001f14:	05da      	lsls	r2, r3, #23
 8001f16:	d527      	bpl.n	8001f68 <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f18:	68e3      	ldr	r3, [r4, #12]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d134      	bne.n	8001f88 <HAL_RCC_OscConfig+0x338>
 8001f1e:	6a0b      	ldr	r3, [r1, #32]
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8001f26:	f7ff fe8b 	bl	8001c40 <HAL_GetTick>
 8001f2a:	2602      	movs	r6, #2
 8001f2c:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f2e:	f04f 0801 	mov.w	r8, #1
 8001f32:	fa96 f3a6 	rbit	r3, r6
 8001f36:	fa96 f3a6 	rbit	r3, r6
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d061      	beq.n	8002002 <HAL_RCC_OscConfig+0x3b2>
 8001f3e:	6a0a      	ldr	r2, [r1, #32]
 8001f40:	fa96 f3a6 	rbit	r3, r6
 8001f44:	fab3 f383 	clz	r3, r3
 8001f48:	f003 031f 	and.w	r3, r3, #31
 8001f4c:	fa08 f303 	lsl.w	r3, r8, r3
 8001f50:	4213      	tst	r3, r2
 8001f52:	d04e      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x3a2>
    if(pwrclkchanged == SET)
 8001f54:	2d00      	cmp	r5, #0
 8001f56:	f43f ae8d 	beq.w	8001c74 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f5a:	69cb      	ldr	r3, [r1, #28]
 8001f5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f60:	61cb      	str	r3, [r1, #28]
 8001f62:	e687      	b.n	8001c74 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001f64:	2500      	movs	r5, #0
 8001f66:	e7d3      	b.n	8001f10 <HAL_RCC_OscConfig+0x2c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f68:	6833      	ldr	r3, [r6, #0]
 8001f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f6e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001f70:	f7ff fe66 	bl	8001c40 <HAL_GetTick>
 8001f74:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f76:	6833      	ldr	r3, [r6, #0]
 8001f78:	05db      	lsls	r3, r3, #23
 8001f7a:	d4cd      	bmi.n	8001f18 <HAL_RCC_OscConfig+0x2c8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f7c:	f7ff fe60 	bl	8001c40 <HAL_GetTick>
 8001f80:	1bc0      	subs	r0, r0, r7
 8001f82:	2864      	cmp	r0, #100	; 0x64
 8001f84:	d9f7      	bls.n	8001f76 <HAL_RCC_OscConfig+0x326>
 8001f86:	e6c7      	b.n	8001d18 <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f88:	bb2b      	cbnz	r3, 8001fd6 <HAL_RCC_OscConfig+0x386>
 8001f8a:	6a0b      	ldr	r3, [r1, #32]
 8001f8c:	f023 0301 	bic.w	r3, r3, #1
 8001f90:	620b      	str	r3, [r1, #32]
 8001f92:	6a0b      	ldr	r3, [r1, #32]
 8001f94:	f023 0304 	bic.w	r3, r3, #4
 8001f98:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8001f9a:	f7ff fe51 	bl	8001c40 <HAL_GetTick>
 8001f9e:	2602      	movs	r6, #2
 8001fa0:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa2:	f04f 0801 	mov.w	r8, #1
 8001fa6:	fa96 f3a6 	rbit	r3, r6
 8001faa:	fa96 f3a6 	rbit	r3, r6
 8001fae:	b363      	cbz	r3, 800200a <HAL_RCC_OscConfig+0x3ba>
 8001fb0:	6a0a      	ldr	r2, [r1, #32]
 8001fb2:	fa96 f3a6 	rbit	r3, r6
 8001fb6:	fab3 f383 	clz	r3, r3
 8001fba:	f003 031f 	and.w	r3, r3, #31
 8001fbe:	fa08 f303 	lsl.w	r3, r8, r3
 8001fc2:	4213      	tst	r3, r2
 8001fc4:	d0c6      	beq.n	8001f54 <HAL_RCC_OscConfig+0x304>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fc6:	f7ff fe3b 	bl	8001c40 <HAL_GetTick>
 8001fca:	f241 3388 	movw	r3, #5000	; 0x1388
 8001fce:	1bc0      	subs	r0, r0, r7
 8001fd0:	4298      	cmp	r0, r3
 8001fd2:	d9e8      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x356>
 8001fd4:	e6a0      	b.n	8001d18 <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fd6:	2b05      	cmp	r3, #5
 8001fd8:	6a0b      	ldr	r3, [r1, #32]
 8001fda:	d103      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x394>
 8001fdc:	f043 0304 	orr.w	r3, r3, #4
 8001fe0:	620b      	str	r3, [r1, #32]
 8001fe2:	e79c      	b.n	8001f1e <HAL_RCC_OscConfig+0x2ce>
 8001fe4:	f023 0301 	bic.w	r3, r3, #1
 8001fe8:	620b      	str	r3, [r1, #32]
 8001fea:	6a0b      	ldr	r3, [r1, #32]
 8001fec:	f023 0304 	bic.w	r3, r3, #4
 8001ff0:	e798      	b.n	8001f24 <HAL_RCC_OscConfig+0x2d4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ff2:	f7ff fe25 	bl	8001c40 <HAL_GetTick>
 8001ff6:	f241 3388 	movw	r3, #5000	; 0x1388
 8001ffa:	1bc0      	subs	r0, r0, r7
 8001ffc:	4298      	cmp	r0, r3
 8001ffe:	d998      	bls.n	8001f32 <HAL_RCC_OscConfig+0x2e2>
 8002000:	e68a      	b.n	8001d18 <HAL_RCC_OscConfig+0xc8>
 8002002:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002006:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8002008:	e79a      	b.n	8001f40 <HAL_RCC_OscConfig+0x2f0>
 800200a:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800200e:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8002010:	e7cf      	b.n	8001fb2 <HAL_RCC_OscConfig+0x362>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002012:	4943      	ldr	r1, [pc, #268]	; (8002120 <HAL_RCC_OscConfig+0x4d0>)
 8002014:	684b      	ldr	r3, [r1, #4]
 8002016:	f003 030c 	and.w	r3, r3, #12
 800201a:	2b08      	cmp	r3, #8
 800201c:	f43f ae51 	beq.w	8001cc2 <HAL_RCC_OscConfig+0x72>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002020:	2a02      	cmp	r2, #2
 8002022:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002026:	d154      	bne.n	80020d2 <HAL_RCC_OscConfig+0x482>
 8002028:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800202c:	fab3 f383 	clz	r3, r3
 8002030:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002034:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800203e:	f7ff fdff 	bl	8001c40 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002042:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8002128 <HAL_RCC_OscConfig+0x4d8>
        tickstart = HAL_GetTick();
 8002046:	4606      	mov	r6, r0
 8002048:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800204c:	2501      	movs	r5, #1
 800204e:	fa97 f3a7 	rbit	r3, r7
 8002052:	680a      	ldr	r2, [r1, #0]
 8002054:	fa97 f3a7 	rbit	r3, r7
 8002058:	fab3 f383 	clz	r3, r3
 800205c:	f003 031f 	and.w	r3, r3, #31
 8002060:	fa05 f303 	lsl.w	r3, r5, r3
 8002064:	4213      	tst	r3, r2
 8002066:	d12e      	bne.n	80020c6 <HAL_RCC_OscConfig+0x476>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002068:	e9d4 0308 	ldrd	r0, r3, [r4, #32]
 800206c:	684a      	ldr	r2, [r1, #4]
 800206e:	4303      	orrs	r3, r0
 8002070:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8002074:	4313      	orrs	r3, r2
 8002076:	604b      	str	r3, [r1, #4]
 8002078:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800207c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8002080:	fab3 f383 	clz	r3, r3
 8002084:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002088:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800208c:	009b      	lsls	r3, r3, #2
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800208e:	4f26      	ldr	r7, [pc, #152]	; (8002128 <HAL_RCC_OscConfig+0x4d8>)
        __HAL_RCC_PLL_ENABLE();
 8002090:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8002092:	f7ff fdd5 	bl	8001c40 <HAL_GetTick>
 8002096:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800209a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800209c:	2601      	movs	r6, #1
 800209e:	fa95 f3a5 	rbit	r3, r5
 80020a2:	680a      	ldr	r2, [r1, #0]
 80020a4:	fa95 f3a5 	rbit	r3, r5
 80020a8:	fab3 f383 	clz	r3, r3
 80020ac:	f003 031f 	and.w	r3, r3, #31
 80020b0:	fa06 f303 	lsl.w	r3, r6, r3
 80020b4:	4213      	tst	r3, r2
 80020b6:	f47f ade1 	bne.w	8001c7c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ba:	f7ff fdc1 	bl	8001c40 <HAL_GetTick>
 80020be:	1b00      	subs	r0, r0, r4
 80020c0:	42b8      	cmp	r0, r7
 80020c2:	d9ec      	bls.n	800209e <HAL_RCC_OscConfig+0x44e>
 80020c4:	e628      	b.n	8001d18 <HAL_RCC_OscConfig+0xc8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020c6:	f7ff fdbb 	bl	8001c40 <HAL_GetTick>
 80020ca:	1b80      	subs	r0, r0, r6
 80020cc:	4540      	cmp	r0, r8
 80020ce:	d9be      	bls.n	800204e <HAL_RCC_OscConfig+0x3fe>
 80020d0:	e622      	b.n	8001d18 <HAL_RCC_OscConfig+0xc8>
 80020d2:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80020d6:	fab3 f383 	clz	r3, r3
 80020da:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020de:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80020e8:	f7ff fdaa 	bl	8001c40 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ec:	4f0e      	ldr	r7, [pc, #56]	; (8002128 <HAL_RCC_OscConfig+0x4d8>)
        tickstart = HAL_GetTick();
 80020ee:	4604      	mov	r4, r0
 80020f0:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020f4:	2601      	movs	r6, #1
 80020f6:	fa95 f3a5 	rbit	r3, r5
 80020fa:	680a      	ldr	r2, [r1, #0]
 80020fc:	fa95 f3a5 	rbit	r3, r5
 8002100:	fab3 f383 	clz	r3, r3
 8002104:	f003 031f 	and.w	r3, r3, #31
 8002108:	fa06 f303 	lsl.w	r3, r6, r3
 800210c:	4213      	tst	r3, r2
 800210e:	f43f adb5 	beq.w	8001c7c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002112:	f7ff fd95 	bl	8001c40 <HAL_GetTick>
 8002116:	1b00      	subs	r0, r0, r4
 8002118:	42b8      	cmp	r0, r7
 800211a:	d9ec      	bls.n	80020f6 <HAL_RCC_OscConfig+0x4a6>
 800211c:	e5fc      	b.n	8001d18 <HAL_RCC_OscConfig+0xc8>
 800211e:	bf00      	nop
 8002120:	40021000 	.word	0x40021000
 8002124:	40007000 	.word	0x40007000
 8002128:	00030d40 	.word	0x00030d40

0800212c <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800212c:	4a50      	ldr	r2, [pc, #320]	; (8002270 <HAL_RCC_ClockConfig+0x144>)
{
 800212e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002130:	6813      	ldr	r3, [r2, #0]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	428b      	cmp	r3, r1
{
 8002138:	4604      	mov	r4, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800213a:	d31b      	bcc.n	8002174 <HAL_RCC_ClockConfig+0x48>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800213c:	6822      	ldr	r2, [r4, #0]
 800213e:	0790      	lsls	r0, r2, #30
 8002140:	d424      	bmi.n	800218c <HAL_RCC_ClockConfig+0x60>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002142:	07d2      	lsls	r2, r2, #31
 8002144:	d42a      	bmi.n	800219c <HAL_RCC_ClockConfig+0x70>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002146:	4a4a      	ldr	r2, [pc, #296]	; (8002270 <HAL_RCC_ClockConfig+0x144>)
 8002148:	6813      	ldr	r3, [r2, #0]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	428b      	cmp	r3, r1
 8002150:	d87a      	bhi.n	8002248 <HAL_RCC_ClockConfig+0x11c>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002152:	6820      	ldr	r0, [r4, #0]
 8002154:	0743      	lsls	r3, r0, #29
 8002156:	f100 8082 	bmi.w	800225e <HAL_RCC_ClockConfig+0x132>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800215a:	f010 0008 	ands.w	r0, r0, #8
 800215e:	d014      	beq.n	800218a <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002160:	4a44      	ldr	r2, [pc, #272]	; (8002274 <HAL_RCC_ClockConfig+0x148>)
 8002162:	6921      	ldr	r1, [r4, #16]
 8002164:	6853      	ldr	r3, [r2, #4]
 8002166:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800216a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800216e:	6053      	str	r3, [r2, #4]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 8002170:	2000      	movs	r0, #0
 8002172:	e00a      	b.n	800218a <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002174:	6813      	ldr	r3, [r2, #0]
 8002176:	f023 0307 	bic.w	r3, r3, #7
 800217a:	430b      	orrs	r3, r1
 800217c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800217e:	6813      	ldr	r3, [r2, #0]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	428b      	cmp	r3, r1
 8002186:	d0d9      	beq.n	800213c <HAL_RCC_ClockConfig+0x10>
      return HAL_ERROR;
 8002188:	2001      	movs	r0, #1
}
 800218a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800218c:	4839      	ldr	r0, [pc, #228]	; (8002274 <HAL_RCC_ClockConfig+0x148>)
 800218e:	68a5      	ldr	r5, [r4, #8]
 8002190:	6843      	ldr	r3, [r0, #4]
 8002192:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002196:	432b      	orrs	r3, r5
 8002198:	6043      	str	r3, [r0, #4]
 800219a:	e7d2      	b.n	8002142 <HAL_RCC_ClockConfig+0x16>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800219c:	6862      	ldr	r2, [r4, #4]
 800219e:	4d35      	ldr	r5, [pc, #212]	; (8002274 <HAL_RCC_ClockConfig+0x148>)
 80021a0:	2a01      	cmp	r2, #1
 80021a2:	d127      	bne.n	80021f4 <HAL_RCC_ClockConfig+0xc8>
 80021a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021a8:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ac:	6828      	ldr	r0, [r5, #0]
 80021ae:	fa93 f3a3 	rbit	r3, r3
 80021b2:	fab3 f383 	clz	r3, r3
 80021b6:	f003 031f 	and.w	r3, r3, #31
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	4203      	tst	r3, r0
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c0:	d0e2      	beq.n	8002188 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021c2:	686b      	ldr	r3, [r5, #4]
 80021c4:	f023 0303 	bic.w	r3, r3, #3
 80021c8:	431a      	orrs	r2, r3
 80021ca:	606a      	str	r2, [r5, #4]
    tickstart = HAL_GetTick();
 80021cc:	f7ff fd38 	bl	8001c40 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021d0:	6863      	ldr	r3, [r4, #4]
 80021d2:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 80021d4:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d6:	f241 3788 	movw	r7, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021da:	d11e      	bne.n	800221a <HAL_RCC_ClockConfig+0xee>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80021dc:	686b      	ldr	r3, [r5, #4]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d0af      	beq.n	8002146 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e6:	f7ff fd2b 	bl	8001c40 <HAL_GetTick>
 80021ea:	1b80      	subs	r0, r0, r6
 80021ec:	42b8      	cmp	r0, r7
 80021ee:	d9f5      	bls.n	80021dc <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 80021f0:	2003      	movs	r0, #3
 80021f2:	e7ca      	b.n	800218a <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021f4:	2a02      	cmp	r2, #2
 80021f6:	bf0c      	ite	eq
 80021f8:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80021fc:	2302      	movne	r3, #2
 80021fe:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002202:	682e      	ldr	r6, [r5, #0]
 8002204:	fa93 f3a3 	rbit	r3, r3
 8002208:	fab3 f383 	clz	r3, r3
 800220c:	f003 031f 	and.w	r3, r3, #31
 8002210:	2001      	movs	r0, #1
 8002212:	fa00 f303 	lsl.w	r3, r0, r3
 8002216:	4233      	tst	r3, r6
 8002218:	e7d2      	b.n	80021c0 <HAL_RCC_ClockConfig+0x94>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800221a:	2b02      	cmp	r3, #2
 800221c:	d10f      	bne.n	800223e <HAL_RCC_ClockConfig+0x112>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800221e:	686b      	ldr	r3, [r5, #4]
 8002220:	f003 030c 	and.w	r3, r3, #12
 8002224:	2b08      	cmp	r3, #8
 8002226:	d08e      	beq.n	8002146 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002228:	f7ff fd0a 	bl	8001c40 <HAL_GetTick>
 800222c:	1b80      	subs	r0, r0, r6
 800222e:	42b8      	cmp	r0, r7
 8002230:	d9f5      	bls.n	800221e <HAL_RCC_ClockConfig+0xf2>
 8002232:	e7dd      	b.n	80021f0 <HAL_RCC_ClockConfig+0xc4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002234:	f7ff fd04 	bl	8001c40 <HAL_GetTick>
 8002238:	1b80      	subs	r0, r0, r6
 800223a:	42b8      	cmp	r0, r7
 800223c:	d8d8      	bhi.n	80021f0 <HAL_RCC_ClockConfig+0xc4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800223e:	686b      	ldr	r3, [r5, #4]
 8002240:	f013 0f0c 	tst.w	r3, #12
 8002244:	d1f6      	bne.n	8002234 <HAL_RCC_ClockConfig+0x108>
 8002246:	e77e      	b.n	8002146 <HAL_RCC_ClockConfig+0x1a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002248:	6813      	ldr	r3, [r2, #0]
 800224a:	f023 0307 	bic.w	r3, r3, #7
 800224e:	430b      	orrs	r3, r1
 8002250:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002252:	6813      	ldr	r3, [r2, #0]
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	428b      	cmp	r3, r1
 800225a:	d195      	bne.n	8002188 <HAL_RCC_ClockConfig+0x5c>
 800225c:	e779      	b.n	8002152 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800225e:	4905      	ldr	r1, [pc, #20]	; (8002274 <HAL_RCC_ClockConfig+0x148>)
 8002260:	68e3      	ldr	r3, [r4, #12]
 8002262:	684a      	ldr	r2, [r1, #4]
 8002264:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002268:	431a      	orrs	r2, r3
 800226a:	604a      	str	r2, [r1, #4]
 800226c:	e775      	b.n	800215a <HAL_RCC_ClockConfig+0x2e>
 800226e:	bf00      	nop
 8002270:	40022000 	.word	0x40022000
 8002274:	40021000 	.word	0x40021000

08002278 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002278:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800227c:	f8df 8174 	ldr.w	r8, [pc, #372]	; 80023f4 <HAL_GPIO_Init+0x17c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002280:	4c5d      	ldr	r4, [pc, #372]	; (80023f8 <HAL_GPIO_Init+0x180>)
  uint32_t position = 0x00U;
 8002282:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002284:	f04f 0901 	mov.w	r9, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002288:	680a      	ldr	r2, [r1, #0]
 800228a:	fa32 f503 	lsrs.w	r5, r2, r3
 800228e:	d102      	bne.n	8002296 <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  }
}
 8002290:	b003      	add	sp, #12
 8002292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002296:	fa09 fa03 	lsl.w	sl, r9, r3
    if(iocurrent)
 800229a:	ea1a 0202 	ands.w	r2, sl, r2
 800229e:	f000 809e 	beq.w	80023de <HAL_GPIO_Init+0x166>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022a2:	684d      	ldr	r5, [r1, #4]
 80022a4:	f025 0e10 	bic.w	lr, r5, #16
 80022a8:	f1be 0f02 	cmp.w	lr, #2
 80022ac:	d114      	bne.n	80022d8 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 80022ae:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 80022b2:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022b6:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80022ba:	f8dc 6020 	ldr.w	r6, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022be:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80022c2:	270f      	movs	r7, #15
 80022c4:	fa07 f70b 	lsl.w	r7, r7, fp
 80022c8:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022cc:	690e      	ldr	r6, [r1, #16]
 80022ce:	fa06 f60b 	lsl.w	r6, r6, fp
 80022d2:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 80022d4:	f8cc 6020 	str.w	r6, [ip, #32]
      temp = GPIOx->MODER;
 80022d8:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80022e0:	2603      	movs	r6, #3
 80022e2:	fa06 f70c 	lsl.w	r7, r6, ip
 80022e6:	ea2b 0b07 	bic.w	fp, fp, r7
 80022ea:	43fe      	mvns	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022ec:	f005 0703 	and.w	r7, r5, #3
 80022f0:	fa07 f70c 	lsl.w	r7, r7, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022f4:	f10e 3eff 	add.w	lr, lr, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022f8:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022fc:	f1be 0f01 	cmp.w	lr, #1
      GPIOx->MODER = temp;
 8002300:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002302:	d811      	bhi.n	8002328 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR;
 8002304:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002306:	ea06 0e07 	and.w	lr, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 800230a:	68cf      	ldr	r7, [r1, #12]
 800230c:	fa07 f70c 	lsl.w	r7, r7, ip
 8002310:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8002314:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002316:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002318:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800231c:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8002320:	409f      	lsls	r7, r3
 8002322:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8002326:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8002328:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800232a:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800232c:	688e      	ldr	r6, [r1, #8]
 800232e:	fa06 f60c 	lsl.w	r6, r6, ip
 8002332:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8002334:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002336:	00ee      	lsls	r6, r5, #3
 8002338:	d551      	bpl.n	80023de <HAL_GPIO_Init+0x166>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800233a:	f8d8 6018 	ldr.w	r6, [r8, #24]
 800233e:	f046 0601 	orr.w	r6, r6, #1
 8002342:	f8c8 6018 	str.w	r6, [r8, #24]
 8002346:	f8d8 6018 	ldr.w	r6, [r8, #24]
 800234a:	f023 0703 	bic.w	r7, r3, #3
 800234e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8002352:	f006 0601 	and.w	r6, r6, #1
 8002356:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800235a:	9601      	str	r6, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800235c:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002360:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8002362:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8002364:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002368:	f04f 0c0f 	mov.w	ip, #15
 800236c:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002370:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8002374:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002378:	d033      	beq.n	80023e2 <HAL_GPIO_Init+0x16a>
 800237a:	4e20      	ldr	r6, [pc, #128]	; (80023fc <HAL_GPIO_Init+0x184>)
 800237c:	42b0      	cmp	r0, r6
 800237e:	d032      	beq.n	80023e6 <HAL_GPIO_Init+0x16e>
 8002380:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002384:	42b0      	cmp	r0, r6
 8002386:	d030      	beq.n	80023ea <HAL_GPIO_Init+0x172>
 8002388:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800238c:	42b0      	cmp	r0, r6
 800238e:	d02e      	beq.n	80023ee <HAL_GPIO_Init+0x176>
 8002390:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002394:	42b0      	cmp	r0, r6
 8002396:	bf0c      	ite	eq
 8002398:	2604      	moveq	r6, #4
 800239a:	2605      	movne	r6, #5
 800239c:	fa06 f60e 	lsl.w	r6, r6, lr
 80023a0:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 80023a4:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 80023a6:	6826      	ldr	r6, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 80023a8:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023aa:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80023ae:	bf0c      	ite	eq
 80023b0:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80023b2:	4316      	orrne	r6, r2
        EXTI->IMR = temp;
 80023b4:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 80023b6:	6866      	ldr	r6, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023b8:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80023bc:	bf0c      	ite	eq
 80023be:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80023c0:	4316      	orrne	r6, r2
        EXTI->EMR = temp;
 80023c2:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 80023c4:	68a6      	ldr	r6, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023c6:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80023ca:	bf0c      	ite	eq
 80023cc:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80023ce:	4316      	orrne	r6, r2
        EXTI->RTSR = temp;
 80023d0:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 80023d2:	68e6      	ldr	r6, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023d4:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 80023d6:	bf54      	ite	pl
 80023d8:	403e      	andpl	r6, r7
          temp |= iocurrent;
 80023da:	4316      	orrmi	r6, r2
        EXTI->FTSR = temp;
 80023dc:	60e6      	str	r6, [r4, #12]
    position++;
 80023de:	3301      	adds	r3, #1
 80023e0:	e752      	b.n	8002288 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023e2:	2600      	movs	r6, #0
 80023e4:	e7da      	b.n	800239c <HAL_GPIO_Init+0x124>
 80023e6:	2601      	movs	r6, #1
 80023e8:	e7d8      	b.n	800239c <HAL_GPIO_Init+0x124>
 80023ea:	2602      	movs	r6, #2
 80023ec:	e7d6      	b.n	800239c <HAL_GPIO_Init+0x124>
 80023ee:	2603      	movs	r6, #3
 80023f0:	e7d4      	b.n	800239c <HAL_GPIO_Init+0x124>
 80023f2:	bf00      	nop
 80023f4:	40021000 	.word	0x40021000
 80023f8:	40010400 	.word	0x40010400
 80023fc:	48000400 	.word	0x48000400

08002400 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002400:	b10a      	cbz	r2, 8002406 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002402:	6181      	str	r1, [r0, #24]
 8002404:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002406:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002408:	4770      	bx	lr
 800240a:	0000      	movs	r0, r0

0800240c <UART_SetConfig>:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800240c:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800240e:	6881      	ldr	r1, [r0, #8]
 8002410:	69c3      	ldr	r3, [r0, #28]
{
 8002412:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002414:	6905      	ldr	r5, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002416:	6814      	ldr	r4, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002418:	4329      	orrs	r1, r5
 800241a:	6945      	ldr	r5, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800241c:	f424 4416 	bic.w	r4, r4, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002420:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002422:	f024 040c 	bic.w	r4, r4, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002426:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002428:	4321      	orrs	r1, r4
 800242a:	6011      	str	r1, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800242c:	6851      	ldr	r1, [r2, #4]
 800242e:	68c4      	ldr	r4, [r0, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002430:	6a05      	ldr	r5, [r0, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002432:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8002436:	4321      	orrs	r1, r4
 8002438:	6051      	str	r1, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800243a:	6894      	ldr	r4, [r2, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800243c:	6981      	ldr	r1, [r0, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800243e:	f424 6430 	bic.w	r4, r4, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002442:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002444:	4321      	orrs	r1, r4
 8002446:	6091      	str	r1, [r2, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002448:	4962      	ldr	r1, [pc, #392]	; (80025d4 <UART_SetConfig+0x1c8>)
 800244a:	428a      	cmp	r2, r1
 800244c:	d116      	bne.n	800247c <UART_SetConfig+0x70>
 800244e:	f501 4158 	add.w	r1, r1, #55296	; 0xd800
 8002452:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8002454:	f001 0103 	and.w	r1, r1, #3
 8002458:	3901      	subs	r1, #1
 800245a:	2902      	cmp	r1, #2
 800245c:	f200 80b2 	bhi.w	80025c4 <UART_SetConfig+0x1b8>
 8002460:	4c5d      	ldr	r4, [pc, #372]	; (80025d8 <UART_SetConfig+0x1cc>)

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002462:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002466:	5c61      	ldrb	r1, [r4, r1]
 8002468:	d177      	bne.n	800255a <UART_SetConfig+0x14e>
  {
    switch (clocksource)
 800246a:	2908      	cmp	r1, #8
 800246c:	d872      	bhi.n	8002554 <UART_SetConfig+0x148>
 800246e:	e8df f001 	tbb	[pc, r1]
 8002472:	acac      	.short	0xacac
 8002474:	71ac7124 	.word	0x71ac7124
 8002478:	7171      	.short	0x7171
 800247a:	a4          	.byte	0xa4
 800247b:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800247c:	4957      	ldr	r1, [pc, #348]	; (80025dc <UART_SetConfig+0x1d0>)
 800247e:	428a      	cmp	r2, r1
 8002480:	d12c      	bne.n	80024dc <UART_SetConfig+0xd0>
 8002482:	f501 31e6 	add.w	r1, r1, #117760	; 0x1cc00
 8002486:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8002488:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
 800248c:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8002490:	f000 8090 	beq.w	80025b4 <UART_SetConfig+0x1a8>
 8002494:	d80b      	bhi.n	80024ae <UART_SetConfig+0xa2>
 8002496:	2900      	cmp	r1, #0
 8002498:	f000 8094 	beq.w	80025c4 <UART_SetConfig+0x1b8>
 800249c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80024a0:	f000 8090 	beq.w	80025c4 <UART_SetConfig+0x1b8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024a8:	d054      	beq.n	8002554 <UART_SetConfig+0x148>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80024aa:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 80024ac:	e015      	b.n	80024da <UART_SetConfig+0xce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024ae:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 80024b2:	d1f7      	bne.n	80024a4 <UART_SetConfig+0x98>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024b8:	d166      	bne.n	8002588 <UART_SetConfig+0x17c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80024ba:	6841      	ldr	r1, [r0, #4]
 80024bc:	084b      	lsrs	r3, r1, #1
 80024be:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80024c2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80024c6:	fbb3 f3f1 	udiv	r3, r3, r1
  HAL_StatusTypeDef ret               = HAL_OK;
 80024ca:	2000      	movs	r0, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80024cc:	b29b      	uxth	r3, r3
    brrtemp = usartdiv & 0xFFF0U;
 80024ce:	f023 010f 	bic.w	r1, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80024d2:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 80024d6:	430b      	orrs	r3, r1
 80024d8:	60d3      	str	r3, [r2, #12]

}
 80024da:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024dc:	4940      	ldr	r1, [pc, #256]	; (80025e0 <UART_SetConfig+0x1d4>)
 80024de:	428a      	cmp	r2, r1
 80024e0:	d110      	bne.n	8002504 <UART_SetConfig+0xf8>
 80024e2:	f501 31e4 	add.w	r1, r1, #116736	; 0x1c800
 80024e6:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80024e8:	f401 2140 	and.w	r1, r1, #786432	; 0xc0000
 80024ec:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 80024f0:	d060      	beq.n	80025b4 <UART_SetConfig+0x1a8>
 80024f2:	d804      	bhi.n	80024fe <UART_SetConfig+0xf2>
 80024f4:	2900      	cmp	r1, #0
 80024f6:	d065      	beq.n	80025c4 <UART_SetConfig+0x1b8>
 80024f8:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 80024fc:	e7d0      	b.n	80024a0 <UART_SetConfig+0x94>
 80024fe:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 8002502:	e7d6      	b.n	80024b2 <UART_SetConfig+0xa6>
 8002504:	4937      	ldr	r1, [pc, #220]	; (80025e4 <UART_SetConfig+0x1d8>)
 8002506:	428a      	cmp	r2, r1
 8002508:	d110      	bne.n	800252c <UART_SetConfig+0x120>
 800250a:	f501 31e2 	add.w	r1, r1, #115712	; 0x1c400
 800250e:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8002510:	f401 1140 	and.w	r1, r1, #3145728	; 0x300000
 8002514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8002518:	d04c      	beq.n	80025b4 <UART_SetConfig+0x1a8>
 800251a:	d804      	bhi.n	8002526 <UART_SetConfig+0x11a>
 800251c:	2900      	cmp	r1, #0
 800251e:	d051      	beq.n	80025c4 <UART_SetConfig+0x1b8>
 8002520:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8002524:	e7bc      	b.n	80024a0 <UART_SetConfig+0x94>
 8002526:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 800252a:	e7c2      	b.n	80024b2 <UART_SetConfig+0xa6>
 800252c:	492e      	ldr	r1, [pc, #184]	; (80025e8 <UART_SetConfig+0x1dc>)
 800252e:	428a      	cmp	r2, r1
 8002530:	d1b8      	bne.n	80024a4 <UART_SetConfig+0x98>
 8002532:	f501 31e0 	add.w	r1, r1, #114688	; 0x1c000
 8002536:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8002538:	f401 0140 	and.w	r1, r1, #12582912	; 0xc00000
 800253c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002540:	d038      	beq.n	80025b4 <UART_SetConfig+0x1a8>
 8002542:	d804      	bhi.n	800254e <UART_SetConfig+0x142>
 8002544:	2900      	cmp	r1, #0
 8002546:	d03d      	beq.n	80025c4 <UART_SetConfig+0x1b8>
 8002548:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800254c:	e7a8      	b.n	80024a0 <UART_SetConfig+0x94>
 800254e:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8002552:	e7ae      	b.n	80024b2 <UART_SetConfig+0xa6>
        ret = HAL_ERROR;
 8002554:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8002556:	2300      	movs	r3, #0
 8002558:	e7b9      	b.n	80024ce <UART_SetConfig+0xc2>
    switch (clocksource)
 800255a:	2908      	cmp	r1, #8
 800255c:	d8a5      	bhi.n	80024aa <UART_SetConfig+0x9e>
 800255e:	a301      	add	r3, pc, #4	; (adr r3, 8002564 <UART_SetConfig+0x158>)
 8002560:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8002564:	080025a1 	.word	0x080025a1
 8002568:	080025a1 	.word	0x080025a1
 800256c:	08002589 	.word	0x08002589
 8002570:	080024ab 	.word	0x080024ab
 8002574:	080025a1 	.word	0x080025a1
 8002578:	080024ab 	.word	0x080024ab
 800257c:	080024ab 	.word	0x080024ab
 8002580:	080024ab 	.word	0x080024ab
 8002584:	080025ab 	.word	0x080025ab
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002588:	6841      	ldr	r1, [r0, #4]
 800258a:	084b      	lsrs	r3, r1, #1
 800258c:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002590:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002594:	fbb3 f3f1 	udiv	r3, r3, r1
 8002598:	b29b      	uxth	r3, r3
 800259a:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800259c:	2000      	movs	r0, #0
        break;
 800259e:	e79c      	b.n	80024da <UART_SetConfig+0xce>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80025a0:	6841      	ldr	r1, [r0, #4]
 80025a2:	084b      	lsrs	r3, r1, #1
 80025a4:	f503 03e1 	add.w	r3, r3, #7372800	; 0x708000
 80025a8:	e7f4      	b.n	8002594 <UART_SetConfig+0x188>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80025aa:	6841      	ldr	r1, [r0, #4]
 80025ac:	084b      	lsrs	r3, r1, #1
 80025ae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80025b2:	e7ef      	b.n	8002594 <UART_SetConfig+0x188>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025b8:	d1f7      	bne.n	80025aa <UART_SetConfig+0x19e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80025ba:	6841      	ldr	r1, [r0, #4]
 80025bc:	084b      	lsrs	r3, r1, #1
 80025be:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80025c2:	e780      	b.n	80024c6 <UART_SetConfig+0xba>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025c8:	d1ea      	bne.n	80025a0 <UART_SetConfig+0x194>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80025ca:	6841      	ldr	r1, [r0, #4]
 80025cc:	084b      	lsrs	r3, r1, #1
 80025ce:	f503 0361 	add.w	r3, r3, #14745600	; 0xe10000
 80025d2:	e778      	b.n	80024c6 <UART_SetConfig+0xba>
 80025d4:	40013800 	.word	0x40013800
 80025d8:	080056e8 	.word	0x080056e8
 80025dc:	40004400 	.word	0x40004400
 80025e0:	40004800 	.word	0x40004800
 80025e4:	40004c00 	.word	0x40004c00
 80025e8:	40005000 	.word	0x40005000

080025ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80025ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ee:	9f06      	ldr	r7, [sp, #24]
 80025f0:	4604      	mov	r4, r0
 80025f2:	4615      	mov	r5, r2
 80025f4:	461e      	mov	r6, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025f6:	6822      	ldr	r2, [r4, #0]
 80025f8:	69d3      	ldr	r3, [r2, #28]
 80025fa:	ea31 0303 	bics.w	r3, r1, r3
 80025fe:	bf0c      	ite	eq
 8002600:	2301      	moveq	r3, #1
 8002602:	2300      	movne	r3, #0
 8002604:	42ab      	cmp	r3, r5
 8002606:	d001      	beq.n	800260c <UART_WaitOnFlagUntilTimeout+0x20>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002608:	2000      	movs	r0, #0
 800260a:	e014      	b.n	8002636 <UART_WaitOnFlagUntilTimeout+0x4a>
    if(Timeout != HAL_MAX_DELAY)
 800260c:	1c7b      	adds	r3, r7, #1
 800260e:	d0f3      	beq.n	80025f8 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002610:	b997      	cbnz	r7, 8002638 <UART_WaitOnFlagUntilTimeout+0x4c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002612:	6823      	ldr	r3, [r4, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800261a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	f022 0201 	bic.w	r2, r2, #1
 8002622:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8002624:	2320      	movs	r3, #32
 8002626:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800262a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 800262e:	2300      	movs	r3, #0
 8002630:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8002634:	2003      	movs	r0, #3
}
 8002636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002638:	f7ff fb02 	bl	8001c40 <HAL_GetTick>
 800263c:	1b80      	subs	r0, r0, r6
 800263e:	42b8      	cmp	r0, r7
 8002640:	d9d9      	bls.n	80025f6 <UART_WaitOnFlagUntilTimeout+0xa>
 8002642:	e7e6      	b.n	8002612 <UART_WaitOnFlagUntilTimeout+0x26>

08002644 <UART_CheckIdleState>:
{
 8002644:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002646:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002648:	2100      	movs	r1, #0
 800264a:	66c1      	str	r1, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 800264c:	f7ff faf8 	bl	8001c40 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002650:	6823      	ldr	r3, [r4, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8002656:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002658:	d417      	bmi.n	800268a <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800265a:	6823      	ldr	r3, [r4, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	075b      	lsls	r3, r3, #29
 8002660:	d50a      	bpl.n	8002678 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002662:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	2200      	movs	r2, #0
 800266a:	462b      	mov	r3, r5
 800266c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002670:	4620      	mov	r0, r4
 8002672:	f7ff ffbb 	bl	80025ec <UART_WaitOnFlagUntilTimeout>
 8002676:	b9a0      	cbnz	r0, 80026a2 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8002678:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800267a:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 800267c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8002680:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8002684:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8002688:	e00c      	b.n	80026a4 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800268a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	460a      	mov	r2, r1
 8002692:	4603      	mov	r3, r0
 8002694:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002698:	4620      	mov	r0, r4
 800269a:	f7ff ffa7 	bl	80025ec <UART_WaitOnFlagUntilTimeout>
 800269e:	2800      	cmp	r0, #0
 80026a0:	d0db      	beq.n	800265a <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80026a2:	2003      	movs	r0, #3
}
 80026a4:	b003      	add	sp, #12
 80026a6:	bd30      	pop	{r4, r5, pc}

080026a8 <HAL_UART_Init>:
{
 80026a8:	b510      	push	{r4, lr}
  if(huart == NULL)
 80026aa:	4604      	mov	r4, r0
 80026ac:	b328      	cbz	r0, 80026fa <HAL_UART_Init+0x52>
  if(huart->gState == HAL_UART_STATE_RESET)
 80026ae:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80026b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80026b6:	b90b      	cbnz	r3, 80026bc <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 80026b8:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
  __HAL_UART_DISABLE(huart);
 80026bc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80026be:	2324      	movs	r3, #36	; 0x24
 80026c0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80026c4:	6813      	ldr	r3, [r2, #0]
 80026c6:	f023 0301 	bic.w	r3, r3, #1
 80026ca:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026cc:	4620      	mov	r0, r4
 80026ce:	f7ff fe9d 	bl	800240c <UART_SetConfig>
 80026d2:	2801      	cmp	r0, #1
 80026d4:	d011      	beq.n	80026fa <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026d6:	6823      	ldr	r3, [r4, #0]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026e6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	f042 0201 	orr.w	r2, r2, #1
  return UART_CheckIdleState(huart);
 80026ee:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80026f0:	601a      	str	r2, [r3, #0]
}
 80026f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return UART_CheckIdleState(huart);
 80026f6:	f7ff bfa5 	b.w	8002644 <UART_CheckIdleState>
}
 80026fa:	2001      	movs	r0, #1
 80026fc:	bd10      	pop	{r4, pc}

080026fe <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002700:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002702:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002706:	2b20      	cmp	r3, #32
{
 8002708:	460d      	mov	r5, r1
 800270a:	4604      	mov	r4, r0
 800270c:	4611      	mov	r1, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800270e:	d14a      	bne.n	80027a6 <HAL_UART_Transmit+0xa8>
  {
    if((pData == NULL ) || (Size == 0U))
 8002710:	2d00      	cmp	r5, #0
 8002712:	d046      	beq.n	80027a2 <HAL_UART_Transmit+0xa4>
 8002714:	2a00      	cmp	r2, #0
 8002716:	d044      	beq.n	80027a2 <HAL_UART_Transmit+0xa4>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002718:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800271c:	2b01      	cmp	r3, #1
 800271e:	d042      	beq.n	80027a6 <HAL_UART_Transmit+0xa8>
 8002720:	2301      	movs	r3, #1
 8002722:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002726:	2300      	movs	r3, #0
 8002728:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800272a:	2321      	movs	r3, #33	; 0x21
 800272c:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002730:	f7ff fa86 	bl	8001c40 <HAL_GetTick>

    huart->TxXferSize = Size;
 8002734:	f8a4 1050 	strh.w	r1, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8002738:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 800273a:	f8a4 1052 	strh.w	r1, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 800273e:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8002742:	b292      	uxth	r2, r2
 8002744:	b962      	cbnz	r2, 8002760 <HAL_UART_Transmit+0x62>
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002746:	9600      	str	r6, [sp, #0]
 8002748:	463b      	mov	r3, r7
 800274a:	2140      	movs	r1, #64	; 0x40
 800274c:	4620      	mov	r0, r4
 800274e:	f7ff ff4d 	bl	80025ec <UART_WaitOnFlagUntilTimeout>
 8002752:	b998      	cbnz	r0, 800277c <HAL_UART_Transmit+0x7e>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002754:	2320      	movs	r3, #32
 8002756:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800275a:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 800275e:	e00e      	b.n	800277e <HAL_UART_Transmit+0x80>
      huart->TxXferCount--;
 8002760:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002764:	9600      	str	r6, [sp, #0]
      huart->TxXferCount--;
 8002766:	3a01      	subs	r2, #1
 8002768:	b292      	uxth	r2, r2
 800276a:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800276e:	463b      	mov	r3, r7
 8002770:	2200      	movs	r2, #0
 8002772:	2180      	movs	r1, #128	; 0x80
 8002774:	4620      	mov	r0, r4
 8002776:	f7ff ff39 	bl	80025ec <UART_WaitOnFlagUntilTimeout>
 800277a:	b110      	cbz	r0, 8002782 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 800277c:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800277e:	b003      	add	sp, #12
 8002780:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002782:	68a3      	ldr	r3, [r4, #8]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002784:	6822      	ldr	r2, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800278a:	d107      	bne.n	800279c <HAL_UART_Transmit+0x9e>
 800278c:	6923      	ldr	r3, [r4, #16]
 800278e:	b92b      	cbnz	r3, 800279c <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002790:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002794:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002798:	8513      	strh	r3, [r2, #40]	; 0x28
 800279a:	e7d0      	b.n	800273e <HAL_UART_Transmit+0x40>
 800279c:	f815 3b01 	ldrb.w	r3, [r5], #1
 80027a0:	e7fa      	b.n	8002798 <HAL_UART_Transmit+0x9a>
      return  HAL_ERROR;
 80027a2:	2001      	movs	r0, #1
 80027a4:	e7eb      	b.n	800277e <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 80027a6:	2002      	movs	r0, #2
 80027a8:	e7e9      	b.n	800277e <HAL_UART_Transmit+0x80>

080027aa <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027aa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80027ae:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80027b0:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80027b4:	2b20      	cmp	r3, #32
{
 80027b6:	460d      	mov	r5, r1
 80027b8:	4604      	mov	r4, r0
 80027ba:	4611      	mov	r1, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 80027bc:	d15c      	bne.n	8002878 <HAL_UART_Receive+0xce>
  {
    if((pData == NULL ) || (Size == 0U))
 80027be:	2d00      	cmp	r5, #0
 80027c0:	d058      	beq.n	8002874 <HAL_UART_Receive+0xca>
 80027c2:	2a00      	cmp	r2, #0
 80027c4:	d056      	beq.n	8002874 <HAL_UART_Receive+0xca>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027c6:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d054      	beq.n	8002878 <HAL_UART_Receive+0xce>
 80027ce:	2301      	movs	r3, #1
 80027d0:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->Instance->ICR = 0xFFFFFFFF;
 80027d4:	6803      	ldr	r3, [r0, #0]
 80027d6:	f04f 32ff 	mov.w	r2, #4294967295
 80027da:	621a      	str	r2, [r3, #32]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027dc:	2300      	movs	r3, #0
 80027de:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027e0:	2322      	movs	r3, #34	; 0x22
 80027e2:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80027e6:	f7ff fa2b 	bl	8001c40 <HAL_GetTick>

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80027ea:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 80027ec:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 80027f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80027f4:	4680      	mov	r8, r0
    huart->RxXferCount = Size;
 80027f6:	f8a4 105a 	strh.w	r1, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 80027fa:	d115      	bne.n	8002828 <HAL_UART_Receive+0x7e>
 80027fc:	6923      	ldr	r3, [r4, #16]
 80027fe:	b98b      	cbnz	r3, 8002824 <HAL_UART_Receive+0x7a>
 8002800:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002804:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8002808:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 800280c:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8002810:	b280      	uxth	r0, r0
 8002812:	b980      	cbnz	r0, 8002836 <HAL_UART_Receive+0x8c>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002814:	2320      	movs	r3, #32
 8002816:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800281a:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  }
  else
  {
    return HAL_BUSY;
  }
}
 800281e:	b002      	add	sp, #8
 8002820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 8002824:	23ff      	movs	r3, #255	; 0xff
 8002826:	e7ed      	b.n	8002804 <HAL_UART_Receive+0x5a>
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1ed      	bne.n	8002808 <HAL_UART_Receive+0x5e>
 800282c:	6923      	ldr	r3, [r4, #16]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d0f8      	beq.n	8002824 <HAL_UART_Receive+0x7a>
 8002832:	237f      	movs	r3, #127	; 0x7f
 8002834:	e7e6      	b.n	8002804 <HAL_UART_Receive+0x5a>
      huart->RxXferCount--;
 8002836:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800283a:	9600      	str	r6, [sp, #0]
      huart->RxXferCount--;
 800283c:	3a01      	subs	r2, #1
 800283e:	b292      	uxth	r2, r2
 8002840:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002844:	4643      	mov	r3, r8
 8002846:	2200      	movs	r2, #0
 8002848:	2120      	movs	r1, #32
 800284a:	4620      	mov	r0, r4
 800284c:	f7ff fece 	bl	80025ec <UART_WaitOnFlagUntilTimeout>
 8002850:	b9a0      	cbnz	r0, 800287c <HAL_UART_Receive+0xd2>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002852:	68a2      	ldr	r2, [r4, #8]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8002854:	6823      	ldr	r3, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002856:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800285a:	d106      	bne.n	800286a <HAL_UART_Receive+0xc0>
 800285c:	6922      	ldr	r2, [r4, #16]
 800285e:	b922      	cbnz	r2, 800286a <HAL_UART_Receive+0xc0>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8002860:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002862:	403b      	ands	r3, r7
 8002864:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 8002868:	e7d0      	b.n	800280c <HAL_UART_Receive+0x62>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800286a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800286c:	403b      	ands	r3, r7
 800286e:	f805 3b01 	strb.w	r3, [r5], #1
 8002872:	e7cb      	b.n	800280c <HAL_UART_Receive+0x62>
      return  HAL_ERROR;
 8002874:	2001      	movs	r0, #1
 8002876:	e7d2      	b.n	800281e <HAL_UART_Receive+0x74>
    return HAL_BUSY;
 8002878:	2002      	movs	r0, #2
 800287a:	e7d0      	b.n	800281e <HAL_UART_Receive+0x74>
        return HAL_TIMEOUT;
 800287c:	2003      	movs	r0, #3
 800287e:	e7ce      	b.n	800281e <HAL_UART_Receive+0x74>

08002880 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002880:	4a0a      	ldr	r2, [pc, #40]	; (80028ac <_sbrk+0x2c>)
 8002882:	6811      	ldr	r1, [r2, #0]
{
 8002884:	b508      	push	{r3, lr}
 8002886:	4603      	mov	r3, r0
	if (heap_end == 0)
 8002888:	b909      	cbnz	r1, 800288e <_sbrk+0xe>
		heap_end = &end;
 800288a:	4909      	ldr	r1, [pc, #36]	; (80028b0 <_sbrk+0x30>)
 800288c:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 800288e:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8002890:	4669      	mov	r1, sp
 8002892:	4403      	add	r3, r0
 8002894:	428b      	cmp	r3, r1
 8002896:	d906      	bls.n	80028a6 <_sbrk+0x26>
	{
		errno = ENOMEM;
 8002898:	f000 fd52 	bl	8003340 <__errno>
 800289c:	230c      	movs	r3, #12
 800289e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80028a0:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 80028a4:	bd08      	pop	{r3, pc}
	heap_end += incr;
 80028a6:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 80028a8:	e7fc      	b.n	80028a4 <_sbrk+0x24>
 80028aa:	bf00      	nop
 80028ac:	200001c8 	.word	0x200001c8
 80028b0:	200001e0 	.word	0x200001e0

080028b4 <Reset_Handler>:
 80028b4:	2100      	movs	r1, #0
 80028b6:	e003      	b.n	80028c0 <LoopCopyDataInit>

080028b8 <CopyDataInit>:
 80028b8:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <LoopForever+0x2>)
 80028ba:	585b      	ldr	r3, [r3, r1]
 80028bc:	5043      	str	r3, [r0, r1]
 80028be:	3104      	adds	r1, #4

080028c0 <LoopCopyDataInit>:
 80028c0:	480a      	ldr	r0, [pc, #40]	; (80028ec <LoopForever+0x6>)
 80028c2:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <LoopForever+0xa>)
 80028c4:	1842      	adds	r2, r0, r1
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d3f6      	bcc.n	80028b8 <CopyDataInit>
 80028ca:	4a0a      	ldr	r2, [pc, #40]	; (80028f4 <LoopForever+0xe>)
 80028cc:	e002      	b.n	80028d4 <LoopFillZerobss>

080028ce <FillZerobss>:
 80028ce:	2300      	movs	r3, #0
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	3204      	adds	r2, #4

080028d4 <LoopFillZerobss>:
 80028d4:	4b08      	ldr	r3, [pc, #32]	; (80028f8 <LoopForever+0x12>)
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d3f9      	bcc.n	80028ce <FillZerobss>
 80028da:	f3af 8000 	nop.w
 80028de:	f001 f8ef 	bl	8003ac0 <__libc_init_array>
 80028e2:	f7fe fb75 	bl	8000fd0 <main>

080028e6 <LoopForever>:
 80028e6:	e7fe      	b.n	80028e6 <LoopForever>
 80028e8:	08005ddc 	.word	0x08005ddc
 80028ec:	20000000 	.word	0x20000000
 80028f0:	20000068 	.word	0x20000068
 80028f4:	20000068 	.word	0x20000068
 80028f8:	200001dc 	.word	0x200001dc

080028fc <BusFault_Handler>:
 80028fc:	e7fe      	b.n	80028fc <BusFault_Handler>
 80028fe:	0000      	movs	r0, r0

08002900 <tanh>:
 8002900:	4a3c      	ldr	r2, [pc, #240]	; (80029f4 <tanh+0xf4>)
 8002902:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002906:	4293      	cmp	r3, r2
 8002908:	b570      	push	{r4, r5, r6, lr}
 800290a:	4606      	mov	r6, r0
 800290c:	460d      	mov	r5, r1
 800290e:	460c      	mov	r4, r1
 8002910:	dd11      	ble.n	8002936 <tanh+0x36>
 8002912:	2d00      	cmp	r5, #0
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	f04f 0000 	mov.w	r0, #0
 800291c:	4936      	ldr	r1, [pc, #216]	; (80029f8 <tanh+0xf8>)
 800291e:	db39      	blt.n	8002994 <tanh+0x94>
 8002920:	f7fd ff3c 	bl	800079c <__aeabi_ddiv>
 8002924:	4b34      	ldr	r3, [pc, #208]	; (80029f8 <tanh+0xf8>)
 8002926:	2200      	movs	r2, #0
 8002928:	f7fd fc58 	bl	80001dc <__adddf3>
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	4610      	mov	r0, r2
 8002932:	4619      	mov	r1, r3
 8002934:	bd70      	pop	{r4, r5, r6, pc}
 8002936:	4a31      	ldr	r2, [pc, #196]	; (80029fc <tanh+0xfc>)
 8002938:	4293      	cmp	r3, r2
 800293a:	dd08      	ble.n	800294e <tanh+0x4e>
 800293c:	4b2e      	ldr	r3, [pc, #184]	; (80029f8 <tanh+0xf8>)
 800293e:	2200      	movs	r2, #0
 8002940:	2c00      	cmp	r4, #0
 8002942:	bfb8      	it	lt
 8002944:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002948:	4610      	mov	r0, r2
 800294a:	4619      	mov	r1, r3
 800294c:	bd70      	pop	{r4, r5, r6, pc}
 800294e:	f1b3 5f72 	cmp.w	r3, #1015021568	; 0x3c800000
 8002952:	db2a      	blt.n	80029aa <tanh+0xaa>
 8002954:	4a2a      	ldr	r2, [pc, #168]	; (8002a00 <tanh+0x100>)
 8002956:	4293      	cmp	r3, r2
 8002958:	dd32      	ble.n	80029c0 <tanh+0xc0>
 800295a:	f000 fcb1 	bl	80032c0 <fabs>
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
 8002962:	f7fd fc3b 	bl	80001dc <__adddf3>
 8002966:	f000 fa63 	bl	8002e30 <expm1>
 800296a:	2200      	movs	r2, #0
 800296c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002970:	f7fd fc34 	bl	80001dc <__adddf3>
 8002974:	4602      	mov	r2, r0
 8002976:	460b      	mov	r3, r1
 8002978:	2000      	movs	r0, #0
 800297a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800297e:	f7fd ff0d 	bl	800079c <__aeabi_ddiv>
 8002982:	4602      	mov	r2, r0
 8002984:	460b      	mov	r3, r1
 8002986:	2000      	movs	r0, #0
 8002988:	491b      	ldr	r1, [pc, #108]	; (80029f8 <tanh+0xf8>)
 800298a:	f7fd fc25 	bl	80001d8 <__aeabi_dsub>
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	e7d5      	b.n	8002940 <tanh+0x40>
 8002994:	f7fd ff02 	bl	800079c <__aeabi_ddiv>
 8002998:	4b17      	ldr	r3, [pc, #92]	; (80029f8 <tanh+0xf8>)
 800299a:	2200      	movs	r2, #0
 800299c:	f7fd fc1c 	bl	80001d8 <__aeabi_dsub>
 80029a0:	4602      	mov	r2, r0
 80029a2:	460b      	mov	r3, r1
 80029a4:	4610      	mov	r0, r2
 80029a6:	4619      	mov	r1, r3
 80029a8:	bd70      	pop	{r4, r5, r6, pc}
 80029aa:	4b13      	ldr	r3, [pc, #76]	; (80029f8 <tanh+0xf8>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	f7fd fc15 	bl	80001dc <__adddf3>
 80029b2:	4632      	mov	r2, r6
 80029b4:	462b      	mov	r3, r5
 80029b6:	f7fd fdc7 	bl	8000548 <__aeabi_dmul>
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	e7b7      	b.n	8002930 <tanh+0x30>
 80029c0:	f000 fc7e 	bl	80032c0 <fabs>
 80029c4:	2200      	movs	r2, #0
 80029c6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80029ca:	f7fd fdbd 	bl	8000548 <__aeabi_dmul>
 80029ce:	f000 fa2f 	bl	8002e30 <expm1>
 80029d2:	2200      	movs	r2, #0
 80029d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029d8:	4606      	mov	r6, r0
 80029da:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 80029de:	f7fd fbfd 	bl	80001dc <__adddf3>
 80029e2:	4602      	mov	r2, r0
 80029e4:	460b      	mov	r3, r1
 80029e6:	4630      	mov	r0, r6
 80029e8:	4629      	mov	r1, r5
 80029ea:	f7fd fed7 	bl	800079c <__aeabi_ddiv>
 80029ee:	4602      	mov	r2, r0
 80029f0:	460b      	mov	r3, r1
 80029f2:	e7a5      	b.n	8002940 <tanh+0x40>
 80029f4:	7fefffff 	.word	0x7fefffff
 80029f8:	3ff00000 	.word	0x3ff00000
 80029fc:	4035ffff 	.word	0x4035ffff
 8002a00:	3fefffff 	.word	0x3fefffff
 8002a04:	00000000 	.word	0x00000000

08002a08 <exp>:
 8002a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a0a:	4604      	mov	r4, r0
 8002a0c:	460d      	mov	r5, r1
 8002a0e:	f000 f83b 	bl	8002a88 <__ieee754_exp>
 8002a12:	4b1b      	ldr	r3, [pc, #108]	; (8002a80 <exp+0x78>)
 8002a14:	f993 3000 	ldrsb.w	r3, [r3]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	4606      	mov	r6, r0
 8002a1c:	460f      	mov	r7, r1
 8002a1e:	d014      	beq.n	8002a4a <exp+0x42>
 8002a20:	4620      	mov	r0, r4
 8002a22:	4629      	mov	r1, r5
 8002a24:	f000 fc50 	bl	80032c8 <finite>
 8002a28:	b178      	cbz	r0, 8002a4a <exp+0x42>
 8002a2a:	a311      	add	r3, pc, #68	; (adr r3, 8002a70 <exp+0x68>)
 8002a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a30:	4620      	mov	r0, r4
 8002a32:	4629      	mov	r1, r5
 8002a34:	f7fe f818 	bl	8000a68 <__aeabi_dcmpgt>
 8002a38:	b988      	cbnz	r0, 8002a5e <exp+0x56>
 8002a3a:	a30f      	add	r3, pc, #60	; (adr r3, 8002a78 <exp+0x70>)
 8002a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a40:	4620      	mov	r0, r4
 8002a42:	4629      	mov	r1, r5
 8002a44:	f7fd fff2 	bl	8000a2c <__aeabi_dcmplt>
 8002a48:	b910      	cbnz	r0, 8002a50 <exp+0x48>
 8002a4a:	4630      	mov	r0, r6
 8002a4c:	4639      	mov	r1, r7
 8002a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a50:	f000 fc76 	bl	8003340 <__errno>
 8002a54:	2322      	movs	r3, #34	; 0x22
 8002a56:	6003      	str	r3, [r0, #0]
 8002a58:	2600      	movs	r6, #0
 8002a5a:	2700      	movs	r7, #0
 8002a5c:	e7f5      	b.n	8002a4a <exp+0x42>
 8002a5e:	f000 fc6f 	bl	8003340 <__errno>
 8002a62:	2322      	movs	r3, #34	; 0x22
 8002a64:	4f07      	ldr	r7, [pc, #28]	; (8002a84 <exp+0x7c>)
 8002a66:	6003      	str	r3, [r0, #0]
 8002a68:	2600      	movs	r6, #0
 8002a6a:	e7ee      	b.n	8002a4a <exp+0x42>
 8002a6c:	f3af 8000 	nop.w
 8002a70:	fefa39ef 	.word	0xfefa39ef
 8002a74:	40862e42 	.word	0x40862e42
 8002a78:	d52d3051 	.word	0xd52d3051
 8002a7c:	c0874910 	.word	0xc0874910
 8002a80:	20000000 	.word	0x20000000
 8002a84:	7ff00000 	.word	0x7ff00000

08002a88 <__ieee754_exp>:
 8002a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a8c:	4fd4      	ldr	r7, [pc, #848]	; (8002de0 <__ieee754_exp+0x358>)
 8002a8e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8002a92:	42ba      	cmp	r2, r7
 8002a94:	b087      	sub	sp, #28
 8002a96:	4605      	mov	r5, r0
 8002a98:	460c      	mov	r4, r1
 8002a9a:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8002a9e:	d912      	bls.n	8002ac6 <__ieee754_exp+0x3e>
 8002aa0:	4fd0      	ldr	r7, [pc, #832]	; (8002de4 <__ieee754_exp+0x35c>)
 8002aa2:	42ba      	cmp	r2, r7
 8002aa4:	d92b      	bls.n	8002afe <__ieee754_exp+0x76>
 8002aa6:	f3c1 0313 	ubfx	r3, r1, #0, #20
 8002aaa:	4303      	orrs	r3, r0
 8002aac:	4602      	mov	r2, r0
 8002aae:	f040 8157 	bne.w	8002d60 <__ieee754_exp+0x2d8>
 8002ab2:	2e00      	cmp	r6, #0
 8002ab4:	f000 80ee 	beq.w	8002c94 <__ieee754_exp+0x20c>
 8002ab8:	2500      	movs	r5, #0
 8002aba:	462c      	mov	r4, r5
 8002abc:	4628      	mov	r0, r5
 8002abe:	4621      	mov	r1, r4
 8002ac0:	b007      	add	sp, #28
 8002ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ac6:	4bc8      	ldr	r3, [pc, #800]	; (8002de8 <__ieee754_exp+0x360>)
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d855      	bhi.n	8002b78 <__ieee754_exp+0xf0>
 8002acc:	4bc7      	ldr	r3, [pc, #796]	; (8002dec <__ieee754_exp+0x364>)
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	f200 80e5 	bhi.w	8002c9e <__ieee754_exp+0x216>
 8002ad4:	a3ac      	add	r3, pc, #688	; (adr r3, 8002d88 <__ieee754_exp+0x300>)
 8002ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ada:	f7fd fb7f 	bl	80001dc <__adddf3>
 8002ade:	4bc4      	ldr	r3, [pc, #784]	; (8002df0 <__ieee754_exp+0x368>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f7fd ffc1 	bl	8000a68 <__aeabi_dcmpgt>
 8002ae6:	2800      	cmp	r0, #0
 8002ae8:	f000 80d9 	beq.w	8002c9e <__ieee754_exp+0x216>
 8002aec:	4628      	mov	r0, r5
 8002aee:	4621      	mov	r1, r4
 8002af0:	4bbf      	ldr	r3, [pc, #764]	; (8002df0 <__ieee754_exp+0x368>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	f7fd fb72 	bl	80001dc <__adddf3>
 8002af8:	4605      	mov	r5, r0
 8002afa:	460c      	mov	r4, r1
 8002afc:	e0ca      	b.n	8002c94 <__ieee754_exp+0x20c>
 8002afe:	a3a4      	add	r3, pc, #656	; (adr r3, 8002d90 <__ieee754_exp+0x308>)
 8002b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b04:	f7fd ffb0 	bl	8000a68 <__aeabi_dcmpgt>
 8002b08:	2800      	cmp	r0, #0
 8002b0a:	f040 8133 	bne.w	8002d74 <__ieee754_exp+0x2ec>
 8002b0e:	a3a2      	add	r3, pc, #648	; (adr r3, 8002d98 <__ieee754_exp+0x310>)
 8002b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b14:	4628      	mov	r0, r5
 8002b16:	4621      	mov	r1, r4
 8002b18:	f7fd ff88 	bl	8000a2c <__aeabi_dcmplt>
 8002b1c:	2800      	cmp	r0, #0
 8002b1e:	d1cb      	bne.n	8002ab8 <__ieee754_exp+0x30>
 8002b20:	4bb4      	ldr	r3, [pc, #720]	; (8002df4 <__ieee754_exp+0x36c>)
 8002b22:	4628      	mov	r0, r5
 8002b24:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8002b28:	4621      	mov	r1, r4
 8002b2a:	a39d      	add	r3, pc, #628	; (adr r3, 8002da0 <__ieee754_exp+0x318>)
 8002b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b30:	f7fd fd0a 	bl	8000548 <__aeabi_dmul>
 8002b34:	e9d6 2300 	ldrd	r2, r3, [r6]
 8002b38:	f7fd fb50 	bl	80001dc <__adddf3>
 8002b3c:	f7fd ff9e 	bl	8000a7c <__aeabi_d2iz>
 8002b40:	9001      	str	r0, [sp, #4]
 8002b42:	f7fd fc97 	bl	8000474 <__aeabi_i2d>
 8002b46:	a398      	add	r3, pc, #608	; (adr r3, 8002da8 <__ieee754_exp+0x320>)
 8002b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4c:	4606      	mov	r6, r0
 8002b4e:	460f      	mov	r7, r1
 8002b50:	f7fd fcfa 	bl	8000548 <__aeabi_dmul>
 8002b54:	4602      	mov	r2, r0
 8002b56:	460b      	mov	r3, r1
 8002b58:	4628      	mov	r0, r5
 8002b5a:	4621      	mov	r1, r4
 8002b5c:	f7fd fb3c 	bl	80001d8 <__aeabi_dsub>
 8002b60:	a393      	add	r3, pc, #588	; (adr r3, 8002db0 <__ieee754_exp+0x328>)
 8002b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b66:	4680      	mov	r8, r0
 8002b68:	4689      	mov	r9, r1
 8002b6a:	4630      	mov	r0, r6
 8002b6c:	4639      	mov	r1, r7
 8002b6e:	f7fd fceb 	bl	8000548 <__aeabi_dmul>
 8002b72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002b76:	e017      	b.n	8002ba8 <__ieee754_exp+0x120>
 8002b78:	4b9f      	ldr	r3, [pc, #636]	; (8002df8 <__ieee754_exp+0x370>)
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d8d0      	bhi.n	8002b20 <__ieee754_exp+0x98>
 8002b7e:	4b9f      	ldr	r3, [pc, #636]	; (8002dfc <__ieee754_exp+0x374>)
 8002b80:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8002b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b88:	f7fd fb26 	bl	80001d8 <__aeabi_dsub>
 8002b8c:	4b9c      	ldr	r3, [pc, #624]	; (8002e00 <__ieee754_exp+0x378>)
 8002b8e:	00f4      	lsls	r4, r6, #3
 8002b90:	4423      	add	r3, r4
 8002b92:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002b96:	f1c6 0a01 	rsb	sl, r6, #1
 8002b9a:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8002b9e:	ebaa 0306 	sub.w	r3, sl, r6
 8002ba2:	4680      	mov	r8, r0
 8002ba4:	4689      	mov	r9, r1
 8002ba6:	9301      	str	r3, [sp, #4]
 8002ba8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002bac:	4640      	mov	r0, r8
 8002bae:	4649      	mov	r1, r9
 8002bb0:	f7fd fb12 	bl	80001d8 <__aeabi_dsub>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	4682      	mov	sl, r0
 8002bba:	468b      	mov	fp, r1
 8002bbc:	4605      	mov	r5, r0
 8002bbe:	460c      	mov	r4, r1
 8002bc0:	f7fd fcc2 	bl	8000548 <__aeabi_dmul>
 8002bc4:	a37c      	add	r3, pc, #496	; (adr r3, 8002db8 <__ieee754_exp+0x330>)
 8002bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bca:	4606      	mov	r6, r0
 8002bcc:	460f      	mov	r7, r1
 8002bce:	f7fd fcbb 	bl	8000548 <__aeabi_dmul>
 8002bd2:	a37b      	add	r3, pc, #492	; (adr r3, 8002dc0 <__ieee754_exp+0x338>)
 8002bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd8:	f7fd fafe 	bl	80001d8 <__aeabi_dsub>
 8002bdc:	4632      	mov	r2, r6
 8002bde:	463b      	mov	r3, r7
 8002be0:	f7fd fcb2 	bl	8000548 <__aeabi_dmul>
 8002be4:	a378      	add	r3, pc, #480	; (adr r3, 8002dc8 <__ieee754_exp+0x340>)
 8002be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bea:	f7fd faf7 	bl	80001dc <__adddf3>
 8002bee:	4632      	mov	r2, r6
 8002bf0:	463b      	mov	r3, r7
 8002bf2:	f7fd fca9 	bl	8000548 <__aeabi_dmul>
 8002bf6:	a376      	add	r3, pc, #472	; (adr r3, 8002dd0 <__ieee754_exp+0x348>)
 8002bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bfc:	f7fd faec 	bl	80001d8 <__aeabi_dsub>
 8002c00:	4632      	mov	r2, r6
 8002c02:	463b      	mov	r3, r7
 8002c04:	f7fd fca0 	bl	8000548 <__aeabi_dmul>
 8002c08:	a373      	add	r3, pc, #460	; (adr r3, 8002dd8 <__ieee754_exp+0x350>)
 8002c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0e:	f7fd fae5 	bl	80001dc <__adddf3>
 8002c12:	4632      	mov	r2, r6
 8002c14:	463b      	mov	r3, r7
 8002c16:	f7fd fc97 	bl	8000548 <__aeabi_dmul>
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	4659      	mov	r1, fp
 8002c20:	4650      	mov	r0, sl
 8002c22:	f7fd fad9 	bl	80001d8 <__aeabi_dsub>
 8002c26:	9b01      	ldr	r3, [sp, #4]
 8002c28:	4606      	mov	r6, r0
 8002c2a:	460f      	mov	r7, r1
 8002c2c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d06d      	beq.n	8002d10 <__ieee754_exp+0x288>
 8002c34:	4632      	mov	r2, r6
 8002c36:	463b      	mov	r3, r7
 8002c38:	4650      	mov	r0, sl
 8002c3a:	4659      	mov	r1, fp
 8002c3c:	f7fd fc84 	bl	8000548 <__aeabi_dmul>
 8002c40:	4632      	mov	r2, r6
 8002c42:	4604      	mov	r4, r0
 8002c44:	460d      	mov	r5, r1
 8002c46:	463b      	mov	r3, r7
 8002c48:	2000      	movs	r0, #0
 8002c4a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002c4e:	f7fd fac3 	bl	80001d8 <__aeabi_dsub>
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	4620      	mov	r0, r4
 8002c58:	4629      	mov	r1, r5
 8002c5a:	f7fd fd9f 	bl	800079c <__aeabi_ddiv>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002c66:	f7fd fab7 	bl	80001d8 <__aeabi_dsub>
 8002c6a:	4642      	mov	r2, r8
 8002c6c:	464b      	mov	r3, r9
 8002c6e:	f7fd fab3 	bl	80001d8 <__aeabi_dsub>
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	2000      	movs	r0, #0
 8002c78:	495d      	ldr	r1, [pc, #372]	; (8002df0 <__ieee754_exp+0x368>)
 8002c7a:	f7fd faad 	bl	80001d8 <__aeabi_dsub>
 8002c7e:	9c01      	ldr	r4, [sp, #4]
 8002c80:	f46f 737f 	mvn.w	r3, #1020	; 0x3fc
 8002c84:	429c      	cmp	r4, r3
 8002c86:	4602      	mov	r2, r0
 8002c88:	f2c0 80bc 	blt.w	8002e04 <__ieee754_exp+0x37c>
 8002c8c:	eb01 5304 	add.w	r3, r1, r4, lsl #20
 8002c90:	4605      	mov	r5, r0
 8002c92:	461c      	mov	r4, r3
 8002c94:	4628      	mov	r0, r5
 8002c96:	4621      	mov	r1, r4
 8002c98:	b007      	add	sp, #28
 8002c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c9e:	462a      	mov	r2, r5
 8002ca0:	4623      	mov	r3, r4
 8002ca2:	4628      	mov	r0, r5
 8002ca4:	4621      	mov	r1, r4
 8002ca6:	f7fd fc4f 	bl	8000548 <__aeabi_dmul>
 8002caa:	a343      	add	r3, pc, #268	; (adr r3, 8002db8 <__ieee754_exp+0x330>)
 8002cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb0:	4606      	mov	r6, r0
 8002cb2:	460f      	mov	r7, r1
 8002cb4:	f7fd fc48 	bl	8000548 <__aeabi_dmul>
 8002cb8:	a341      	add	r3, pc, #260	; (adr r3, 8002dc0 <__ieee754_exp+0x338>)
 8002cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cbe:	f7fd fa8b 	bl	80001d8 <__aeabi_dsub>
 8002cc2:	4632      	mov	r2, r6
 8002cc4:	463b      	mov	r3, r7
 8002cc6:	f7fd fc3f 	bl	8000548 <__aeabi_dmul>
 8002cca:	a33f      	add	r3, pc, #252	; (adr r3, 8002dc8 <__ieee754_exp+0x340>)
 8002ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd0:	f7fd fa84 	bl	80001dc <__adddf3>
 8002cd4:	4632      	mov	r2, r6
 8002cd6:	463b      	mov	r3, r7
 8002cd8:	f7fd fc36 	bl	8000548 <__aeabi_dmul>
 8002cdc:	a33c      	add	r3, pc, #240	; (adr r3, 8002dd0 <__ieee754_exp+0x348>)
 8002cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce2:	f7fd fa79 	bl	80001d8 <__aeabi_dsub>
 8002ce6:	4632      	mov	r2, r6
 8002ce8:	463b      	mov	r3, r7
 8002cea:	f7fd fc2d 	bl	8000548 <__aeabi_dmul>
 8002cee:	a33a      	add	r3, pc, #232	; (adr r3, 8002dd8 <__ieee754_exp+0x350>)
 8002cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf4:	f7fd fa72 	bl	80001dc <__adddf3>
 8002cf8:	4632      	mov	r2, r6
 8002cfa:	463b      	mov	r3, r7
 8002cfc:	f7fd fc24 	bl	8000548 <__aeabi_dmul>
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	4628      	mov	r0, r5
 8002d06:	4621      	mov	r1, r4
 8002d08:	f7fd fa66 	bl	80001d8 <__aeabi_dsub>
 8002d0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002d10:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8002d14:	4628      	mov	r0, r5
 8002d16:	4642      	mov	r2, r8
 8002d18:	464b      	mov	r3, r9
 8002d1a:	4621      	mov	r1, r4
 8002d1c:	f7fd fc14 	bl	8000548 <__aeabi_dmul>
 8002d20:	2200      	movs	r2, #0
 8002d22:	4606      	mov	r6, r0
 8002d24:	460f      	mov	r7, r1
 8002d26:	4640      	mov	r0, r8
 8002d28:	4649      	mov	r1, r9
 8002d2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d2e:	f7fd fa53 	bl	80001d8 <__aeabi_dsub>
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	4630      	mov	r0, r6
 8002d38:	4639      	mov	r1, r7
 8002d3a:	f7fd fd2f 	bl	800079c <__aeabi_ddiv>
 8002d3e:	462a      	mov	r2, r5
 8002d40:	4623      	mov	r3, r4
 8002d42:	f7fd fa49 	bl	80001d8 <__aeabi_dsub>
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	4928      	ldr	r1, [pc, #160]	; (8002df0 <__ieee754_exp+0x368>)
 8002d4e:	f7fd fa43 	bl	80001d8 <__aeabi_dsub>
 8002d52:	4605      	mov	r5, r0
 8002d54:	460c      	mov	r4, r1
 8002d56:	4628      	mov	r0, r5
 8002d58:	4621      	mov	r1, r4
 8002d5a:	b007      	add	sp, #28
 8002d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d60:	460b      	mov	r3, r1
 8002d62:	f7fd fa3b 	bl	80001dc <__adddf3>
 8002d66:	4605      	mov	r5, r0
 8002d68:	460c      	mov	r4, r1
 8002d6a:	4628      	mov	r0, r5
 8002d6c:	4621      	mov	r1, r4
 8002d6e:	b007      	add	sp, #28
 8002d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d74:	a304      	add	r3, pc, #16	; (adr r3, 8002d88 <__ieee754_exp+0x300>)
 8002d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7a:	4610      	mov	r0, r2
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	f7fd fbe3 	bl	8000548 <__aeabi_dmul>
 8002d82:	4605      	mov	r5, r0
 8002d84:	460c      	mov	r4, r1
 8002d86:	e785      	b.n	8002c94 <__ieee754_exp+0x20c>
 8002d88:	8800759c 	.word	0x8800759c
 8002d8c:	7e37e43c 	.word	0x7e37e43c
 8002d90:	fefa39ef 	.word	0xfefa39ef
 8002d94:	40862e42 	.word	0x40862e42
 8002d98:	d52d3051 	.word	0xd52d3051
 8002d9c:	c0874910 	.word	0xc0874910
 8002da0:	652b82fe 	.word	0x652b82fe
 8002da4:	3ff71547 	.word	0x3ff71547
 8002da8:	fee00000 	.word	0xfee00000
 8002dac:	3fe62e42 	.word	0x3fe62e42
 8002db0:	35793c76 	.word	0x35793c76
 8002db4:	3dea39ef 	.word	0x3dea39ef
 8002db8:	72bea4d0 	.word	0x72bea4d0
 8002dbc:	3e663769 	.word	0x3e663769
 8002dc0:	c5d26bf1 	.word	0xc5d26bf1
 8002dc4:	3ebbbd41 	.word	0x3ebbbd41
 8002dc8:	af25de2c 	.word	0xaf25de2c
 8002dcc:	3f11566a 	.word	0x3f11566a
 8002dd0:	16bebd93 	.word	0x16bebd93
 8002dd4:	3f66c16c 	.word	0x3f66c16c
 8002dd8:	5555553e 	.word	0x5555553e
 8002ddc:	3fc55555 	.word	0x3fc55555
 8002de0:	40862e41 	.word	0x40862e41
 8002de4:	7fefffff 	.word	0x7fefffff
 8002de8:	3fd62e42 	.word	0x3fd62e42
 8002dec:	3e2fffff 	.word	0x3e2fffff
 8002df0:	3ff00000 	.word	0x3ff00000
 8002df4:	08005b38 	.word	0x08005b38
 8002df8:	3ff0a2b1 	.word	0x3ff0a2b1
 8002dfc:	08005b48 	.word	0x08005b48
 8002e00:	08005b58 	.word	0x08005b58
 8002e04:	9801      	ldr	r0, [sp, #4]
 8002e06:	f500 7a7a 	add.w	sl, r0, #1000	; 0x3e8
 8002e0a:	eb01 530a 	add.w	r3, r1, sl, lsl #20
 8002e0e:	4610      	mov	r0, r2
 8002e10:	4619      	mov	r1, r3
 8002e12:	2200      	movs	r2, #0
 8002e14:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8002e18:	f7fd fb96 	bl	8000548 <__aeabi_dmul>
 8002e1c:	4605      	mov	r5, r0
 8002e1e:	460c      	mov	r4, r1
 8002e20:	4628      	mov	r0, r5
 8002e22:	4621      	mov	r1, r4
 8002e24:	b007      	add	sp, #28
 8002e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e2a:	bf00      	nop
 8002e2c:	0000      	movs	r0, r0
 8002e2e:	0000      	movs	r0, r0

08002e30 <expm1>:
 8002e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e34:	4ad8      	ldr	r2, [pc, #864]	; (8003198 <expm1+0x368>)
 8002e36:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	b085      	sub	sp, #20
 8002e3e:	4605      	mov	r5, r0
 8002e40:	460c      	mov	r4, r1
 8002e42:	460e      	mov	r6, r1
 8002e44:	f240 8103 	bls.w	800304e <expm1+0x21e>
 8002e48:	4ad4      	ldr	r2, [pc, #848]	; (800319c <expm1+0x36c>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	f200 80f0 	bhi.w	8003030 <expm1+0x200>
 8002e50:	2e00      	cmp	r6, #0
 8002e52:	4628      	mov	r0, r5
 8002e54:	4621      	mov	r1, r4
 8002e56:	f2c0 8159 	blt.w	800310c <expm1+0x2dc>
 8002e5a:	a3b9      	add	r3, pc, #740	; (adr r3, 8003140 <expm1+0x310>)
 8002e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e60:	f7fd fb72 	bl	8000548 <__aeabi_dmul>
 8002e64:	460b      	mov	r3, r1
 8002e66:	49ce      	ldr	r1, [pc, #824]	; (80031a0 <expm1+0x370>)
 8002e68:	4602      	mov	r2, r0
 8002e6a:	2000      	movs	r0, #0
 8002e6c:	f7fd f9b6 	bl	80001dc <__adddf3>
 8002e70:	f7fd fe04 	bl	8000a7c <__aeabi_d2iz>
 8002e74:	9001      	str	r0, [sp, #4]
 8002e76:	f7fd fafd 	bl	8000474 <__aeabi_i2d>
 8002e7a:	a3b3      	add	r3, pc, #716	; (adr r3, 8003148 <expm1+0x318>)
 8002e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e80:	4606      	mov	r6, r0
 8002e82:	460f      	mov	r7, r1
 8002e84:	f7fd fb60 	bl	8000548 <__aeabi_dmul>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4628      	mov	r0, r5
 8002e8e:	4621      	mov	r1, r4
 8002e90:	f7fd f9a2 	bl	80001d8 <__aeabi_dsub>
 8002e94:	a3ae      	add	r3, pc, #696	; (adr r3, 8003150 <expm1+0x320>)
 8002e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9a:	4604      	mov	r4, r0
 8002e9c:	460d      	mov	r5, r1
 8002e9e:	4630      	mov	r0, r6
 8002ea0:	4639      	mov	r1, r7
 8002ea2:	f7fd fb51 	bl	8000548 <__aeabi_dmul>
 8002ea6:	4606      	mov	r6, r0
 8002ea8:	460f      	mov	r7, r1
 8002eaa:	4632      	mov	r2, r6
 8002eac:	463b      	mov	r3, r7
 8002eae:	4620      	mov	r0, r4
 8002eb0:	4629      	mov	r1, r5
 8002eb2:	f7fd f991 	bl	80001d8 <__aeabi_dsub>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	460b      	mov	r3, r1
 8002eba:	4620      	mov	r0, r4
 8002ebc:	4629      	mov	r1, r5
 8002ebe:	461c      	mov	r4, r3
 8002ec0:	4615      	mov	r5, r2
 8002ec2:	f7fd f989 	bl	80001d8 <__aeabi_dsub>
 8002ec6:	4632      	mov	r2, r6
 8002ec8:	463b      	mov	r3, r7
 8002eca:	f7fd f985 	bl	80001d8 <__aeabi_dsub>
 8002ece:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002ed2:	4bb3      	ldr	r3, [pc, #716]	; (80031a0 <expm1+0x370>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	4628      	mov	r0, r5
 8002ed8:	4621      	mov	r1, r4
 8002eda:	f7fd fb35 	bl	8000548 <__aeabi_dmul>
 8002ede:	4606      	mov	r6, r0
 8002ee0:	460f      	mov	r7, r1
 8002ee2:	4632      	mov	r2, r6
 8002ee4:	463b      	mov	r3, r7
 8002ee6:	4628      	mov	r0, r5
 8002ee8:	4621      	mov	r1, r4
 8002eea:	f7fd fb2d 	bl	8000548 <__aeabi_dmul>
 8002eee:	a39a      	add	r3, pc, #616	; (adr r3, 8003158 <expm1+0x328>)
 8002ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef4:	4682      	mov	sl, r0
 8002ef6:	468b      	mov	fp, r1
 8002ef8:	f7fd fb26 	bl	8000548 <__aeabi_dmul>
 8002efc:	a398      	add	r3, pc, #608	; (adr r3, 8003160 <expm1+0x330>)
 8002efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f02:	f7fd f96b 	bl	80001dc <__adddf3>
 8002f06:	4652      	mov	r2, sl
 8002f08:	465b      	mov	r3, fp
 8002f0a:	f7fd fb1d 	bl	8000548 <__aeabi_dmul>
 8002f0e:	a396      	add	r3, pc, #600	; (adr r3, 8003168 <expm1+0x338>)
 8002f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f14:	f7fd f960 	bl	80001d8 <__aeabi_dsub>
 8002f18:	4652      	mov	r2, sl
 8002f1a:	465b      	mov	r3, fp
 8002f1c:	f7fd fb14 	bl	8000548 <__aeabi_dmul>
 8002f20:	a393      	add	r3, pc, #588	; (adr r3, 8003170 <expm1+0x340>)
 8002f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f26:	f7fd f959 	bl	80001dc <__adddf3>
 8002f2a:	4652      	mov	r2, sl
 8002f2c:	465b      	mov	r3, fp
 8002f2e:	f7fd fb0b 	bl	8000548 <__aeabi_dmul>
 8002f32:	a391      	add	r3, pc, #580	; (adr r3, 8003178 <expm1+0x348>)
 8002f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f38:	f7fd f94e 	bl	80001d8 <__aeabi_dsub>
 8002f3c:	4652      	mov	r2, sl
 8002f3e:	465b      	mov	r3, fp
 8002f40:	f7fd fb02 	bl	8000548 <__aeabi_dmul>
 8002f44:	4b97      	ldr	r3, [pc, #604]	; (80031a4 <expm1+0x374>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	f7fd f948 	bl	80001dc <__adddf3>
 8002f4c:	4680      	mov	r8, r0
 8002f4e:	4689      	mov	r9, r1
 8002f50:	4642      	mov	r2, r8
 8002f52:	464b      	mov	r3, r9
 8002f54:	4630      	mov	r0, r6
 8002f56:	4639      	mov	r1, r7
 8002f58:	f7fd faf6 	bl	8000548 <__aeabi_dmul>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	2000      	movs	r0, #0
 8002f62:	4991      	ldr	r1, [pc, #580]	; (80031a8 <expm1+0x378>)
 8002f64:	f7fd f938 	bl	80001d8 <__aeabi_dsub>
 8002f68:	4606      	mov	r6, r0
 8002f6a:	460f      	mov	r7, r1
 8002f6c:	4632      	mov	r2, r6
 8002f6e:	4640      	mov	r0, r8
 8002f70:	4649      	mov	r1, r9
 8002f72:	463b      	mov	r3, r7
 8002f74:	f7fd f930 	bl	80001d8 <__aeabi_dsub>
 8002f78:	4632      	mov	r2, r6
 8002f7a:	4680      	mov	r8, r0
 8002f7c:	4689      	mov	r9, r1
 8002f7e:	463b      	mov	r3, r7
 8002f80:	4628      	mov	r0, r5
 8002f82:	4621      	mov	r1, r4
 8002f84:	f7fd fae0 	bl	8000548 <__aeabi_dmul>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	2000      	movs	r0, #0
 8002f8e:	4987      	ldr	r1, [pc, #540]	; (80031ac <expm1+0x37c>)
 8002f90:	f7fd f922 	bl	80001d8 <__aeabi_dsub>
 8002f94:	4602      	mov	r2, r0
 8002f96:	460b      	mov	r3, r1
 8002f98:	4640      	mov	r0, r8
 8002f9a:	4649      	mov	r1, r9
 8002f9c:	f7fd fbfe 	bl	800079c <__aeabi_ddiv>
 8002fa0:	4652      	mov	r2, sl
 8002fa2:	465b      	mov	r3, fp
 8002fa4:	f7fd fad0 	bl	8000548 <__aeabi_dmul>
 8002fa8:	9e01      	ldr	r6, [sp, #4]
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	2e00      	cmp	r6, #0
 8002fb0:	d057      	beq.n	8003062 <expm1+0x232>
 8002fb2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8002fb6:	4632      	mov	r2, r6
 8002fb8:	463b      	mov	r3, r7
 8002fba:	f7fd f90d 	bl	80001d8 <__aeabi_dsub>
 8002fbe:	462a      	mov	r2, r5
 8002fc0:	4623      	mov	r3, r4
 8002fc2:	f7fd fac1 	bl	8000548 <__aeabi_dmul>
 8002fc6:	4632      	mov	r2, r6
 8002fc8:	463b      	mov	r3, r7
 8002fca:	f7fd f905 	bl	80001d8 <__aeabi_dsub>
 8002fce:	465b      	mov	r3, fp
 8002fd0:	4652      	mov	r2, sl
 8002fd2:	f7fd f901 	bl	80001d8 <__aeabi_dsub>
 8002fd6:	9b01      	ldr	r3, [sp, #4]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	4606      	mov	r6, r0
 8002fdc:	460f      	mov	r7, r1
 8002fde:	f000 8115 	beq.w	800320c <expm1+0x3dc>
 8002fe2:	9b01      	ldr	r3, [sp, #4]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	f000 80f5 	beq.w	80031d4 <expm1+0x3a4>
 8002fea:	9b01      	ldr	r3, [sp, #4]
 8002fec:	3301      	adds	r3, #1
 8002fee:	2b39      	cmp	r3, #57	; 0x39
 8002ff0:	d878      	bhi.n	80030e4 <expm1+0x2b4>
 8002ff2:	9f01      	ldr	r7, [sp, #4]
 8002ff4:	2f13      	cmp	r7, #19
 8002ff6:	f300 811a 	bgt.w	800322e <expm1+0x3fe>
 8002ffa:	462a      	mov	r2, r5
 8002ffc:	4623      	mov	r3, r4
 8002ffe:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8003002:	f7fd f8e9 	bl	80001d8 <__aeabi_dsub>
 8003006:	413e      	asrs	r6, r7
 8003008:	f1c6 557f 	rsb	r5, r6, #1069547520	; 0x3fc00000
 800300c:	2400      	movs	r4, #0
 800300e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003012:	4602      	mov	r2, r0
 8003014:	460b      	mov	r3, r1
 8003016:	4620      	mov	r0, r4
 8003018:	4629      	mov	r1, r5
 800301a:	f7fd f8dd 	bl	80001d8 <__aeabi_dsub>
 800301e:	eb01 5307 	add.w	r3, r1, r7, lsl #20
 8003022:	4605      	mov	r5, r0
 8003024:	461c      	mov	r4, r3
 8003026:	4628      	mov	r0, r5
 8003028:	4621      	mov	r1, r4
 800302a:	b005      	add	sp, #20
 800302c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003030:	4a5f      	ldr	r2, [pc, #380]	; (80031b0 <expm1+0x380>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d93d      	bls.n	80030b2 <expm1+0x282>
 8003036:	f3c1 0313 	ubfx	r3, r1, #0, #20
 800303a:	4303      	orrs	r3, r0
 800303c:	4602      	mov	r2, r0
 800303e:	f000 8109 	beq.w	8003254 <expm1+0x424>
 8003042:	460b      	mov	r3, r1
 8003044:	f7fd f8ca 	bl	80001dc <__adddf3>
 8003048:	4605      	mov	r5, r0
 800304a:	460c      	mov	r4, r1
 800304c:	e019      	b.n	8003082 <expm1+0x252>
 800304e:	4a59      	ldr	r2, [pc, #356]	; (80031b4 <expm1+0x384>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d81b      	bhi.n	800308c <expm1+0x25c>
 8003054:	4a58      	ldr	r2, [pc, #352]	; (80031b8 <expm1+0x388>)
 8003056:	4293      	cmp	r3, r2
 8003058:	f240 80b4 	bls.w	80031c4 <expm1+0x394>
 800305c:	2300      	movs	r3, #0
 800305e:	9301      	str	r3, [sp, #4]
 8003060:	e737      	b.n	8002ed2 <expm1+0xa2>
 8003062:	4628      	mov	r0, r5
 8003064:	4621      	mov	r1, r4
 8003066:	f7fd fa6f 	bl	8000548 <__aeabi_dmul>
 800306a:	4652      	mov	r2, sl
 800306c:	465b      	mov	r3, fp
 800306e:	f7fd f8b3 	bl	80001d8 <__aeabi_dsub>
 8003072:	4602      	mov	r2, r0
 8003074:	460b      	mov	r3, r1
 8003076:	4628      	mov	r0, r5
 8003078:	4621      	mov	r1, r4
 800307a:	f7fd f8ad 	bl	80001d8 <__aeabi_dsub>
 800307e:	4605      	mov	r5, r0
 8003080:	460c      	mov	r4, r1
 8003082:	4628      	mov	r0, r5
 8003084:	4621      	mov	r1, r4
 8003086:	b005      	add	sp, #20
 8003088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800308c:	4a4b      	ldr	r2, [pc, #300]	; (80031bc <expm1+0x38c>)
 800308e:	4293      	cmp	r3, r2
 8003090:	f200 80f7 	bhi.w	8003282 <expm1+0x452>
 8003094:	2900      	cmp	r1, #0
 8003096:	a32c      	add	r3, pc, #176	; (adr r3, 8003148 <expm1+0x318>)
 8003098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309c:	db17      	blt.n	80030ce <expm1+0x29e>
 800309e:	f7fd f89b 	bl	80001d8 <__aeabi_dsub>
 80030a2:	2301      	movs	r3, #1
 80030a4:	a72a      	add	r7, pc, #168	; (adr r7, 8003150 <expm1+0x320>)
 80030a6:	e9d7 6700 	ldrd	r6, r7, [r7]
 80030aa:	4604      	mov	r4, r0
 80030ac:	460d      	mov	r5, r1
 80030ae:	9301      	str	r3, [sp, #4]
 80030b0:	e6fb      	b.n	8002eaa <expm1+0x7a>
 80030b2:	a333      	add	r3, pc, #204	; (adr r3, 8003180 <expm1+0x350>)
 80030b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b8:	f7fd fcd6 	bl	8000a68 <__aeabi_dcmpgt>
 80030bc:	2800      	cmp	r0, #0
 80030be:	f43f aec7 	beq.w	8002e50 <expm1+0x20>
 80030c2:	2000      	movs	r0, #0
 80030c4:	b005      	add	sp, #20
 80030c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030ca:	f000 b927 	b.w	800331c <__math_oflow>
 80030ce:	f7fd f885 	bl	80001dc <__adddf3>
 80030d2:	f04f 33ff 	mov.w	r3, #4294967295
 80030d6:	a72c      	add	r7, pc, #176	; (adr r7, 8003188 <expm1+0x358>)
 80030d8:	e9d7 6700 	ldrd	r6, r7, [r7]
 80030dc:	4604      	mov	r4, r0
 80030de:	460d      	mov	r5, r1
 80030e0:	9301      	str	r3, [sp, #4]
 80030e2:	e6e2      	b.n	8002eaa <expm1+0x7a>
 80030e4:	462a      	mov	r2, r5
 80030e6:	4623      	mov	r3, r4
 80030e8:	f7fd f876 	bl	80001d8 <__aeabi_dsub>
 80030ec:	4602      	mov	r2, r0
 80030ee:	460b      	mov	r3, r1
 80030f0:	2000      	movs	r0, #0
 80030f2:	492c      	ldr	r1, [pc, #176]	; (80031a4 <expm1+0x374>)
 80030f4:	f7fd f870 	bl	80001d8 <__aeabi_dsub>
 80030f8:	9a01      	ldr	r2, [sp, #4]
 80030fa:	4b2a      	ldr	r3, [pc, #168]	; (80031a4 <expm1+0x374>)
 80030fc:	eb01 5102 	add.w	r1, r1, r2, lsl #20
 8003100:	2200      	movs	r2, #0
 8003102:	f7fd f869 	bl	80001d8 <__aeabi_dsub>
 8003106:	4605      	mov	r5, r0
 8003108:	460c      	mov	r4, r1
 800310a:	e7ba      	b.n	8003082 <expm1+0x252>
 800310c:	a320      	add	r3, pc, #128	; (adr r3, 8003190 <expm1+0x360>)
 800310e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003112:	f7fd f863 	bl	80001dc <__adddf3>
 8003116:	2200      	movs	r2, #0
 8003118:	2300      	movs	r3, #0
 800311a:	f7fd fc87 	bl	8000a2c <__aeabi_dcmplt>
 800311e:	2800      	cmp	r0, #0
 8003120:	f040 809b 	bne.w	800325a <expm1+0x42a>
 8003124:	a306      	add	r3, pc, #24	; (adr r3, 8003140 <expm1+0x310>)
 8003126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312a:	4628      	mov	r0, r5
 800312c:	4621      	mov	r1, r4
 800312e:	f7fd fa0b 	bl	8000548 <__aeabi_dmul>
 8003132:	4602      	mov	r2, r0
 8003134:	460b      	mov	r3, r1
 8003136:	2000      	movs	r0, #0
 8003138:	4921      	ldr	r1, [pc, #132]	; (80031c0 <expm1+0x390>)
 800313a:	e697      	b.n	8002e6c <expm1+0x3c>
 800313c:	f3af 8000 	nop.w
 8003140:	652b82fe 	.word	0x652b82fe
 8003144:	3ff71547 	.word	0x3ff71547
 8003148:	fee00000 	.word	0xfee00000
 800314c:	3fe62e42 	.word	0x3fe62e42
 8003150:	35793c76 	.word	0x35793c76
 8003154:	3dea39ef 	.word	0x3dea39ef
 8003158:	6e09c32d 	.word	0x6e09c32d
 800315c:	be8afdb7 	.word	0xbe8afdb7
 8003160:	86e65239 	.word	0x86e65239
 8003164:	3ed0cfca 	.word	0x3ed0cfca
 8003168:	9eaadbb7 	.word	0x9eaadbb7
 800316c:	3f14ce19 	.word	0x3f14ce19
 8003170:	19fe5585 	.word	0x19fe5585
 8003174:	3f5a01a0 	.word	0x3f5a01a0
 8003178:	111110f4 	.word	0x111110f4
 800317c:	3fa11111 	.word	0x3fa11111
 8003180:	fefa39ef 	.word	0xfefa39ef
 8003184:	40862e42 	.word	0x40862e42
 8003188:	35793c76 	.word	0x35793c76
 800318c:	bdea39ef 	.word	0xbdea39ef
 8003190:	c2f8f359 	.word	0xc2f8f359
 8003194:	01a56e1f 	.word	0x01a56e1f
 8003198:	40436879 	.word	0x40436879
 800319c:	40862e41 	.word	0x40862e41
 80031a0:	3fe00000 	.word	0x3fe00000
 80031a4:	3ff00000 	.word	0x3ff00000
 80031a8:	40080000 	.word	0x40080000
 80031ac:	40180000 	.word	0x40180000
 80031b0:	7fefffff 	.word	0x7fefffff
 80031b4:	3fd62e42 	.word	0x3fd62e42
 80031b8:	3c8fffff 	.word	0x3c8fffff
 80031bc:	3ff0a2b1 	.word	0x3ff0a2b1
 80031c0:	bfe00000 	.word	0xbfe00000
 80031c4:	a336      	add	r3, pc, #216	; (adr r3, 80032a0 <expm1+0x470>)
 80031c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ca:	f7fd f807 	bl	80001dc <__adddf3>
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	e74c      	b.n	800306e <expm1+0x23e>
 80031d4:	4b36      	ldr	r3, [pc, #216]	; (80032b0 <expm1+0x480>)
 80031d6:	4628      	mov	r0, r5
 80031d8:	4621      	mov	r1, r4
 80031da:	2200      	movs	r2, #0
 80031dc:	f7fd fc26 	bl	8000a2c <__aeabi_dcmplt>
 80031e0:	2800      	cmp	r0, #0
 80031e2:	d03d      	beq.n	8003260 <expm1+0x430>
 80031e4:	4b33      	ldr	r3, [pc, #204]	; (80032b4 <expm1+0x484>)
 80031e6:	4628      	mov	r0, r5
 80031e8:	4621      	mov	r1, r4
 80031ea:	2200      	movs	r2, #0
 80031ec:	f7fc fff6 	bl	80001dc <__adddf3>
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	4630      	mov	r0, r6
 80031f6:	4639      	mov	r1, r7
 80031f8:	f7fc ffee 	bl	80001d8 <__aeabi_dsub>
 80031fc:	2200      	movs	r2, #0
 80031fe:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8003202:	f7fd f9a1 	bl	8000548 <__aeabi_dmul>
 8003206:	4605      	mov	r5, r0
 8003208:	460c      	mov	r4, r1
 800320a:	e73a      	b.n	8003082 <expm1+0x252>
 800320c:	4628      	mov	r0, r5
 800320e:	4621      	mov	r1, r4
 8003210:	4632      	mov	r2, r6
 8003212:	463b      	mov	r3, r7
 8003214:	f7fc ffe0 	bl	80001d8 <__aeabi_dsub>
 8003218:	4b26      	ldr	r3, [pc, #152]	; (80032b4 <expm1+0x484>)
 800321a:	2200      	movs	r2, #0
 800321c:	f7fd f994 	bl	8000548 <__aeabi_dmul>
 8003220:	4b24      	ldr	r3, [pc, #144]	; (80032b4 <expm1+0x484>)
 8003222:	2200      	movs	r2, #0
 8003224:	f7fc ffd8 	bl	80001d8 <__aeabi_dsub>
 8003228:	4605      	mov	r5, r0
 800322a:	460c      	mov	r4, r1
 800322c:	e729      	b.n	8003082 <expm1+0x252>
 800322e:	9f01      	ldr	r7, [sp, #4]
 8003230:	f5c7 767f 	rsb	r6, r7, #1020	; 0x3fc
 8003234:	3603      	adds	r6, #3
 8003236:	0533      	lsls	r3, r6, #20
 8003238:	2200      	movs	r2, #0
 800323a:	f7fc ffcf 	bl	80001dc <__adddf3>
 800323e:	4602      	mov	r2, r0
 8003240:	460b      	mov	r3, r1
 8003242:	4628      	mov	r0, r5
 8003244:	4621      	mov	r1, r4
 8003246:	f7fc ffc7 	bl	80001d8 <__aeabi_dsub>
 800324a:	4b1b      	ldr	r3, [pc, #108]	; (80032b8 <expm1+0x488>)
 800324c:	2200      	movs	r2, #0
 800324e:	f7fc ffc5 	bl	80001dc <__adddf3>
 8003252:	e6e4      	b.n	800301e <expm1+0x1ee>
 8003254:	2900      	cmp	r1, #0
 8003256:	f6bf af14 	bge.w	8003082 <expm1+0x252>
 800325a:	4c18      	ldr	r4, [pc, #96]	; (80032bc <expm1+0x48c>)
 800325c:	2500      	movs	r5, #0
 800325e:	e710      	b.n	8003082 <expm1+0x252>
 8003260:	4628      	mov	r0, r5
 8003262:	4621      	mov	r1, r4
 8003264:	4632      	mov	r2, r6
 8003266:	463b      	mov	r3, r7
 8003268:	f7fc ffb6 	bl	80001d8 <__aeabi_dsub>
 800326c:	4602      	mov	r2, r0
 800326e:	460b      	mov	r3, r1
 8003270:	f7fc ffb4 	bl	80001dc <__adddf3>
 8003274:	4b10      	ldr	r3, [pc, #64]	; (80032b8 <expm1+0x488>)
 8003276:	2200      	movs	r2, #0
 8003278:	f7fc ffb0 	bl	80001dc <__adddf3>
 800327c:	4605      	mov	r5, r0
 800327e:	460c      	mov	r4, r1
 8003280:	e6ff      	b.n	8003082 <expm1+0x252>
 8003282:	a309      	add	r3, pc, #36	; (adr r3, 80032a8 <expm1+0x478>)
 8003284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003288:	f7fd f95e 	bl	8000548 <__aeabi_dmul>
 800328c:	2c00      	cmp	r4, #0
 800328e:	4602      	mov	r2, r0
 8003290:	460b      	mov	r3, r1
 8003292:	f04f 0000 	mov.w	r0, #0
 8003296:	f6ff af4f 	blt.w	8003138 <expm1+0x308>
 800329a:	4906      	ldr	r1, [pc, #24]	; (80032b4 <expm1+0x484>)
 800329c:	e5e6      	b.n	8002e6c <expm1+0x3c>
 800329e:	bf00      	nop
 80032a0:	8800759c 	.word	0x8800759c
 80032a4:	7e37e43c 	.word	0x7e37e43c
 80032a8:	652b82fe 	.word	0x652b82fe
 80032ac:	3ff71547 	.word	0x3ff71547
 80032b0:	bfd00000 	.word	0xbfd00000
 80032b4:	3fe00000 	.word	0x3fe00000
 80032b8:	3ff00000 	.word	0x3ff00000
 80032bc:	bff00000 	.word	0xbff00000

080032c0 <fabs>:
 80032c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop

080032c8 <finite>:
 80032c8:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80032cc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80032d0:	0fc0      	lsrs	r0, r0, #31
 80032d2:	4770      	bx	lr

080032d4 <with_errno>:
 80032d4:	b5d0      	push	{r4, r6, r7, lr}
 80032d6:	4606      	mov	r6, r0
 80032d8:	460f      	mov	r7, r1
 80032da:	4614      	mov	r4, r2
 80032dc:	f000 f830 	bl	8003340 <__errno>
 80032e0:	4603      	mov	r3, r0
 80032e2:	4639      	mov	r1, r7
 80032e4:	4630      	mov	r0, r6
 80032e6:	601c      	str	r4, [r3, #0]
 80032e8:	bdd0      	pop	{r4, r6, r7, pc}
 80032ea:	bf00      	nop

080032ec <xflow>:
 80032ec:	b530      	push	{r4, r5, lr}
 80032ee:	b083      	sub	sp, #12
 80032f0:	b180      	cbz	r0, 8003314 <xflow+0x28>
 80032f2:	4614      	mov	r4, r2
 80032f4:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
 80032f8:	e9cd 4500 	strd	r4, r5, [sp]
 80032fc:	4610      	mov	r0, r2
 80032fe:	4619      	mov	r1, r3
 8003300:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003304:	f7fd f920 	bl	8000548 <__aeabi_dmul>
 8003308:	2222      	movs	r2, #34	; 0x22
 800330a:	b003      	add	sp, #12
 800330c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003310:	f7ff bfe0 	b.w	80032d4 <with_errno>
 8003314:	4614      	mov	r4, r2
 8003316:	461d      	mov	r5, r3
 8003318:	e7ee      	b.n	80032f8 <xflow+0xc>
 800331a:	bf00      	nop

0800331c <__math_oflow>:
 800331c:	2200      	movs	r2, #0
 800331e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8003322:	f7ff bfe3 	b.w	80032ec <xflow>
 8003326:	bf00      	nop

08003328 <atoi>:
 8003328:	220a      	movs	r2, #10
 800332a:	2100      	movs	r1, #0
 800332c:	f001 ba02 	b.w	8004734 <strtol>

08003330 <calloc>:
 8003330:	4b02      	ldr	r3, [pc, #8]	; (800333c <calloc+0xc>)
 8003332:	460a      	mov	r2, r1
 8003334:	4601      	mov	r1, r0
 8003336:	6818      	ldr	r0, [r3, #0]
 8003338:	f000 bc76 	b.w	8003c28 <_calloc_r>
 800333c:	20000004 	.word	0x20000004

08003340 <__errno>:
 8003340:	4b01      	ldr	r3, [pc, #4]	; (8003348 <__errno+0x8>)
 8003342:	6818      	ldr	r0, [r3, #0]
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	20000004 	.word	0x20000004

0800334c <exit>:
 800334c:	b508      	push	{r3, lr}
 800334e:	4b07      	ldr	r3, [pc, #28]	; (800336c <exit+0x20>)
 8003350:	4604      	mov	r4, r0
 8003352:	b113      	cbz	r3, 800335a <exit+0xe>
 8003354:	2100      	movs	r1, #0
 8003356:	f3af 8000 	nop.w
 800335a:	4b05      	ldr	r3, [pc, #20]	; (8003370 <exit+0x24>)
 800335c:	6818      	ldr	r0, [r3, #0]
 800335e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003360:	b103      	cbz	r3, 8003364 <exit+0x18>
 8003362:	4798      	blx	r3
 8003364:	4620      	mov	r0, r4
 8003366:	f001 fc53 	bl	8004c10 <_exit>
 800336a:	bf00      	nop
 800336c:	00000000 	.word	0x00000000
 8003370:	08005bc8 	.word	0x08005bc8

08003374 <_fclose_r>:
 8003374:	b570      	push	{r4, r5, r6, lr}
 8003376:	4605      	mov	r5, r0
 8003378:	460c      	mov	r4, r1
 800337a:	b911      	cbnz	r1, 8003382 <_fclose_r+0xe>
 800337c:	2600      	movs	r6, #0
 800337e:	4630      	mov	r0, r6
 8003380:	bd70      	pop	{r4, r5, r6, pc}
 8003382:	b118      	cbz	r0, 800338c <_fclose_r+0x18>
 8003384:	6983      	ldr	r3, [r0, #24]
 8003386:	b90b      	cbnz	r3, 800338c <_fclose_r+0x18>
 8003388:	f000 f97e 	bl	8003688 <__sinit>
 800338c:	4b2c      	ldr	r3, [pc, #176]	; (8003440 <_fclose_r+0xcc>)
 800338e:	429c      	cmp	r4, r3
 8003390:	d114      	bne.n	80033bc <_fclose_r+0x48>
 8003392:	686c      	ldr	r4, [r5, #4]
 8003394:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003396:	07d8      	lsls	r0, r3, #31
 8003398:	d405      	bmi.n	80033a6 <_fclose_r+0x32>
 800339a:	89a3      	ldrh	r3, [r4, #12]
 800339c:	0599      	lsls	r1, r3, #22
 800339e:	d402      	bmi.n	80033a6 <_fclose_r+0x32>
 80033a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033a2:	f000 fbb3 	bl	8003b0c <__retarget_lock_acquire_recursive>
 80033a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033aa:	b98b      	cbnz	r3, 80033d0 <_fclose_r+0x5c>
 80033ac:	6e66      	ldr	r6, [r4, #100]	; 0x64
 80033ae:	f016 0601 	ands.w	r6, r6, #1
 80033b2:	d1e3      	bne.n	800337c <_fclose_r+0x8>
 80033b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033b6:	f000 fbaa 	bl	8003b0e <__retarget_lock_release_recursive>
 80033ba:	e7e0      	b.n	800337e <_fclose_r+0xa>
 80033bc:	4b21      	ldr	r3, [pc, #132]	; (8003444 <_fclose_r+0xd0>)
 80033be:	429c      	cmp	r4, r3
 80033c0:	d101      	bne.n	80033c6 <_fclose_r+0x52>
 80033c2:	68ac      	ldr	r4, [r5, #8]
 80033c4:	e7e6      	b.n	8003394 <_fclose_r+0x20>
 80033c6:	4b20      	ldr	r3, [pc, #128]	; (8003448 <_fclose_r+0xd4>)
 80033c8:	429c      	cmp	r4, r3
 80033ca:	bf08      	it	eq
 80033cc:	68ec      	ldreq	r4, [r5, #12]
 80033ce:	e7e1      	b.n	8003394 <_fclose_r+0x20>
 80033d0:	4621      	mov	r1, r4
 80033d2:	4628      	mov	r0, r5
 80033d4:	f000 f842 	bl	800345c <__sflush_r>
 80033d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80033da:	4606      	mov	r6, r0
 80033dc:	b133      	cbz	r3, 80033ec <_fclose_r+0x78>
 80033de:	6a21      	ldr	r1, [r4, #32]
 80033e0:	4628      	mov	r0, r5
 80033e2:	4798      	blx	r3
 80033e4:	2800      	cmp	r0, #0
 80033e6:	bfb8      	it	lt
 80033e8:	f04f 36ff 	movlt.w	r6, #4294967295
 80033ec:	89a3      	ldrh	r3, [r4, #12]
 80033ee:	061a      	lsls	r2, r3, #24
 80033f0:	d503      	bpl.n	80033fa <_fclose_r+0x86>
 80033f2:	6921      	ldr	r1, [r4, #16]
 80033f4:	4628      	mov	r0, r5
 80033f6:	f000 fc25 	bl	8003c44 <_free_r>
 80033fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033fc:	b141      	cbz	r1, 8003410 <_fclose_r+0x9c>
 80033fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003402:	4299      	cmp	r1, r3
 8003404:	d002      	beq.n	800340c <_fclose_r+0x98>
 8003406:	4628      	mov	r0, r5
 8003408:	f000 fc1c 	bl	8003c44 <_free_r>
 800340c:	2300      	movs	r3, #0
 800340e:	6363      	str	r3, [r4, #52]	; 0x34
 8003410:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003412:	b121      	cbz	r1, 800341e <_fclose_r+0xaa>
 8003414:	4628      	mov	r0, r5
 8003416:	f000 fc15 	bl	8003c44 <_free_r>
 800341a:	2300      	movs	r3, #0
 800341c:	64a3      	str	r3, [r4, #72]	; 0x48
 800341e:	f000 f91b 	bl	8003658 <__sfp_lock_acquire>
 8003422:	2300      	movs	r3, #0
 8003424:	81a3      	strh	r3, [r4, #12]
 8003426:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003428:	07db      	lsls	r3, r3, #31
 800342a:	d402      	bmi.n	8003432 <_fclose_r+0xbe>
 800342c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800342e:	f000 fb6e 	bl	8003b0e <__retarget_lock_release_recursive>
 8003432:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003434:	f000 fb69 	bl	8003b0a <__retarget_lock_close_recursive>
 8003438:	f000 f914 	bl	8003664 <__sfp_lock_release>
 800343c:	e79f      	b.n	800337e <_fclose_r+0xa>
 800343e:	bf00      	nop
 8003440:	08005b88 	.word	0x08005b88
 8003444:	08005ba8 	.word	0x08005ba8
 8003448:	08005b68 	.word	0x08005b68

0800344c <fclose>:
 800344c:	4b02      	ldr	r3, [pc, #8]	; (8003458 <fclose+0xc>)
 800344e:	4601      	mov	r1, r0
 8003450:	6818      	ldr	r0, [r3, #0]
 8003452:	f7ff bf8f 	b.w	8003374 <_fclose_r>
 8003456:	bf00      	nop
 8003458:	20000004 	.word	0x20000004

0800345c <__sflush_r>:
 800345c:	898a      	ldrh	r2, [r1, #12]
 800345e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003460:	4605      	mov	r5, r0
 8003462:	0710      	lsls	r0, r2, #28
 8003464:	460c      	mov	r4, r1
 8003466:	d457      	bmi.n	8003518 <__sflush_r+0xbc>
 8003468:	684b      	ldr	r3, [r1, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	dc04      	bgt.n	8003478 <__sflush_r+0x1c>
 800346e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003470:	2b00      	cmp	r3, #0
 8003472:	dc01      	bgt.n	8003478 <__sflush_r+0x1c>
 8003474:	2000      	movs	r0, #0
 8003476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003478:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800347a:	2e00      	cmp	r6, #0
 800347c:	d0fa      	beq.n	8003474 <__sflush_r+0x18>
 800347e:	2300      	movs	r3, #0
 8003480:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003484:	682f      	ldr	r7, [r5, #0]
 8003486:	602b      	str	r3, [r5, #0]
 8003488:	d032      	beq.n	80034f0 <__sflush_r+0x94>
 800348a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800348c:	89a3      	ldrh	r3, [r4, #12]
 800348e:	075a      	lsls	r2, r3, #29
 8003490:	d505      	bpl.n	800349e <__sflush_r+0x42>
 8003492:	6863      	ldr	r3, [r4, #4]
 8003494:	1ac0      	subs	r0, r0, r3
 8003496:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003498:	b10b      	cbz	r3, 800349e <__sflush_r+0x42>
 800349a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800349c:	1ac0      	subs	r0, r0, r3
 800349e:	2300      	movs	r3, #0
 80034a0:	4602      	mov	r2, r0
 80034a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034a4:	6a21      	ldr	r1, [r4, #32]
 80034a6:	4628      	mov	r0, r5
 80034a8:	47b0      	blx	r6
 80034aa:	1c43      	adds	r3, r0, #1
 80034ac:	89a3      	ldrh	r3, [r4, #12]
 80034ae:	d106      	bne.n	80034be <__sflush_r+0x62>
 80034b0:	6829      	ldr	r1, [r5, #0]
 80034b2:	291d      	cmp	r1, #29
 80034b4:	d82c      	bhi.n	8003510 <__sflush_r+0xb4>
 80034b6:	4a29      	ldr	r2, [pc, #164]	; (800355c <__sflush_r+0x100>)
 80034b8:	40ca      	lsrs	r2, r1
 80034ba:	07d6      	lsls	r6, r2, #31
 80034bc:	d528      	bpl.n	8003510 <__sflush_r+0xb4>
 80034be:	2200      	movs	r2, #0
 80034c0:	6062      	str	r2, [r4, #4]
 80034c2:	04d9      	lsls	r1, r3, #19
 80034c4:	6922      	ldr	r2, [r4, #16]
 80034c6:	6022      	str	r2, [r4, #0]
 80034c8:	d504      	bpl.n	80034d4 <__sflush_r+0x78>
 80034ca:	1c42      	adds	r2, r0, #1
 80034cc:	d101      	bne.n	80034d2 <__sflush_r+0x76>
 80034ce:	682b      	ldr	r3, [r5, #0]
 80034d0:	b903      	cbnz	r3, 80034d4 <__sflush_r+0x78>
 80034d2:	6560      	str	r0, [r4, #84]	; 0x54
 80034d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80034d6:	602f      	str	r7, [r5, #0]
 80034d8:	2900      	cmp	r1, #0
 80034da:	d0cb      	beq.n	8003474 <__sflush_r+0x18>
 80034dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80034e0:	4299      	cmp	r1, r3
 80034e2:	d002      	beq.n	80034ea <__sflush_r+0x8e>
 80034e4:	4628      	mov	r0, r5
 80034e6:	f000 fbad 	bl	8003c44 <_free_r>
 80034ea:	2000      	movs	r0, #0
 80034ec:	6360      	str	r0, [r4, #52]	; 0x34
 80034ee:	e7c2      	b.n	8003476 <__sflush_r+0x1a>
 80034f0:	6a21      	ldr	r1, [r4, #32]
 80034f2:	2301      	movs	r3, #1
 80034f4:	4628      	mov	r0, r5
 80034f6:	47b0      	blx	r6
 80034f8:	1c41      	adds	r1, r0, #1
 80034fa:	d1c7      	bne.n	800348c <__sflush_r+0x30>
 80034fc:	682b      	ldr	r3, [r5, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0c4      	beq.n	800348c <__sflush_r+0x30>
 8003502:	2b1d      	cmp	r3, #29
 8003504:	d001      	beq.n	800350a <__sflush_r+0xae>
 8003506:	2b16      	cmp	r3, #22
 8003508:	d101      	bne.n	800350e <__sflush_r+0xb2>
 800350a:	602f      	str	r7, [r5, #0]
 800350c:	e7b2      	b.n	8003474 <__sflush_r+0x18>
 800350e:	89a3      	ldrh	r3, [r4, #12]
 8003510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003514:	81a3      	strh	r3, [r4, #12]
 8003516:	e7ae      	b.n	8003476 <__sflush_r+0x1a>
 8003518:	690f      	ldr	r7, [r1, #16]
 800351a:	2f00      	cmp	r7, #0
 800351c:	d0aa      	beq.n	8003474 <__sflush_r+0x18>
 800351e:	0793      	lsls	r3, r2, #30
 8003520:	680e      	ldr	r6, [r1, #0]
 8003522:	bf08      	it	eq
 8003524:	694b      	ldreq	r3, [r1, #20]
 8003526:	600f      	str	r7, [r1, #0]
 8003528:	bf18      	it	ne
 800352a:	2300      	movne	r3, #0
 800352c:	1bf6      	subs	r6, r6, r7
 800352e:	608b      	str	r3, [r1, #8]
 8003530:	2e00      	cmp	r6, #0
 8003532:	dd9f      	ble.n	8003474 <__sflush_r+0x18>
 8003534:	6a21      	ldr	r1, [r4, #32]
 8003536:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800353a:	4633      	mov	r3, r6
 800353c:	463a      	mov	r2, r7
 800353e:	4628      	mov	r0, r5
 8003540:	47e0      	blx	ip
 8003542:	2800      	cmp	r0, #0
 8003544:	dc06      	bgt.n	8003554 <__sflush_r+0xf8>
 8003546:	89a3      	ldrh	r3, [r4, #12]
 8003548:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800354c:	81a3      	strh	r3, [r4, #12]
 800354e:	f04f 30ff 	mov.w	r0, #4294967295
 8003552:	e790      	b.n	8003476 <__sflush_r+0x1a>
 8003554:	4407      	add	r7, r0
 8003556:	1a36      	subs	r6, r6, r0
 8003558:	e7ea      	b.n	8003530 <__sflush_r+0xd4>
 800355a:	bf00      	nop
 800355c:	20400001 	.word	0x20400001

08003560 <_fflush_r>:
 8003560:	b538      	push	{r3, r4, r5, lr}
 8003562:	690b      	ldr	r3, [r1, #16]
 8003564:	4605      	mov	r5, r0
 8003566:	460c      	mov	r4, r1
 8003568:	b913      	cbnz	r3, 8003570 <_fflush_r+0x10>
 800356a:	2500      	movs	r5, #0
 800356c:	4628      	mov	r0, r5
 800356e:	bd38      	pop	{r3, r4, r5, pc}
 8003570:	b118      	cbz	r0, 800357a <_fflush_r+0x1a>
 8003572:	6983      	ldr	r3, [r0, #24]
 8003574:	b90b      	cbnz	r3, 800357a <_fflush_r+0x1a>
 8003576:	f000 f887 	bl	8003688 <__sinit>
 800357a:	4b14      	ldr	r3, [pc, #80]	; (80035cc <_fflush_r+0x6c>)
 800357c:	429c      	cmp	r4, r3
 800357e:	d11b      	bne.n	80035b8 <_fflush_r+0x58>
 8003580:	686c      	ldr	r4, [r5, #4]
 8003582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d0ef      	beq.n	800356a <_fflush_r+0xa>
 800358a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800358c:	07d0      	lsls	r0, r2, #31
 800358e:	d404      	bmi.n	800359a <_fflush_r+0x3a>
 8003590:	0599      	lsls	r1, r3, #22
 8003592:	d402      	bmi.n	800359a <_fflush_r+0x3a>
 8003594:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003596:	f000 fab9 	bl	8003b0c <__retarget_lock_acquire_recursive>
 800359a:	4628      	mov	r0, r5
 800359c:	4621      	mov	r1, r4
 800359e:	f7ff ff5d 	bl	800345c <__sflush_r>
 80035a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035a4:	07da      	lsls	r2, r3, #31
 80035a6:	4605      	mov	r5, r0
 80035a8:	d4e0      	bmi.n	800356c <_fflush_r+0xc>
 80035aa:	89a3      	ldrh	r3, [r4, #12]
 80035ac:	059b      	lsls	r3, r3, #22
 80035ae:	d4dd      	bmi.n	800356c <_fflush_r+0xc>
 80035b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035b2:	f000 faac 	bl	8003b0e <__retarget_lock_release_recursive>
 80035b6:	e7d9      	b.n	800356c <_fflush_r+0xc>
 80035b8:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <_fflush_r+0x70>)
 80035ba:	429c      	cmp	r4, r3
 80035bc:	d101      	bne.n	80035c2 <_fflush_r+0x62>
 80035be:	68ac      	ldr	r4, [r5, #8]
 80035c0:	e7df      	b.n	8003582 <_fflush_r+0x22>
 80035c2:	4b04      	ldr	r3, [pc, #16]	; (80035d4 <_fflush_r+0x74>)
 80035c4:	429c      	cmp	r4, r3
 80035c6:	bf08      	it	eq
 80035c8:	68ec      	ldreq	r4, [r5, #12]
 80035ca:	e7da      	b.n	8003582 <_fflush_r+0x22>
 80035cc:	08005b88 	.word	0x08005b88
 80035d0:	08005ba8 	.word	0x08005ba8
 80035d4:	08005b68 	.word	0x08005b68

080035d8 <std>:
 80035d8:	2300      	movs	r3, #0
 80035da:	b510      	push	{r4, lr}
 80035dc:	4604      	mov	r4, r0
 80035de:	e9c0 3300 	strd	r3, r3, [r0]
 80035e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80035e6:	6083      	str	r3, [r0, #8]
 80035e8:	8181      	strh	r1, [r0, #12]
 80035ea:	6643      	str	r3, [r0, #100]	; 0x64
 80035ec:	81c2      	strh	r2, [r0, #14]
 80035ee:	6183      	str	r3, [r0, #24]
 80035f0:	4619      	mov	r1, r3
 80035f2:	2208      	movs	r2, #8
 80035f4:	305c      	adds	r0, #92	; 0x5c
 80035f6:	f000 fb0f 	bl	8003c18 <memset>
 80035fa:	4b05      	ldr	r3, [pc, #20]	; (8003610 <std+0x38>)
 80035fc:	6263      	str	r3, [r4, #36]	; 0x24
 80035fe:	4b05      	ldr	r3, [pc, #20]	; (8003614 <std+0x3c>)
 8003600:	62a3      	str	r3, [r4, #40]	; 0x28
 8003602:	4b05      	ldr	r3, [pc, #20]	; (8003618 <std+0x40>)
 8003604:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003606:	4b05      	ldr	r3, [pc, #20]	; (800361c <std+0x44>)
 8003608:	6224      	str	r4, [r4, #32]
 800360a:	6323      	str	r3, [r4, #48]	; 0x30
 800360c:	bd10      	pop	{r4, pc}
 800360e:	bf00      	nop
 8003610:	080044ed 	.word	0x080044ed
 8003614:	0800450f 	.word	0x0800450f
 8003618:	08004547 	.word	0x08004547
 800361c:	0800456b 	.word	0x0800456b

08003620 <_cleanup_r>:
 8003620:	4901      	ldr	r1, [pc, #4]	; (8003628 <_cleanup_r+0x8>)
 8003622:	f000 ba2d 	b.w	8003a80 <_fwalk_reent>
 8003626:	bf00      	nop
 8003628:	08003561 	.word	0x08003561

0800362c <__sfmoreglue>:
 800362c:	b570      	push	{r4, r5, r6, lr}
 800362e:	2268      	movs	r2, #104	; 0x68
 8003630:	1e4d      	subs	r5, r1, #1
 8003632:	4355      	muls	r5, r2
 8003634:	460e      	mov	r6, r1
 8003636:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800363a:	f000 fb4d 	bl	8003cd8 <_malloc_r>
 800363e:	4604      	mov	r4, r0
 8003640:	b140      	cbz	r0, 8003654 <__sfmoreglue+0x28>
 8003642:	2100      	movs	r1, #0
 8003644:	e9c0 1600 	strd	r1, r6, [r0]
 8003648:	300c      	adds	r0, #12
 800364a:	60a0      	str	r0, [r4, #8]
 800364c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003650:	f000 fae2 	bl	8003c18 <memset>
 8003654:	4620      	mov	r0, r4
 8003656:	bd70      	pop	{r4, r5, r6, pc}

08003658 <__sfp_lock_acquire>:
 8003658:	4801      	ldr	r0, [pc, #4]	; (8003660 <__sfp_lock_acquire+0x8>)
 800365a:	f000 ba57 	b.w	8003b0c <__retarget_lock_acquire_recursive>
 800365e:	bf00      	nop
 8003660:	200001cd 	.word	0x200001cd

08003664 <__sfp_lock_release>:
 8003664:	4801      	ldr	r0, [pc, #4]	; (800366c <__sfp_lock_release+0x8>)
 8003666:	f000 ba52 	b.w	8003b0e <__retarget_lock_release_recursive>
 800366a:	bf00      	nop
 800366c:	200001cd 	.word	0x200001cd

08003670 <__sinit_lock_acquire>:
 8003670:	4801      	ldr	r0, [pc, #4]	; (8003678 <__sinit_lock_acquire+0x8>)
 8003672:	f000 ba4b 	b.w	8003b0c <__retarget_lock_acquire_recursive>
 8003676:	bf00      	nop
 8003678:	200001ce 	.word	0x200001ce

0800367c <__sinit_lock_release>:
 800367c:	4801      	ldr	r0, [pc, #4]	; (8003684 <__sinit_lock_release+0x8>)
 800367e:	f000 ba46 	b.w	8003b0e <__retarget_lock_release_recursive>
 8003682:	bf00      	nop
 8003684:	200001ce 	.word	0x200001ce

08003688 <__sinit>:
 8003688:	b510      	push	{r4, lr}
 800368a:	4604      	mov	r4, r0
 800368c:	f7ff fff0 	bl	8003670 <__sinit_lock_acquire>
 8003690:	69a3      	ldr	r3, [r4, #24]
 8003692:	b11b      	cbz	r3, 800369c <__sinit+0x14>
 8003694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003698:	f7ff bff0 	b.w	800367c <__sinit_lock_release>
 800369c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80036a0:	6523      	str	r3, [r4, #80]	; 0x50
 80036a2:	4b13      	ldr	r3, [pc, #76]	; (80036f0 <__sinit+0x68>)
 80036a4:	4a13      	ldr	r2, [pc, #76]	; (80036f4 <__sinit+0x6c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80036aa:	42a3      	cmp	r3, r4
 80036ac:	bf04      	itt	eq
 80036ae:	2301      	moveq	r3, #1
 80036b0:	61a3      	streq	r3, [r4, #24]
 80036b2:	4620      	mov	r0, r4
 80036b4:	f000 f820 	bl	80036f8 <__sfp>
 80036b8:	6060      	str	r0, [r4, #4]
 80036ba:	4620      	mov	r0, r4
 80036bc:	f000 f81c 	bl	80036f8 <__sfp>
 80036c0:	60a0      	str	r0, [r4, #8]
 80036c2:	4620      	mov	r0, r4
 80036c4:	f000 f818 	bl	80036f8 <__sfp>
 80036c8:	2200      	movs	r2, #0
 80036ca:	60e0      	str	r0, [r4, #12]
 80036cc:	2104      	movs	r1, #4
 80036ce:	6860      	ldr	r0, [r4, #4]
 80036d0:	f7ff ff82 	bl	80035d8 <std>
 80036d4:	68a0      	ldr	r0, [r4, #8]
 80036d6:	2201      	movs	r2, #1
 80036d8:	2109      	movs	r1, #9
 80036da:	f7ff ff7d 	bl	80035d8 <std>
 80036de:	68e0      	ldr	r0, [r4, #12]
 80036e0:	2202      	movs	r2, #2
 80036e2:	2112      	movs	r1, #18
 80036e4:	f7ff ff78 	bl	80035d8 <std>
 80036e8:	2301      	movs	r3, #1
 80036ea:	61a3      	str	r3, [r4, #24]
 80036ec:	e7d2      	b.n	8003694 <__sinit+0xc>
 80036ee:	bf00      	nop
 80036f0:	08005bc8 	.word	0x08005bc8
 80036f4:	08003621 	.word	0x08003621

080036f8 <__sfp>:
 80036f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036fa:	4607      	mov	r7, r0
 80036fc:	f7ff ffac 	bl	8003658 <__sfp_lock_acquire>
 8003700:	4b1e      	ldr	r3, [pc, #120]	; (800377c <__sfp+0x84>)
 8003702:	681e      	ldr	r6, [r3, #0]
 8003704:	69b3      	ldr	r3, [r6, #24]
 8003706:	b913      	cbnz	r3, 800370e <__sfp+0x16>
 8003708:	4630      	mov	r0, r6
 800370a:	f7ff ffbd 	bl	8003688 <__sinit>
 800370e:	3648      	adds	r6, #72	; 0x48
 8003710:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003714:	3b01      	subs	r3, #1
 8003716:	d503      	bpl.n	8003720 <__sfp+0x28>
 8003718:	6833      	ldr	r3, [r6, #0]
 800371a:	b30b      	cbz	r3, 8003760 <__sfp+0x68>
 800371c:	6836      	ldr	r6, [r6, #0]
 800371e:	e7f7      	b.n	8003710 <__sfp+0x18>
 8003720:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003724:	b9d5      	cbnz	r5, 800375c <__sfp+0x64>
 8003726:	4b16      	ldr	r3, [pc, #88]	; (8003780 <__sfp+0x88>)
 8003728:	60e3      	str	r3, [r4, #12]
 800372a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800372e:	6665      	str	r5, [r4, #100]	; 0x64
 8003730:	f000 f9ea 	bl	8003b08 <__retarget_lock_init_recursive>
 8003734:	f7ff ff96 	bl	8003664 <__sfp_lock_release>
 8003738:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800373c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003740:	6025      	str	r5, [r4, #0]
 8003742:	61a5      	str	r5, [r4, #24]
 8003744:	2208      	movs	r2, #8
 8003746:	4629      	mov	r1, r5
 8003748:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800374c:	f000 fa64 	bl	8003c18 <memset>
 8003750:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003754:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003758:	4620      	mov	r0, r4
 800375a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800375c:	3468      	adds	r4, #104	; 0x68
 800375e:	e7d9      	b.n	8003714 <__sfp+0x1c>
 8003760:	2104      	movs	r1, #4
 8003762:	4638      	mov	r0, r7
 8003764:	f7ff ff62 	bl	800362c <__sfmoreglue>
 8003768:	4604      	mov	r4, r0
 800376a:	6030      	str	r0, [r6, #0]
 800376c:	2800      	cmp	r0, #0
 800376e:	d1d5      	bne.n	800371c <__sfp+0x24>
 8003770:	f7ff ff78 	bl	8003664 <__sfp_lock_release>
 8003774:	230c      	movs	r3, #12
 8003776:	603b      	str	r3, [r7, #0]
 8003778:	e7ee      	b.n	8003758 <__sfp+0x60>
 800377a:	bf00      	nop
 800377c:	08005bc8 	.word	0x08005bc8
 8003780:	ffff0001 	.word	0xffff0001

08003784 <_fopen_r>:
 8003784:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003786:	460f      	mov	r7, r1
 8003788:	4611      	mov	r1, r2
 800378a:	aa01      	add	r2, sp, #4
 800378c:	4605      	mov	r5, r0
 800378e:	f001 f8db 	bl	8004948 <__sflags>
 8003792:	4606      	mov	r6, r0
 8003794:	b918      	cbnz	r0, 800379e <_fopen_r+0x1a>
 8003796:	2400      	movs	r4, #0
 8003798:	4620      	mov	r0, r4
 800379a:	b003      	add	sp, #12
 800379c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800379e:	4628      	mov	r0, r5
 80037a0:	f7ff ffaa 	bl	80036f8 <__sfp>
 80037a4:	4604      	mov	r4, r0
 80037a6:	2800      	cmp	r0, #0
 80037a8:	d0f5      	beq.n	8003796 <_fopen_r+0x12>
 80037aa:	4639      	mov	r1, r7
 80037ac:	9a01      	ldr	r2, [sp, #4]
 80037ae:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 80037b2:	4628      	mov	r0, r5
 80037b4:	f000 fdd6 	bl	8004364 <_open_r>
 80037b8:	1e07      	subs	r7, r0, #0
 80037ba:	da09      	bge.n	80037d0 <_fopen_r+0x4c>
 80037bc:	2500      	movs	r5, #0
 80037be:	f7ff ff4b 	bl	8003658 <__sfp_lock_acquire>
 80037c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037c4:	81a5      	strh	r5, [r4, #12]
 80037c6:	f000 f9a0 	bl	8003b0a <__retarget_lock_close_recursive>
 80037ca:	f7ff ff4b 	bl	8003664 <__sfp_lock_release>
 80037ce:	e7e2      	b.n	8003796 <_fopen_r+0x12>
 80037d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80037d2:	07db      	lsls	r3, r3, #31
 80037d4:	d405      	bmi.n	80037e2 <_fopen_r+0x5e>
 80037d6:	89a3      	ldrh	r3, [r4, #12]
 80037d8:	0598      	lsls	r0, r3, #22
 80037da:	d402      	bmi.n	80037e2 <_fopen_r+0x5e>
 80037dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037de:	f000 f995 	bl	8003b0c <__retarget_lock_acquire_recursive>
 80037e2:	4b0e      	ldr	r3, [pc, #56]	; (800381c <_fopen_r+0x98>)
 80037e4:	6263      	str	r3, [r4, #36]	; 0x24
 80037e6:	4b0e      	ldr	r3, [pc, #56]	; (8003820 <_fopen_r+0x9c>)
 80037e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80037ea:	4b0e      	ldr	r3, [pc, #56]	; (8003824 <_fopen_r+0xa0>)
 80037ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80037ee:	05f1      	lsls	r1, r6, #23
 80037f0:	4b0d      	ldr	r3, [pc, #52]	; (8003828 <_fopen_r+0xa4>)
 80037f2:	81e7      	strh	r7, [r4, #14]
 80037f4:	81a6      	strh	r6, [r4, #12]
 80037f6:	6224      	str	r4, [r4, #32]
 80037f8:	6323      	str	r3, [r4, #48]	; 0x30
 80037fa:	d505      	bpl.n	8003808 <_fopen_r+0x84>
 80037fc:	2302      	movs	r3, #2
 80037fe:	2200      	movs	r2, #0
 8003800:	4621      	mov	r1, r4
 8003802:	4628      	mov	r0, r5
 8003804:	f000 f82c 	bl	8003860 <_fseek_r>
 8003808:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800380a:	07da      	lsls	r2, r3, #31
 800380c:	d4c4      	bmi.n	8003798 <_fopen_r+0x14>
 800380e:	89a3      	ldrh	r3, [r4, #12]
 8003810:	059b      	lsls	r3, r3, #22
 8003812:	d4c1      	bmi.n	8003798 <_fopen_r+0x14>
 8003814:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003816:	f000 f97a 	bl	8003b0e <__retarget_lock_release_recursive>
 800381a:	e7bd      	b.n	8003798 <_fopen_r+0x14>
 800381c:	080044ed 	.word	0x080044ed
 8003820:	0800450f 	.word	0x0800450f
 8003824:	08004547 	.word	0x08004547
 8003828:	0800456b 	.word	0x0800456b

0800382c <fopen>:
 800382c:	4b02      	ldr	r3, [pc, #8]	; (8003838 <fopen+0xc>)
 800382e:	460a      	mov	r2, r1
 8003830:	4601      	mov	r1, r0
 8003832:	6818      	ldr	r0, [r3, #0]
 8003834:	f7ff bfa6 	b.w	8003784 <_fopen_r>
 8003838:	20000004 	.word	0x20000004

0800383c <fiprintf>:
 800383c:	b40e      	push	{r1, r2, r3}
 800383e:	b503      	push	{r0, r1, lr}
 8003840:	4601      	mov	r1, r0
 8003842:	ab03      	add	r3, sp, #12
 8003844:	4805      	ldr	r0, [pc, #20]	; (800385c <fiprintf+0x20>)
 8003846:	f853 2b04 	ldr.w	r2, [r3], #4
 800384a:	6800      	ldr	r0, [r0, #0]
 800384c:	9301      	str	r3, [sp, #4]
 800384e:	f000 fac5 	bl	8003ddc <_vfiprintf_r>
 8003852:	b002      	add	sp, #8
 8003854:	f85d eb04 	ldr.w	lr, [sp], #4
 8003858:	b003      	add	sp, #12
 800385a:	4770      	bx	lr
 800385c:	20000004 	.word	0x20000004

08003860 <_fseek_r>:
 8003860:	f000 b800 	b.w	8003864 <_fseeko_r>

08003864 <_fseeko_r>:
 8003864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003868:	460c      	mov	r4, r1
 800386a:	4617      	mov	r7, r2
 800386c:	461e      	mov	r6, r3
 800386e:	4605      	mov	r5, r0
 8003870:	b118      	cbz	r0, 800387a <_fseeko_r+0x16>
 8003872:	6983      	ldr	r3, [r0, #24]
 8003874:	b90b      	cbnz	r3, 800387a <_fseeko_r+0x16>
 8003876:	f7ff ff07 	bl	8003688 <__sinit>
 800387a:	4b44      	ldr	r3, [pc, #272]	; (800398c <_fseeko_r+0x128>)
 800387c:	429c      	cmp	r4, r3
 800387e:	d122      	bne.n	80038c6 <_fseeko_r+0x62>
 8003880:	686c      	ldr	r4, [r5, #4]
 8003882:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003884:	07d9      	lsls	r1, r3, #31
 8003886:	d405      	bmi.n	8003894 <_fseeko_r+0x30>
 8003888:	89a3      	ldrh	r3, [r4, #12]
 800388a:	059a      	lsls	r2, r3, #22
 800388c:	d402      	bmi.n	8003894 <_fseeko_r+0x30>
 800388e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003890:	f000 f93c 	bl	8003b0c <__retarget_lock_acquire_recursive>
 8003894:	89a3      	ldrh	r3, [r4, #12]
 8003896:	f403 7384 	and.w	r3, r3, #264	; 0x108
 800389a:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 800389e:	d103      	bne.n	80038a8 <_fseeko_r+0x44>
 80038a0:	4621      	mov	r1, r4
 80038a2:	4628      	mov	r0, r5
 80038a4:	f7ff fe5c 	bl	8003560 <_fflush_r>
 80038a8:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 80038ac:	f1b8 0f00 	cmp.w	r8, #0
 80038b0:	d113      	bne.n	80038da <_fseeko_r+0x76>
 80038b2:	231d      	movs	r3, #29
 80038b4:	602b      	str	r3, [r5, #0]
 80038b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80038b8:	07d9      	lsls	r1, r3, #31
 80038ba:	d55d      	bpl.n	8003978 <_fseeko_r+0x114>
 80038bc:	f04f 36ff 	mov.w	r6, #4294967295
 80038c0:	4630      	mov	r0, r6
 80038c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038c6:	4b32      	ldr	r3, [pc, #200]	; (8003990 <_fseeko_r+0x12c>)
 80038c8:	429c      	cmp	r4, r3
 80038ca:	d101      	bne.n	80038d0 <_fseeko_r+0x6c>
 80038cc:	68ac      	ldr	r4, [r5, #8]
 80038ce:	e7d8      	b.n	8003882 <_fseeko_r+0x1e>
 80038d0:	4b30      	ldr	r3, [pc, #192]	; (8003994 <_fseeko_r+0x130>)
 80038d2:	429c      	cmp	r4, r3
 80038d4:	bf08      	it	eq
 80038d6:	68ec      	ldreq	r4, [r5, #12]
 80038d8:	e7d3      	b.n	8003882 <_fseeko_r+0x1e>
 80038da:	2e01      	cmp	r6, #1
 80038dc:	d036      	beq.n	800394c <_fseeko_r+0xe8>
 80038de:	f036 0302 	bics.w	r3, r6, #2
 80038e2:	d147      	bne.n	8003974 <_fseeko_r+0x110>
 80038e4:	6923      	ldr	r3, [r4, #16]
 80038e6:	b91b      	cbnz	r3, 80038f0 <_fseeko_r+0x8c>
 80038e8:	4621      	mov	r1, r4
 80038ea:	4628      	mov	r0, r5
 80038ec:	f000 f936 	bl	8003b5c <__smakebuf_r>
 80038f0:	4621      	mov	r1, r4
 80038f2:	4628      	mov	r0, r5
 80038f4:	f7ff fe34 	bl	8003560 <_fflush_r>
 80038f8:	2800      	cmp	r0, #0
 80038fa:	d1dc      	bne.n	80038b6 <_fseeko_r+0x52>
 80038fc:	6a21      	ldr	r1, [r4, #32]
 80038fe:	4633      	mov	r3, r6
 8003900:	463a      	mov	r2, r7
 8003902:	4628      	mov	r0, r5
 8003904:	47c0      	blx	r8
 8003906:	3001      	adds	r0, #1
 8003908:	d0d5      	beq.n	80038b6 <_fseeko_r+0x52>
 800390a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800390c:	b141      	cbz	r1, 8003920 <_fseeko_r+0xbc>
 800390e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003912:	4299      	cmp	r1, r3
 8003914:	d002      	beq.n	800391c <_fseeko_r+0xb8>
 8003916:	4628      	mov	r0, r5
 8003918:	f000 f994 	bl	8003c44 <_free_r>
 800391c:	2300      	movs	r3, #0
 800391e:	6363      	str	r3, [r4, #52]	; 0x34
 8003920:	6923      	ldr	r3, [r4, #16]
 8003922:	6023      	str	r3, [r4, #0]
 8003924:	89a3      	ldrh	r3, [r4, #12]
 8003926:	2500      	movs	r5, #0
 8003928:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 800392c:	6065      	str	r5, [r4, #4]
 800392e:	81a3      	strh	r3, [r4, #12]
 8003930:	2208      	movs	r2, #8
 8003932:	4629      	mov	r1, r5
 8003934:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003938:	f000 f96e 	bl	8003c18 <memset>
 800393c:	6e66      	ldr	r6, [r4, #100]	; 0x64
 800393e:	f016 0601 	ands.w	r6, r6, #1
 8003942:	d120      	bne.n	8003986 <_fseeko_r+0x122>
 8003944:	89a3      	ldrh	r3, [r4, #12]
 8003946:	059b      	lsls	r3, r3, #22
 8003948:	d4ba      	bmi.n	80038c0 <_fseeko_r+0x5c>
 800394a:	e00c      	b.n	8003966 <_fseeko_r+0x102>
 800394c:	4621      	mov	r1, r4
 800394e:	4628      	mov	r0, r5
 8003950:	f000 f822 	bl	8003998 <_ftello_r>
 8003954:	1c43      	adds	r3, r0, #1
 8003956:	4606      	mov	r6, r0
 8003958:	d109      	bne.n	800396e <_fseeko_r+0x10a>
 800395a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800395c:	07dd      	lsls	r5, r3, #31
 800395e:	d4ad      	bmi.n	80038bc <_fseeko_r+0x58>
 8003960:	89a3      	ldrh	r3, [r4, #12]
 8003962:	0598      	lsls	r0, r3, #22
 8003964:	d4aa      	bmi.n	80038bc <_fseeko_r+0x58>
 8003966:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003968:	f000 f8d1 	bl	8003b0e <__retarget_lock_release_recursive>
 800396c:	e7a8      	b.n	80038c0 <_fseeko_r+0x5c>
 800396e:	4407      	add	r7, r0
 8003970:	2600      	movs	r6, #0
 8003972:	e7b7      	b.n	80038e4 <_fseeko_r+0x80>
 8003974:	2316      	movs	r3, #22
 8003976:	e79d      	b.n	80038b4 <_fseeko_r+0x50>
 8003978:	89a3      	ldrh	r3, [r4, #12]
 800397a:	059a      	lsls	r2, r3, #22
 800397c:	d49e      	bmi.n	80038bc <_fseeko_r+0x58>
 800397e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003980:	f000 f8c5 	bl	8003b0e <__retarget_lock_release_recursive>
 8003984:	e79a      	b.n	80038bc <_fseeko_r+0x58>
 8003986:	462e      	mov	r6, r5
 8003988:	e79a      	b.n	80038c0 <_fseeko_r+0x5c>
 800398a:	bf00      	nop
 800398c:	08005b88 	.word	0x08005b88
 8003990:	08005ba8 	.word	0x08005ba8
 8003994:	08005b68 	.word	0x08005b68

08003998 <_ftello_r>:
 8003998:	b570      	push	{r4, r5, r6, lr}
 800399a:	460c      	mov	r4, r1
 800399c:	4605      	mov	r5, r0
 800399e:	b118      	cbz	r0, 80039a8 <_ftello_r+0x10>
 80039a0:	6983      	ldr	r3, [r0, #24]
 80039a2:	b90b      	cbnz	r3, 80039a8 <_ftello_r+0x10>
 80039a4:	f7ff fe70 	bl	8003688 <__sinit>
 80039a8:	4b32      	ldr	r3, [pc, #200]	; (8003a74 <_ftello_r+0xdc>)
 80039aa:	429c      	cmp	r4, r3
 80039ac:	d114      	bne.n	80039d8 <_ftello_r+0x40>
 80039ae:	686c      	ldr	r4, [r5, #4]
 80039b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80039b2:	07da      	lsls	r2, r3, #31
 80039b4:	d405      	bmi.n	80039c2 <_ftello_r+0x2a>
 80039b6:	89a3      	ldrh	r3, [r4, #12]
 80039b8:	059b      	lsls	r3, r3, #22
 80039ba:	d402      	bmi.n	80039c2 <_ftello_r+0x2a>
 80039bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039be:	f000 f8a5 	bl	8003b0c <__retarget_lock_acquire_recursive>
 80039c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80039c4:	b9ce      	cbnz	r6, 80039fa <_ftello_r+0x62>
 80039c6:	231d      	movs	r3, #29
 80039c8:	602b      	str	r3, [r5, #0]
 80039ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80039cc:	07de      	lsls	r6, r3, #31
 80039ce:	d50d      	bpl.n	80039ec <_ftello_r+0x54>
 80039d0:	f04f 35ff 	mov.w	r5, #4294967295
 80039d4:	4628      	mov	r0, r5
 80039d6:	bd70      	pop	{r4, r5, r6, pc}
 80039d8:	4b27      	ldr	r3, [pc, #156]	; (8003a78 <_ftello_r+0xe0>)
 80039da:	429c      	cmp	r4, r3
 80039dc:	d101      	bne.n	80039e2 <_ftello_r+0x4a>
 80039de:	68ac      	ldr	r4, [r5, #8]
 80039e0:	e7e6      	b.n	80039b0 <_ftello_r+0x18>
 80039e2:	4b26      	ldr	r3, [pc, #152]	; (8003a7c <_ftello_r+0xe4>)
 80039e4:	429c      	cmp	r4, r3
 80039e6:	bf08      	it	eq
 80039e8:	68ec      	ldreq	r4, [r5, #12]
 80039ea:	e7e1      	b.n	80039b0 <_ftello_r+0x18>
 80039ec:	89a3      	ldrh	r3, [r4, #12]
 80039ee:	059d      	lsls	r5, r3, #22
 80039f0:	d4ee      	bmi.n	80039d0 <_ftello_r+0x38>
 80039f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039f4:	f000 f88b 	bl	8003b0e <__retarget_lock_release_recursive>
 80039f8:	e7ea      	b.n	80039d0 <_ftello_r+0x38>
 80039fa:	89a2      	ldrh	r2, [r4, #12]
 80039fc:	f002 030c 	and.w	r3, r2, #12
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d119      	bne.n	8003a38 <_ftello_r+0xa0>
 8003a04:	6823      	ldr	r3, [r4, #0]
 8003a06:	b1bb      	cbz	r3, 8003a38 <_ftello_r+0xa0>
 8003a08:	6921      	ldr	r1, [r4, #16]
 8003a0a:	1a5b      	subs	r3, r3, r1
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	dd13      	ble.n	8003a38 <_ftello_r+0xa0>
 8003a10:	05d0      	lsls	r0, r2, #23
 8003a12:	d511      	bpl.n	8003a38 <_ftello_r+0xa0>
 8003a14:	2302      	movs	r3, #2
 8003a16:	2200      	movs	r2, #0
 8003a18:	6a21      	ldr	r1, [r4, #32]
 8003a1a:	4628      	mov	r0, r5
 8003a1c:	47b0      	blx	r6
 8003a1e:	1c41      	adds	r1, r0, #1
 8003a20:	4605      	mov	r5, r0
 8003a22:	d10d      	bne.n	8003a40 <_ftello_r+0xa8>
 8003a24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a26:	07da      	lsls	r2, r3, #31
 8003a28:	d4d2      	bmi.n	80039d0 <_ftello_r+0x38>
 8003a2a:	89a3      	ldrh	r3, [r4, #12]
 8003a2c:	059b      	lsls	r3, r3, #22
 8003a2e:	d4cf      	bmi.n	80039d0 <_ftello_r+0x38>
 8003a30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a32:	f000 f86c 	bl	8003b0e <__retarget_lock_release_recursive>
 8003a36:	e7cd      	b.n	80039d4 <_ftello_r+0x3c>
 8003a38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003a3c:	d00f      	beq.n	8003a5e <_ftello_r+0xc6>
 8003a3e:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8003a40:	89a2      	ldrh	r2, [r4, #12]
 8003a42:	0756      	lsls	r6, r2, #29
 8003a44:	d50d      	bpl.n	8003a62 <_ftello_r+0xca>
 8003a46:	6863      	ldr	r3, [r4, #4]
 8003a48:	1aed      	subs	r5, r5, r3
 8003a4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a4c:	b10b      	cbz	r3, 8003a52 <_ftello_r+0xba>
 8003a4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a50:	1aed      	subs	r5, r5, r3
 8003a52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a54:	07d9      	lsls	r1, r3, #31
 8003a56:	d4bd      	bmi.n	80039d4 <_ftello_r+0x3c>
 8003a58:	0593      	lsls	r3, r2, #22
 8003a5a:	d4bb      	bmi.n	80039d4 <_ftello_r+0x3c>
 8003a5c:	e7e8      	b.n	8003a30 <_ftello_r+0x98>
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e7da      	b.n	8003a18 <_ftello_r+0x80>
 8003a62:	0710      	lsls	r0, r2, #28
 8003a64:	d5f5      	bpl.n	8003a52 <_ftello_r+0xba>
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0f2      	beq.n	8003a52 <_ftello_r+0xba>
 8003a6c:	6921      	ldr	r1, [r4, #16]
 8003a6e:	1a5b      	subs	r3, r3, r1
 8003a70:	441d      	add	r5, r3
 8003a72:	e7ee      	b.n	8003a52 <_ftello_r+0xba>
 8003a74:	08005b88 	.word	0x08005b88
 8003a78:	08005ba8 	.word	0x08005ba8
 8003a7c:	08005b68 	.word	0x08005b68

08003a80 <_fwalk_reent>:
 8003a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a84:	4606      	mov	r6, r0
 8003a86:	4688      	mov	r8, r1
 8003a88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003a8c:	2700      	movs	r7, #0
 8003a8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a92:	f1b9 0901 	subs.w	r9, r9, #1
 8003a96:	d505      	bpl.n	8003aa4 <_fwalk_reent+0x24>
 8003a98:	6824      	ldr	r4, [r4, #0]
 8003a9a:	2c00      	cmp	r4, #0
 8003a9c:	d1f7      	bne.n	8003a8e <_fwalk_reent+0xe>
 8003a9e:	4638      	mov	r0, r7
 8003aa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003aa4:	89ab      	ldrh	r3, [r5, #12]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d907      	bls.n	8003aba <_fwalk_reent+0x3a>
 8003aaa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	d003      	beq.n	8003aba <_fwalk_reent+0x3a>
 8003ab2:	4629      	mov	r1, r5
 8003ab4:	4630      	mov	r0, r6
 8003ab6:	47c0      	blx	r8
 8003ab8:	4307      	orrs	r7, r0
 8003aba:	3568      	adds	r5, #104	; 0x68
 8003abc:	e7e9      	b.n	8003a92 <_fwalk_reent+0x12>
 8003abe:	0000      	movs	r0, r0

08003ac0 <__libc_init_array>:
 8003ac0:	b570      	push	{r4, r5, r6, lr}
 8003ac2:	4d0d      	ldr	r5, [pc, #52]	; (8003af8 <__libc_init_array+0x38>)
 8003ac4:	4c0d      	ldr	r4, [pc, #52]	; (8003afc <__libc_init_array+0x3c>)
 8003ac6:	1b64      	subs	r4, r4, r5
 8003ac8:	10a4      	asrs	r4, r4, #2
 8003aca:	2600      	movs	r6, #0
 8003acc:	42a6      	cmp	r6, r4
 8003ace:	d109      	bne.n	8003ae4 <__libc_init_array+0x24>
 8003ad0:	4d0b      	ldr	r5, [pc, #44]	; (8003b00 <__libc_init_array+0x40>)
 8003ad2:	4c0c      	ldr	r4, [pc, #48]	; (8003b04 <__libc_init_array+0x44>)
 8003ad4:	f001 f89e 	bl	8004c14 <_init>
 8003ad8:	1b64      	subs	r4, r4, r5
 8003ada:	10a4      	asrs	r4, r4, #2
 8003adc:	2600      	movs	r6, #0
 8003ade:	42a6      	cmp	r6, r4
 8003ae0:	d105      	bne.n	8003aee <__libc_init_array+0x2e>
 8003ae2:	bd70      	pop	{r4, r5, r6, pc}
 8003ae4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ae8:	4798      	blx	r3
 8003aea:	3601      	adds	r6, #1
 8003aec:	e7ee      	b.n	8003acc <__libc_init_array+0xc>
 8003aee:	f855 3b04 	ldr.w	r3, [r5], #4
 8003af2:	4798      	blx	r3
 8003af4:	3601      	adds	r6, #1
 8003af6:	e7f2      	b.n	8003ade <__libc_init_array+0x1e>
 8003af8:	08005dd4 	.word	0x08005dd4
 8003afc:	08005dd4 	.word	0x08005dd4
 8003b00:	08005dd4 	.word	0x08005dd4
 8003b04:	08005dd8 	.word	0x08005dd8

08003b08 <__retarget_lock_init_recursive>:
 8003b08:	4770      	bx	lr

08003b0a <__retarget_lock_close_recursive>:
 8003b0a:	4770      	bx	lr

08003b0c <__retarget_lock_acquire_recursive>:
 8003b0c:	4770      	bx	lr

08003b0e <__retarget_lock_release_recursive>:
 8003b0e:	4770      	bx	lr

08003b10 <__swhatbuf_r>:
 8003b10:	b570      	push	{r4, r5, r6, lr}
 8003b12:	460e      	mov	r6, r1
 8003b14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b18:	2900      	cmp	r1, #0
 8003b1a:	b096      	sub	sp, #88	; 0x58
 8003b1c:	4614      	mov	r4, r2
 8003b1e:	461d      	mov	r5, r3
 8003b20:	da08      	bge.n	8003b34 <__swhatbuf_r+0x24>
 8003b22:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	602a      	str	r2, [r5, #0]
 8003b2a:	061a      	lsls	r2, r3, #24
 8003b2c:	d410      	bmi.n	8003b50 <__swhatbuf_r+0x40>
 8003b2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b32:	e00e      	b.n	8003b52 <__swhatbuf_r+0x42>
 8003b34:	466a      	mov	r2, sp
 8003b36:	f000 ff3d 	bl	80049b4 <_fstat_r>
 8003b3a:	2800      	cmp	r0, #0
 8003b3c:	dbf1      	blt.n	8003b22 <__swhatbuf_r+0x12>
 8003b3e:	9a01      	ldr	r2, [sp, #4]
 8003b40:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003b44:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003b48:	425a      	negs	r2, r3
 8003b4a:	415a      	adcs	r2, r3
 8003b4c:	602a      	str	r2, [r5, #0]
 8003b4e:	e7ee      	b.n	8003b2e <__swhatbuf_r+0x1e>
 8003b50:	2340      	movs	r3, #64	; 0x40
 8003b52:	2000      	movs	r0, #0
 8003b54:	6023      	str	r3, [r4, #0]
 8003b56:	b016      	add	sp, #88	; 0x58
 8003b58:	bd70      	pop	{r4, r5, r6, pc}
 8003b5a:	0000      	movs	r0, r0

08003b5c <__smakebuf_r>:
 8003b5c:	898b      	ldrh	r3, [r1, #12]
 8003b5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b60:	079d      	lsls	r5, r3, #30
 8003b62:	4606      	mov	r6, r0
 8003b64:	460c      	mov	r4, r1
 8003b66:	d507      	bpl.n	8003b78 <__smakebuf_r+0x1c>
 8003b68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003b6c:	6023      	str	r3, [r4, #0]
 8003b6e:	6123      	str	r3, [r4, #16]
 8003b70:	2301      	movs	r3, #1
 8003b72:	6163      	str	r3, [r4, #20]
 8003b74:	b002      	add	sp, #8
 8003b76:	bd70      	pop	{r4, r5, r6, pc}
 8003b78:	ab01      	add	r3, sp, #4
 8003b7a:	466a      	mov	r2, sp
 8003b7c:	f7ff ffc8 	bl	8003b10 <__swhatbuf_r>
 8003b80:	9900      	ldr	r1, [sp, #0]
 8003b82:	4605      	mov	r5, r0
 8003b84:	4630      	mov	r0, r6
 8003b86:	f000 f8a7 	bl	8003cd8 <_malloc_r>
 8003b8a:	b948      	cbnz	r0, 8003ba0 <__smakebuf_r+0x44>
 8003b8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b90:	059a      	lsls	r2, r3, #22
 8003b92:	d4ef      	bmi.n	8003b74 <__smakebuf_r+0x18>
 8003b94:	f023 0303 	bic.w	r3, r3, #3
 8003b98:	f043 0302 	orr.w	r3, r3, #2
 8003b9c:	81a3      	strh	r3, [r4, #12]
 8003b9e:	e7e3      	b.n	8003b68 <__smakebuf_r+0xc>
 8003ba0:	4b0d      	ldr	r3, [pc, #52]	; (8003bd8 <__smakebuf_r+0x7c>)
 8003ba2:	62b3      	str	r3, [r6, #40]	; 0x28
 8003ba4:	89a3      	ldrh	r3, [r4, #12]
 8003ba6:	6020      	str	r0, [r4, #0]
 8003ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bac:	81a3      	strh	r3, [r4, #12]
 8003bae:	9b00      	ldr	r3, [sp, #0]
 8003bb0:	6163      	str	r3, [r4, #20]
 8003bb2:	9b01      	ldr	r3, [sp, #4]
 8003bb4:	6120      	str	r0, [r4, #16]
 8003bb6:	b15b      	cbz	r3, 8003bd0 <__smakebuf_r+0x74>
 8003bb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bbc:	4630      	mov	r0, r6
 8003bbe:	f000 ff0b 	bl	80049d8 <_isatty_r>
 8003bc2:	b128      	cbz	r0, 8003bd0 <__smakebuf_r+0x74>
 8003bc4:	89a3      	ldrh	r3, [r4, #12]
 8003bc6:	f023 0303 	bic.w	r3, r3, #3
 8003bca:	f043 0301 	orr.w	r3, r3, #1
 8003bce:	81a3      	strh	r3, [r4, #12]
 8003bd0:	89a0      	ldrh	r0, [r4, #12]
 8003bd2:	4305      	orrs	r5, r0
 8003bd4:	81a5      	strh	r5, [r4, #12]
 8003bd6:	e7cd      	b.n	8003b74 <__smakebuf_r+0x18>
 8003bd8:	08003621 	.word	0x08003621

08003bdc <malloc>:
 8003bdc:	4b02      	ldr	r3, [pc, #8]	; (8003be8 <malloc+0xc>)
 8003bde:	4601      	mov	r1, r0
 8003be0:	6818      	ldr	r0, [r3, #0]
 8003be2:	f000 b879 	b.w	8003cd8 <_malloc_r>
 8003be6:	bf00      	nop
 8003be8:	20000004 	.word	0x20000004

08003bec <free>:
 8003bec:	4b02      	ldr	r3, [pc, #8]	; (8003bf8 <free+0xc>)
 8003bee:	4601      	mov	r1, r0
 8003bf0:	6818      	ldr	r0, [r3, #0]
 8003bf2:	f000 b827 	b.w	8003c44 <_free_r>
 8003bf6:	bf00      	nop
 8003bf8:	20000004 	.word	0x20000004

08003bfc <memcpy>:
 8003bfc:	440a      	add	r2, r1
 8003bfe:	4291      	cmp	r1, r2
 8003c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c04:	d100      	bne.n	8003c08 <memcpy+0xc>
 8003c06:	4770      	bx	lr
 8003c08:	b510      	push	{r4, lr}
 8003c0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c12:	4291      	cmp	r1, r2
 8003c14:	d1f9      	bne.n	8003c0a <memcpy+0xe>
 8003c16:	bd10      	pop	{r4, pc}

08003c18 <memset>:
 8003c18:	4402      	add	r2, r0
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d100      	bne.n	8003c22 <memset+0xa>
 8003c20:	4770      	bx	lr
 8003c22:	f803 1b01 	strb.w	r1, [r3], #1
 8003c26:	e7f9      	b.n	8003c1c <memset+0x4>

08003c28 <_calloc_r>:
 8003c28:	b538      	push	{r3, r4, r5, lr}
 8003c2a:	fb02 f501 	mul.w	r5, r2, r1
 8003c2e:	4629      	mov	r1, r5
 8003c30:	f000 f852 	bl	8003cd8 <_malloc_r>
 8003c34:	4604      	mov	r4, r0
 8003c36:	b118      	cbz	r0, 8003c40 <_calloc_r+0x18>
 8003c38:	462a      	mov	r2, r5
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	f7ff ffec 	bl	8003c18 <memset>
 8003c40:	4620      	mov	r0, r4
 8003c42:	bd38      	pop	{r3, r4, r5, pc}

08003c44 <_free_r>:
 8003c44:	b538      	push	{r3, r4, r5, lr}
 8003c46:	4605      	mov	r5, r0
 8003c48:	2900      	cmp	r1, #0
 8003c4a:	d041      	beq.n	8003cd0 <_free_r+0x8c>
 8003c4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c50:	1f0c      	subs	r4, r1, #4
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	bfb8      	it	lt
 8003c56:	18e4      	addlt	r4, r4, r3
 8003c58:	f000 fee0 	bl	8004a1c <__malloc_lock>
 8003c5c:	4a1d      	ldr	r2, [pc, #116]	; (8003cd4 <_free_r+0x90>)
 8003c5e:	6813      	ldr	r3, [r2, #0]
 8003c60:	b933      	cbnz	r3, 8003c70 <_free_r+0x2c>
 8003c62:	6063      	str	r3, [r4, #4]
 8003c64:	6014      	str	r4, [r2, #0]
 8003c66:	4628      	mov	r0, r5
 8003c68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c6c:	f000 bedc 	b.w	8004a28 <__malloc_unlock>
 8003c70:	42a3      	cmp	r3, r4
 8003c72:	d908      	bls.n	8003c86 <_free_r+0x42>
 8003c74:	6820      	ldr	r0, [r4, #0]
 8003c76:	1821      	adds	r1, r4, r0
 8003c78:	428b      	cmp	r3, r1
 8003c7a:	bf01      	itttt	eq
 8003c7c:	6819      	ldreq	r1, [r3, #0]
 8003c7e:	685b      	ldreq	r3, [r3, #4]
 8003c80:	1809      	addeq	r1, r1, r0
 8003c82:	6021      	streq	r1, [r4, #0]
 8003c84:	e7ed      	b.n	8003c62 <_free_r+0x1e>
 8003c86:	461a      	mov	r2, r3
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	b10b      	cbz	r3, 8003c90 <_free_r+0x4c>
 8003c8c:	42a3      	cmp	r3, r4
 8003c8e:	d9fa      	bls.n	8003c86 <_free_r+0x42>
 8003c90:	6811      	ldr	r1, [r2, #0]
 8003c92:	1850      	adds	r0, r2, r1
 8003c94:	42a0      	cmp	r0, r4
 8003c96:	d10b      	bne.n	8003cb0 <_free_r+0x6c>
 8003c98:	6820      	ldr	r0, [r4, #0]
 8003c9a:	4401      	add	r1, r0
 8003c9c:	1850      	adds	r0, r2, r1
 8003c9e:	4283      	cmp	r3, r0
 8003ca0:	6011      	str	r1, [r2, #0]
 8003ca2:	d1e0      	bne.n	8003c66 <_free_r+0x22>
 8003ca4:	6818      	ldr	r0, [r3, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	6053      	str	r3, [r2, #4]
 8003caa:	4401      	add	r1, r0
 8003cac:	6011      	str	r1, [r2, #0]
 8003cae:	e7da      	b.n	8003c66 <_free_r+0x22>
 8003cb0:	d902      	bls.n	8003cb8 <_free_r+0x74>
 8003cb2:	230c      	movs	r3, #12
 8003cb4:	602b      	str	r3, [r5, #0]
 8003cb6:	e7d6      	b.n	8003c66 <_free_r+0x22>
 8003cb8:	6820      	ldr	r0, [r4, #0]
 8003cba:	1821      	adds	r1, r4, r0
 8003cbc:	428b      	cmp	r3, r1
 8003cbe:	bf04      	itt	eq
 8003cc0:	6819      	ldreq	r1, [r3, #0]
 8003cc2:	685b      	ldreq	r3, [r3, #4]
 8003cc4:	6063      	str	r3, [r4, #4]
 8003cc6:	bf04      	itt	eq
 8003cc8:	1809      	addeq	r1, r1, r0
 8003cca:	6021      	streq	r1, [r4, #0]
 8003ccc:	6054      	str	r4, [r2, #4]
 8003cce:	e7ca      	b.n	8003c66 <_free_r+0x22>
 8003cd0:	bd38      	pop	{r3, r4, r5, pc}
 8003cd2:	bf00      	nop
 8003cd4:	200001d0 	.word	0x200001d0

08003cd8 <_malloc_r>:
 8003cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cda:	1ccd      	adds	r5, r1, #3
 8003cdc:	f025 0503 	bic.w	r5, r5, #3
 8003ce0:	3508      	adds	r5, #8
 8003ce2:	2d0c      	cmp	r5, #12
 8003ce4:	bf38      	it	cc
 8003ce6:	250c      	movcc	r5, #12
 8003ce8:	2d00      	cmp	r5, #0
 8003cea:	4606      	mov	r6, r0
 8003cec:	db01      	blt.n	8003cf2 <_malloc_r+0x1a>
 8003cee:	42a9      	cmp	r1, r5
 8003cf0:	d903      	bls.n	8003cfa <_malloc_r+0x22>
 8003cf2:	230c      	movs	r3, #12
 8003cf4:	6033      	str	r3, [r6, #0]
 8003cf6:	2000      	movs	r0, #0
 8003cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cfa:	f000 fe8f 	bl	8004a1c <__malloc_lock>
 8003cfe:	4921      	ldr	r1, [pc, #132]	; (8003d84 <_malloc_r+0xac>)
 8003d00:	680a      	ldr	r2, [r1, #0]
 8003d02:	4614      	mov	r4, r2
 8003d04:	b99c      	cbnz	r4, 8003d2e <_malloc_r+0x56>
 8003d06:	4f20      	ldr	r7, [pc, #128]	; (8003d88 <_malloc_r+0xb0>)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	b923      	cbnz	r3, 8003d16 <_malloc_r+0x3e>
 8003d0c:	4621      	mov	r1, r4
 8003d0e:	4630      	mov	r0, r6
 8003d10:	f000 fbdc 	bl	80044cc <_sbrk_r>
 8003d14:	6038      	str	r0, [r7, #0]
 8003d16:	4629      	mov	r1, r5
 8003d18:	4630      	mov	r0, r6
 8003d1a:	f000 fbd7 	bl	80044cc <_sbrk_r>
 8003d1e:	1c43      	adds	r3, r0, #1
 8003d20:	d123      	bne.n	8003d6a <_malloc_r+0x92>
 8003d22:	230c      	movs	r3, #12
 8003d24:	6033      	str	r3, [r6, #0]
 8003d26:	4630      	mov	r0, r6
 8003d28:	f000 fe7e 	bl	8004a28 <__malloc_unlock>
 8003d2c:	e7e3      	b.n	8003cf6 <_malloc_r+0x1e>
 8003d2e:	6823      	ldr	r3, [r4, #0]
 8003d30:	1b5b      	subs	r3, r3, r5
 8003d32:	d417      	bmi.n	8003d64 <_malloc_r+0x8c>
 8003d34:	2b0b      	cmp	r3, #11
 8003d36:	d903      	bls.n	8003d40 <_malloc_r+0x68>
 8003d38:	6023      	str	r3, [r4, #0]
 8003d3a:	441c      	add	r4, r3
 8003d3c:	6025      	str	r5, [r4, #0]
 8003d3e:	e004      	b.n	8003d4a <_malloc_r+0x72>
 8003d40:	6863      	ldr	r3, [r4, #4]
 8003d42:	42a2      	cmp	r2, r4
 8003d44:	bf0c      	ite	eq
 8003d46:	600b      	streq	r3, [r1, #0]
 8003d48:	6053      	strne	r3, [r2, #4]
 8003d4a:	4630      	mov	r0, r6
 8003d4c:	f000 fe6c 	bl	8004a28 <__malloc_unlock>
 8003d50:	f104 000b 	add.w	r0, r4, #11
 8003d54:	1d23      	adds	r3, r4, #4
 8003d56:	f020 0007 	bic.w	r0, r0, #7
 8003d5a:	1ac2      	subs	r2, r0, r3
 8003d5c:	d0cc      	beq.n	8003cf8 <_malloc_r+0x20>
 8003d5e:	1a1b      	subs	r3, r3, r0
 8003d60:	50a3      	str	r3, [r4, r2]
 8003d62:	e7c9      	b.n	8003cf8 <_malloc_r+0x20>
 8003d64:	4622      	mov	r2, r4
 8003d66:	6864      	ldr	r4, [r4, #4]
 8003d68:	e7cc      	b.n	8003d04 <_malloc_r+0x2c>
 8003d6a:	1cc4      	adds	r4, r0, #3
 8003d6c:	f024 0403 	bic.w	r4, r4, #3
 8003d70:	42a0      	cmp	r0, r4
 8003d72:	d0e3      	beq.n	8003d3c <_malloc_r+0x64>
 8003d74:	1a21      	subs	r1, r4, r0
 8003d76:	4630      	mov	r0, r6
 8003d78:	f000 fba8 	bl	80044cc <_sbrk_r>
 8003d7c:	3001      	adds	r0, #1
 8003d7e:	d1dd      	bne.n	8003d3c <_malloc_r+0x64>
 8003d80:	e7cf      	b.n	8003d22 <_malloc_r+0x4a>
 8003d82:	bf00      	nop
 8003d84:	200001d0 	.word	0x200001d0
 8003d88:	200001d4 	.word	0x200001d4

08003d8c <__sfputc_r>:
 8003d8c:	6893      	ldr	r3, [r2, #8]
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	b410      	push	{r4}
 8003d94:	6093      	str	r3, [r2, #8]
 8003d96:	da07      	bge.n	8003da8 <__sfputc_r+0x1c>
 8003d98:	6994      	ldr	r4, [r2, #24]
 8003d9a:	42a3      	cmp	r3, r4
 8003d9c:	db01      	blt.n	8003da2 <__sfputc_r+0x16>
 8003d9e:	290a      	cmp	r1, #10
 8003da0:	d102      	bne.n	8003da8 <__sfputc_r+0x1c>
 8003da2:	bc10      	pop	{r4}
 8003da4:	f000 bcd0 	b.w	8004748 <__swbuf_r>
 8003da8:	6813      	ldr	r3, [r2, #0]
 8003daa:	1c58      	adds	r0, r3, #1
 8003dac:	6010      	str	r0, [r2, #0]
 8003dae:	7019      	strb	r1, [r3, #0]
 8003db0:	4608      	mov	r0, r1
 8003db2:	bc10      	pop	{r4}
 8003db4:	4770      	bx	lr

08003db6 <__sfputs_r>:
 8003db6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003db8:	4606      	mov	r6, r0
 8003dba:	460f      	mov	r7, r1
 8003dbc:	4614      	mov	r4, r2
 8003dbe:	18d5      	adds	r5, r2, r3
 8003dc0:	42ac      	cmp	r4, r5
 8003dc2:	d101      	bne.n	8003dc8 <__sfputs_r+0x12>
 8003dc4:	2000      	movs	r0, #0
 8003dc6:	e007      	b.n	8003dd8 <__sfputs_r+0x22>
 8003dc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dcc:	463a      	mov	r2, r7
 8003dce:	4630      	mov	r0, r6
 8003dd0:	f7ff ffdc 	bl	8003d8c <__sfputc_r>
 8003dd4:	1c43      	adds	r3, r0, #1
 8003dd6:	d1f3      	bne.n	8003dc0 <__sfputs_r+0xa>
 8003dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dda:	0000      	movs	r0, r0

08003ddc <_vfiprintf_r>:
 8003ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003de0:	460d      	mov	r5, r1
 8003de2:	b09d      	sub	sp, #116	; 0x74
 8003de4:	4614      	mov	r4, r2
 8003de6:	4698      	mov	r8, r3
 8003de8:	4606      	mov	r6, r0
 8003dea:	b118      	cbz	r0, 8003df4 <_vfiprintf_r+0x18>
 8003dec:	6983      	ldr	r3, [r0, #24]
 8003dee:	b90b      	cbnz	r3, 8003df4 <_vfiprintf_r+0x18>
 8003df0:	f7ff fc4a 	bl	8003688 <__sinit>
 8003df4:	4b89      	ldr	r3, [pc, #548]	; (800401c <_vfiprintf_r+0x240>)
 8003df6:	429d      	cmp	r5, r3
 8003df8:	d11b      	bne.n	8003e32 <_vfiprintf_r+0x56>
 8003dfa:	6875      	ldr	r5, [r6, #4]
 8003dfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003dfe:	07d9      	lsls	r1, r3, #31
 8003e00:	d405      	bmi.n	8003e0e <_vfiprintf_r+0x32>
 8003e02:	89ab      	ldrh	r3, [r5, #12]
 8003e04:	059a      	lsls	r2, r3, #22
 8003e06:	d402      	bmi.n	8003e0e <_vfiprintf_r+0x32>
 8003e08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e0a:	f7ff fe7f 	bl	8003b0c <__retarget_lock_acquire_recursive>
 8003e0e:	89ab      	ldrh	r3, [r5, #12]
 8003e10:	071b      	lsls	r3, r3, #28
 8003e12:	d501      	bpl.n	8003e18 <_vfiprintf_r+0x3c>
 8003e14:	692b      	ldr	r3, [r5, #16]
 8003e16:	b9eb      	cbnz	r3, 8003e54 <_vfiprintf_r+0x78>
 8003e18:	4629      	mov	r1, r5
 8003e1a:	4630      	mov	r0, r6
 8003e1c:	f000 fcf8 	bl	8004810 <__swsetup_r>
 8003e20:	b1c0      	cbz	r0, 8003e54 <_vfiprintf_r+0x78>
 8003e22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e24:	07dc      	lsls	r4, r3, #31
 8003e26:	d50e      	bpl.n	8003e46 <_vfiprintf_r+0x6a>
 8003e28:	f04f 30ff 	mov.w	r0, #4294967295
 8003e2c:	b01d      	add	sp, #116	; 0x74
 8003e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e32:	4b7b      	ldr	r3, [pc, #492]	; (8004020 <_vfiprintf_r+0x244>)
 8003e34:	429d      	cmp	r5, r3
 8003e36:	d101      	bne.n	8003e3c <_vfiprintf_r+0x60>
 8003e38:	68b5      	ldr	r5, [r6, #8]
 8003e3a:	e7df      	b.n	8003dfc <_vfiprintf_r+0x20>
 8003e3c:	4b79      	ldr	r3, [pc, #484]	; (8004024 <_vfiprintf_r+0x248>)
 8003e3e:	429d      	cmp	r5, r3
 8003e40:	bf08      	it	eq
 8003e42:	68f5      	ldreq	r5, [r6, #12]
 8003e44:	e7da      	b.n	8003dfc <_vfiprintf_r+0x20>
 8003e46:	89ab      	ldrh	r3, [r5, #12]
 8003e48:	0598      	lsls	r0, r3, #22
 8003e4a:	d4ed      	bmi.n	8003e28 <_vfiprintf_r+0x4c>
 8003e4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e4e:	f7ff fe5e 	bl	8003b0e <__retarget_lock_release_recursive>
 8003e52:	e7e9      	b.n	8003e28 <_vfiprintf_r+0x4c>
 8003e54:	2300      	movs	r3, #0
 8003e56:	9309      	str	r3, [sp, #36]	; 0x24
 8003e58:	2320      	movs	r3, #32
 8003e5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e62:	2330      	movs	r3, #48	; 0x30
 8003e64:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004028 <_vfiprintf_r+0x24c>
 8003e68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e6c:	f04f 0901 	mov.w	r9, #1
 8003e70:	4623      	mov	r3, r4
 8003e72:	469a      	mov	sl, r3
 8003e74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e78:	b10a      	cbz	r2, 8003e7e <_vfiprintf_r+0xa2>
 8003e7a:	2a25      	cmp	r2, #37	; 0x25
 8003e7c:	d1f9      	bne.n	8003e72 <_vfiprintf_r+0x96>
 8003e7e:	ebba 0b04 	subs.w	fp, sl, r4
 8003e82:	d00b      	beq.n	8003e9c <_vfiprintf_r+0xc0>
 8003e84:	465b      	mov	r3, fp
 8003e86:	4622      	mov	r2, r4
 8003e88:	4629      	mov	r1, r5
 8003e8a:	4630      	mov	r0, r6
 8003e8c:	f7ff ff93 	bl	8003db6 <__sfputs_r>
 8003e90:	3001      	adds	r0, #1
 8003e92:	f000 80aa 	beq.w	8003fea <_vfiprintf_r+0x20e>
 8003e96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e98:	445a      	add	r2, fp
 8003e9a:	9209      	str	r2, [sp, #36]	; 0x24
 8003e9c:	f89a 3000 	ldrb.w	r3, [sl]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 80a2 	beq.w	8003fea <_vfiprintf_r+0x20e>
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8003eac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003eb0:	f10a 0a01 	add.w	sl, sl, #1
 8003eb4:	9304      	str	r3, [sp, #16]
 8003eb6:	9307      	str	r3, [sp, #28]
 8003eb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ebc:	931a      	str	r3, [sp, #104]	; 0x68
 8003ebe:	4654      	mov	r4, sl
 8003ec0:	2205      	movs	r2, #5
 8003ec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ec6:	4858      	ldr	r0, [pc, #352]	; (8004028 <_vfiprintf_r+0x24c>)
 8003ec8:	f7fc fe02 	bl	8000ad0 <memchr>
 8003ecc:	9a04      	ldr	r2, [sp, #16]
 8003ece:	b9d8      	cbnz	r0, 8003f08 <_vfiprintf_r+0x12c>
 8003ed0:	06d1      	lsls	r1, r2, #27
 8003ed2:	bf44      	itt	mi
 8003ed4:	2320      	movmi	r3, #32
 8003ed6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003eda:	0713      	lsls	r3, r2, #28
 8003edc:	bf44      	itt	mi
 8003ede:	232b      	movmi	r3, #43	; 0x2b
 8003ee0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ee4:	f89a 3000 	ldrb.w	r3, [sl]
 8003ee8:	2b2a      	cmp	r3, #42	; 0x2a
 8003eea:	d015      	beq.n	8003f18 <_vfiprintf_r+0x13c>
 8003eec:	9a07      	ldr	r2, [sp, #28]
 8003eee:	4654      	mov	r4, sl
 8003ef0:	2000      	movs	r0, #0
 8003ef2:	f04f 0c0a 	mov.w	ip, #10
 8003ef6:	4621      	mov	r1, r4
 8003ef8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003efc:	3b30      	subs	r3, #48	; 0x30
 8003efe:	2b09      	cmp	r3, #9
 8003f00:	d94e      	bls.n	8003fa0 <_vfiprintf_r+0x1c4>
 8003f02:	b1b0      	cbz	r0, 8003f32 <_vfiprintf_r+0x156>
 8003f04:	9207      	str	r2, [sp, #28]
 8003f06:	e014      	b.n	8003f32 <_vfiprintf_r+0x156>
 8003f08:	eba0 0308 	sub.w	r3, r0, r8
 8003f0c:	fa09 f303 	lsl.w	r3, r9, r3
 8003f10:	4313      	orrs	r3, r2
 8003f12:	9304      	str	r3, [sp, #16]
 8003f14:	46a2      	mov	sl, r4
 8003f16:	e7d2      	b.n	8003ebe <_vfiprintf_r+0xe2>
 8003f18:	9b03      	ldr	r3, [sp, #12]
 8003f1a:	1d19      	adds	r1, r3, #4
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	9103      	str	r1, [sp, #12]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	bfbb      	ittet	lt
 8003f24:	425b      	neglt	r3, r3
 8003f26:	f042 0202 	orrlt.w	r2, r2, #2
 8003f2a:	9307      	strge	r3, [sp, #28]
 8003f2c:	9307      	strlt	r3, [sp, #28]
 8003f2e:	bfb8      	it	lt
 8003f30:	9204      	strlt	r2, [sp, #16]
 8003f32:	7823      	ldrb	r3, [r4, #0]
 8003f34:	2b2e      	cmp	r3, #46	; 0x2e
 8003f36:	d10c      	bne.n	8003f52 <_vfiprintf_r+0x176>
 8003f38:	7863      	ldrb	r3, [r4, #1]
 8003f3a:	2b2a      	cmp	r3, #42	; 0x2a
 8003f3c:	d135      	bne.n	8003faa <_vfiprintf_r+0x1ce>
 8003f3e:	9b03      	ldr	r3, [sp, #12]
 8003f40:	1d1a      	adds	r2, r3, #4
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	9203      	str	r2, [sp, #12]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	bfb8      	it	lt
 8003f4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f4e:	3402      	adds	r4, #2
 8003f50:	9305      	str	r3, [sp, #20]
 8003f52:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800402c <_vfiprintf_r+0x250>
 8003f56:	7821      	ldrb	r1, [r4, #0]
 8003f58:	2203      	movs	r2, #3
 8003f5a:	4650      	mov	r0, sl
 8003f5c:	f7fc fdb8 	bl	8000ad0 <memchr>
 8003f60:	b140      	cbz	r0, 8003f74 <_vfiprintf_r+0x198>
 8003f62:	2340      	movs	r3, #64	; 0x40
 8003f64:	eba0 000a 	sub.w	r0, r0, sl
 8003f68:	fa03 f000 	lsl.w	r0, r3, r0
 8003f6c:	9b04      	ldr	r3, [sp, #16]
 8003f6e:	4303      	orrs	r3, r0
 8003f70:	3401      	adds	r4, #1
 8003f72:	9304      	str	r3, [sp, #16]
 8003f74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f78:	482d      	ldr	r0, [pc, #180]	; (8004030 <_vfiprintf_r+0x254>)
 8003f7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f7e:	2206      	movs	r2, #6
 8003f80:	f7fc fda6 	bl	8000ad0 <memchr>
 8003f84:	2800      	cmp	r0, #0
 8003f86:	d03f      	beq.n	8004008 <_vfiprintf_r+0x22c>
 8003f88:	4b2a      	ldr	r3, [pc, #168]	; (8004034 <_vfiprintf_r+0x258>)
 8003f8a:	bb1b      	cbnz	r3, 8003fd4 <_vfiprintf_r+0x1f8>
 8003f8c:	9b03      	ldr	r3, [sp, #12]
 8003f8e:	3307      	adds	r3, #7
 8003f90:	f023 0307 	bic.w	r3, r3, #7
 8003f94:	3308      	adds	r3, #8
 8003f96:	9303      	str	r3, [sp, #12]
 8003f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f9a:	443b      	add	r3, r7
 8003f9c:	9309      	str	r3, [sp, #36]	; 0x24
 8003f9e:	e767      	b.n	8003e70 <_vfiprintf_r+0x94>
 8003fa0:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fa4:	460c      	mov	r4, r1
 8003fa6:	2001      	movs	r0, #1
 8003fa8:	e7a5      	b.n	8003ef6 <_vfiprintf_r+0x11a>
 8003faa:	2300      	movs	r3, #0
 8003fac:	3401      	adds	r4, #1
 8003fae:	9305      	str	r3, [sp, #20]
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	f04f 0c0a 	mov.w	ip, #10
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fbc:	3a30      	subs	r2, #48	; 0x30
 8003fbe:	2a09      	cmp	r2, #9
 8003fc0:	d903      	bls.n	8003fca <_vfiprintf_r+0x1ee>
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d0c5      	beq.n	8003f52 <_vfiprintf_r+0x176>
 8003fc6:	9105      	str	r1, [sp, #20]
 8003fc8:	e7c3      	b.n	8003f52 <_vfiprintf_r+0x176>
 8003fca:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fce:	4604      	mov	r4, r0
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e7f0      	b.n	8003fb6 <_vfiprintf_r+0x1da>
 8003fd4:	ab03      	add	r3, sp, #12
 8003fd6:	9300      	str	r3, [sp, #0]
 8003fd8:	462a      	mov	r2, r5
 8003fda:	4b17      	ldr	r3, [pc, #92]	; (8004038 <_vfiprintf_r+0x25c>)
 8003fdc:	a904      	add	r1, sp, #16
 8003fde:	4630      	mov	r0, r6
 8003fe0:	f3af 8000 	nop.w
 8003fe4:	4607      	mov	r7, r0
 8003fe6:	1c78      	adds	r0, r7, #1
 8003fe8:	d1d6      	bne.n	8003f98 <_vfiprintf_r+0x1bc>
 8003fea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003fec:	07d9      	lsls	r1, r3, #31
 8003fee:	d405      	bmi.n	8003ffc <_vfiprintf_r+0x220>
 8003ff0:	89ab      	ldrh	r3, [r5, #12]
 8003ff2:	059a      	lsls	r2, r3, #22
 8003ff4:	d402      	bmi.n	8003ffc <_vfiprintf_r+0x220>
 8003ff6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ff8:	f7ff fd89 	bl	8003b0e <__retarget_lock_release_recursive>
 8003ffc:	89ab      	ldrh	r3, [r5, #12]
 8003ffe:	065b      	lsls	r3, r3, #25
 8004000:	f53f af12 	bmi.w	8003e28 <_vfiprintf_r+0x4c>
 8004004:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004006:	e711      	b.n	8003e2c <_vfiprintf_r+0x50>
 8004008:	ab03      	add	r3, sp, #12
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	462a      	mov	r2, r5
 800400e:	4b0a      	ldr	r3, [pc, #40]	; (8004038 <_vfiprintf_r+0x25c>)
 8004010:	a904      	add	r1, sp, #16
 8004012:	4630      	mov	r0, r6
 8004014:	f000 f880 	bl	8004118 <_printf_i>
 8004018:	e7e4      	b.n	8003fe4 <_vfiprintf_r+0x208>
 800401a:	bf00      	nop
 800401c:	08005b88 	.word	0x08005b88
 8004020:	08005ba8 	.word	0x08005ba8
 8004024:	08005b68 	.word	0x08005b68
 8004028:	08005bcc 	.word	0x08005bcc
 800402c:	08005bd2 	.word	0x08005bd2
 8004030:	08005bd6 	.word	0x08005bd6
 8004034:	00000000 	.word	0x00000000
 8004038:	08003db7 	.word	0x08003db7

0800403c <_printf_common>:
 800403c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004040:	4616      	mov	r6, r2
 8004042:	4699      	mov	r9, r3
 8004044:	688a      	ldr	r2, [r1, #8]
 8004046:	690b      	ldr	r3, [r1, #16]
 8004048:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800404c:	4293      	cmp	r3, r2
 800404e:	bfb8      	it	lt
 8004050:	4613      	movlt	r3, r2
 8004052:	6033      	str	r3, [r6, #0]
 8004054:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004058:	4607      	mov	r7, r0
 800405a:	460c      	mov	r4, r1
 800405c:	b10a      	cbz	r2, 8004062 <_printf_common+0x26>
 800405e:	3301      	adds	r3, #1
 8004060:	6033      	str	r3, [r6, #0]
 8004062:	6823      	ldr	r3, [r4, #0]
 8004064:	0699      	lsls	r1, r3, #26
 8004066:	bf42      	ittt	mi
 8004068:	6833      	ldrmi	r3, [r6, #0]
 800406a:	3302      	addmi	r3, #2
 800406c:	6033      	strmi	r3, [r6, #0]
 800406e:	6825      	ldr	r5, [r4, #0]
 8004070:	f015 0506 	ands.w	r5, r5, #6
 8004074:	d106      	bne.n	8004084 <_printf_common+0x48>
 8004076:	f104 0a19 	add.w	sl, r4, #25
 800407a:	68e3      	ldr	r3, [r4, #12]
 800407c:	6832      	ldr	r2, [r6, #0]
 800407e:	1a9b      	subs	r3, r3, r2
 8004080:	42ab      	cmp	r3, r5
 8004082:	dc26      	bgt.n	80040d2 <_printf_common+0x96>
 8004084:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004088:	1e13      	subs	r3, r2, #0
 800408a:	6822      	ldr	r2, [r4, #0]
 800408c:	bf18      	it	ne
 800408e:	2301      	movne	r3, #1
 8004090:	0692      	lsls	r2, r2, #26
 8004092:	d42b      	bmi.n	80040ec <_printf_common+0xb0>
 8004094:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004098:	4649      	mov	r1, r9
 800409a:	4638      	mov	r0, r7
 800409c:	47c0      	blx	r8
 800409e:	3001      	adds	r0, #1
 80040a0:	d01e      	beq.n	80040e0 <_printf_common+0xa4>
 80040a2:	6823      	ldr	r3, [r4, #0]
 80040a4:	68e5      	ldr	r5, [r4, #12]
 80040a6:	6832      	ldr	r2, [r6, #0]
 80040a8:	f003 0306 	and.w	r3, r3, #6
 80040ac:	2b04      	cmp	r3, #4
 80040ae:	bf08      	it	eq
 80040b0:	1aad      	subeq	r5, r5, r2
 80040b2:	68a3      	ldr	r3, [r4, #8]
 80040b4:	6922      	ldr	r2, [r4, #16]
 80040b6:	bf0c      	ite	eq
 80040b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040bc:	2500      	movne	r5, #0
 80040be:	4293      	cmp	r3, r2
 80040c0:	bfc4      	itt	gt
 80040c2:	1a9b      	subgt	r3, r3, r2
 80040c4:	18ed      	addgt	r5, r5, r3
 80040c6:	2600      	movs	r6, #0
 80040c8:	341a      	adds	r4, #26
 80040ca:	42b5      	cmp	r5, r6
 80040cc:	d11a      	bne.n	8004104 <_printf_common+0xc8>
 80040ce:	2000      	movs	r0, #0
 80040d0:	e008      	b.n	80040e4 <_printf_common+0xa8>
 80040d2:	2301      	movs	r3, #1
 80040d4:	4652      	mov	r2, sl
 80040d6:	4649      	mov	r1, r9
 80040d8:	4638      	mov	r0, r7
 80040da:	47c0      	blx	r8
 80040dc:	3001      	adds	r0, #1
 80040de:	d103      	bne.n	80040e8 <_printf_common+0xac>
 80040e0:	f04f 30ff 	mov.w	r0, #4294967295
 80040e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040e8:	3501      	adds	r5, #1
 80040ea:	e7c6      	b.n	800407a <_printf_common+0x3e>
 80040ec:	18e1      	adds	r1, r4, r3
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	2030      	movs	r0, #48	; 0x30
 80040f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040f6:	4422      	add	r2, r4
 80040f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004100:	3302      	adds	r3, #2
 8004102:	e7c7      	b.n	8004094 <_printf_common+0x58>
 8004104:	2301      	movs	r3, #1
 8004106:	4622      	mov	r2, r4
 8004108:	4649      	mov	r1, r9
 800410a:	4638      	mov	r0, r7
 800410c:	47c0      	blx	r8
 800410e:	3001      	adds	r0, #1
 8004110:	d0e6      	beq.n	80040e0 <_printf_common+0xa4>
 8004112:	3601      	adds	r6, #1
 8004114:	e7d9      	b.n	80040ca <_printf_common+0x8e>
 8004116:	0000      	movs	r0, r0

08004118 <_printf_i>:
 8004118:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800411c:	7e0f      	ldrb	r7, [r1, #24]
 800411e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004120:	2f78      	cmp	r7, #120	; 0x78
 8004122:	4691      	mov	r9, r2
 8004124:	4680      	mov	r8, r0
 8004126:	460c      	mov	r4, r1
 8004128:	469a      	mov	sl, r3
 800412a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800412e:	d807      	bhi.n	8004140 <_printf_i+0x28>
 8004130:	2f62      	cmp	r7, #98	; 0x62
 8004132:	d80a      	bhi.n	800414a <_printf_i+0x32>
 8004134:	2f00      	cmp	r7, #0
 8004136:	f000 80d8 	beq.w	80042ea <_printf_i+0x1d2>
 800413a:	2f58      	cmp	r7, #88	; 0x58
 800413c:	f000 80a3 	beq.w	8004286 <_printf_i+0x16e>
 8004140:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004144:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004148:	e03a      	b.n	80041c0 <_printf_i+0xa8>
 800414a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800414e:	2b15      	cmp	r3, #21
 8004150:	d8f6      	bhi.n	8004140 <_printf_i+0x28>
 8004152:	a101      	add	r1, pc, #4	; (adr r1, 8004158 <_printf_i+0x40>)
 8004154:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004158:	080041b1 	.word	0x080041b1
 800415c:	080041c5 	.word	0x080041c5
 8004160:	08004141 	.word	0x08004141
 8004164:	08004141 	.word	0x08004141
 8004168:	08004141 	.word	0x08004141
 800416c:	08004141 	.word	0x08004141
 8004170:	080041c5 	.word	0x080041c5
 8004174:	08004141 	.word	0x08004141
 8004178:	08004141 	.word	0x08004141
 800417c:	08004141 	.word	0x08004141
 8004180:	08004141 	.word	0x08004141
 8004184:	080042d1 	.word	0x080042d1
 8004188:	080041f5 	.word	0x080041f5
 800418c:	080042b3 	.word	0x080042b3
 8004190:	08004141 	.word	0x08004141
 8004194:	08004141 	.word	0x08004141
 8004198:	080042f3 	.word	0x080042f3
 800419c:	08004141 	.word	0x08004141
 80041a0:	080041f5 	.word	0x080041f5
 80041a4:	08004141 	.word	0x08004141
 80041a8:	08004141 	.word	0x08004141
 80041ac:	080042bb 	.word	0x080042bb
 80041b0:	682b      	ldr	r3, [r5, #0]
 80041b2:	1d1a      	adds	r2, r3, #4
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	602a      	str	r2, [r5, #0]
 80041b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041c0:	2301      	movs	r3, #1
 80041c2:	e0a3      	b.n	800430c <_printf_i+0x1f4>
 80041c4:	6820      	ldr	r0, [r4, #0]
 80041c6:	6829      	ldr	r1, [r5, #0]
 80041c8:	0606      	lsls	r6, r0, #24
 80041ca:	f101 0304 	add.w	r3, r1, #4
 80041ce:	d50a      	bpl.n	80041e6 <_printf_i+0xce>
 80041d0:	680e      	ldr	r6, [r1, #0]
 80041d2:	602b      	str	r3, [r5, #0]
 80041d4:	2e00      	cmp	r6, #0
 80041d6:	da03      	bge.n	80041e0 <_printf_i+0xc8>
 80041d8:	232d      	movs	r3, #45	; 0x2d
 80041da:	4276      	negs	r6, r6
 80041dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041e0:	485e      	ldr	r0, [pc, #376]	; (800435c <_printf_i+0x244>)
 80041e2:	230a      	movs	r3, #10
 80041e4:	e019      	b.n	800421a <_printf_i+0x102>
 80041e6:	680e      	ldr	r6, [r1, #0]
 80041e8:	602b      	str	r3, [r5, #0]
 80041ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80041ee:	bf18      	it	ne
 80041f0:	b236      	sxthne	r6, r6
 80041f2:	e7ef      	b.n	80041d4 <_printf_i+0xbc>
 80041f4:	682b      	ldr	r3, [r5, #0]
 80041f6:	6820      	ldr	r0, [r4, #0]
 80041f8:	1d19      	adds	r1, r3, #4
 80041fa:	6029      	str	r1, [r5, #0]
 80041fc:	0601      	lsls	r1, r0, #24
 80041fe:	d501      	bpl.n	8004204 <_printf_i+0xec>
 8004200:	681e      	ldr	r6, [r3, #0]
 8004202:	e002      	b.n	800420a <_printf_i+0xf2>
 8004204:	0646      	lsls	r6, r0, #25
 8004206:	d5fb      	bpl.n	8004200 <_printf_i+0xe8>
 8004208:	881e      	ldrh	r6, [r3, #0]
 800420a:	4854      	ldr	r0, [pc, #336]	; (800435c <_printf_i+0x244>)
 800420c:	2f6f      	cmp	r7, #111	; 0x6f
 800420e:	bf0c      	ite	eq
 8004210:	2308      	moveq	r3, #8
 8004212:	230a      	movne	r3, #10
 8004214:	2100      	movs	r1, #0
 8004216:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800421a:	6865      	ldr	r5, [r4, #4]
 800421c:	60a5      	str	r5, [r4, #8]
 800421e:	2d00      	cmp	r5, #0
 8004220:	bfa2      	ittt	ge
 8004222:	6821      	ldrge	r1, [r4, #0]
 8004224:	f021 0104 	bicge.w	r1, r1, #4
 8004228:	6021      	strge	r1, [r4, #0]
 800422a:	b90e      	cbnz	r6, 8004230 <_printf_i+0x118>
 800422c:	2d00      	cmp	r5, #0
 800422e:	d04d      	beq.n	80042cc <_printf_i+0x1b4>
 8004230:	4615      	mov	r5, r2
 8004232:	fbb6 f1f3 	udiv	r1, r6, r3
 8004236:	fb03 6711 	mls	r7, r3, r1, r6
 800423a:	5dc7      	ldrb	r7, [r0, r7]
 800423c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004240:	4637      	mov	r7, r6
 8004242:	42bb      	cmp	r3, r7
 8004244:	460e      	mov	r6, r1
 8004246:	d9f4      	bls.n	8004232 <_printf_i+0x11a>
 8004248:	2b08      	cmp	r3, #8
 800424a:	d10b      	bne.n	8004264 <_printf_i+0x14c>
 800424c:	6823      	ldr	r3, [r4, #0]
 800424e:	07de      	lsls	r6, r3, #31
 8004250:	d508      	bpl.n	8004264 <_printf_i+0x14c>
 8004252:	6923      	ldr	r3, [r4, #16]
 8004254:	6861      	ldr	r1, [r4, #4]
 8004256:	4299      	cmp	r1, r3
 8004258:	bfde      	ittt	le
 800425a:	2330      	movle	r3, #48	; 0x30
 800425c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004260:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004264:	1b52      	subs	r2, r2, r5
 8004266:	6122      	str	r2, [r4, #16]
 8004268:	f8cd a000 	str.w	sl, [sp]
 800426c:	464b      	mov	r3, r9
 800426e:	aa03      	add	r2, sp, #12
 8004270:	4621      	mov	r1, r4
 8004272:	4640      	mov	r0, r8
 8004274:	f7ff fee2 	bl	800403c <_printf_common>
 8004278:	3001      	adds	r0, #1
 800427a:	d14c      	bne.n	8004316 <_printf_i+0x1fe>
 800427c:	f04f 30ff 	mov.w	r0, #4294967295
 8004280:	b004      	add	sp, #16
 8004282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004286:	4835      	ldr	r0, [pc, #212]	; (800435c <_printf_i+0x244>)
 8004288:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800428c:	6829      	ldr	r1, [r5, #0]
 800428e:	6823      	ldr	r3, [r4, #0]
 8004290:	f851 6b04 	ldr.w	r6, [r1], #4
 8004294:	6029      	str	r1, [r5, #0]
 8004296:	061d      	lsls	r5, r3, #24
 8004298:	d514      	bpl.n	80042c4 <_printf_i+0x1ac>
 800429a:	07df      	lsls	r7, r3, #31
 800429c:	bf44      	itt	mi
 800429e:	f043 0320 	orrmi.w	r3, r3, #32
 80042a2:	6023      	strmi	r3, [r4, #0]
 80042a4:	b91e      	cbnz	r6, 80042ae <_printf_i+0x196>
 80042a6:	6823      	ldr	r3, [r4, #0]
 80042a8:	f023 0320 	bic.w	r3, r3, #32
 80042ac:	6023      	str	r3, [r4, #0]
 80042ae:	2310      	movs	r3, #16
 80042b0:	e7b0      	b.n	8004214 <_printf_i+0xfc>
 80042b2:	6823      	ldr	r3, [r4, #0]
 80042b4:	f043 0320 	orr.w	r3, r3, #32
 80042b8:	6023      	str	r3, [r4, #0]
 80042ba:	2378      	movs	r3, #120	; 0x78
 80042bc:	4828      	ldr	r0, [pc, #160]	; (8004360 <_printf_i+0x248>)
 80042be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042c2:	e7e3      	b.n	800428c <_printf_i+0x174>
 80042c4:	0659      	lsls	r1, r3, #25
 80042c6:	bf48      	it	mi
 80042c8:	b2b6      	uxthmi	r6, r6
 80042ca:	e7e6      	b.n	800429a <_printf_i+0x182>
 80042cc:	4615      	mov	r5, r2
 80042ce:	e7bb      	b.n	8004248 <_printf_i+0x130>
 80042d0:	682b      	ldr	r3, [r5, #0]
 80042d2:	6826      	ldr	r6, [r4, #0]
 80042d4:	6961      	ldr	r1, [r4, #20]
 80042d6:	1d18      	adds	r0, r3, #4
 80042d8:	6028      	str	r0, [r5, #0]
 80042da:	0635      	lsls	r5, r6, #24
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	d501      	bpl.n	80042e4 <_printf_i+0x1cc>
 80042e0:	6019      	str	r1, [r3, #0]
 80042e2:	e002      	b.n	80042ea <_printf_i+0x1d2>
 80042e4:	0670      	lsls	r0, r6, #25
 80042e6:	d5fb      	bpl.n	80042e0 <_printf_i+0x1c8>
 80042e8:	8019      	strh	r1, [r3, #0]
 80042ea:	2300      	movs	r3, #0
 80042ec:	6123      	str	r3, [r4, #16]
 80042ee:	4615      	mov	r5, r2
 80042f0:	e7ba      	b.n	8004268 <_printf_i+0x150>
 80042f2:	682b      	ldr	r3, [r5, #0]
 80042f4:	1d1a      	adds	r2, r3, #4
 80042f6:	602a      	str	r2, [r5, #0]
 80042f8:	681d      	ldr	r5, [r3, #0]
 80042fa:	6862      	ldr	r2, [r4, #4]
 80042fc:	2100      	movs	r1, #0
 80042fe:	4628      	mov	r0, r5
 8004300:	f7fc fbe6 	bl	8000ad0 <memchr>
 8004304:	b108      	cbz	r0, 800430a <_printf_i+0x1f2>
 8004306:	1b40      	subs	r0, r0, r5
 8004308:	6060      	str	r0, [r4, #4]
 800430a:	6863      	ldr	r3, [r4, #4]
 800430c:	6123      	str	r3, [r4, #16]
 800430e:	2300      	movs	r3, #0
 8004310:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004314:	e7a8      	b.n	8004268 <_printf_i+0x150>
 8004316:	6923      	ldr	r3, [r4, #16]
 8004318:	462a      	mov	r2, r5
 800431a:	4649      	mov	r1, r9
 800431c:	4640      	mov	r0, r8
 800431e:	47d0      	blx	sl
 8004320:	3001      	adds	r0, #1
 8004322:	d0ab      	beq.n	800427c <_printf_i+0x164>
 8004324:	6823      	ldr	r3, [r4, #0]
 8004326:	079b      	lsls	r3, r3, #30
 8004328:	d413      	bmi.n	8004352 <_printf_i+0x23a>
 800432a:	68e0      	ldr	r0, [r4, #12]
 800432c:	9b03      	ldr	r3, [sp, #12]
 800432e:	4298      	cmp	r0, r3
 8004330:	bfb8      	it	lt
 8004332:	4618      	movlt	r0, r3
 8004334:	e7a4      	b.n	8004280 <_printf_i+0x168>
 8004336:	2301      	movs	r3, #1
 8004338:	4632      	mov	r2, r6
 800433a:	4649      	mov	r1, r9
 800433c:	4640      	mov	r0, r8
 800433e:	47d0      	blx	sl
 8004340:	3001      	adds	r0, #1
 8004342:	d09b      	beq.n	800427c <_printf_i+0x164>
 8004344:	3501      	adds	r5, #1
 8004346:	68e3      	ldr	r3, [r4, #12]
 8004348:	9903      	ldr	r1, [sp, #12]
 800434a:	1a5b      	subs	r3, r3, r1
 800434c:	42ab      	cmp	r3, r5
 800434e:	dcf2      	bgt.n	8004336 <_printf_i+0x21e>
 8004350:	e7eb      	b.n	800432a <_printf_i+0x212>
 8004352:	2500      	movs	r5, #0
 8004354:	f104 0619 	add.w	r6, r4, #25
 8004358:	e7f5      	b.n	8004346 <_printf_i+0x22e>
 800435a:	bf00      	nop
 800435c:	08005bdd 	.word	0x08005bdd
 8004360:	08005bee 	.word	0x08005bee

08004364 <_open_r>:
 8004364:	b538      	push	{r3, r4, r5, lr}
 8004366:	4d07      	ldr	r5, [pc, #28]	; (8004384 <_open_r+0x20>)
 8004368:	4604      	mov	r4, r0
 800436a:	4608      	mov	r0, r1
 800436c:	4611      	mov	r1, r2
 800436e:	2200      	movs	r2, #0
 8004370:	602a      	str	r2, [r5, #0]
 8004372:	461a      	mov	r2, r3
 8004374:	f000 fc34 	bl	8004be0 <_open>
 8004378:	1c43      	adds	r3, r0, #1
 800437a:	d102      	bne.n	8004382 <_open_r+0x1e>
 800437c:	682b      	ldr	r3, [r5, #0]
 800437e:	b103      	cbz	r3, 8004382 <_open_r+0x1e>
 8004380:	6023      	str	r3, [r4, #0]
 8004382:	bd38      	pop	{r3, r4, r5, pc}
 8004384:	200001d8 	.word	0x200001d8

08004388 <iprintf>:
 8004388:	b40f      	push	{r0, r1, r2, r3}
 800438a:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <iprintf+0x2c>)
 800438c:	b513      	push	{r0, r1, r4, lr}
 800438e:	681c      	ldr	r4, [r3, #0]
 8004390:	b124      	cbz	r4, 800439c <iprintf+0x14>
 8004392:	69a3      	ldr	r3, [r4, #24]
 8004394:	b913      	cbnz	r3, 800439c <iprintf+0x14>
 8004396:	4620      	mov	r0, r4
 8004398:	f7ff f976 	bl	8003688 <__sinit>
 800439c:	ab05      	add	r3, sp, #20
 800439e:	9a04      	ldr	r2, [sp, #16]
 80043a0:	68a1      	ldr	r1, [r4, #8]
 80043a2:	9301      	str	r3, [sp, #4]
 80043a4:	4620      	mov	r0, r4
 80043a6:	f7ff fd19 	bl	8003ddc <_vfiprintf_r>
 80043aa:	b002      	add	sp, #8
 80043ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043b0:	b004      	add	sp, #16
 80043b2:	4770      	bx	lr
 80043b4:	20000004 	.word	0x20000004

080043b8 <putchar>:
 80043b8:	b538      	push	{r3, r4, r5, lr}
 80043ba:	4b08      	ldr	r3, [pc, #32]	; (80043dc <putchar+0x24>)
 80043bc:	681c      	ldr	r4, [r3, #0]
 80043be:	4605      	mov	r5, r0
 80043c0:	b124      	cbz	r4, 80043cc <putchar+0x14>
 80043c2:	69a3      	ldr	r3, [r4, #24]
 80043c4:	b913      	cbnz	r3, 80043cc <putchar+0x14>
 80043c6:	4620      	mov	r0, r4
 80043c8:	f7ff f95e 	bl	8003688 <__sinit>
 80043cc:	68a2      	ldr	r2, [r4, #8]
 80043ce:	4629      	mov	r1, r5
 80043d0:	4620      	mov	r0, r4
 80043d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043d6:	f000 bb2d 	b.w	8004a34 <_putc_r>
 80043da:	bf00      	nop
 80043dc:	20000004 	.word	0x20000004

080043e0 <_puts_r>:
 80043e0:	b570      	push	{r4, r5, r6, lr}
 80043e2:	460e      	mov	r6, r1
 80043e4:	4605      	mov	r5, r0
 80043e6:	b118      	cbz	r0, 80043f0 <_puts_r+0x10>
 80043e8:	6983      	ldr	r3, [r0, #24]
 80043ea:	b90b      	cbnz	r3, 80043f0 <_puts_r+0x10>
 80043ec:	f7ff f94c 	bl	8003688 <__sinit>
 80043f0:	69ab      	ldr	r3, [r5, #24]
 80043f2:	68ac      	ldr	r4, [r5, #8]
 80043f4:	b913      	cbnz	r3, 80043fc <_puts_r+0x1c>
 80043f6:	4628      	mov	r0, r5
 80043f8:	f7ff f946 	bl	8003688 <__sinit>
 80043fc:	4b2c      	ldr	r3, [pc, #176]	; (80044b0 <_puts_r+0xd0>)
 80043fe:	429c      	cmp	r4, r3
 8004400:	d120      	bne.n	8004444 <_puts_r+0x64>
 8004402:	686c      	ldr	r4, [r5, #4]
 8004404:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004406:	07db      	lsls	r3, r3, #31
 8004408:	d405      	bmi.n	8004416 <_puts_r+0x36>
 800440a:	89a3      	ldrh	r3, [r4, #12]
 800440c:	0598      	lsls	r0, r3, #22
 800440e:	d402      	bmi.n	8004416 <_puts_r+0x36>
 8004410:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004412:	f7ff fb7b 	bl	8003b0c <__retarget_lock_acquire_recursive>
 8004416:	89a3      	ldrh	r3, [r4, #12]
 8004418:	0719      	lsls	r1, r3, #28
 800441a:	d51d      	bpl.n	8004458 <_puts_r+0x78>
 800441c:	6923      	ldr	r3, [r4, #16]
 800441e:	b1db      	cbz	r3, 8004458 <_puts_r+0x78>
 8004420:	3e01      	subs	r6, #1
 8004422:	68a3      	ldr	r3, [r4, #8]
 8004424:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004428:	3b01      	subs	r3, #1
 800442a:	60a3      	str	r3, [r4, #8]
 800442c:	bb39      	cbnz	r1, 800447e <_puts_r+0x9e>
 800442e:	2b00      	cmp	r3, #0
 8004430:	da38      	bge.n	80044a4 <_puts_r+0xc4>
 8004432:	4622      	mov	r2, r4
 8004434:	210a      	movs	r1, #10
 8004436:	4628      	mov	r0, r5
 8004438:	f000 f986 	bl	8004748 <__swbuf_r>
 800443c:	3001      	adds	r0, #1
 800443e:	d011      	beq.n	8004464 <_puts_r+0x84>
 8004440:	250a      	movs	r5, #10
 8004442:	e011      	b.n	8004468 <_puts_r+0x88>
 8004444:	4b1b      	ldr	r3, [pc, #108]	; (80044b4 <_puts_r+0xd4>)
 8004446:	429c      	cmp	r4, r3
 8004448:	d101      	bne.n	800444e <_puts_r+0x6e>
 800444a:	68ac      	ldr	r4, [r5, #8]
 800444c:	e7da      	b.n	8004404 <_puts_r+0x24>
 800444e:	4b1a      	ldr	r3, [pc, #104]	; (80044b8 <_puts_r+0xd8>)
 8004450:	429c      	cmp	r4, r3
 8004452:	bf08      	it	eq
 8004454:	68ec      	ldreq	r4, [r5, #12]
 8004456:	e7d5      	b.n	8004404 <_puts_r+0x24>
 8004458:	4621      	mov	r1, r4
 800445a:	4628      	mov	r0, r5
 800445c:	f000 f9d8 	bl	8004810 <__swsetup_r>
 8004460:	2800      	cmp	r0, #0
 8004462:	d0dd      	beq.n	8004420 <_puts_r+0x40>
 8004464:	f04f 35ff 	mov.w	r5, #4294967295
 8004468:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800446a:	07da      	lsls	r2, r3, #31
 800446c:	d405      	bmi.n	800447a <_puts_r+0x9a>
 800446e:	89a3      	ldrh	r3, [r4, #12]
 8004470:	059b      	lsls	r3, r3, #22
 8004472:	d402      	bmi.n	800447a <_puts_r+0x9a>
 8004474:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004476:	f7ff fb4a 	bl	8003b0e <__retarget_lock_release_recursive>
 800447a:	4628      	mov	r0, r5
 800447c:	bd70      	pop	{r4, r5, r6, pc}
 800447e:	2b00      	cmp	r3, #0
 8004480:	da04      	bge.n	800448c <_puts_r+0xac>
 8004482:	69a2      	ldr	r2, [r4, #24]
 8004484:	429a      	cmp	r2, r3
 8004486:	dc06      	bgt.n	8004496 <_puts_r+0xb6>
 8004488:	290a      	cmp	r1, #10
 800448a:	d004      	beq.n	8004496 <_puts_r+0xb6>
 800448c:	6823      	ldr	r3, [r4, #0]
 800448e:	1c5a      	adds	r2, r3, #1
 8004490:	6022      	str	r2, [r4, #0]
 8004492:	7019      	strb	r1, [r3, #0]
 8004494:	e7c5      	b.n	8004422 <_puts_r+0x42>
 8004496:	4622      	mov	r2, r4
 8004498:	4628      	mov	r0, r5
 800449a:	f000 f955 	bl	8004748 <__swbuf_r>
 800449e:	3001      	adds	r0, #1
 80044a0:	d1bf      	bne.n	8004422 <_puts_r+0x42>
 80044a2:	e7df      	b.n	8004464 <_puts_r+0x84>
 80044a4:	6823      	ldr	r3, [r4, #0]
 80044a6:	250a      	movs	r5, #10
 80044a8:	1c5a      	adds	r2, r3, #1
 80044aa:	6022      	str	r2, [r4, #0]
 80044ac:	701d      	strb	r5, [r3, #0]
 80044ae:	e7db      	b.n	8004468 <_puts_r+0x88>
 80044b0:	08005b88 	.word	0x08005b88
 80044b4:	08005ba8 	.word	0x08005ba8
 80044b8:	08005b68 	.word	0x08005b68

080044bc <puts>:
 80044bc:	4b02      	ldr	r3, [pc, #8]	; (80044c8 <puts+0xc>)
 80044be:	4601      	mov	r1, r0
 80044c0:	6818      	ldr	r0, [r3, #0]
 80044c2:	f7ff bf8d 	b.w	80043e0 <_puts_r>
 80044c6:	bf00      	nop
 80044c8:	20000004 	.word	0x20000004

080044cc <_sbrk_r>:
 80044cc:	b538      	push	{r3, r4, r5, lr}
 80044ce:	4d06      	ldr	r5, [pc, #24]	; (80044e8 <_sbrk_r+0x1c>)
 80044d0:	2300      	movs	r3, #0
 80044d2:	4604      	mov	r4, r0
 80044d4:	4608      	mov	r0, r1
 80044d6:	602b      	str	r3, [r5, #0]
 80044d8:	f7fe f9d2 	bl	8002880 <_sbrk>
 80044dc:	1c43      	adds	r3, r0, #1
 80044de:	d102      	bne.n	80044e6 <_sbrk_r+0x1a>
 80044e0:	682b      	ldr	r3, [r5, #0]
 80044e2:	b103      	cbz	r3, 80044e6 <_sbrk_r+0x1a>
 80044e4:	6023      	str	r3, [r4, #0]
 80044e6:	bd38      	pop	{r3, r4, r5, pc}
 80044e8:	200001d8 	.word	0x200001d8

080044ec <__sread>:
 80044ec:	b510      	push	{r4, lr}
 80044ee:	460c      	mov	r4, r1
 80044f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044f4:	f000 fae6 	bl	8004ac4 <_read_r>
 80044f8:	2800      	cmp	r0, #0
 80044fa:	bfab      	itete	ge
 80044fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80044fe:	89a3      	ldrhlt	r3, [r4, #12]
 8004500:	181b      	addge	r3, r3, r0
 8004502:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004506:	bfac      	ite	ge
 8004508:	6563      	strge	r3, [r4, #84]	; 0x54
 800450a:	81a3      	strhlt	r3, [r4, #12]
 800450c:	bd10      	pop	{r4, pc}

0800450e <__swrite>:
 800450e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004512:	461f      	mov	r7, r3
 8004514:	898b      	ldrh	r3, [r1, #12]
 8004516:	05db      	lsls	r3, r3, #23
 8004518:	4605      	mov	r5, r0
 800451a:	460c      	mov	r4, r1
 800451c:	4616      	mov	r6, r2
 800451e:	d505      	bpl.n	800452c <__swrite+0x1e>
 8004520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004524:	2302      	movs	r3, #2
 8004526:	2200      	movs	r2, #0
 8004528:	f000 fa66 	bl	80049f8 <_lseek_r>
 800452c:	89a3      	ldrh	r3, [r4, #12]
 800452e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004532:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004536:	81a3      	strh	r3, [r4, #12]
 8004538:	4632      	mov	r2, r6
 800453a:	463b      	mov	r3, r7
 800453c:	4628      	mov	r0, r5
 800453e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004542:	f000 b953 	b.w	80047ec <_write_r>

08004546 <__sseek>:
 8004546:	b510      	push	{r4, lr}
 8004548:	460c      	mov	r4, r1
 800454a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800454e:	f000 fa53 	bl	80049f8 <_lseek_r>
 8004552:	1c43      	adds	r3, r0, #1
 8004554:	89a3      	ldrh	r3, [r4, #12]
 8004556:	bf15      	itete	ne
 8004558:	6560      	strne	r0, [r4, #84]	; 0x54
 800455a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800455e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004562:	81a3      	strheq	r3, [r4, #12]
 8004564:	bf18      	it	ne
 8004566:	81a3      	strhne	r3, [r4, #12]
 8004568:	bd10      	pop	{r4, pc}

0800456a <__sclose>:
 800456a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800456e:	f000 b9db 	b.w	8004928 <_close_r>

08004572 <strcpy>:
 8004572:	4603      	mov	r3, r0
 8004574:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004578:	f803 2b01 	strb.w	r2, [r3], #1
 800457c:	2a00      	cmp	r2, #0
 800457e:	d1f9      	bne.n	8004574 <strcpy+0x2>
 8004580:	4770      	bx	lr
 8004582:	0000      	movs	r0, r0

08004584 <strtok>:
 8004584:	4b16      	ldr	r3, [pc, #88]	; (80045e0 <strtok+0x5c>)
 8004586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800458a:	681f      	ldr	r7, [r3, #0]
 800458c:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800458e:	4605      	mov	r5, r0
 8004590:	460e      	mov	r6, r1
 8004592:	b9ec      	cbnz	r4, 80045d0 <strtok+0x4c>
 8004594:	2050      	movs	r0, #80	; 0x50
 8004596:	f7ff fb21 	bl	8003bdc <malloc>
 800459a:	4602      	mov	r2, r0
 800459c:	65b8      	str	r0, [r7, #88]	; 0x58
 800459e:	b920      	cbnz	r0, 80045aa <strtok+0x26>
 80045a0:	4b10      	ldr	r3, [pc, #64]	; (80045e4 <strtok+0x60>)
 80045a2:	4811      	ldr	r0, [pc, #68]	; (80045e8 <strtok+0x64>)
 80045a4:	2157      	movs	r1, #87	; 0x57
 80045a6:	f000 f9a1 	bl	80048ec <__assert_func>
 80045aa:	e9c0 4400 	strd	r4, r4, [r0]
 80045ae:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80045b2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80045b6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80045ba:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80045be:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80045c2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80045c6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80045ca:	6184      	str	r4, [r0, #24]
 80045cc:	7704      	strb	r4, [r0, #28]
 80045ce:	6244      	str	r4, [r0, #36]	; 0x24
 80045d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045d2:	4631      	mov	r1, r6
 80045d4:	4628      	mov	r0, r5
 80045d6:	2301      	movs	r3, #1
 80045d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045dc:	f000 b806 	b.w	80045ec <__strtok_r>
 80045e0:	20000004 	.word	0x20000004
 80045e4:	08005bff 	.word	0x08005bff
 80045e8:	08005c16 	.word	0x08005c16

080045ec <__strtok_r>:
 80045ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ee:	b908      	cbnz	r0, 80045f4 <__strtok_r+0x8>
 80045f0:	6810      	ldr	r0, [r2, #0]
 80045f2:	b188      	cbz	r0, 8004618 <__strtok_r+0x2c>
 80045f4:	4604      	mov	r4, r0
 80045f6:	4620      	mov	r0, r4
 80045f8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80045fc:	460f      	mov	r7, r1
 80045fe:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004602:	b91e      	cbnz	r6, 800460c <__strtok_r+0x20>
 8004604:	b965      	cbnz	r5, 8004620 <__strtok_r+0x34>
 8004606:	6015      	str	r5, [r2, #0]
 8004608:	4628      	mov	r0, r5
 800460a:	e005      	b.n	8004618 <__strtok_r+0x2c>
 800460c:	42b5      	cmp	r5, r6
 800460e:	d1f6      	bne.n	80045fe <__strtok_r+0x12>
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1f0      	bne.n	80045f6 <__strtok_r+0xa>
 8004614:	6014      	str	r4, [r2, #0]
 8004616:	7003      	strb	r3, [r0, #0]
 8004618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800461a:	461c      	mov	r4, r3
 800461c:	e00c      	b.n	8004638 <__strtok_r+0x4c>
 800461e:	b915      	cbnz	r5, 8004626 <__strtok_r+0x3a>
 8004620:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004624:	460e      	mov	r6, r1
 8004626:	f816 5b01 	ldrb.w	r5, [r6], #1
 800462a:	42ab      	cmp	r3, r5
 800462c:	d1f7      	bne.n	800461e <__strtok_r+0x32>
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0f3      	beq.n	800461a <__strtok_r+0x2e>
 8004632:	2300      	movs	r3, #0
 8004634:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004638:	6014      	str	r4, [r2, #0]
 800463a:	e7ed      	b.n	8004618 <__strtok_r+0x2c>

0800463c <_strtol_l.constprop.0>:
 800463c:	2b01      	cmp	r3, #1
 800463e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004642:	4680      	mov	r8, r0
 8004644:	d001      	beq.n	800464a <_strtol_l.constprop.0+0xe>
 8004646:	2b24      	cmp	r3, #36	; 0x24
 8004648:	d906      	bls.n	8004658 <_strtol_l.constprop.0+0x1c>
 800464a:	f7fe fe79 	bl	8003340 <__errno>
 800464e:	2316      	movs	r3, #22
 8004650:	6003      	str	r3, [r0, #0]
 8004652:	2000      	movs	r0, #0
 8004654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004658:	4f35      	ldr	r7, [pc, #212]	; (8004730 <_strtol_l.constprop.0+0xf4>)
 800465a:	460d      	mov	r5, r1
 800465c:	4628      	mov	r0, r5
 800465e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004662:	5de6      	ldrb	r6, [r4, r7]
 8004664:	f016 0608 	ands.w	r6, r6, #8
 8004668:	d1f8      	bne.n	800465c <_strtol_l.constprop.0+0x20>
 800466a:	2c2d      	cmp	r4, #45	; 0x2d
 800466c:	d12f      	bne.n	80046ce <_strtol_l.constprop.0+0x92>
 800466e:	782c      	ldrb	r4, [r5, #0]
 8004670:	2601      	movs	r6, #1
 8004672:	1c85      	adds	r5, r0, #2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d057      	beq.n	8004728 <_strtol_l.constprop.0+0xec>
 8004678:	2b10      	cmp	r3, #16
 800467a:	d109      	bne.n	8004690 <_strtol_l.constprop.0+0x54>
 800467c:	2c30      	cmp	r4, #48	; 0x30
 800467e:	d107      	bne.n	8004690 <_strtol_l.constprop.0+0x54>
 8004680:	7828      	ldrb	r0, [r5, #0]
 8004682:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004686:	2858      	cmp	r0, #88	; 0x58
 8004688:	d149      	bne.n	800471e <_strtol_l.constprop.0+0xe2>
 800468a:	786c      	ldrb	r4, [r5, #1]
 800468c:	2310      	movs	r3, #16
 800468e:	3502      	adds	r5, #2
 8004690:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8004694:	f10e 3eff 	add.w	lr, lr, #4294967295
 8004698:	2700      	movs	r7, #0
 800469a:	fbbe f9f3 	udiv	r9, lr, r3
 800469e:	4638      	mov	r0, r7
 80046a0:	fb03 ea19 	mls	sl, r3, r9, lr
 80046a4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80046a8:	f1bc 0f09 	cmp.w	ip, #9
 80046ac:	d814      	bhi.n	80046d8 <_strtol_l.constprop.0+0x9c>
 80046ae:	4664      	mov	r4, ip
 80046b0:	42a3      	cmp	r3, r4
 80046b2:	dd22      	ble.n	80046fa <_strtol_l.constprop.0+0xbe>
 80046b4:	2f00      	cmp	r7, #0
 80046b6:	db1d      	blt.n	80046f4 <_strtol_l.constprop.0+0xb8>
 80046b8:	4581      	cmp	r9, r0
 80046ba:	d31b      	bcc.n	80046f4 <_strtol_l.constprop.0+0xb8>
 80046bc:	d101      	bne.n	80046c2 <_strtol_l.constprop.0+0x86>
 80046be:	45a2      	cmp	sl, r4
 80046c0:	db18      	blt.n	80046f4 <_strtol_l.constprop.0+0xb8>
 80046c2:	fb00 4003 	mla	r0, r0, r3, r4
 80046c6:	2701      	movs	r7, #1
 80046c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80046cc:	e7ea      	b.n	80046a4 <_strtol_l.constprop.0+0x68>
 80046ce:	2c2b      	cmp	r4, #43	; 0x2b
 80046d0:	bf04      	itt	eq
 80046d2:	782c      	ldrbeq	r4, [r5, #0]
 80046d4:	1c85      	addeq	r5, r0, #2
 80046d6:	e7cd      	b.n	8004674 <_strtol_l.constprop.0+0x38>
 80046d8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80046dc:	f1bc 0f19 	cmp.w	ip, #25
 80046e0:	d801      	bhi.n	80046e6 <_strtol_l.constprop.0+0xaa>
 80046e2:	3c37      	subs	r4, #55	; 0x37
 80046e4:	e7e4      	b.n	80046b0 <_strtol_l.constprop.0+0x74>
 80046e6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80046ea:	f1bc 0f19 	cmp.w	ip, #25
 80046ee:	d804      	bhi.n	80046fa <_strtol_l.constprop.0+0xbe>
 80046f0:	3c57      	subs	r4, #87	; 0x57
 80046f2:	e7dd      	b.n	80046b0 <_strtol_l.constprop.0+0x74>
 80046f4:	f04f 37ff 	mov.w	r7, #4294967295
 80046f8:	e7e6      	b.n	80046c8 <_strtol_l.constprop.0+0x8c>
 80046fa:	2f00      	cmp	r7, #0
 80046fc:	da07      	bge.n	800470e <_strtol_l.constprop.0+0xd2>
 80046fe:	2322      	movs	r3, #34	; 0x22
 8004700:	f8c8 3000 	str.w	r3, [r8]
 8004704:	4670      	mov	r0, lr
 8004706:	2a00      	cmp	r2, #0
 8004708:	d0a4      	beq.n	8004654 <_strtol_l.constprop.0+0x18>
 800470a:	1e69      	subs	r1, r5, #1
 800470c:	e005      	b.n	800471a <_strtol_l.constprop.0+0xde>
 800470e:	b106      	cbz	r6, 8004712 <_strtol_l.constprop.0+0xd6>
 8004710:	4240      	negs	r0, r0
 8004712:	2a00      	cmp	r2, #0
 8004714:	d09e      	beq.n	8004654 <_strtol_l.constprop.0+0x18>
 8004716:	2f00      	cmp	r7, #0
 8004718:	d1f7      	bne.n	800470a <_strtol_l.constprop.0+0xce>
 800471a:	6011      	str	r1, [r2, #0]
 800471c:	e79a      	b.n	8004654 <_strtol_l.constprop.0+0x18>
 800471e:	2430      	movs	r4, #48	; 0x30
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1b5      	bne.n	8004690 <_strtol_l.constprop.0+0x54>
 8004724:	2308      	movs	r3, #8
 8004726:	e7b3      	b.n	8004690 <_strtol_l.constprop.0+0x54>
 8004728:	2c30      	cmp	r4, #48	; 0x30
 800472a:	d0a9      	beq.n	8004680 <_strtol_l.constprop.0+0x44>
 800472c:	230a      	movs	r3, #10
 800472e:	e7af      	b.n	8004690 <_strtol_l.constprop.0+0x54>
 8004730:	08005cd2 	.word	0x08005cd2

08004734 <strtol>:
 8004734:	4613      	mov	r3, r2
 8004736:	460a      	mov	r2, r1
 8004738:	4601      	mov	r1, r0
 800473a:	4802      	ldr	r0, [pc, #8]	; (8004744 <strtol+0x10>)
 800473c:	6800      	ldr	r0, [r0, #0]
 800473e:	f7ff bf7d 	b.w	800463c <_strtol_l.constprop.0>
 8004742:	bf00      	nop
 8004744:	20000004 	.word	0x20000004

08004748 <__swbuf_r>:
 8004748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800474a:	460e      	mov	r6, r1
 800474c:	4614      	mov	r4, r2
 800474e:	4605      	mov	r5, r0
 8004750:	b118      	cbz	r0, 800475a <__swbuf_r+0x12>
 8004752:	6983      	ldr	r3, [r0, #24]
 8004754:	b90b      	cbnz	r3, 800475a <__swbuf_r+0x12>
 8004756:	f7fe ff97 	bl	8003688 <__sinit>
 800475a:	4b21      	ldr	r3, [pc, #132]	; (80047e0 <__swbuf_r+0x98>)
 800475c:	429c      	cmp	r4, r3
 800475e:	d12b      	bne.n	80047b8 <__swbuf_r+0x70>
 8004760:	686c      	ldr	r4, [r5, #4]
 8004762:	69a3      	ldr	r3, [r4, #24]
 8004764:	60a3      	str	r3, [r4, #8]
 8004766:	89a3      	ldrh	r3, [r4, #12]
 8004768:	071a      	lsls	r2, r3, #28
 800476a:	d52f      	bpl.n	80047cc <__swbuf_r+0x84>
 800476c:	6923      	ldr	r3, [r4, #16]
 800476e:	b36b      	cbz	r3, 80047cc <__swbuf_r+0x84>
 8004770:	6923      	ldr	r3, [r4, #16]
 8004772:	6820      	ldr	r0, [r4, #0]
 8004774:	1ac0      	subs	r0, r0, r3
 8004776:	6963      	ldr	r3, [r4, #20]
 8004778:	b2f6      	uxtb	r6, r6
 800477a:	4283      	cmp	r3, r0
 800477c:	4637      	mov	r7, r6
 800477e:	dc04      	bgt.n	800478a <__swbuf_r+0x42>
 8004780:	4621      	mov	r1, r4
 8004782:	4628      	mov	r0, r5
 8004784:	f7fe feec 	bl	8003560 <_fflush_r>
 8004788:	bb30      	cbnz	r0, 80047d8 <__swbuf_r+0x90>
 800478a:	68a3      	ldr	r3, [r4, #8]
 800478c:	3b01      	subs	r3, #1
 800478e:	60a3      	str	r3, [r4, #8]
 8004790:	6823      	ldr	r3, [r4, #0]
 8004792:	1c5a      	adds	r2, r3, #1
 8004794:	6022      	str	r2, [r4, #0]
 8004796:	701e      	strb	r6, [r3, #0]
 8004798:	6963      	ldr	r3, [r4, #20]
 800479a:	3001      	adds	r0, #1
 800479c:	4283      	cmp	r3, r0
 800479e:	d004      	beq.n	80047aa <__swbuf_r+0x62>
 80047a0:	89a3      	ldrh	r3, [r4, #12]
 80047a2:	07db      	lsls	r3, r3, #31
 80047a4:	d506      	bpl.n	80047b4 <__swbuf_r+0x6c>
 80047a6:	2e0a      	cmp	r6, #10
 80047a8:	d104      	bne.n	80047b4 <__swbuf_r+0x6c>
 80047aa:	4621      	mov	r1, r4
 80047ac:	4628      	mov	r0, r5
 80047ae:	f7fe fed7 	bl	8003560 <_fflush_r>
 80047b2:	b988      	cbnz	r0, 80047d8 <__swbuf_r+0x90>
 80047b4:	4638      	mov	r0, r7
 80047b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047b8:	4b0a      	ldr	r3, [pc, #40]	; (80047e4 <__swbuf_r+0x9c>)
 80047ba:	429c      	cmp	r4, r3
 80047bc:	d101      	bne.n	80047c2 <__swbuf_r+0x7a>
 80047be:	68ac      	ldr	r4, [r5, #8]
 80047c0:	e7cf      	b.n	8004762 <__swbuf_r+0x1a>
 80047c2:	4b09      	ldr	r3, [pc, #36]	; (80047e8 <__swbuf_r+0xa0>)
 80047c4:	429c      	cmp	r4, r3
 80047c6:	bf08      	it	eq
 80047c8:	68ec      	ldreq	r4, [r5, #12]
 80047ca:	e7ca      	b.n	8004762 <__swbuf_r+0x1a>
 80047cc:	4621      	mov	r1, r4
 80047ce:	4628      	mov	r0, r5
 80047d0:	f000 f81e 	bl	8004810 <__swsetup_r>
 80047d4:	2800      	cmp	r0, #0
 80047d6:	d0cb      	beq.n	8004770 <__swbuf_r+0x28>
 80047d8:	f04f 37ff 	mov.w	r7, #4294967295
 80047dc:	e7ea      	b.n	80047b4 <__swbuf_r+0x6c>
 80047de:	bf00      	nop
 80047e0:	08005b88 	.word	0x08005b88
 80047e4:	08005ba8 	.word	0x08005ba8
 80047e8:	08005b68 	.word	0x08005b68

080047ec <_write_r>:
 80047ec:	b538      	push	{r3, r4, r5, lr}
 80047ee:	4d07      	ldr	r5, [pc, #28]	; (800480c <_write_r+0x20>)
 80047f0:	4604      	mov	r4, r0
 80047f2:	4608      	mov	r0, r1
 80047f4:	4611      	mov	r1, r2
 80047f6:	2200      	movs	r2, #0
 80047f8:	602a      	str	r2, [r5, #0]
 80047fa:	461a      	mov	r2, r3
 80047fc:	f000 fa00 	bl	8004c00 <_write>
 8004800:	1c43      	adds	r3, r0, #1
 8004802:	d102      	bne.n	800480a <_write_r+0x1e>
 8004804:	682b      	ldr	r3, [r5, #0]
 8004806:	b103      	cbz	r3, 800480a <_write_r+0x1e>
 8004808:	6023      	str	r3, [r4, #0]
 800480a:	bd38      	pop	{r3, r4, r5, pc}
 800480c:	200001d8 	.word	0x200001d8

08004810 <__swsetup_r>:
 8004810:	4b32      	ldr	r3, [pc, #200]	; (80048dc <__swsetup_r+0xcc>)
 8004812:	b570      	push	{r4, r5, r6, lr}
 8004814:	681d      	ldr	r5, [r3, #0]
 8004816:	4606      	mov	r6, r0
 8004818:	460c      	mov	r4, r1
 800481a:	b125      	cbz	r5, 8004826 <__swsetup_r+0x16>
 800481c:	69ab      	ldr	r3, [r5, #24]
 800481e:	b913      	cbnz	r3, 8004826 <__swsetup_r+0x16>
 8004820:	4628      	mov	r0, r5
 8004822:	f7fe ff31 	bl	8003688 <__sinit>
 8004826:	4b2e      	ldr	r3, [pc, #184]	; (80048e0 <__swsetup_r+0xd0>)
 8004828:	429c      	cmp	r4, r3
 800482a:	d10f      	bne.n	800484c <__swsetup_r+0x3c>
 800482c:	686c      	ldr	r4, [r5, #4]
 800482e:	89a3      	ldrh	r3, [r4, #12]
 8004830:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004834:	0719      	lsls	r1, r3, #28
 8004836:	d42c      	bmi.n	8004892 <__swsetup_r+0x82>
 8004838:	06dd      	lsls	r5, r3, #27
 800483a:	d411      	bmi.n	8004860 <__swsetup_r+0x50>
 800483c:	2309      	movs	r3, #9
 800483e:	6033      	str	r3, [r6, #0]
 8004840:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004844:	81a3      	strh	r3, [r4, #12]
 8004846:	f04f 30ff 	mov.w	r0, #4294967295
 800484a:	e03e      	b.n	80048ca <__swsetup_r+0xba>
 800484c:	4b25      	ldr	r3, [pc, #148]	; (80048e4 <__swsetup_r+0xd4>)
 800484e:	429c      	cmp	r4, r3
 8004850:	d101      	bne.n	8004856 <__swsetup_r+0x46>
 8004852:	68ac      	ldr	r4, [r5, #8]
 8004854:	e7eb      	b.n	800482e <__swsetup_r+0x1e>
 8004856:	4b24      	ldr	r3, [pc, #144]	; (80048e8 <__swsetup_r+0xd8>)
 8004858:	429c      	cmp	r4, r3
 800485a:	bf08      	it	eq
 800485c:	68ec      	ldreq	r4, [r5, #12]
 800485e:	e7e6      	b.n	800482e <__swsetup_r+0x1e>
 8004860:	0758      	lsls	r0, r3, #29
 8004862:	d512      	bpl.n	800488a <__swsetup_r+0x7a>
 8004864:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004866:	b141      	cbz	r1, 800487a <__swsetup_r+0x6a>
 8004868:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800486c:	4299      	cmp	r1, r3
 800486e:	d002      	beq.n	8004876 <__swsetup_r+0x66>
 8004870:	4630      	mov	r0, r6
 8004872:	f7ff f9e7 	bl	8003c44 <_free_r>
 8004876:	2300      	movs	r3, #0
 8004878:	6363      	str	r3, [r4, #52]	; 0x34
 800487a:	89a3      	ldrh	r3, [r4, #12]
 800487c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004880:	81a3      	strh	r3, [r4, #12]
 8004882:	2300      	movs	r3, #0
 8004884:	6063      	str	r3, [r4, #4]
 8004886:	6923      	ldr	r3, [r4, #16]
 8004888:	6023      	str	r3, [r4, #0]
 800488a:	89a3      	ldrh	r3, [r4, #12]
 800488c:	f043 0308 	orr.w	r3, r3, #8
 8004890:	81a3      	strh	r3, [r4, #12]
 8004892:	6923      	ldr	r3, [r4, #16]
 8004894:	b94b      	cbnz	r3, 80048aa <__swsetup_r+0x9a>
 8004896:	89a3      	ldrh	r3, [r4, #12]
 8004898:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800489c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048a0:	d003      	beq.n	80048aa <__swsetup_r+0x9a>
 80048a2:	4621      	mov	r1, r4
 80048a4:	4630      	mov	r0, r6
 80048a6:	f7ff f959 	bl	8003b5c <__smakebuf_r>
 80048aa:	89a0      	ldrh	r0, [r4, #12]
 80048ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80048b0:	f010 0301 	ands.w	r3, r0, #1
 80048b4:	d00a      	beq.n	80048cc <__swsetup_r+0xbc>
 80048b6:	2300      	movs	r3, #0
 80048b8:	60a3      	str	r3, [r4, #8]
 80048ba:	6963      	ldr	r3, [r4, #20]
 80048bc:	425b      	negs	r3, r3
 80048be:	61a3      	str	r3, [r4, #24]
 80048c0:	6923      	ldr	r3, [r4, #16]
 80048c2:	b943      	cbnz	r3, 80048d6 <__swsetup_r+0xc6>
 80048c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80048c8:	d1ba      	bne.n	8004840 <__swsetup_r+0x30>
 80048ca:	bd70      	pop	{r4, r5, r6, pc}
 80048cc:	0781      	lsls	r1, r0, #30
 80048ce:	bf58      	it	pl
 80048d0:	6963      	ldrpl	r3, [r4, #20]
 80048d2:	60a3      	str	r3, [r4, #8]
 80048d4:	e7f4      	b.n	80048c0 <__swsetup_r+0xb0>
 80048d6:	2000      	movs	r0, #0
 80048d8:	e7f7      	b.n	80048ca <__swsetup_r+0xba>
 80048da:	bf00      	nop
 80048dc:	20000004 	.word	0x20000004
 80048e0:	08005b88 	.word	0x08005b88
 80048e4:	08005ba8 	.word	0x08005ba8
 80048e8:	08005b68 	.word	0x08005b68

080048ec <__assert_func>:
 80048ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80048ee:	4614      	mov	r4, r2
 80048f0:	461a      	mov	r2, r3
 80048f2:	4b09      	ldr	r3, [pc, #36]	; (8004918 <__assert_func+0x2c>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4605      	mov	r5, r0
 80048f8:	68d8      	ldr	r0, [r3, #12]
 80048fa:	b14c      	cbz	r4, 8004910 <__assert_func+0x24>
 80048fc:	4b07      	ldr	r3, [pc, #28]	; (800491c <__assert_func+0x30>)
 80048fe:	9100      	str	r1, [sp, #0]
 8004900:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004904:	4906      	ldr	r1, [pc, #24]	; (8004920 <__assert_func+0x34>)
 8004906:	462b      	mov	r3, r5
 8004908:	f7fe ff98 	bl	800383c <fiprintf>
 800490c:	f000 f8ec 	bl	8004ae8 <abort>
 8004910:	4b04      	ldr	r3, [pc, #16]	; (8004924 <__assert_func+0x38>)
 8004912:	461c      	mov	r4, r3
 8004914:	e7f3      	b.n	80048fe <__assert_func+0x12>
 8004916:	bf00      	nop
 8004918:	20000004 	.word	0x20000004
 800491c:	08005c95 	.word	0x08005c95
 8004920:	08005ca2 	.word	0x08005ca2
 8004924:	08005a8b 	.word	0x08005a8b

08004928 <_close_r>:
 8004928:	b538      	push	{r3, r4, r5, lr}
 800492a:	4d06      	ldr	r5, [pc, #24]	; (8004944 <_close_r+0x1c>)
 800492c:	2300      	movs	r3, #0
 800492e:	4604      	mov	r4, r0
 8004930:	4608      	mov	r0, r1
 8004932:	602b      	str	r3, [r5, #0]
 8004934:	f000 f924 	bl	8004b80 <_close>
 8004938:	1c43      	adds	r3, r0, #1
 800493a:	d102      	bne.n	8004942 <_close_r+0x1a>
 800493c:	682b      	ldr	r3, [r5, #0]
 800493e:	b103      	cbz	r3, 8004942 <_close_r+0x1a>
 8004940:	6023      	str	r3, [r4, #0]
 8004942:	bd38      	pop	{r3, r4, r5, pc}
 8004944:	200001d8 	.word	0x200001d8

08004948 <__sflags>:
 8004948:	780b      	ldrb	r3, [r1, #0]
 800494a:	2b72      	cmp	r3, #114	; 0x72
 800494c:	b530      	push	{r4, r5, lr}
 800494e:	d022      	beq.n	8004996 <__sflags+0x4e>
 8004950:	2b77      	cmp	r3, #119	; 0x77
 8004952:	d024      	beq.n	800499e <__sflags+0x56>
 8004954:	2b61      	cmp	r3, #97	; 0x61
 8004956:	d027      	beq.n	80049a8 <__sflags+0x60>
 8004958:	2316      	movs	r3, #22
 800495a:	6003      	str	r3, [r0, #0]
 800495c:	2000      	movs	r0, #0
 800495e:	bd30      	pop	{r4, r5, pc}
 8004960:	2d62      	cmp	r5, #98	; 0x62
 8004962:	d012      	beq.n	800498a <__sflags+0x42>
 8004964:	2d78      	cmp	r5, #120	; 0x78
 8004966:	d013      	beq.n	8004990 <__sflags+0x48>
 8004968:	2d2b      	cmp	r5, #43	; 0x2b
 800496a:	d107      	bne.n	800497c <__sflags+0x34>
 800496c:	f020 001c 	bic.w	r0, r0, #28
 8004970:	f023 0303 	bic.w	r3, r3, #3
 8004974:	f040 0010 	orr.w	r0, r0, #16
 8004978:	f043 0302 	orr.w	r3, r3, #2
 800497c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8004980:	2d00      	cmp	r5, #0
 8004982:	d1ed      	bne.n	8004960 <__sflags+0x18>
 8004984:	4323      	orrs	r3, r4
 8004986:	6013      	str	r3, [r2, #0]
 8004988:	e7e9      	b.n	800495e <__sflags+0x16>
 800498a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800498e:	e7f5      	b.n	800497c <__sflags+0x34>
 8004990:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004994:	e7f2      	b.n	800497c <__sflags+0x34>
 8004996:	2400      	movs	r4, #0
 8004998:	4623      	mov	r3, r4
 800499a:	2004      	movs	r0, #4
 800499c:	e7ee      	b.n	800497c <__sflags+0x34>
 800499e:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 80049a2:	2301      	movs	r3, #1
 80049a4:	2008      	movs	r0, #8
 80049a6:	e7e9      	b.n	800497c <__sflags+0x34>
 80049a8:	f44f 7402 	mov.w	r4, #520	; 0x208
 80049ac:	2301      	movs	r3, #1
 80049ae:	f44f 7084 	mov.w	r0, #264	; 0x108
 80049b2:	e7e3      	b.n	800497c <__sflags+0x34>

080049b4 <_fstat_r>:
 80049b4:	b538      	push	{r3, r4, r5, lr}
 80049b6:	4d07      	ldr	r5, [pc, #28]	; (80049d4 <_fstat_r+0x20>)
 80049b8:	2300      	movs	r3, #0
 80049ba:	4604      	mov	r4, r0
 80049bc:	4608      	mov	r0, r1
 80049be:	4611      	mov	r1, r2
 80049c0:	602b      	str	r3, [r5, #0]
 80049c2:	f000 f8e5 	bl	8004b90 <_fstat>
 80049c6:	1c43      	adds	r3, r0, #1
 80049c8:	d102      	bne.n	80049d0 <_fstat_r+0x1c>
 80049ca:	682b      	ldr	r3, [r5, #0]
 80049cc:	b103      	cbz	r3, 80049d0 <_fstat_r+0x1c>
 80049ce:	6023      	str	r3, [r4, #0]
 80049d0:	bd38      	pop	{r3, r4, r5, pc}
 80049d2:	bf00      	nop
 80049d4:	200001d8 	.word	0x200001d8

080049d8 <_isatty_r>:
 80049d8:	b538      	push	{r3, r4, r5, lr}
 80049da:	4d06      	ldr	r5, [pc, #24]	; (80049f4 <_isatty_r+0x1c>)
 80049dc:	2300      	movs	r3, #0
 80049de:	4604      	mov	r4, r0
 80049e0:	4608      	mov	r0, r1
 80049e2:	602b      	str	r3, [r5, #0]
 80049e4:	f000 f8e4 	bl	8004bb0 <_isatty>
 80049e8:	1c43      	adds	r3, r0, #1
 80049ea:	d102      	bne.n	80049f2 <_isatty_r+0x1a>
 80049ec:	682b      	ldr	r3, [r5, #0]
 80049ee:	b103      	cbz	r3, 80049f2 <_isatty_r+0x1a>
 80049f0:	6023      	str	r3, [r4, #0]
 80049f2:	bd38      	pop	{r3, r4, r5, pc}
 80049f4:	200001d8 	.word	0x200001d8

080049f8 <_lseek_r>:
 80049f8:	b538      	push	{r3, r4, r5, lr}
 80049fa:	4d07      	ldr	r5, [pc, #28]	; (8004a18 <_lseek_r+0x20>)
 80049fc:	4604      	mov	r4, r0
 80049fe:	4608      	mov	r0, r1
 8004a00:	4611      	mov	r1, r2
 8004a02:	2200      	movs	r2, #0
 8004a04:	602a      	str	r2, [r5, #0]
 8004a06:	461a      	mov	r2, r3
 8004a08:	f000 f8e2 	bl	8004bd0 <_lseek>
 8004a0c:	1c43      	adds	r3, r0, #1
 8004a0e:	d102      	bne.n	8004a16 <_lseek_r+0x1e>
 8004a10:	682b      	ldr	r3, [r5, #0]
 8004a12:	b103      	cbz	r3, 8004a16 <_lseek_r+0x1e>
 8004a14:	6023      	str	r3, [r4, #0]
 8004a16:	bd38      	pop	{r3, r4, r5, pc}
 8004a18:	200001d8 	.word	0x200001d8

08004a1c <__malloc_lock>:
 8004a1c:	4801      	ldr	r0, [pc, #4]	; (8004a24 <__malloc_lock+0x8>)
 8004a1e:	f7ff b875 	b.w	8003b0c <__retarget_lock_acquire_recursive>
 8004a22:	bf00      	nop
 8004a24:	200001cc 	.word	0x200001cc

08004a28 <__malloc_unlock>:
 8004a28:	4801      	ldr	r0, [pc, #4]	; (8004a30 <__malloc_unlock+0x8>)
 8004a2a:	f7ff b870 	b.w	8003b0e <__retarget_lock_release_recursive>
 8004a2e:	bf00      	nop
 8004a30:	200001cc 	.word	0x200001cc

08004a34 <_putc_r>:
 8004a34:	b570      	push	{r4, r5, r6, lr}
 8004a36:	460d      	mov	r5, r1
 8004a38:	4614      	mov	r4, r2
 8004a3a:	4606      	mov	r6, r0
 8004a3c:	b118      	cbz	r0, 8004a46 <_putc_r+0x12>
 8004a3e:	6983      	ldr	r3, [r0, #24]
 8004a40:	b90b      	cbnz	r3, 8004a46 <_putc_r+0x12>
 8004a42:	f7fe fe21 	bl	8003688 <__sinit>
 8004a46:	4b1c      	ldr	r3, [pc, #112]	; (8004ab8 <_putc_r+0x84>)
 8004a48:	429c      	cmp	r4, r3
 8004a4a:	d124      	bne.n	8004a96 <_putc_r+0x62>
 8004a4c:	6874      	ldr	r4, [r6, #4]
 8004a4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a50:	07d8      	lsls	r0, r3, #31
 8004a52:	d405      	bmi.n	8004a60 <_putc_r+0x2c>
 8004a54:	89a3      	ldrh	r3, [r4, #12]
 8004a56:	0599      	lsls	r1, r3, #22
 8004a58:	d402      	bmi.n	8004a60 <_putc_r+0x2c>
 8004a5a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a5c:	f7ff f856 	bl	8003b0c <__retarget_lock_acquire_recursive>
 8004a60:	68a3      	ldr	r3, [r4, #8]
 8004a62:	3b01      	subs	r3, #1
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	60a3      	str	r3, [r4, #8]
 8004a68:	da05      	bge.n	8004a76 <_putc_r+0x42>
 8004a6a:	69a2      	ldr	r2, [r4, #24]
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	db1c      	blt.n	8004aaa <_putc_r+0x76>
 8004a70:	b2eb      	uxtb	r3, r5
 8004a72:	2b0a      	cmp	r3, #10
 8004a74:	d019      	beq.n	8004aaa <_putc_r+0x76>
 8004a76:	6823      	ldr	r3, [r4, #0]
 8004a78:	1c5a      	adds	r2, r3, #1
 8004a7a:	6022      	str	r2, [r4, #0]
 8004a7c:	701d      	strb	r5, [r3, #0]
 8004a7e:	b2ed      	uxtb	r5, r5
 8004a80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a82:	07da      	lsls	r2, r3, #31
 8004a84:	d405      	bmi.n	8004a92 <_putc_r+0x5e>
 8004a86:	89a3      	ldrh	r3, [r4, #12]
 8004a88:	059b      	lsls	r3, r3, #22
 8004a8a:	d402      	bmi.n	8004a92 <_putc_r+0x5e>
 8004a8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a8e:	f7ff f83e 	bl	8003b0e <__retarget_lock_release_recursive>
 8004a92:	4628      	mov	r0, r5
 8004a94:	bd70      	pop	{r4, r5, r6, pc}
 8004a96:	4b09      	ldr	r3, [pc, #36]	; (8004abc <_putc_r+0x88>)
 8004a98:	429c      	cmp	r4, r3
 8004a9a:	d101      	bne.n	8004aa0 <_putc_r+0x6c>
 8004a9c:	68b4      	ldr	r4, [r6, #8]
 8004a9e:	e7d6      	b.n	8004a4e <_putc_r+0x1a>
 8004aa0:	4b07      	ldr	r3, [pc, #28]	; (8004ac0 <_putc_r+0x8c>)
 8004aa2:	429c      	cmp	r4, r3
 8004aa4:	bf08      	it	eq
 8004aa6:	68f4      	ldreq	r4, [r6, #12]
 8004aa8:	e7d1      	b.n	8004a4e <_putc_r+0x1a>
 8004aaa:	4629      	mov	r1, r5
 8004aac:	4622      	mov	r2, r4
 8004aae:	4630      	mov	r0, r6
 8004ab0:	f7ff fe4a 	bl	8004748 <__swbuf_r>
 8004ab4:	4605      	mov	r5, r0
 8004ab6:	e7e3      	b.n	8004a80 <_putc_r+0x4c>
 8004ab8:	08005b88 	.word	0x08005b88
 8004abc:	08005ba8 	.word	0x08005ba8
 8004ac0:	08005b68 	.word	0x08005b68

08004ac4 <_read_r>:
 8004ac4:	b538      	push	{r3, r4, r5, lr}
 8004ac6:	4d07      	ldr	r5, [pc, #28]	; (8004ae4 <_read_r+0x20>)
 8004ac8:	4604      	mov	r4, r0
 8004aca:	4608      	mov	r0, r1
 8004acc:	4611      	mov	r1, r2
 8004ace:	2200      	movs	r2, #0
 8004ad0:	602a      	str	r2, [r5, #0]
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	f000 f88c 	bl	8004bf0 <_read>
 8004ad8:	1c43      	adds	r3, r0, #1
 8004ada:	d102      	bne.n	8004ae2 <_read_r+0x1e>
 8004adc:	682b      	ldr	r3, [r5, #0]
 8004ade:	b103      	cbz	r3, 8004ae2 <_read_r+0x1e>
 8004ae0:	6023      	str	r3, [r4, #0]
 8004ae2:	bd38      	pop	{r3, r4, r5, pc}
 8004ae4:	200001d8 	.word	0x200001d8

08004ae8 <abort>:
 8004ae8:	b508      	push	{r3, lr}
 8004aea:	2006      	movs	r0, #6
 8004aec:	f000 f82c 	bl	8004b48 <raise>
 8004af0:	2001      	movs	r0, #1
 8004af2:	f000 f88d 	bl	8004c10 <_exit>

08004af6 <_raise_r>:
 8004af6:	291f      	cmp	r1, #31
 8004af8:	b538      	push	{r3, r4, r5, lr}
 8004afa:	4604      	mov	r4, r0
 8004afc:	460d      	mov	r5, r1
 8004afe:	d904      	bls.n	8004b0a <_raise_r+0x14>
 8004b00:	2316      	movs	r3, #22
 8004b02:	6003      	str	r3, [r0, #0]
 8004b04:	f04f 30ff 	mov.w	r0, #4294967295
 8004b08:	bd38      	pop	{r3, r4, r5, pc}
 8004b0a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004b0c:	b112      	cbz	r2, 8004b14 <_raise_r+0x1e>
 8004b0e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004b12:	b94b      	cbnz	r3, 8004b28 <_raise_r+0x32>
 8004b14:	4620      	mov	r0, r4
 8004b16:	f000 f831 	bl	8004b7c <_getpid_r>
 8004b1a:	462a      	mov	r2, r5
 8004b1c:	4601      	mov	r1, r0
 8004b1e:	4620      	mov	r0, r4
 8004b20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b24:	f000 b818 	b.w	8004b58 <_kill_r>
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d00a      	beq.n	8004b42 <_raise_r+0x4c>
 8004b2c:	1c59      	adds	r1, r3, #1
 8004b2e:	d103      	bne.n	8004b38 <_raise_r+0x42>
 8004b30:	2316      	movs	r3, #22
 8004b32:	6003      	str	r3, [r0, #0]
 8004b34:	2001      	movs	r0, #1
 8004b36:	e7e7      	b.n	8004b08 <_raise_r+0x12>
 8004b38:	2400      	movs	r4, #0
 8004b3a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004b3e:	4628      	mov	r0, r5
 8004b40:	4798      	blx	r3
 8004b42:	2000      	movs	r0, #0
 8004b44:	e7e0      	b.n	8004b08 <_raise_r+0x12>
 8004b46:	0000      	movs	r0, r0

08004b48 <raise>:
 8004b48:	4b02      	ldr	r3, [pc, #8]	; (8004b54 <raise+0xc>)
 8004b4a:	4601      	mov	r1, r0
 8004b4c:	6818      	ldr	r0, [r3, #0]
 8004b4e:	f7ff bfd2 	b.w	8004af6 <_raise_r>
 8004b52:	bf00      	nop
 8004b54:	20000004 	.word	0x20000004

08004b58 <_kill_r>:
 8004b58:	b538      	push	{r3, r4, r5, lr}
 8004b5a:	4d07      	ldr	r5, [pc, #28]	; (8004b78 <_kill_r+0x20>)
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	4604      	mov	r4, r0
 8004b60:	4608      	mov	r0, r1
 8004b62:	4611      	mov	r1, r2
 8004b64:	602b      	str	r3, [r5, #0]
 8004b66:	f000 f82b 	bl	8004bc0 <_kill>
 8004b6a:	1c43      	adds	r3, r0, #1
 8004b6c:	d102      	bne.n	8004b74 <_kill_r+0x1c>
 8004b6e:	682b      	ldr	r3, [r5, #0]
 8004b70:	b103      	cbz	r3, 8004b74 <_kill_r+0x1c>
 8004b72:	6023      	str	r3, [r4, #0]
 8004b74:	bd38      	pop	{r3, r4, r5, pc}
 8004b76:	bf00      	nop
 8004b78:	200001d8 	.word	0x200001d8

08004b7c <_getpid_r>:
 8004b7c:	f000 b810 	b.w	8004ba0 <_getpid>

08004b80 <_close>:
 8004b80:	4b02      	ldr	r3, [pc, #8]	; (8004b8c <_close+0xc>)
 8004b82:	2258      	movs	r2, #88	; 0x58
 8004b84:	601a      	str	r2, [r3, #0]
 8004b86:	f04f 30ff 	mov.w	r0, #4294967295
 8004b8a:	4770      	bx	lr
 8004b8c:	200001d8 	.word	0x200001d8

08004b90 <_fstat>:
 8004b90:	4b02      	ldr	r3, [pc, #8]	; (8004b9c <_fstat+0xc>)
 8004b92:	2258      	movs	r2, #88	; 0x58
 8004b94:	601a      	str	r2, [r3, #0]
 8004b96:	f04f 30ff 	mov.w	r0, #4294967295
 8004b9a:	4770      	bx	lr
 8004b9c:	200001d8 	.word	0x200001d8

08004ba0 <_getpid>:
 8004ba0:	4b02      	ldr	r3, [pc, #8]	; (8004bac <_getpid+0xc>)
 8004ba2:	2258      	movs	r2, #88	; 0x58
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8004baa:	4770      	bx	lr
 8004bac:	200001d8 	.word	0x200001d8

08004bb0 <_isatty>:
 8004bb0:	4b02      	ldr	r3, [pc, #8]	; (8004bbc <_isatty+0xc>)
 8004bb2:	2258      	movs	r2, #88	; 0x58
 8004bb4:	601a      	str	r2, [r3, #0]
 8004bb6:	2000      	movs	r0, #0
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	200001d8 	.word	0x200001d8

08004bc0 <_kill>:
 8004bc0:	4b02      	ldr	r3, [pc, #8]	; (8004bcc <_kill+0xc>)
 8004bc2:	2258      	movs	r2, #88	; 0x58
 8004bc4:	601a      	str	r2, [r3, #0]
 8004bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8004bca:	4770      	bx	lr
 8004bcc:	200001d8 	.word	0x200001d8

08004bd0 <_lseek>:
 8004bd0:	4b02      	ldr	r3, [pc, #8]	; (8004bdc <_lseek+0xc>)
 8004bd2:	2258      	movs	r2, #88	; 0x58
 8004bd4:	601a      	str	r2, [r3, #0]
 8004bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8004bda:	4770      	bx	lr
 8004bdc:	200001d8 	.word	0x200001d8

08004be0 <_open>:
 8004be0:	4b02      	ldr	r3, [pc, #8]	; (8004bec <_open+0xc>)
 8004be2:	2258      	movs	r2, #88	; 0x58
 8004be4:	601a      	str	r2, [r3, #0]
 8004be6:	f04f 30ff 	mov.w	r0, #4294967295
 8004bea:	4770      	bx	lr
 8004bec:	200001d8 	.word	0x200001d8

08004bf0 <_read>:
 8004bf0:	4b02      	ldr	r3, [pc, #8]	; (8004bfc <_read+0xc>)
 8004bf2:	2258      	movs	r2, #88	; 0x58
 8004bf4:	601a      	str	r2, [r3, #0]
 8004bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8004bfa:	4770      	bx	lr
 8004bfc:	200001d8 	.word	0x200001d8

08004c00 <_write>:
 8004c00:	4b02      	ldr	r3, [pc, #8]	; (8004c0c <_write+0xc>)
 8004c02:	2258      	movs	r2, #88	; 0x58
 8004c04:	601a      	str	r2, [r3, #0]
 8004c06:	f04f 30ff 	mov.w	r0, #4294967295
 8004c0a:	4770      	bx	lr
 8004c0c:	200001d8 	.word	0x200001d8

08004c10 <_exit>:
 8004c10:	e7fe      	b.n	8004c10 <_exit>
 8004c12:	bf00      	nop

08004c14 <_init>:
 8004c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c16:	bf00      	nop
 8004c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c1a:	bc08      	pop	{r3}
 8004c1c:	469e      	mov	lr, r3
 8004c1e:	4770      	bx	lr

08004c20 <_fini>:
 8004c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c22:	bf00      	nop
 8004c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c26:	bc08      	pop	{r3}
 8004c28:	469e      	mov	lr, r3
 8004c2a:	4770      	bx	lr
