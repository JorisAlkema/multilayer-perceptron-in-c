
MLP-CWLITEARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b04  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08001c8c  08001c8c  00011c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ca8  08001ca8  000288b8  2**0
                  CONTENTS
  4 .ARM          00000000  08001ca8  08001ca8  000288b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ca8  08001ca8  000288b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ca8  08001ca8  00011ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001cac  08001cac  00011cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000088b8  20000000  08001cb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  200088b8  0800a568  000288b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20008a10  0800a568  00028a10  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000288b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000404a  00000000  00000000  000288e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a9a  00000000  00000000  0002c92c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00002288  00000000  00000000  0002d3c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000188  00000000  00000000  0002f64e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000420  00000000  00000000  0002f7d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000024e1  00000000  00000000  0002fbf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00001371  00000000  00000000  000320d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000004d  00000000  00000000  00033448  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006ec  00000000  00000000  00033498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000144  00000000  00000000  00033b84  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000069  00000000  00000000  00033cc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200088b8 	.word	0x200088b8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001c74 	.word	0x08001c74

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200088bc 	.word	0x200088bc
 80001c4:	08001c74 	.word	0x08001c74

080001c8 <__aeabi_frsub>:
 80001c8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__addsf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_fsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080001d4 <__addsf3>:
 80001d4:	0042      	lsls	r2, r0, #1
 80001d6:	bf1f      	itttt	ne
 80001d8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001dc:	ea92 0f03 	teqne	r2, r3
 80001e0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001e4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001e8:	d06a      	beq.n	80002c0 <__addsf3+0xec>
 80001ea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001ee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001f2:	bfc1      	itttt	gt
 80001f4:	18d2      	addgt	r2, r2, r3
 80001f6:	4041      	eorgt	r1, r0
 80001f8:	4048      	eorgt	r0, r1
 80001fa:	4041      	eorgt	r1, r0
 80001fc:	bfb8      	it	lt
 80001fe:	425b      	neglt	r3, r3
 8000200:	2b19      	cmp	r3, #25
 8000202:	bf88      	it	hi
 8000204:	4770      	bxhi	lr
 8000206:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800020a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800020e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000212:	bf18      	it	ne
 8000214:	4240      	negne	r0, r0
 8000216:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800021a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800021e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000222:	bf18      	it	ne
 8000224:	4249      	negne	r1, r1
 8000226:	ea92 0f03 	teq	r2, r3
 800022a:	d03f      	beq.n	80002ac <__addsf3+0xd8>
 800022c:	f1a2 0201 	sub.w	r2, r2, #1
 8000230:	fa41 fc03 	asr.w	ip, r1, r3
 8000234:	eb10 000c 	adds.w	r0, r0, ip
 8000238:	f1c3 0320 	rsb	r3, r3, #32
 800023c:	fa01 f103 	lsl.w	r1, r1, r3
 8000240:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000244:	d502      	bpl.n	800024c <__addsf3+0x78>
 8000246:	4249      	negs	r1, r1
 8000248:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800024c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000250:	d313      	bcc.n	800027a <__addsf3+0xa6>
 8000252:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000256:	d306      	bcc.n	8000266 <__addsf3+0x92>
 8000258:	0840      	lsrs	r0, r0, #1
 800025a:	ea4f 0131 	mov.w	r1, r1, rrx
 800025e:	f102 0201 	add.w	r2, r2, #1
 8000262:	2afe      	cmp	r2, #254	; 0xfe
 8000264:	d251      	bcs.n	800030a <__addsf3+0x136>
 8000266:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800026a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800026e:	bf08      	it	eq
 8000270:	f020 0001 	biceq.w	r0, r0, #1
 8000274:	ea40 0003 	orr.w	r0, r0, r3
 8000278:	4770      	bx	lr
 800027a:	0049      	lsls	r1, r1, #1
 800027c:	eb40 0000 	adc.w	r0, r0, r0
 8000280:	3a01      	subs	r2, #1
 8000282:	bf28      	it	cs
 8000284:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000288:	d2ed      	bcs.n	8000266 <__addsf3+0x92>
 800028a:	fab0 fc80 	clz	ip, r0
 800028e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000292:	ebb2 020c 	subs.w	r2, r2, ip
 8000296:	fa00 f00c 	lsl.w	r0, r0, ip
 800029a:	bfaa      	itet	ge
 800029c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002a0:	4252      	neglt	r2, r2
 80002a2:	4318      	orrge	r0, r3
 80002a4:	bfbc      	itt	lt
 80002a6:	40d0      	lsrlt	r0, r2
 80002a8:	4318      	orrlt	r0, r3
 80002aa:	4770      	bx	lr
 80002ac:	f092 0f00 	teq	r2, #0
 80002b0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002b4:	bf06      	itte	eq
 80002b6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002ba:	3201      	addeq	r2, #1
 80002bc:	3b01      	subne	r3, #1
 80002be:	e7b5      	b.n	800022c <__addsf3+0x58>
 80002c0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002c4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80002c8:	bf18      	it	ne
 80002ca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002ce:	d021      	beq.n	8000314 <__addsf3+0x140>
 80002d0:	ea92 0f03 	teq	r2, r3
 80002d4:	d004      	beq.n	80002e0 <__addsf3+0x10c>
 80002d6:	f092 0f00 	teq	r2, #0
 80002da:	bf08      	it	eq
 80002dc:	4608      	moveq	r0, r1
 80002de:	4770      	bx	lr
 80002e0:	ea90 0f01 	teq	r0, r1
 80002e4:	bf1c      	itt	ne
 80002e6:	2000      	movne	r0, #0
 80002e8:	4770      	bxne	lr
 80002ea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002ee:	d104      	bne.n	80002fa <__addsf3+0x126>
 80002f0:	0040      	lsls	r0, r0, #1
 80002f2:	bf28      	it	cs
 80002f4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002f8:	4770      	bx	lr
 80002fa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002fe:	bf3c      	itt	cc
 8000300:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000304:	4770      	bxcc	lr
 8000306:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800030a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800030e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000312:	4770      	bx	lr
 8000314:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000318:	bf16      	itet	ne
 800031a:	4608      	movne	r0, r1
 800031c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000320:	4601      	movne	r1, r0
 8000322:	0242      	lsls	r2, r0, #9
 8000324:	bf06      	itte	eq
 8000326:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800032a:	ea90 0f01 	teqeq	r0, r1
 800032e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000332:	4770      	bx	lr

08000334 <__aeabi_ui2f>:
 8000334:	f04f 0300 	mov.w	r3, #0
 8000338:	e004      	b.n	8000344 <__aeabi_i2f+0x8>
 800033a:	bf00      	nop

0800033c <__aeabi_i2f>:
 800033c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000340:	bf48      	it	mi
 8000342:	4240      	negmi	r0, r0
 8000344:	ea5f 0c00 	movs.w	ip, r0
 8000348:	bf08      	it	eq
 800034a:	4770      	bxeq	lr
 800034c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000350:	4601      	mov	r1, r0
 8000352:	f04f 0000 	mov.w	r0, #0
 8000356:	e01c      	b.n	8000392 <__aeabi_l2f+0x2a>

08000358 <__aeabi_ul2f>:
 8000358:	ea50 0201 	orrs.w	r2, r0, r1
 800035c:	bf08      	it	eq
 800035e:	4770      	bxeq	lr
 8000360:	f04f 0300 	mov.w	r3, #0
 8000364:	e00a      	b.n	800037c <__aeabi_l2f+0x14>
 8000366:	bf00      	nop

08000368 <__aeabi_l2f>:
 8000368:	ea50 0201 	orrs.w	r2, r0, r1
 800036c:	bf08      	it	eq
 800036e:	4770      	bxeq	lr
 8000370:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000374:	d502      	bpl.n	800037c <__aeabi_l2f+0x14>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	ea5f 0c01 	movs.w	ip, r1
 8000380:	bf02      	ittt	eq
 8000382:	4684      	moveq	ip, r0
 8000384:	4601      	moveq	r1, r0
 8000386:	2000      	moveq	r0, #0
 8000388:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800038c:	bf08      	it	eq
 800038e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000392:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000396:	fabc f28c 	clz	r2, ip
 800039a:	3a08      	subs	r2, #8
 800039c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003a0:	db10      	blt.n	80003c4 <__aeabi_l2f+0x5c>
 80003a2:	fa01 fc02 	lsl.w	ip, r1, r2
 80003a6:	4463      	add	r3, ip
 80003a8:	fa00 fc02 	lsl.w	ip, r0, r2
 80003ac:	f1c2 0220 	rsb	r2, r2, #32
 80003b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b4:	fa20 f202 	lsr.w	r2, r0, r2
 80003b8:	eb43 0002 	adc.w	r0, r3, r2
 80003bc:	bf08      	it	eq
 80003be:	f020 0001 	biceq.w	r0, r0, #1
 80003c2:	4770      	bx	lr
 80003c4:	f102 0220 	add.w	r2, r2, #32
 80003c8:	fa01 fc02 	lsl.w	ip, r1, r2
 80003cc:	f1c2 0220 	rsb	r2, r2, #32
 80003d0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80003d4:	fa21 f202 	lsr.w	r2, r1, r2
 80003d8:	eb43 0002 	adc.w	r0, r3, r2
 80003dc:	bf08      	it	eq
 80003de:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003e2:	4770      	bx	lr

080003e4 <__aeabi_fmul>:
 80003e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80003e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003ec:	bf1e      	ittt	ne
 80003ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003f2:	ea92 0f0c 	teqne	r2, ip
 80003f6:	ea93 0f0c 	teqne	r3, ip
 80003fa:	d06f      	beq.n	80004dc <__aeabi_fmul+0xf8>
 80003fc:	441a      	add	r2, r3
 80003fe:	ea80 0c01 	eor.w	ip, r0, r1
 8000402:	0240      	lsls	r0, r0, #9
 8000404:	bf18      	it	ne
 8000406:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800040a:	d01e      	beq.n	800044a <__aeabi_fmul+0x66>
 800040c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000410:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000414:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000418:	fba0 3101 	umull	r3, r1, r0, r1
 800041c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000420:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000424:	bf3e      	ittt	cc
 8000426:	0049      	lslcc	r1, r1, #1
 8000428:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800042c:	005b      	lslcc	r3, r3, #1
 800042e:	ea40 0001 	orr.w	r0, r0, r1
 8000432:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000436:	2afd      	cmp	r2, #253	; 0xfd
 8000438:	d81d      	bhi.n	8000476 <__aeabi_fmul+0x92>
 800043a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800043e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000442:	bf08      	it	eq
 8000444:	f020 0001 	biceq.w	r0, r0, #1
 8000448:	4770      	bx	lr
 800044a:	f090 0f00 	teq	r0, #0
 800044e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000452:	bf08      	it	eq
 8000454:	0249      	lsleq	r1, r1, #9
 8000456:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800045a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800045e:	3a7f      	subs	r2, #127	; 0x7f
 8000460:	bfc2      	ittt	gt
 8000462:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000466:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800046a:	4770      	bxgt	lr
 800046c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000470:	f04f 0300 	mov.w	r3, #0
 8000474:	3a01      	subs	r2, #1
 8000476:	dc5d      	bgt.n	8000534 <__aeabi_fmul+0x150>
 8000478:	f112 0f19 	cmn.w	r2, #25
 800047c:	bfdc      	itt	le
 800047e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000482:	4770      	bxle	lr
 8000484:	f1c2 0200 	rsb	r2, r2, #0
 8000488:	0041      	lsls	r1, r0, #1
 800048a:	fa21 f102 	lsr.w	r1, r1, r2
 800048e:	f1c2 0220 	rsb	r2, r2, #32
 8000492:	fa00 fc02 	lsl.w	ip, r0, r2
 8000496:	ea5f 0031 	movs.w	r0, r1, rrx
 800049a:	f140 0000 	adc.w	r0, r0, #0
 800049e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80004a2:	bf08      	it	eq
 80004a4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004a8:	4770      	bx	lr
 80004aa:	f092 0f00 	teq	r2, #0
 80004ae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80004b2:	bf02      	ittt	eq
 80004b4:	0040      	lsleq	r0, r0, #1
 80004b6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80004ba:	3a01      	subeq	r2, #1
 80004bc:	d0f9      	beq.n	80004b2 <__aeabi_fmul+0xce>
 80004be:	ea40 000c 	orr.w	r0, r0, ip
 80004c2:	f093 0f00 	teq	r3, #0
 80004c6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80004ca:	bf02      	ittt	eq
 80004cc:	0049      	lsleq	r1, r1, #1
 80004ce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80004d2:	3b01      	subeq	r3, #1
 80004d4:	d0f9      	beq.n	80004ca <__aeabi_fmul+0xe6>
 80004d6:	ea41 010c 	orr.w	r1, r1, ip
 80004da:	e78f      	b.n	80003fc <__aeabi_fmul+0x18>
 80004dc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004e0:	ea92 0f0c 	teq	r2, ip
 80004e4:	bf18      	it	ne
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d00a      	beq.n	8000502 <__aeabi_fmul+0x11e>
 80004ec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004f0:	bf18      	it	ne
 80004f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004f6:	d1d8      	bne.n	80004aa <__aeabi_fmul+0xc6>
 80004f8:	ea80 0001 	eor.w	r0, r0, r1
 80004fc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000500:	4770      	bx	lr
 8000502:	f090 0f00 	teq	r0, #0
 8000506:	bf17      	itett	ne
 8000508:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800050c:	4608      	moveq	r0, r1
 800050e:	f091 0f00 	teqne	r1, #0
 8000512:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000516:	d014      	beq.n	8000542 <__aeabi_fmul+0x15e>
 8000518:	ea92 0f0c 	teq	r2, ip
 800051c:	d101      	bne.n	8000522 <__aeabi_fmul+0x13e>
 800051e:	0242      	lsls	r2, r0, #9
 8000520:	d10f      	bne.n	8000542 <__aeabi_fmul+0x15e>
 8000522:	ea93 0f0c 	teq	r3, ip
 8000526:	d103      	bne.n	8000530 <__aeabi_fmul+0x14c>
 8000528:	024b      	lsls	r3, r1, #9
 800052a:	bf18      	it	ne
 800052c:	4608      	movne	r0, r1
 800052e:	d108      	bne.n	8000542 <__aeabi_fmul+0x15e>
 8000530:	ea80 0001 	eor.w	r0, r0, r1
 8000534:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000538:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800053c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000540:	4770      	bx	lr
 8000542:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000546:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800054a:	4770      	bx	lr

0800054c <__aeabi_fdiv>:
 800054c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000550:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000554:	bf1e      	ittt	ne
 8000556:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800055a:	ea92 0f0c 	teqne	r2, ip
 800055e:	ea93 0f0c 	teqne	r3, ip
 8000562:	d069      	beq.n	8000638 <__aeabi_fdiv+0xec>
 8000564:	eba2 0203 	sub.w	r2, r2, r3
 8000568:	ea80 0c01 	eor.w	ip, r0, r1
 800056c:	0249      	lsls	r1, r1, #9
 800056e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000572:	d037      	beq.n	80005e4 <__aeabi_fdiv+0x98>
 8000574:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000578:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800057c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000580:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000584:	428b      	cmp	r3, r1
 8000586:	bf38      	it	cc
 8000588:	005b      	lslcc	r3, r3, #1
 800058a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800058e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000592:	428b      	cmp	r3, r1
 8000594:	bf24      	itt	cs
 8000596:	1a5b      	subcs	r3, r3, r1
 8000598:	ea40 000c 	orrcs.w	r0, r0, ip
 800059c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80005a0:	bf24      	itt	cs
 80005a2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80005a6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80005aa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80005ae:	bf24      	itt	cs
 80005b0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80005b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80005b8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80005bc:	bf24      	itt	cs
 80005be:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80005c2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80005c6:	011b      	lsls	r3, r3, #4
 80005c8:	bf18      	it	ne
 80005ca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80005ce:	d1e0      	bne.n	8000592 <__aeabi_fdiv+0x46>
 80005d0:	2afd      	cmp	r2, #253	; 0xfd
 80005d2:	f63f af50 	bhi.w	8000476 <__aeabi_fmul+0x92>
 80005d6:	428b      	cmp	r3, r1
 80005d8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80005dc:	bf08      	it	eq
 80005de:	f020 0001 	biceq.w	r0, r0, #1
 80005e2:	4770      	bx	lr
 80005e4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80005e8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005ec:	327f      	adds	r2, #127	; 0x7f
 80005ee:	bfc2      	ittt	gt
 80005f0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80005f4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005f8:	4770      	bxgt	lr
 80005fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005fe:	f04f 0300 	mov.w	r3, #0
 8000602:	3a01      	subs	r2, #1
 8000604:	e737      	b.n	8000476 <__aeabi_fmul+0x92>
 8000606:	f092 0f00 	teq	r2, #0
 800060a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800060e:	bf02      	ittt	eq
 8000610:	0040      	lsleq	r0, r0, #1
 8000612:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000616:	3a01      	subeq	r2, #1
 8000618:	d0f9      	beq.n	800060e <__aeabi_fdiv+0xc2>
 800061a:	ea40 000c 	orr.w	r0, r0, ip
 800061e:	f093 0f00 	teq	r3, #0
 8000622:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000626:	bf02      	ittt	eq
 8000628:	0049      	lsleq	r1, r1, #1
 800062a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800062e:	3b01      	subeq	r3, #1
 8000630:	d0f9      	beq.n	8000626 <__aeabi_fdiv+0xda>
 8000632:	ea41 010c 	orr.w	r1, r1, ip
 8000636:	e795      	b.n	8000564 <__aeabi_fdiv+0x18>
 8000638:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800063c:	ea92 0f0c 	teq	r2, ip
 8000640:	d108      	bne.n	8000654 <__aeabi_fdiv+0x108>
 8000642:	0242      	lsls	r2, r0, #9
 8000644:	f47f af7d 	bne.w	8000542 <__aeabi_fmul+0x15e>
 8000648:	ea93 0f0c 	teq	r3, ip
 800064c:	f47f af70 	bne.w	8000530 <__aeabi_fmul+0x14c>
 8000650:	4608      	mov	r0, r1
 8000652:	e776      	b.n	8000542 <__aeabi_fmul+0x15e>
 8000654:	ea93 0f0c 	teq	r3, ip
 8000658:	d104      	bne.n	8000664 <__aeabi_fdiv+0x118>
 800065a:	024b      	lsls	r3, r1, #9
 800065c:	f43f af4c 	beq.w	80004f8 <__aeabi_fmul+0x114>
 8000660:	4608      	mov	r0, r1
 8000662:	e76e      	b.n	8000542 <__aeabi_fmul+0x15e>
 8000664:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000668:	bf18      	it	ne
 800066a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800066e:	d1ca      	bne.n	8000606 <__aeabi_fdiv+0xba>
 8000670:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000674:	f47f af5c 	bne.w	8000530 <__aeabi_fmul+0x14c>
 8000678:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800067c:	f47f af3c 	bne.w	80004f8 <__aeabi_fmul+0x114>
 8000680:	e75f      	b.n	8000542 <__aeabi_fmul+0x15e>
 8000682:	bf00      	nop

08000684 <__gesf2>:
 8000684:	f04f 3cff 	mov.w	ip, #4294967295
 8000688:	e006      	b.n	8000698 <__cmpsf2+0x4>
 800068a:	bf00      	nop

0800068c <__lesf2>:
 800068c:	f04f 0c01 	mov.w	ip, #1
 8000690:	e002      	b.n	8000698 <__cmpsf2+0x4>
 8000692:	bf00      	nop

08000694 <__cmpsf2>:
 8000694:	f04f 0c01 	mov.w	ip, #1
 8000698:	f84d cd04 	str.w	ip, [sp, #-4]!
 800069c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006a0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006a4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006a8:	bf18      	it	ne
 80006aa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006ae:	d011      	beq.n	80006d4 <__cmpsf2+0x40>
 80006b0:	b001      	add	sp, #4
 80006b2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80006b6:	bf18      	it	ne
 80006b8:	ea90 0f01 	teqne	r0, r1
 80006bc:	bf58      	it	pl
 80006be:	ebb2 0003 	subspl.w	r0, r2, r3
 80006c2:	bf88      	it	hi
 80006c4:	17c8      	asrhi	r0, r1, #31
 80006c6:	bf38      	it	cc
 80006c8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80006cc:	bf18      	it	ne
 80006ce:	f040 0001 	orrne.w	r0, r0, #1
 80006d2:	4770      	bx	lr
 80006d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006d8:	d102      	bne.n	80006e0 <__cmpsf2+0x4c>
 80006da:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80006de:	d105      	bne.n	80006ec <__cmpsf2+0x58>
 80006e0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80006e4:	d1e4      	bne.n	80006b0 <__cmpsf2+0x1c>
 80006e6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80006ea:	d0e1      	beq.n	80006b0 <__cmpsf2+0x1c>
 80006ec:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop

080006f4 <__aeabi_cfrcmple>:
 80006f4:	4684      	mov	ip, r0
 80006f6:	4608      	mov	r0, r1
 80006f8:	4661      	mov	r1, ip
 80006fa:	e7ff      	b.n	80006fc <__aeabi_cfcmpeq>

080006fc <__aeabi_cfcmpeq>:
 80006fc:	b50f      	push	{r0, r1, r2, r3, lr}
 80006fe:	f7ff ffc9 	bl	8000694 <__cmpsf2>
 8000702:	2800      	cmp	r0, #0
 8000704:	bf48      	it	mi
 8000706:	f110 0f00 	cmnmi.w	r0, #0
 800070a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800070c <__aeabi_fcmpeq>:
 800070c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000710:	f7ff fff4 	bl	80006fc <__aeabi_cfcmpeq>
 8000714:	bf0c      	ite	eq
 8000716:	2001      	moveq	r0, #1
 8000718:	2000      	movne	r0, #0
 800071a:	f85d fb08 	ldr.w	pc, [sp], #8
 800071e:	bf00      	nop

08000720 <__aeabi_fcmplt>:
 8000720:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000724:	f7ff ffea 	bl	80006fc <__aeabi_cfcmpeq>
 8000728:	bf34      	ite	cc
 800072a:	2001      	movcc	r0, #1
 800072c:	2000      	movcs	r0, #0
 800072e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000732:	bf00      	nop

08000734 <__aeabi_fcmple>:
 8000734:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000738:	f7ff ffe0 	bl	80006fc <__aeabi_cfcmpeq>
 800073c:	bf94      	ite	ls
 800073e:	2001      	movls	r0, #1
 8000740:	2000      	movhi	r0, #0
 8000742:	f85d fb08 	ldr.w	pc, [sp], #8
 8000746:	bf00      	nop

08000748 <__aeabi_fcmpge>:
 8000748:	f84d ed08 	str.w	lr, [sp, #-8]!
 800074c:	f7ff ffd2 	bl	80006f4 <__aeabi_cfrcmple>
 8000750:	bf94      	ite	ls
 8000752:	2001      	movls	r0, #1
 8000754:	2000      	movhi	r0, #0
 8000756:	f85d fb08 	ldr.w	pc, [sp], #8
 800075a:	bf00      	nop

0800075c <__aeabi_fcmpgt>:
 800075c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000760:	f7ff ffc8 	bl	80006f4 <__aeabi_cfrcmple>
 8000764:	bf34      	ite	cc
 8000766:	2001      	movcc	r0, #1
 8000768:	2000      	movcs	r0, #0
 800076a:	f85d fb08 	ldr.w	pc, [sp], #8
 800076e:	bf00      	nop

08000770 <__aeabi_f2iz>:
 8000770:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000774:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000778:	d30f      	bcc.n	800079a <__aeabi_f2iz+0x2a>
 800077a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800077e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000782:	d90d      	bls.n	80007a0 <__aeabi_f2iz+0x30>
 8000784:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000788:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800078c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000790:	fa23 f002 	lsr.w	r0, r3, r2
 8000794:	bf18      	it	ne
 8000796:	4240      	negne	r0, r0
 8000798:	4770      	bx	lr
 800079a:	f04f 0000 	mov.w	r0, #0
 800079e:	4770      	bx	lr
 80007a0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80007a4:	d101      	bne.n	80007aa <__aeabi_f2iz+0x3a>
 80007a6:	0242      	lsls	r2, r0, #9
 80007a8:	d105      	bne.n	80007b6 <__aeabi_f2iz+0x46>
 80007aa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80007ae:	bf08      	it	eq
 80007b0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80007b4:	4770      	bx	lr
 80007b6:	f04f 0000 	mov.w	r0, #0
 80007ba:	4770      	bx	lr

080007bc <predict>:
};

float input[X] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,150,253,202,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,251,251,253,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,197,251,251,253,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,190,251,251,251,253,169,109,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,251,251,251,251,253,251,251,220,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,182,255,253,253,253,253,234,222,253,253,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,221,253,251,251,251,147,77,62,128,251,251,105,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,231,251,253,251,220,137,10,0,0,31,230,251,243,113,5,0,0,0,0,0,0,0,0,0,0,0,0,37,251,251,253,188,20,0,0,0,0,0,109,251,253,251,35,0,0,0,0,0,0,0,0,0,0,0,0,37,251,251,201,30,0,0,0,0,0,0,31,200,253,251,35,0,0,0,0,0,0,0,0,0,0,0,0,37,253,253,0,0,0,0,0,0,0,0,32,202,255,253,164,0,0,0,0,0,0,0,0,0,0,0,0,140,251,251,0,0,0,0,0,0,0,0,109,251,253,251,35,0,0,0,0,0,0,0,0,0,0,0,0,217,251,251,0,0,0,0,0,0,21,63,231,251,253,230,30,0,0,0,0,0,0,0,0,0,0,0,0,217,251,251,0,0,0,0,0,0,144,251,251,251,221,61,0,0,0,0,0,0,0,0,0,0,0,0,0,217,251,251,0,0,0,0,0,182,221,251,251,251,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,218,253,253,73,73,228,253,253,255,253,253,253,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,113,251,251,253,251,251,251,251,253,251,251,251,147,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,230,251,253,251,251,251,251,253,230,189,35,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,142,253,251,251,251,251,253,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,174,251,173,71,72,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};


uint8_t predict(uint8_t cmd, uint8_t subc, uint8_t len, uint8_t *in) {
 80007bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007c0:	b095      	sub	sp, #84	; 0x54
    float h[H] = {0};
 80007c2:	2228      	movs	r2, #40	; 0x28
 80007c4:	2100      	movs	r1, #0
 80007c6:	4668      	mov	r0, sp
 80007c8:	f001 fa4c 	bl	8001c64 <memset>
    float y[Y] = {0};
 80007cc:	2228      	movs	r2, #40	; 0x28
 80007ce:	2100      	movs	r1, #0
 80007d0:	eb0d 0002 	add.w	r0, sp, r2
 80007d4:	f001 fa46 	bl	8001c64 <memset>

    // h := w'
    trigger_high();
 80007d8:	f000 fa3c 	bl	8000c54 <trigger_high>
    trigger_low();
 80007dc:	f000 fa41 	bl	8000c62 <trigger_low>
    for (int j = 0; j < H; j++) {
 80007e0:	4e2b      	ldr	r6, [pc, #172]	; (8000890 <predict+0xd4>)
    trigger_low();
 80007e2:	466f      	mov	r7, sp
 80007e4:	f04f 0800 	mov.w	r8, #0
        for (int i = 0; i < X; i++) {
            h[j] += w[j * X + i] * input[i];
        }
        // Apply activation function (e.g., logistic)
        h[j] = 1.0f / (1.0f + expf(-h[j]));
 80007e8:	f04f 597e 	mov.w	r9, #1065353216	; 0x3f800000
        for (int i = 0; i < X; i++) {
 80007ec:	f857 4b04 	ldr.w	r4, [r7], #4
 80007f0:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 8000894 <predict+0xd8>
uint8_t predict(uint8_t cmd, uint8_t subc, uint8_t len, uint8_t *in) {
 80007f4:	46b2      	mov	sl, r6
        for (int i = 0; i < X; i++) {
 80007f6:	2500      	movs	r5, #0
            h[j] += w[j * X + i] * input[i];
 80007f8:	f85b 1b04 	ldr.w	r1, [fp], #4
 80007fc:	f85a 0b04 	ldr.w	r0, [sl], #4
 8000800:	f7ff fdf0 	bl	80003e4 <__aeabi_fmul>
 8000804:	4601      	mov	r1, r0
 8000806:	4620      	mov	r0, r4
 8000808:	f7ff fce4 	bl	80001d4 <__addsf3>
        for (int i = 0; i < X; i++) {
 800080c:	3501      	adds	r5, #1
 800080e:	f5b5 7f44 	cmp.w	r5, #784	; 0x310
            h[j] += w[j * X + i] * input[i];
 8000812:	4604      	mov	r4, r0
        for (int i = 0; i < X; i++) {
 8000814:	d1f0      	bne.n	80007f8 <predict+0x3c>
        h[j] = 1.0f / (1.0f + expf(-h[j]));
 8000816:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800081a:	f001 f899 	bl	8001950 <expf>
 800081e:	4649      	mov	r1, r9
 8000820:	f7ff fcd8 	bl	80001d4 <__addsf3>
 8000824:	4601      	mov	r1, r0
 8000826:	4648      	mov	r0, r9
 8000828:	f7ff fe90 	bl	800054c <__aeabi_fdiv>
    for (int j = 0; j < H; j++) {
 800082c:	f508 7844 	add.w	r8, r8, #784	; 0x310
 8000830:	f5b8 5ff5 	cmp.w	r8, #7840	; 0x1ea0
        h[j] = 1.0f / (1.0f + expf(-h[j]));
 8000834:	f847 0c04 	str.w	r0, [r7, #-4]
    for (int j = 0; j < H; j++) {
 8000838:	f506 6644 	add.w	r6, r6, #3136	; 0xc40
 800083c:	d1d6      	bne.n	80007ec <predict+0x30>
 800083e:	4e16      	ldr	r6, [pc, #88]	; (8000898 <predict+0xdc>)
 8000840:	af0a      	add	r7, sp, #40	; 0x28
 8000842:	f04f 0800 	mov.w	r8, #0
    }
    

    // y := vh
    for (int k = 0; k < Y; k++) {
        for (int j = 0; j < H; j++) {
 8000846:	f857 4b04 	ldr.w	r4, [r7], #4
    trigger_low();
 800084a:	46ea      	mov	sl, sp
 800084c:	46b1      	mov	r9, r6
        for (int j = 0; j < H; j++) {
 800084e:	2500      	movs	r5, #0

            y[k] += v[k * H + j] * h[j];
 8000850:	f85a 1b04 	ldr.w	r1, [sl], #4
 8000854:	f859 0b04 	ldr.w	r0, [r9], #4
 8000858:	f7ff fdc4 	bl	80003e4 <__aeabi_fmul>
 800085c:	4601      	mov	r1, r0
 800085e:	4620      	mov	r0, r4
 8000860:	f7ff fcb8 	bl	80001d4 <__addsf3>
        for (int j = 0; j < H; j++) {
 8000864:	3501      	adds	r5, #1
 8000866:	2d0a      	cmp	r5, #10
            y[k] += v[k * H + j] * h[j];
 8000868:	4604      	mov	r4, r0
        for (int j = 0; j < H; j++) {
 800086a:	d1f1      	bne.n	8000850 <predict+0x94>
    for (int k = 0; k < Y; k++) {
 800086c:	f108 080a 	add.w	r8, r8, #10
 8000870:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
 8000874:	f847 0c04 	str.w	r0, [r7, #-4]
 8000878:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800087c:	d1e3      	bne.n	8000846 <predict+0x8a>
   
        }
    }

    simpleserial_put('r', Y * sizeof(float), (uint8_t*)y);
 800087e:	aa0a      	add	r2, sp, #40	; 0x28
 8000880:	2128      	movs	r1, #40	; 0x28
 8000882:	2072      	movs	r0, #114	; 0x72
 8000884:	f000 f880 	bl	8000988 <simpleserial_put>

    return 0x00;
}
 8000888:	2000      	movs	r0, #0
 800088a:	b015      	add	sp, #84	; 0x54
 800088c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000890:	20000dd0 	.word	0x20000dd0
 8000894:	20000190 	.word	0x20000190
 8000898:	20000000 	.word	0x20000000

0800089c <main>:

int main(void) {
 800089c:	b508      	push	{r3, lr}
    //Initialize the weights arrays with the learned values
    platform_init();
 800089e:	f000 f937 	bl	8000b10 <platform_init>
    init_uart();
 80008a2:	f000 f975 	bl	8000b90 <init_uart>
    trigger_setup();
 80008a6:	f000 f9b1 	bl	8000c0c <trigger_setup>
    simpleserial_init();
 80008aa:	f000 f85b 	bl	8000964 <simpleserial_init>

    // Add a command to the SimpleSerial module
    simpleserial_addcmd('a', 0, predict);
 80008ae:	4a04      	ldr	r2, [pc, #16]	; (80008c0 <main+0x24>)
 80008b0:	2100      	movs	r1, #0
 80008b2:	2061      	movs	r0, #97	; 0x61
 80008b4:	f000 f83c 	bl	8000930 <simpleserial_addcmd>

    while(1) {
        simpleserial_get();
 80008b8:	f000 f8bc 	bl	8000a34 <simpleserial_get>
    while(1) {
 80008bc:	e7fc      	b.n	80008b8 <main+0x1c>
 80008be:	bf00      	nop
 80008c0:	080007bd 	.word	0x080007bd

080008c4 <ss_crc>:


// 0xA6 formerly 
#define CW_CRC 0x4D 
uint8_t ss_crc(uint8_t *buf, uint8_t len)
{
 80008c4:	4603      	mov	r3, r0
	unsigned int k = 0;
	uint8_t crc = 0x00;
	while (len--) {
 80008c6:	4401      	add	r1, r0
	uint8_t crc = 0x00;
 80008c8:	2000      	movs	r0, #0
	while (len--) {
 80008ca:	428b      	cmp	r3, r1
 80008cc:	d100      	bne.n	80008d0 <ss_crc+0xc>
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
		}
	}
	return crc;

}
 80008ce:	4770      	bx	lr
		crc ^= *buf++;
 80008d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80008d4:	4050      	eors	r0, r2
 80008d6:	2208      	movs	r2, #8
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 80008d8:	f010 0f80 	tst.w	r0, #128	; 0x80
 80008dc:	ea4f 0040 	mov.w	r0, r0, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	f080 004d 	eorne.w	r0, r0, #77	; 0x4d
		for (k = 0; k < 8; k++) {
 80008e6:	3a01      	subs	r2, #1
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 80008e8:	b2c0      	uxtb	r0, r0
		for (k = 0; k < 8; k++) {
 80008ea:	d1f5      	bne.n	80008d8 <ss_crc+0x14>
 80008ec:	e7ed      	b.n	80008ca <ss_crc+0x6>

080008ee <stuff_data>:
    return 0x00;

}

uint8_t stuff_data(uint8_t *buf, uint8_t len)
{
 80008ee:	b530      	push	{r4, r5, lr}
	uint8_t i = 1;
	uint8_t last = 0;
 80008f0:	2200      	movs	r2, #0
 80008f2:	4604      	mov	r4, r0
	uint8_t i = 1;
 80008f4:	2301      	movs	r3, #1
	for (; i < len; i++) {
 80008f6:	428b      	cmp	r3, r1
 80008f8:	d301      	bcc.n	80008fe <stuff_data+0x10>
			buf[last] = i - last;
			last = i;
		}
	}
	return 0x00;
}
 80008fa:	2000      	movs	r0, #0
 80008fc:	bd30      	pop	{r4, r5, pc}
		if (buf[i] == FRAME_BYTE) {
 80008fe:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8000902:	b915      	cbnz	r5, 800090a <stuff_data+0x1c>
			buf[last] = i - last;
 8000904:	1a9d      	subs	r5, r3, r2
 8000906:	5485      	strb	r5, [r0, r2]
 8000908:	461a      	mov	r2, r3
	for (; i < len; i++) {
 800090a:	3301      	adds	r3, #1
 800090c:	b2db      	uxtb	r3, r3
 800090e:	e7f2      	b.n	80008f6 <stuff_data+0x8>

08000910 <unstuff_data>:

uint8_t unstuff_data(uint8_t *buf, uint8_t len)
{
 8000910:	b510      	push	{r4, lr}
	uint8_t next = buf[0];
 8000912:	7802      	ldrb	r2, [r0, #0]
	buf[0] = 0x00;
 8000914:	2400      	movs	r4, #0
{
 8000916:	4603      	mov	r3, r0
	buf[0] = 0x00;
 8000918:	7004      	strb	r4, [r0, #0]
	uint8_t next = buf[0];
 800091a:	4610      	mov	r0, r2
	//len -= 1;
	uint8_t tmp = next;
	while ((next < len) && tmp != 0) {
 800091c:	4288      	cmp	r0, r1
 800091e:	d200      	bcs.n	8000922 <unstuff_data+0x12>
 8000920:	b902      	cbnz	r2, 8000924 <unstuff_data+0x14>
		tmp = buf[next];
		buf[next] = FRAME_BYTE;
		next += tmp;
	}
	return next;
}
 8000922:	bd10      	pop	{r4, pc}
		tmp = buf[next];
 8000924:	5c1a      	ldrb	r2, [r3, r0]
		buf[next] = FRAME_BYTE;
 8000926:	541c      	strb	r4, [r3, r0]
		next += tmp;
 8000928:	4410      	add	r0, r2
 800092a:	b2c0      	uxtb	r0, r0
 800092c:	e7f6      	b.n	800091c <unstuff_data+0xc>
 800092e:	0000      	movs	r0, r0

08000930 <simpleserial_addcmd>:
	simpleserial_addcmd('v', 0, check_version);
    simpleserial_addcmd('w', 0, ss_get_commands);
}

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t, uint8_t, uint8_t, uint8_t*))
{
 8000930:	b538      	push	{r3, r4, r5, lr}
	if(num_commands >= MAX_SS_CMDS) {
 8000932:	4d0b      	ldr	r5, [pc, #44]	; (8000960 <simpleserial_addcmd+0x30>)
 8000934:	682b      	ldr	r3, [r5, #0]
 8000936:	2b0f      	cmp	r3, #15
 8000938:	dd04      	ble.n	8000944 <simpleserial_addcmd+0x14>
		putch('a');
 800093a:	2061      	movs	r0, #97	; 0x61
		return 1;
	}

	if(len >= MAX_SS_LEN) {
		putch('b');
 800093c:	f000 f9b2 	bl	8000ca4 <putch>
		return 1;
 8000940:	2001      	movs	r0, #1
	commands[num_commands].len = len;
	commands[num_commands].fp  = fp;
	num_commands++;

	return 0;
}
 8000942:	bd38      	pop	{r3, r4, r5, pc}
	if(len >= MAX_SS_LEN) {
 8000944:	29ff      	cmp	r1, #255	; 0xff
 8000946:	d901      	bls.n	800094c <simpleserial_addcmd+0x1c>
		putch('b');
 8000948:	2062      	movs	r0, #98	; 0x62
 800094a:	e7f7      	b.n	800093c <simpleserial_addcmd+0xc>
	commands[num_commands].c   = c;
 800094c:	240c      	movs	r4, #12
 800094e:	fb04 5403 	mla	r4, r4, r3, r5
	num_commands++;
 8000952:	3301      	adds	r3, #1
	commands[num_commands].c   = c;
 8000954:	7120      	strb	r0, [r4, #4]
	commands[num_commands].fp  = fp;
 8000956:	e9c4 1202 	strd	r1, r2, [r4, #8]
	num_commands++;
 800095a:	602b      	str	r3, [r5, #0]
	return 0;
 800095c:	2000      	movs	r0, #0
 800095e:	e7f0      	b.n	8000942 <simpleserial_addcmd+0x12>
 8000960:	200088d4 	.word	0x200088d4

08000964 <simpleserial_init>:
{
 8000964:	b508      	push	{r3, lr}
	simpleserial_addcmd('v', 0, check_version);
 8000966:	4a06      	ldr	r2, [pc, #24]	; (8000980 <simpleserial_init+0x1c>)
 8000968:	2100      	movs	r1, #0
 800096a:	2076      	movs	r0, #118	; 0x76
 800096c:	f7ff ffe0 	bl	8000930 <simpleserial_addcmd>
}
 8000970:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    simpleserial_addcmd('w', 0, ss_get_commands);
 8000974:	4a03      	ldr	r2, [pc, #12]	; (8000984 <simpleserial_init+0x20>)
 8000976:	2100      	movs	r1, #0
 8000978:	2077      	movs	r0, #119	; 0x77
 800097a:	f7ff bfd9 	b.w	8000930 <simpleserial_addcmd>
 800097e:	bf00      	nop
 8000980:	080009df 	.word	0x080009df
 8000984:	080009fd 	.word	0x080009fd

08000988 <simpleserial_put>:
	simpleserial_put('e', 0x01, &err);
	return;
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 8000988:	b570      	push	{r4, r5, r6, lr}
 800098a:	b0c0      	sub	sp, #256	; 0x100
 800098c:	460c      	mov	r4, r1
	uint8_t data_buf[MAX_SS_LEN];
	data_buf[0] = 0x00;
 800098e:	2500      	movs	r5, #0
{
 8000990:	4611      	mov	r1, r2
	data_buf[1] = c;
 8000992:	f88d 0001 	strb.w	r0, [sp, #1]
	data_buf[2] = size;
	int i = 0;
	for (; i < size; i++) {
		data_buf[i + 3] = output[i];
 8000996:	4622      	mov	r2, r4
 8000998:	f10d 0003 	add.w	r0, sp, #3
	data_buf[2] = size;
 800099c:	f88d 4002 	strb.w	r4, [sp, #2]
	data_buf[0] = 0x00;
 80009a0:	f88d 5000 	strb.w	r5, [sp]
		data_buf[i + 3] = output[i];
 80009a4:	f001 f950 	bl	8001c48 <memcpy>
	}
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 80009a8:	1ca1      	adds	r1, r4, #2
 80009aa:	b2c9      	uxtb	r1, r1
 80009ac:	f10d 0001 	add.w	r0, sp, #1
 80009b0:	f7ff ff88 	bl	80008c4 <ss_crc>
 80009b4:	eb0d 0304 	add.w	r3, sp, r4
	data_buf[i + 4] = 0x00;
 80009b8:	1d26      	adds	r6, r4, #4
	stuff_data(data_buf, i + 5);
 80009ba:	1d61      	adds	r1, r4, #5
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 80009bc:	70d8      	strb	r0, [r3, #3]
	stuff_data(data_buf, i + 5);
 80009be:	b2c9      	uxtb	r1, r1
 80009c0:	4668      	mov	r0, sp
	data_buf[i + 4] = 0x00;
 80009c2:	f80d 5006 	strb.w	r5, [sp, r6]
	stuff_data(data_buf, i + 5);
 80009c6:	f7ff ff92 	bl	80008ee <stuff_data>
	for (int i = 0; i < size + 5; i++) {
 80009ca:	466c      	mov	r4, sp
		putch(data_buf[i]);
 80009cc:	f814 0b01 	ldrb.w	r0, [r4], #1
	for (int i = 0; i < size + 5; i++) {
 80009d0:	3501      	adds	r5, #1
		putch(data_buf[i]);
 80009d2:	f000 f967 	bl	8000ca4 <putch>
	for (int i = 0; i < size + 5; i++) {
 80009d6:	42ae      	cmp	r6, r5
 80009d8:	daf8      	bge.n	80009cc <simpleserial_put+0x44>
	}
}
 80009da:	b040      	add	sp, #256	; 0x100
 80009dc:	bd70      	pop	{r4, r5, r6, pc}

080009de <check_version>:
{
 80009de:	b507      	push	{r0, r1, r2, lr}
	uint8_t ver = SS_VER;
 80009e0:	2303      	movs	r3, #3
	simpleserial_put('r', 1, &ver);
 80009e2:	f10d 0207 	add.w	r2, sp, #7
 80009e6:	2101      	movs	r1, #1
 80009e8:	2072      	movs	r0, #114	; 0x72
	uint8_t ver = SS_VER;
 80009ea:	f88d 3007 	strb.w	r3, [sp, #7]
	simpleserial_put('r', 1, &ver);
 80009ee:	f7ff ffcb 	bl	8000988 <simpleserial_put>
}
 80009f2:	2000      	movs	r0, #0
 80009f4:	b003      	add	sp, #12
 80009f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80009fa:	0000      	movs	r0, r0

080009fc <ss_get_commands>:
{
 80009fc:	b530      	push	{r4, r5, lr}
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 80009fe:	480c      	ldr	r0, [pc, #48]	; (8000a30 <ss_get_commands+0x34>)
 8000a00:	7801      	ldrb	r1, [r0, #0]
{
 8000a02:	b085      	sub	sp, #20
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8000a04:	2200      	movs	r2, #0
        cmd_chars[i] = commands[i].c;
 8000a06:	240c      	movs	r4, #12
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8000a08:	b2d3      	uxtb	r3, r2
 8000a0a:	428b      	cmp	r3, r1
 8000a0c:	f102 0201 	add.w	r2, r2, #1
 8000a10:	db06      	blt.n	8000a20 <ss_get_commands+0x24>
    simpleserial_put('r', num_commands & 0xFF, (void *)cmd_chars);
 8000a12:	466a      	mov	r2, sp
 8000a14:	2072      	movs	r0, #114	; 0x72
 8000a16:	f7ff ffb7 	bl	8000988 <simpleserial_put>
}
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	b005      	add	sp, #20
 8000a1e:	bd30      	pop	{r4, r5, pc}
        cmd_chars[i] = commands[i].c;
 8000a20:	ad04      	add	r5, sp, #16
 8000a22:	441d      	add	r5, r3
 8000a24:	fb04 0303 	mla	r3, r4, r3, r0
 8000a28:	791b      	ldrb	r3, [r3, #4]
 8000a2a:	f805 3c10 	strb.w	r3, [r5, #-16]
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8000a2e:	e7eb      	b.n	8000a08 <ss_get_commands+0xc>
 8000a30:	200088d4 	.word	0x200088d4

08000a34 <simpleserial_get>:
{
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	b0c2      	sub	sp, #264	; 0x108
	uint8_t err = 0;
 8000a3a:	2500      	movs	r5, #0
 8000a3c:	ae02      	add	r6, sp, #8
 8000a3e:	f88d 5007 	strb.w	r5, [sp, #7]
	for (int i = 0; i < 4; i++) {
 8000a42:	4634      	mov	r4, r6
		data_buf[i] = getch(); //PTR, cmd, scmd, len
 8000a44:	f000 f914 	bl	8000c70 <getch>
 8000a48:	f806 0b01 	strb.w	r0, [r6], #1
		if (data_buf[i] == FRAME_BYTE) {
 8000a4c:	b958      	cbnz	r0, 8000a66 <simpleserial_get+0x32>
			err = SS_ERR_FRAME_BYTE;
 8000a4e:	2305      	movs	r3, #5
		err = SS_ERR_CRC;
 8000a50:	f88d 3007 	strb.w	r3, [sp, #7]
	simpleserial_put('e', 0x01, &err);
 8000a54:	f10d 0207 	add.w	r2, sp, #7
 8000a58:	2101      	movs	r1, #1
 8000a5a:	2065      	movs	r0, #101	; 0x65
 8000a5c:	f7ff ff94 	bl	8000988 <simpleserial_put>
}
 8000a60:	b042      	add	sp, #264	; 0x108
 8000a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (int i = 0; i < 4; i++) {
 8000a66:	3501      	adds	r5, #1
 8000a68:	2d04      	cmp	r5, #4
 8000a6a:	d1eb      	bne.n	8000a44 <simpleserial_get+0x10>
	uint8_t next_frame = unstuff_data(data_buf, 4);
 8000a6c:	4629      	mov	r1, r5
 8000a6e:	4620      	mov	r0, r4
 8000a70:	f7ff ff4e 	bl	8000910 <unstuff_data>
	for(c = 0; c < num_commands; c++)
 8000a74:	4f25      	ldr	r7, [pc, #148]	; (8000b0c <simpleserial_get+0xd8>)
		if(commands[c].c == data_buf[1])
 8000a76:	7861      	ldrb	r1, [r4, #1]
	for(c = 0; c < num_commands; c++)
 8000a78:	683a      	ldr	r2, [r7, #0]
	uint8_t next_frame = unstuff_data(data_buf, 4);
 8000a7a:	4680      	mov	r8, r0
	for(c = 0; c < num_commands; c++)
 8000a7c:	2300      	movs	r3, #0
		if(commands[c].c == data_buf[1])
 8000a7e:	200c      	movs	r0, #12
	for(c = 0; c < num_commands; c++)
 8000a80:	fa5f f983 	uxtb.w	r9, r3
 8000a84:	4591      	cmp	r9, r2
 8000a86:	db02      	blt.n	8000a8e <simpleserial_get+0x5a>
	if (c == num_commands) {
 8000a88:	d107      	bne.n	8000a9a <simpleserial_get+0x66>
		err = SS_ERR_CMD;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e7e0      	b.n	8000a50 <simpleserial_get+0x1c>
		if(commands[c].c == data_buf[1])
 8000a8e:	fb00 7609 	mla	r6, r0, r9, r7
 8000a92:	3301      	adds	r3, #1
 8000a94:	7936      	ldrb	r6, [r6, #4]
 8000a96:	428e      	cmp	r6, r1
 8000a98:	d1f2      	bne.n	8000a80 <simpleserial_get+0x4c>
	if ((data_buf[3] + 5) < next_frame) {
 8000a9a:	78e3      	ldrb	r3, [r4, #3]
 8000a9c:	3305      	adds	r3, #5
 8000a9e:	4543      	cmp	r3, r8
 8000aa0:	da02      	bge.n	8000aa8 <simpleserial_get+0x74>
		err = SS_ERR_LEN;
 8000aa2:	2304      	movs	r3, #4
 8000aa4:	e7d4      	b.n	8000a50 <simpleserial_get+0x1c>
 8000aa6:	4635      	mov	r5, r6
		data_buf[i] = getch();
 8000aa8:	f000 f8e2 	bl	8000c70 <getch>
 8000aac:	5560      	strb	r0, [r4, r5]
		if (data_buf[i] == FRAME_BYTE) {
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	d0cd      	beq.n	8000a4e <simpleserial_get+0x1a>
	for (; i < data_buf[3] + 5; i++) {
 8000ab2:	78e3      	ldrb	r3, [r4, #3]
 8000ab4:	1c6e      	adds	r6, r5, #1
 8000ab6:	3304      	adds	r3, #4
 8000ab8:	42b3      	cmp	r3, r6
 8000aba:	daf4      	bge.n	8000aa6 <simpleserial_get+0x72>
	data_buf[i] = getch();
 8000abc:	f000 f8d8 	bl	8000c70 <getch>
 8000ac0:	55a0      	strb	r0, [r4, r6]
	if (data_buf[i] != FRAME_BYTE) {
 8000ac2:	2800      	cmp	r0, #0
 8000ac4:	d1ed      	bne.n	8000aa2 <simpleserial_get+0x6e>
	unstuff_data(data_buf + next_frame, i - next_frame + 1);
 8000ac6:	f1c8 0101 	rsb	r1, r8, #1
 8000aca:	fa51 f186 	uxtab	r1, r1, r6
 8000ace:	b2c9      	uxtb	r1, r1
 8000ad0:	fa5f fa86 	uxtb.w	sl, r6
 8000ad4:	eb04 0008 	add.w	r0, r4, r8
 8000ad8:	f7ff ff1a 	bl	8000910 <unstuff_data>
	uint8_t crc = ss_crc(data_buf+1, i-2);
 8000adc:	f1aa 0102 	sub.w	r1, sl, #2
 8000ae0:	b2c9      	uxtb	r1, r1
 8000ae2:	f10d 0009 	add.w	r0, sp, #9
 8000ae6:	f7ff feed 	bl	80008c4 <ss_crc>
	if (crc != data_buf[i-1]) {
 8000aea:	5d63      	ldrb	r3, [r4, r5]
 8000aec:	4283      	cmp	r3, r0
 8000aee:	d001      	beq.n	8000af4 <simpleserial_get+0xc0>
		err = SS_ERR_CRC;
 8000af0:	2302      	movs	r3, #2
 8000af2:	e7ad      	b.n	8000a50 <simpleserial_get+0x1c>
	err = commands[c].fp(data_buf[1], data_buf[2], data_buf[3], data_buf+4);
 8000af4:	230c      	movs	r3, #12
 8000af6:	fb03 7709 	mla	r7, r3, r9, r7
 8000afa:	78e2      	ldrb	r2, [r4, #3]
 8000afc:	68fd      	ldr	r5, [r7, #12]
 8000afe:	78a1      	ldrb	r1, [r4, #2]
 8000b00:	7860      	ldrb	r0, [r4, #1]
 8000b02:	446b      	add	r3, sp
 8000b04:	47a8      	blx	r5
 8000b06:	f88d 0007 	strb.w	r0, [sp, #7]
 8000b0a:	e7a3      	b.n	8000a54 <simpleserial_get+0x20>
 8000b0c:	200088d4 	.word	0x200088d4

08000b10 <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 8000b10:	b570      	push	{r4, r5, r6, lr}
 8000b12:	b096      	sub	sp, #88	; 0x58
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
  #else
     RCC_OscInitTypeDef RCC_OscInitStruct;
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 8000b14:	2400      	movs	r4, #0
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8000b16:	2603      	movs	r6, #3
 8000b18:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000b1c:	a80c      	add	r0, sp, #48	; 0x30

     RCC_ClkInitTypeDef RCC_ClkInitStruct;
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8000b1e:	2501      	movs	r5, #1
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8000b20:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 8000b24:	9410      	str	r4, [sp, #64]	; 0x40
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 8000b26:	9414      	str	r4, [sp, #80]	; 0x50
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000b28:	f000 f8d4 	bl	8000cd4 <HAL_RCC_OscConfig>
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8000b2c:	230f      	movs	r3, #15
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
     uint32_t flash_latency = 0;
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 8000b2e:	4621      	mov	r1, r4
 8000b30:	a802      	add	r0, sp, #8
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8000b32:	e9cd 3502 	strd	r3, r5, [sp, #8]
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b36:	e9cd 4404 	strd	r4, r4, [sp, #16]
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b3a:	9406      	str	r4, [sp, #24]
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 8000b3c:	f000 fb38 	bl	80011b0 <HAL_RCC_ClockConfig>




#if (PLATFORM==CWLITEARM)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <platform_init+0x78>)
 8000b42:	695a      	ldr	r2, [r3, #20]
 8000b44:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000b48:	615a      	str	r2, [r3, #20]
 8000b4a:	695b      	ldr	r3, [r3, #20]
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000b4c:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8000b54:	4c0d      	ldr	r4, [pc, #52]	; (8000b8c <platform_init+0x7c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b56:	9301      	str	r3, [sp, #4]
 8000b58:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8000b5a:	a907      	add	r1, sp, #28
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 8000b5c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8000b60:	4620      	mov	r0, r4
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000b62:	e9cd 3507 	strd	r3, r5, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8000b66:	f000 fbc9 	bl	80012fc <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8000b6a:	462a      	mov	r2, r5
 8000b6c:	4620      	mov	r0, r4
 8000b6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b72:	f000 fc87 	bl	8001484 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8000b76:	462a      	mov	r2, r5
 8000b78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b7c:	4620      	mov	r0, r4
 8000b7e:	f000 fc81 	bl	8001484 <HAL_GPIO_WritePin>
#endif
}
 8000b82:	b016      	add	sp, #88	; 0x58
 8000b84:	bd70      	pop	{r4, r5, r6, pc}
 8000b86:	bf00      	nop
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	48000800 	.word	0x48000800

08000b90 <init_uart>:

void init_uart(void)
{
 8000b90:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 8000b92:	f44f 62c0 	mov.w	r2, #1536	; 0x600
{
 8000b96:	b088      	sub	sp, #32
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GpioInit.Pull      = GPIO_PULLUP;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	e9cd 1305 	strd	r1, r3, [sp, #20]
  GpioInit.Alternate = GPIO_AF7_USART1;
  __GPIOA_CLK_ENABLE();
 8000ba6:	4c16      	ldr	r4, [pc, #88]	; (8000c00 <init_uart+0x70>)
  GpioInit.Alternate = GPIO_AF7_USART1;
 8000ba8:	2307      	movs	r3, #7
 8000baa:	9307      	str	r3, [sp, #28]
  __GPIOA_CLK_ENABLE();
 8000bac:	6963      	ldr	r3, [r4, #20]
 8000bae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb2:	6163      	str	r3, [r4, #20]
 8000bb4:	6963      	ldr	r3, [r4, #20]
 8000bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bba:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000bbc:	a903      	add	r1, sp, #12
 8000bbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __GPIOA_CLK_ENABLE();
 8000bc2:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000bc4:	f000 fb9a 	bl	80012fc <HAL_GPIO_Init>

  UartHandle.Instance        = USART1;
 8000bc8:	480e      	ldr	r0, [pc, #56]	; (8000c04 <init_uart+0x74>)
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
 8000bca:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8000c08 <init_uart+0x78>
 8000bce:	f44f 3361 	mov.w	r3, #230400	; 0x38400
 8000bd2:	e9c0 c300 	strd	ip, r3, [r0]
  #else
  UartHandle.Init.BaudRate   = 38400;
  #endif
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd6:	2300      	movs	r3, #0
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000bd8:	e9c0 3302 	strd	r3, r3, [r0, #8]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8000bdc:	6103      	str	r3, [r0, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000bde:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000be0:	230c      	movs	r3, #12
 8000be2:	6143      	str	r3, [r0, #20]
  __USART1_CLK_ENABLE();
 8000be4:	69a3      	ldr	r3, [r4, #24]
 8000be6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bea:	61a3      	str	r3, [r4, #24]
 8000bec:	69a3      	ldr	r3, [r4, #24]
 8000bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bf2:	9302      	str	r3, [sp, #8]
 8000bf4:	9b02      	ldr	r3, [sp, #8]
  HAL_UART_Init(&UartHandle);
 8000bf6:	f000 fd99 	bl	800172c <HAL_UART_Init>
}
 8000bfa:	b008      	add	sp, #32
 8000bfc:	bd10      	pop	{r4, pc}
 8000bfe:	bf00      	nop
 8000c00:	40021000 	.word	0x40021000
 8000c04:	20008998 	.word	0x20008998
 8000c08:	40013800 	.word	0x40013800

08000c0c <trigger_setup>:

void trigger_setup(void)
{
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0c:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <trigger_setup+0x44>)
{
 8000c0e:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c10:	695a      	ldr	r2, [r3, #20]
 8000c12:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000c16:	615a      	str	r2, [r3, #20]
 8000c18:	695b      	ldr	r3, [r3, #20]
{
 8000c1a:	b087      	sub	sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c20:	9300      	str	r3, [sp, #0]
 8000c22:	9b00      	ldr	r3, [sp, #0]

  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_12;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000c24:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8000c28:	2301      	movs	r3, #1
 8000c2a:	e9cd 4301 	strd	r4, r3, [sp, #4]
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000c2e:	2500      	movs	r5, #0
 8000c30:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000c32:	a901      	add	r1, sp, #4
 8000c34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000c38:	e9cd 5303 	strd	r5, r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000c3c:	f000 fb5e 	bl	80012fc <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8000c40:	462a      	mov	r2, r5
 8000c42:	4621      	mov	r1, r4
 8000c44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c48:	f000 fc1c 	bl	8001484 <HAL_GPIO_WritePin>
}
 8000c4c:	b007      	add	sp, #28
 8000c4e:	bd30      	pop	{r4, r5, pc}
 8000c50:	40021000 	.word	0x40021000

08000c54 <trigger_high>:

void trigger_high(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 8000c54:	2201      	movs	r2, #1
 8000c56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5e:	f000 bc11 	b.w	8001484 <HAL_GPIO_WritePin>

08000c62 <trigger_low>:
}

void trigger_low(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c6c:	f000 bc0a 	b.w	8001484 <HAL_GPIO_WritePin>

08000c70 <getch>:
}

char getch(void)
{
 8000c70:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t d;
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8000c72:	4d0a      	ldr	r5, [pc, #40]	; (8000c9c <getch+0x2c>)
    USART1->ICR |= (1 << 3);
 8000c74:	4c0a      	ldr	r4, [pc, #40]	; (8000ca0 <getch+0x30>)
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8000c76:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	f10d 0107 	add.w	r1, sp, #7
 8000c80:	4628      	mov	r0, r5
 8000c82:	f000 fdd4 	bl	800182e <HAL_UART_Receive>
 8000c86:	b918      	cbnz	r0, 8000c90 <getch+0x20>
  //putch(d);
  return d;
}
 8000c88:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000c8c:	b003      	add	sp, #12
 8000c8e:	bd30      	pop	{r4, r5, pc}
    USART1->ICR |= (1 << 3);
 8000c90:	6a23      	ldr	r3, [r4, #32]
 8000c92:	f043 0308 	orr.w	r3, r3, #8
 8000c96:	6223      	str	r3, [r4, #32]
 8000c98:	e7ed      	b.n	8000c76 <getch+0x6>
 8000c9a:	bf00      	nop
 8000c9c:	20008998 	.word	0x20008998
 8000ca0:	40013800 	.word	0x40013800

08000ca4 <putch>:

void putch(char c)
{
 8000ca4:	b507      	push	{r0, r1, r2, lr}
  uint8_t d  = c;
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8000ca6:	f241 3388 	movw	r3, #5000	; 0x1388
  uint8_t d  = c;
 8000caa:	f88d 0007 	strb.w	r0, [sp, #7]
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8000cae:	2201      	movs	r2, #1
 8000cb0:	f10d 0107 	add.w	r1, sp, #7
 8000cb4:	4802      	ldr	r0, [pc, #8]	; (8000cc0 <putch+0x1c>)
 8000cb6:	f000 fd64 	bl	8001782 <HAL_UART_Transmit>
}
 8000cba:	b003      	add	sp, #12
 8000cbc:	f85d fb04 	ldr.w	pc, [sp], #4
 8000cc0:	20008998 	.word	0x20008998

08000cc4 <HAL_GetTick>:
	hal_sys_tick = 0;
	return HAL_OK;
}
uint32_t HAL_GetTick(void)
{
	return hal_sys_tick++;
 8000cc4:	4b02      	ldr	r3, [pc, #8]	; (8000cd0 <HAL_GetTick+0xc>)
 8000cc6:	6818      	ldr	r0, [r3, #0]
 8000cc8:	1c42      	adds	r2, r0, #1
 8000cca:	601a      	str	r2, [r3, #0]
}
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	20008a08 	.word	0x20008a08

08000cd4 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cd4:	6803      	ldr	r3, [r0, #0]
{
 8000cd6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cda:	07d9      	lsls	r1, r3, #31
{
 8000cdc:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cde:	d411      	bmi.n	8000d04 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ce0:	6823      	ldr	r3, [r4, #0]
 8000ce2:	079a      	lsls	r2, r3, #30
 8000ce4:	f100 8086 	bmi.w	8000df4 <HAL_RCC_OscConfig+0x120>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ce8:	6823      	ldr	r3, [r4, #0]
 8000cea:	071e      	lsls	r6, r3, #28
 8000cec:	f100 80f4 	bmi.w	8000ed8 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000cf0:	6823      	ldr	r3, [r4, #0]
 8000cf2:	075d      	lsls	r5, r3, #29
 8000cf4:	f100 8140 	bmi.w	8000f78 <HAL_RCC_OscConfig+0x2a4>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000cf8:	69e2      	ldr	r2, [r4, #28]
 8000cfa:	2a00      	cmp	r2, #0
 8000cfc:	f040 81cb 	bne.w	8001096 <HAL_RCC_OscConfig+0x3c2>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000d00:	2000      	movs	r0, #0
 8000d02:	e021      	b.n	8000d48 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d04:	499a      	ldr	r1, [pc, #616]	; (8000f70 <HAL_RCC_OscConfig+0x29c>)
 8000d06:	684b      	ldr	r3, [r1, #4]
 8000d08:	f003 030c 	and.w	r3, r3, #12
 8000d0c:	2b04      	cmp	r3, #4
 8000d0e:	d007      	beq.n	8000d20 <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d10:	684b      	ldr	r3, [r1, #4]
 8000d12:	f003 030c 	and.w	r3, r3, #12
 8000d16:	2b08      	cmp	r3, #8
 8000d18:	d119      	bne.n	8000d4e <HAL_RCC_OscConfig+0x7a>
 8000d1a:	684b      	ldr	r3, [r1, #4]
 8000d1c:	03db      	lsls	r3, r3, #15
 8000d1e:	d516      	bpl.n	8000d4e <HAL_RCC_OscConfig+0x7a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d24:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d28:	6809      	ldr	r1, [r1, #0]
 8000d2a:	fa93 f3a3 	rbit	r3, r3
 8000d2e:	fab3 f383 	clz	r3, r3
 8000d32:	f003 031f 	and.w	r3, r3, #31
 8000d36:	2201      	movs	r2, #1
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	420b      	tst	r3, r1
 8000d3e:	d0cf      	beq.n	8000ce0 <HAL_RCC_OscConfig+0xc>
 8000d40:	6863      	ldr	r3, [r4, #4]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d1cc      	bne.n	8000ce0 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000d46:	2001      	movs	r0, #1
}
 8000d48:	b002      	add	sp, #8
 8000d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d4e:	6862      	ldr	r2, [r4, #4]
 8000d50:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000d54:	d124      	bne.n	8000da0 <HAL_RCC_OscConfig+0xcc>
 8000d56:	680b      	ldr	r3, [r1, #0]
 8000d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d5c:	600b      	str	r3, [r1, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000d5e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8000d60:	68a0      	ldr	r0, [r4, #8]
 8000d62:	f023 030f 	bic.w	r3, r3, #15
 8000d66:	4303      	orrs	r3, r0
 8000d68:	62cb      	str	r3, [r1, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d6a:	b34a      	cbz	r2, 8000dc0 <HAL_RCC_OscConfig+0xec>
        tickstart = HAL_GetTick();
 8000d6c:	f7ff ffaa 	bl	8000cc4 <HAL_GetTick>
 8000d70:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000d74:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d76:	2701      	movs	r7, #1
 8000d78:	fa96 f3a6 	rbit	r3, r6
 8000d7c:	680a      	ldr	r2, [r1, #0]
 8000d7e:	fa96 f3a6 	rbit	r3, r6
 8000d82:	fab3 f383 	clz	r3, r3
 8000d86:	f003 031f 	and.w	r3, r3, #31
 8000d8a:	fa07 f303 	lsl.w	r3, r7, r3
 8000d8e:	4213      	tst	r3, r2
 8000d90:	d1a6      	bne.n	8000ce0 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d92:	f7ff ff97 	bl	8000cc4 <HAL_GetTick>
 8000d96:	1b40      	subs	r0, r0, r5
 8000d98:	2864      	cmp	r0, #100	; 0x64
 8000d9a:	d9ed      	bls.n	8000d78 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 8000d9c:	2003      	movs	r0, #3
 8000d9e:	e7d3      	b.n	8000d48 <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000da0:	680b      	ldr	r3, [r1, #0]
 8000da2:	b932      	cbnz	r2, 8000db2 <HAL_RCC_OscConfig+0xde>
 8000da4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000da8:	600b      	str	r3, [r1, #0]
 8000daa:	680b      	ldr	r3, [r1, #0]
 8000dac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000db0:	e7d4      	b.n	8000d5c <HAL_RCC_OscConfig+0x88>
 8000db2:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000db6:	d1f5      	bne.n	8000da4 <HAL_RCC_OscConfig+0xd0>
 8000db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dbc:	600b      	str	r3, [r1, #0]
 8000dbe:	e7ca      	b.n	8000d56 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8000dc0:	f7ff ff80 	bl	8000cc4 <HAL_GetTick>
 8000dc4:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000dc8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dca:	2701      	movs	r7, #1
 8000dcc:	fa96 f3a6 	rbit	r3, r6
 8000dd0:	680a      	ldr	r2, [r1, #0]
 8000dd2:	fa96 f3a6 	rbit	r3, r6
 8000dd6:	fab3 f383 	clz	r3, r3
 8000dda:	f003 031f 	and.w	r3, r3, #31
 8000dde:	fa07 f303 	lsl.w	r3, r7, r3
 8000de2:	4213      	tst	r3, r2
 8000de4:	f43f af7c 	beq.w	8000ce0 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000de8:	f7ff ff6c 	bl	8000cc4 <HAL_GetTick>
 8000dec:	1b40      	subs	r0, r0, r5
 8000dee:	2864      	cmp	r0, #100	; 0x64
 8000df0:	d9ec      	bls.n	8000dcc <HAL_RCC_OscConfig+0xf8>
 8000df2:	e7d3      	b.n	8000d9c <HAL_RCC_OscConfig+0xc8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000df4:	495e      	ldr	r1, [pc, #376]	; (8000f70 <HAL_RCC_OscConfig+0x29c>)
 8000df6:	684b      	ldr	r3, [r1, #4]
 8000df8:	f013 0f0c 	tst.w	r3, #12
 8000dfc:	d007      	beq.n	8000e0e <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000dfe:	684b      	ldr	r3, [r1, #4]
 8000e00:	f003 030c 	and.w	r3, r3, #12
 8000e04:	2b08      	cmp	r3, #8
 8000e06:	d121      	bne.n	8000e4c <HAL_RCC_OscConfig+0x178>
 8000e08:	684b      	ldr	r3, [r1, #4]
 8000e0a:	03df      	lsls	r7, r3, #15
 8000e0c:	d41e      	bmi.n	8000e4c <HAL_RCC_OscConfig+0x178>
 8000e0e:	2302      	movs	r3, #2
 8000e10:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e14:	6808      	ldr	r0, [r1, #0]
 8000e16:	fa93 f3a3 	rbit	r3, r3
 8000e1a:	fab3 f383 	clz	r3, r3
 8000e1e:	f003 031f 	and.w	r3, r3, #31
 8000e22:	2201      	movs	r2, #1
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	4203      	tst	r3, r0
 8000e2a:	d002      	beq.n	8000e32 <HAL_RCC_OscConfig+0x15e>
 8000e2c:	6923      	ldr	r3, [r4, #16]
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d189      	bne.n	8000d46 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e32:	6808      	ldr	r0, [r1, #0]
 8000e34:	23f8      	movs	r3, #248	; 0xf8
 8000e36:	fa93 f3a3 	rbit	r3, r3
 8000e3a:	fab3 f283 	clz	r2, r3
 8000e3e:	6963      	ldr	r3, [r4, #20]
 8000e40:	4093      	lsls	r3, r2
 8000e42:	f020 02f8 	bic.w	r2, r0, #248	; 0xf8
 8000e46:	4313      	orrs	r3, r2
 8000e48:	600b      	str	r3, [r1, #0]
 8000e4a:	e74d      	b.n	8000ce8 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e4c:	6922      	ldr	r2, [r4, #16]
 8000e4e:	2501      	movs	r5, #1
 8000e50:	b302      	cbz	r2, 8000e94 <HAL_RCC_OscConfig+0x1c0>
 8000e52:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 8000e56:	fab3 f383 	clz	r3, r3
 8000e5a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000e5e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	2702      	movs	r7, #2
 8000e66:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8000e68:	f7ff ff2c 	bl	8000cc4 <HAL_GetTick>
 8000e6c:	4606      	mov	r6, r0
 8000e6e:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e72:	680a      	ldr	r2, [r1, #0]
 8000e74:	fa97 f3a7 	rbit	r3, r7
 8000e78:	fab3 f383 	clz	r3, r3
 8000e7c:	f003 031f 	and.w	r3, r3, #31
 8000e80:	fa05 f303 	lsl.w	r3, r5, r3
 8000e84:	4213      	tst	r3, r2
 8000e86:	d1d4      	bne.n	8000e32 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e88:	f7ff ff1c 	bl	8000cc4 <HAL_GetTick>
 8000e8c:	1b80      	subs	r0, r0, r6
 8000e8e:	2802      	cmp	r0, #2
 8000e90:	d9ed      	bls.n	8000e6e <HAL_RCC_OscConfig+0x19a>
 8000e92:	e783      	b.n	8000d9c <HAL_RCC_OscConfig+0xc8>
 8000e94:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8000e98:	fab3 f383 	clz	r3, r3
 8000e9c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000ea0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	2702      	movs	r7, #2
 8000ea8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000eaa:	f7ff ff0b 	bl	8000cc4 <HAL_GetTick>
 8000eae:	4606      	mov	r6, r0
 8000eb0:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eb4:	680a      	ldr	r2, [r1, #0]
 8000eb6:	fa97 f3a7 	rbit	r3, r7
 8000eba:	fab3 f383 	clz	r3, r3
 8000ebe:	f003 031f 	and.w	r3, r3, #31
 8000ec2:	fa05 f303 	lsl.w	r3, r5, r3
 8000ec6:	4213      	tst	r3, r2
 8000ec8:	f43f af0e 	beq.w	8000ce8 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ecc:	f7ff fefa 	bl	8000cc4 <HAL_GetTick>
 8000ed0:	1b80      	subs	r0, r0, r6
 8000ed2:	2802      	cmp	r0, #2
 8000ed4:	d9ec      	bls.n	8000eb0 <HAL_RCC_OscConfig+0x1dc>
 8000ed6:	e761      	b.n	8000d9c <HAL_RCC_OscConfig+0xc8>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ed8:	69a2      	ldr	r2, [r4, #24]
 8000eda:	4d25      	ldr	r5, [pc, #148]	; (8000f70 <HAL_RCC_OscConfig+0x29c>)
 8000edc:	4825      	ldr	r0, [pc, #148]	; (8000f74 <HAL_RCC_OscConfig+0x2a0>)
 8000ede:	2101      	movs	r1, #1
 8000ee0:	b312      	cbz	r2, 8000f28 <HAL_RCC_OscConfig+0x254>
 8000ee2:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_ENABLE();
 8000ee6:	fab3 f383 	clz	r3, r3
 8000eea:	4403      	add	r3, r0
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	2602      	movs	r6, #2
 8000ef0:	6019      	str	r1, [r3, #0]
      tickstart = HAL_GetTick();
 8000ef2:	f7ff fee7 	bl	8000cc4 <HAL_GetTick>
 8000ef6:	4607      	mov	r7, r0
 8000ef8:	fa96 f3a6 	rbit	r3, r6
 8000efc:	fa96 f3a6 	rbit	r3, r6
 8000f00:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f04:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000f06:	fa96 f3a6 	rbit	r3, r6
 8000f0a:	fab3 f383 	clz	r3, r3
 8000f0e:	f003 031f 	and.w	r3, r3, #31
 8000f12:	fa01 f303 	lsl.w	r3, r1, r3
 8000f16:	4213      	tst	r3, r2
 8000f18:	f47f aeea 	bne.w	8000cf0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f1c:	f7ff fed2 	bl	8000cc4 <HAL_GetTick>
 8000f20:	1bc0      	subs	r0, r0, r7
 8000f22:	2802      	cmp	r0, #2
 8000f24:	d9e8      	bls.n	8000ef8 <HAL_RCC_OscConfig+0x224>
 8000f26:	e739      	b.n	8000d9c <HAL_RCC_OscConfig+0xc8>
 8000f28:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_DISABLE();
 8000f2c:	fab3 f383 	clz	r3, r3
 8000f30:	4403      	add	r3, r0
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	2602      	movs	r6, #2
 8000f36:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000f38:	f7ff fec4 	bl	8000cc4 <HAL_GetTick>
 8000f3c:	4607      	mov	r7, r0
 8000f3e:	fa96 f3a6 	rbit	r3, r6
 8000f42:	fa96 f3a6 	rbit	r3, r6
 8000f46:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f4a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000f4c:	fa96 f3a6 	rbit	r3, r6
 8000f50:	fab3 f383 	clz	r3, r3
 8000f54:	f003 031f 	and.w	r3, r3, #31
 8000f58:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5c:	4213      	tst	r3, r2
 8000f5e:	f43f aec7 	beq.w	8000cf0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f62:	f7ff feaf 	bl	8000cc4 <HAL_GetTick>
 8000f66:	1bc0      	subs	r0, r0, r7
 8000f68:	2802      	cmp	r0, #2
 8000f6a:	d9e8      	bls.n	8000f3e <HAL_RCC_OscConfig+0x26a>
 8000f6c:	e716      	b.n	8000d9c <HAL_RCC_OscConfig+0xc8>
 8000f6e:	bf00      	nop
 8000f70:	40021000 	.word	0x40021000
 8000f74:	10908120 	.word	0x10908120
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f78:	498a      	ldr	r1, [pc, #552]	; (80011a4 <HAL_RCC_OscConfig+0x4d0>)
 8000f7a:	69cb      	ldr	r3, [r1, #28]
 8000f7c:	00d8      	lsls	r0, r3, #3
 8000f7e:	d433      	bmi.n	8000fe8 <HAL_RCC_OscConfig+0x314>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f80:	69cb      	ldr	r3, [r1, #28]
 8000f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f86:	61cb      	str	r3, [r1, #28]
 8000f88:	69cb      	ldr	r3, [r1, #28]
 8000f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8e:	9301      	str	r3, [sp, #4]
 8000f90:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000f92:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f94:	4e84      	ldr	r6, [pc, #528]	; (80011a8 <HAL_RCC_OscConfig+0x4d4>)
 8000f96:	6833      	ldr	r3, [r6, #0]
 8000f98:	05da      	lsls	r2, r3, #23
 8000f9a:	d527      	bpl.n	8000fec <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f9c:	68e3      	ldr	r3, [r4, #12]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d134      	bne.n	800100c <HAL_RCC_OscConfig+0x338>
 8000fa2:	6a0b      	ldr	r3, [r1, #32]
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8000faa:	f7ff fe8b 	bl	8000cc4 <HAL_GetTick>
 8000fae:	2602      	movs	r6, #2
 8000fb0:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fb2:	f04f 0801 	mov.w	r8, #1
 8000fb6:	fa96 f3a6 	rbit	r3, r6
 8000fba:	fa96 f3a6 	rbit	r3, r6
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d061      	beq.n	8001086 <HAL_RCC_OscConfig+0x3b2>
 8000fc2:	6a0a      	ldr	r2, [r1, #32]
 8000fc4:	fa96 f3a6 	rbit	r3, r6
 8000fc8:	fab3 f383 	clz	r3, r3
 8000fcc:	f003 031f 	and.w	r3, r3, #31
 8000fd0:	fa08 f303 	lsl.w	r3, r8, r3
 8000fd4:	4213      	tst	r3, r2
 8000fd6:	d04e      	beq.n	8001076 <HAL_RCC_OscConfig+0x3a2>
    if(pwrclkchanged == SET)
 8000fd8:	2d00      	cmp	r5, #0
 8000fda:	f43f ae8d 	beq.w	8000cf8 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fde:	69cb      	ldr	r3, [r1, #28]
 8000fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fe4:	61cb      	str	r3, [r1, #28]
 8000fe6:	e687      	b.n	8000cf8 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000fe8:	2500      	movs	r5, #0
 8000fea:	e7d3      	b.n	8000f94 <HAL_RCC_OscConfig+0x2c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fec:	6833      	ldr	r3, [r6, #0]
 8000fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ff2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000ff4:	f7ff fe66 	bl	8000cc4 <HAL_GetTick>
 8000ff8:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ffa:	6833      	ldr	r3, [r6, #0]
 8000ffc:	05db      	lsls	r3, r3, #23
 8000ffe:	d4cd      	bmi.n	8000f9c <HAL_RCC_OscConfig+0x2c8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001000:	f7ff fe60 	bl	8000cc4 <HAL_GetTick>
 8001004:	1bc0      	subs	r0, r0, r7
 8001006:	2864      	cmp	r0, #100	; 0x64
 8001008:	d9f7      	bls.n	8000ffa <HAL_RCC_OscConfig+0x326>
 800100a:	e6c7      	b.n	8000d9c <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800100c:	bb2b      	cbnz	r3, 800105a <HAL_RCC_OscConfig+0x386>
 800100e:	6a0b      	ldr	r3, [r1, #32]
 8001010:	f023 0301 	bic.w	r3, r3, #1
 8001014:	620b      	str	r3, [r1, #32]
 8001016:	6a0b      	ldr	r3, [r1, #32]
 8001018:	f023 0304 	bic.w	r3, r3, #4
 800101c:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 800101e:	f7ff fe51 	bl	8000cc4 <HAL_GetTick>
 8001022:	2602      	movs	r6, #2
 8001024:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001026:	f04f 0801 	mov.w	r8, #1
 800102a:	fa96 f3a6 	rbit	r3, r6
 800102e:	fa96 f3a6 	rbit	r3, r6
 8001032:	b363      	cbz	r3, 800108e <HAL_RCC_OscConfig+0x3ba>
 8001034:	6a0a      	ldr	r2, [r1, #32]
 8001036:	fa96 f3a6 	rbit	r3, r6
 800103a:	fab3 f383 	clz	r3, r3
 800103e:	f003 031f 	and.w	r3, r3, #31
 8001042:	fa08 f303 	lsl.w	r3, r8, r3
 8001046:	4213      	tst	r3, r2
 8001048:	d0c6      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x304>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800104a:	f7ff fe3b 	bl	8000cc4 <HAL_GetTick>
 800104e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001052:	1bc0      	subs	r0, r0, r7
 8001054:	4298      	cmp	r0, r3
 8001056:	d9e8      	bls.n	800102a <HAL_RCC_OscConfig+0x356>
 8001058:	e6a0      	b.n	8000d9c <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800105a:	2b05      	cmp	r3, #5
 800105c:	6a0b      	ldr	r3, [r1, #32]
 800105e:	d103      	bne.n	8001068 <HAL_RCC_OscConfig+0x394>
 8001060:	f043 0304 	orr.w	r3, r3, #4
 8001064:	620b      	str	r3, [r1, #32]
 8001066:	e79c      	b.n	8000fa2 <HAL_RCC_OscConfig+0x2ce>
 8001068:	f023 0301 	bic.w	r3, r3, #1
 800106c:	620b      	str	r3, [r1, #32]
 800106e:	6a0b      	ldr	r3, [r1, #32]
 8001070:	f023 0304 	bic.w	r3, r3, #4
 8001074:	e798      	b.n	8000fa8 <HAL_RCC_OscConfig+0x2d4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001076:	f7ff fe25 	bl	8000cc4 <HAL_GetTick>
 800107a:	f241 3388 	movw	r3, #5000	; 0x1388
 800107e:	1bc0      	subs	r0, r0, r7
 8001080:	4298      	cmp	r0, r3
 8001082:	d998      	bls.n	8000fb6 <HAL_RCC_OscConfig+0x2e2>
 8001084:	e68a      	b.n	8000d9c <HAL_RCC_OscConfig+0xc8>
 8001086:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800108a:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800108c:	e79a      	b.n	8000fc4 <HAL_RCC_OscConfig+0x2f0>
 800108e:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001092:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001094:	e7cf      	b.n	8001036 <HAL_RCC_OscConfig+0x362>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001096:	4943      	ldr	r1, [pc, #268]	; (80011a4 <HAL_RCC_OscConfig+0x4d0>)
 8001098:	684b      	ldr	r3, [r1, #4]
 800109a:	f003 030c 	and.w	r3, r3, #12
 800109e:	2b08      	cmp	r3, #8
 80010a0:	f43f ae51 	beq.w	8000d46 <HAL_RCC_OscConfig+0x72>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010a4:	2a02      	cmp	r2, #2
 80010a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010aa:	d154      	bne.n	8001156 <HAL_RCC_OscConfig+0x482>
 80010ac:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80010b0:	fab3 f383 	clz	r3, r3
 80010b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80010c2:	f7ff fdff 	bl	8000cc4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010c6:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 80011ac <HAL_RCC_OscConfig+0x4d8>
        tickstart = HAL_GetTick();
 80010ca:	4606      	mov	r6, r0
 80010cc:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010d0:	2501      	movs	r5, #1
 80010d2:	fa97 f3a7 	rbit	r3, r7
 80010d6:	680a      	ldr	r2, [r1, #0]
 80010d8:	fa97 f3a7 	rbit	r3, r7
 80010dc:	fab3 f383 	clz	r3, r3
 80010e0:	f003 031f 	and.w	r3, r3, #31
 80010e4:	fa05 f303 	lsl.w	r3, r5, r3
 80010e8:	4213      	tst	r3, r2
 80010ea:	d12e      	bne.n	800114a <HAL_RCC_OscConfig+0x476>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010ec:	e9d4 0308 	ldrd	r0, r3, [r4, #32]
 80010f0:	684a      	ldr	r2, [r1, #4]
 80010f2:	4303      	orrs	r3, r0
 80010f4:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80010f8:	4313      	orrs	r3, r2
 80010fa:	604b      	str	r3, [r1, #4]
 80010fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001100:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001104:	fab3 f383 	clz	r3, r3
 8001108:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800110c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001110:	009b      	lsls	r3, r3, #2
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001112:	4f26      	ldr	r7, [pc, #152]	; (80011ac <HAL_RCC_OscConfig+0x4d8>)
        __HAL_RCC_PLL_ENABLE();
 8001114:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8001116:	f7ff fdd5 	bl	8000cc4 <HAL_GetTick>
 800111a:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800111e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001120:	2601      	movs	r6, #1
 8001122:	fa95 f3a5 	rbit	r3, r5
 8001126:	680a      	ldr	r2, [r1, #0]
 8001128:	fa95 f3a5 	rbit	r3, r5
 800112c:	fab3 f383 	clz	r3, r3
 8001130:	f003 031f 	and.w	r3, r3, #31
 8001134:	fa06 f303 	lsl.w	r3, r6, r3
 8001138:	4213      	tst	r3, r2
 800113a:	f47f ade1 	bne.w	8000d00 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800113e:	f7ff fdc1 	bl	8000cc4 <HAL_GetTick>
 8001142:	1b00      	subs	r0, r0, r4
 8001144:	42b8      	cmp	r0, r7
 8001146:	d9ec      	bls.n	8001122 <HAL_RCC_OscConfig+0x44e>
 8001148:	e628      	b.n	8000d9c <HAL_RCC_OscConfig+0xc8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800114a:	f7ff fdbb 	bl	8000cc4 <HAL_GetTick>
 800114e:	1b80      	subs	r0, r0, r6
 8001150:	4540      	cmp	r0, r8
 8001152:	d9be      	bls.n	80010d2 <HAL_RCC_OscConfig+0x3fe>
 8001154:	e622      	b.n	8000d9c <HAL_RCC_OscConfig+0xc8>
 8001156:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800115a:	fab3 f383 	clz	r3, r3
 800115e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001162:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800116c:	f7ff fdaa 	bl	8000cc4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001170:	4f0e      	ldr	r7, [pc, #56]	; (80011ac <HAL_RCC_OscConfig+0x4d8>)
        tickstart = HAL_GetTick();
 8001172:	4604      	mov	r4, r0
 8001174:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001178:	2601      	movs	r6, #1
 800117a:	fa95 f3a5 	rbit	r3, r5
 800117e:	680a      	ldr	r2, [r1, #0]
 8001180:	fa95 f3a5 	rbit	r3, r5
 8001184:	fab3 f383 	clz	r3, r3
 8001188:	f003 031f 	and.w	r3, r3, #31
 800118c:	fa06 f303 	lsl.w	r3, r6, r3
 8001190:	4213      	tst	r3, r2
 8001192:	f43f adb5 	beq.w	8000d00 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001196:	f7ff fd95 	bl	8000cc4 <HAL_GetTick>
 800119a:	1b00      	subs	r0, r0, r4
 800119c:	42b8      	cmp	r0, r7
 800119e:	d9ec      	bls.n	800117a <HAL_RCC_OscConfig+0x4a6>
 80011a0:	e5fc      	b.n	8000d9c <HAL_RCC_OscConfig+0xc8>
 80011a2:	bf00      	nop
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40007000 	.word	0x40007000
 80011ac:	00030d40 	.word	0x00030d40

080011b0 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80011b0:	4a50      	ldr	r2, [pc, #320]	; (80012f4 <HAL_RCC_ClockConfig+0x144>)
{
 80011b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80011b4:	6813      	ldr	r3, [r2, #0]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	428b      	cmp	r3, r1
{
 80011bc:	4604      	mov	r4, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80011be:	d31b      	bcc.n	80011f8 <HAL_RCC_ClockConfig+0x48>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011c0:	6822      	ldr	r2, [r4, #0]
 80011c2:	0790      	lsls	r0, r2, #30
 80011c4:	d424      	bmi.n	8001210 <HAL_RCC_ClockConfig+0x60>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011c6:	07d2      	lsls	r2, r2, #31
 80011c8:	d42a      	bmi.n	8001220 <HAL_RCC_ClockConfig+0x70>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80011ca:	4a4a      	ldr	r2, [pc, #296]	; (80012f4 <HAL_RCC_ClockConfig+0x144>)
 80011cc:	6813      	ldr	r3, [r2, #0]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	428b      	cmp	r3, r1
 80011d4:	d87a      	bhi.n	80012cc <HAL_RCC_ClockConfig+0x11c>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011d6:	6820      	ldr	r0, [r4, #0]
 80011d8:	0743      	lsls	r3, r0, #29
 80011da:	f100 8082 	bmi.w	80012e2 <HAL_RCC_ClockConfig+0x132>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011de:	f010 0008 	ands.w	r0, r0, #8
 80011e2:	d014      	beq.n	800120e <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011e4:	4a44      	ldr	r2, [pc, #272]	; (80012f8 <HAL_RCC_ClockConfig+0x148>)
 80011e6:	6921      	ldr	r1, [r4, #16]
 80011e8:	6853      	ldr	r3, [r2, #4]
 80011ea:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80011ee:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80011f2:	6053      	str	r3, [r2, #4]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 80011f4:	2000      	movs	r0, #0
 80011f6:	e00a      	b.n	800120e <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011f8:	6813      	ldr	r3, [r2, #0]
 80011fa:	f023 0307 	bic.w	r3, r3, #7
 80011fe:	430b      	orrs	r3, r1
 8001200:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001202:	6813      	ldr	r3, [r2, #0]
 8001204:	f003 0307 	and.w	r3, r3, #7
 8001208:	428b      	cmp	r3, r1
 800120a:	d0d9      	beq.n	80011c0 <HAL_RCC_ClockConfig+0x10>
      return HAL_ERROR;
 800120c:	2001      	movs	r0, #1
}
 800120e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001210:	4839      	ldr	r0, [pc, #228]	; (80012f8 <HAL_RCC_ClockConfig+0x148>)
 8001212:	68a5      	ldr	r5, [r4, #8]
 8001214:	6843      	ldr	r3, [r0, #4]
 8001216:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800121a:	432b      	orrs	r3, r5
 800121c:	6043      	str	r3, [r0, #4]
 800121e:	e7d2      	b.n	80011c6 <HAL_RCC_ClockConfig+0x16>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001220:	6862      	ldr	r2, [r4, #4]
 8001222:	4d35      	ldr	r5, [pc, #212]	; (80012f8 <HAL_RCC_ClockConfig+0x148>)
 8001224:	2a01      	cmp	r2, #1
 8001226:	d127      	bne.n	8001278 <HAL_RCC_ClockConfig+0xc8>
 8001228:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800122c:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001230:	6828      	ldr	r0, [r5, #0]
 8001232:	fa93 f3a3 	rbit	r3, r3
 8001236:	fab3 f383 	clz	r3, r3
 800123a:	f003 031f 	and.w	r3, r3, #31
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	4203      	tst	r3, r0
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001244:	d0e2      	beq.n	800120c <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001246:	686b      	ldr	r3, [r5, #4]
 8001248:	f023 0303 	bic.w	r3, r3, #3
 800124c:	431a      	orrs	r2, r3
 800124e:	606a      	str	r2, [r5, #4]
    tickstart = HAL_GetTick();
 8001250:	f7ff fd38 	bl	8000cc4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001254:	6863      	ldr	r3, [r4, #4]
 8001256:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8001258:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800125a:	f241 3788 	movw	r7, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800125e:	d11e      	bne.n	800129e <HAL_RCC_ClockConfig+0xee>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001260:	686b      	ldr	r3, [r5, #4]
 8001262:	f003 030c 	and.w	r3, r3, #12
 8001266:	2b04      	cmp	r3, #4
 8001268:	d0af      	beq.n	80011ca <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800126a:	f7ff fd2b 	bl	8000cc4 <HAL_GetTick>
 800126e:	1b80      	subs	r0, r0, r6
 8001270:	42b8      	cmp	r0, r7
 8001272:	d9f5      	bls.n	8001260 <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 8001274:	2003      	movs	r0, #3
 8001276:	e7ca      	b.n	800120e <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001278:	2a02      	cmp	r2, #2
 800127a:	bf0c      	ite	eq
 800127c:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001280:	2302      	movne	r3, #2
 8001282:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001286:	682e      	ldr	r6, [r5, #0]
 8001288:	fa93 f3a3 	rbit	r3, r3
 800128c:	fab3 f383 	clz	r3, r3
 8001290:	f003 031f 	and.w	r3, r3, #31
 8001294:	2001      	movs	r0, #1
 8001296:	fa00 f303 	lsl.w	r3, r0, r3
 800129a:	4233      	tst	r3, r6
 800129c:	e7d2      	b.n	8001244 <HAL_RCC_ClockConfig+0x94>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d10f      	bne.n	80012c2 <HAL_RCC_ClockConfig+0x112>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012a2:	686b      	ldr	r3, [r5, #4]
 80012a4:	f003 030c 	and.w	r3, r3, #12
 80012a8:	2b08      	cmp	r3, #8
 80012aa:	d08e      	beq.n	80011ca <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012ac:	f7ff fd0a 	bl	8000cc4 <HAL_GetTick>
 80012b0:	1b80      	subs	r0, r0, r6
 80012b2:	42b8      	cmp	r0, r7
 80012b4:	d9f5      	bls.n	80012a2 <HAL_RCC_ClockConfig+0xf2>
 80012b6:	e7dd      	b.n	8001274 <HAL_RCC_ClockConfig+0xc4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012b8:	f7ff fd04 	bl	8000cc4 <HAL_GetTick>
 80012bc:	1b80      	subs	r0, r0, r6
 80012be:	42b8      	cmp	r0, r7
 80012c0:	d8d8      	bhi.n	8001274 <HAL_RCC_ClockConfig+0xc4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80012c2:	686b      	ldr	r3, [r5, #4]
 80012c4:	f013 0f0c 	tst.w	r3, #12
 80012c8:	d1f6      	bne.n	80012b8 <HAL_RCC_ClockConfig+0x108>
 80012ca:	e77e      	b.n	80011ca <HAL_RCC_ClockConfig+0x1a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012cc:	6813      	ldr	r3, [r2, #0]
 80012ce:	f023 0307 	bic.w	r3, r3, #7
 80012d2:	430b      	orrs	r3, r1
 80012d4:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80012d6:	6813      	ldr	r3, [r2, #0]
 80012d8:	f003 0307 	and.w	r3, r3, #7
 80012dc:	428b      	cmp	r3, r1
 80012de:	d195      	bne.n	800120c <HAL_RCC_ClockConfig+0x5c>
 80012e0:	e779      	b.n	80011d6 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012e2:	4905      	ldr	r1, [pc, #20]	; (80012f8 <HAL_RCC_ClockConfig+0x148>)
 80012e4:	68e3      	ldr	r3, [r4, #12]
 80012e6:	684a      	ldr	r2, [r1, #4]
 80012e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80012ec:	431a      	orrs	r2, r3
 80012ee:	604a      	str	r2, [r1, #4]
 80012f0:	e775      	b.n	80011de <HAL_RCC_ClockConfig+0x2e>
 80012f2:	bf00      	nop
 80012f4:	40022000 	.word	0x40022000
 80012f8:	40021000 	.word	0x40021000

080012fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001300:	f8df 8174 	ldr.w	r8, [pc, #372]	; 8001478 <HAL_GPIO_Init+0x17c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001304:	4c5d      	ldr	r4, [pc, #372]	; (800147c <HAL_GPIO_Init+0x180>)
  uint32_t position = 0x00U;
 8001306:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001308:	f04f 0901 	mov.w	r9, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 800130c:	680a      	ldr	r2, [r1, #0]
 800130e:	fa32 f503 	lsrs.w	r5, r2, r3
 8001312:	d102      	bne.n	800131a <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  }
}
 8001314:	b003      	add	sp, #12
 8001316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800131a:	fa09 fa03 	lsl.w	sl, r9, r3
    if(iocurrent)
 800131e:	ea1a 0202 	ands.w	r2, sl, r2
 8001322:	f000 809e 	beq.w	8001462 <HAL_GPIO_Init+0x166>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001326:	684d      	ldr	r5, [r1, #4]
 8001328:	f025 0e10 	bic.w	lr, r5, #16
 800132c:	f1be 0f02 	cmp.w	lr, #2
 8001330:	d114      	bne.n	800135c <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 8001332:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8001336:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800133a:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 800133e:	f8dc 6020 	ldr.w	r6, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001342:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001346:	270f      	movs	r7, #15
 8001348:	fa07 f70b 	lsl.w	r7, r7, fp
 800134c:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001350:	690e      	ldr	r6, [r1, #16]
 8001352:	fa06 f60b 	lsl.w	r6, r6, fp
 8001356:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 8001358:	f8cc 6020 	str.w	r6, [ip, #32]
      temp = GPIOx->MODER;
 800135c:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001360:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001364:	2603      	movs	r6, #3
 8001366:	fa06 f70c 	lsl.w	r7, r6, ip
 800136a:	ea2b 0b07 	bic.w	fp, fp, r7
 800136e:	43fe      	mvns	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001370:	f005 0703 	and.w	r7, r5, #3
 8001374:	fa07 f70c 	lsl.w	r7, r7, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001378:	f10e 3eff 	add.w	lr, lr, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800137c:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001380:	f1be 0f01 	cmp.w	lr, #1
      GPIOx->MODER = temp;
 8001384:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001386:	d811      	bhi.n	80013ac <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR;
 8001388:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800138a:	ea06 0e07 	and.w	lr, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 800138e:	68cf      	ldr	r7, [r1, #12]
 8001390:	fa07 f70c 	lsl.w	r7, r7, ip
 8001394:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8001398:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800139a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800139c:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013a0:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80013a4:	409f      	lsls	r7, r3
 80013a6:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 80013aa:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80013ac:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013ae:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013b0:	688e      	ldr	r6, [r1, #8]
 80013b2:	fa06 f60c 	lsl.w	r6, r6, ip
 80013b6:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 80013b8:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013ba:	00ee      	lsls	r6, r5, #3
 80013bc:	d551      	bpl.n	8001462 <HAL_GPIO_Init+0x166>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013be:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80013c2:	f046 0601 	orr.w	r6, r6, #1
 80013c6:	f8c8 6018 	str.w	r6, [r8, #24]
 80013ca:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80013ce:	f023 0703 	bic.w	r7, r3, #3
 80013d2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80013d6:	f006 0601 	and.w	r6, r6, #1
 80013da:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80013de:	9601      	str	r6, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80013e0:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e4:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 80013e6:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80013e8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80013ec:	f04f 0c0f 	mov.w	ip, #15
 80013f0:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013f4:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80013f8:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013fc:	d033      	beq.n	8001466 <HAL_GPIO_Init+0x16a>
 80013fe:	4e20      	ldr	r6, [pc, #128]	; (8001480 <HAL_GPIO_Init+0x184>)
 8001400:	42b0      	cmp	r0, r6
 8001402:	d032      	beq.n	800146a <HAL_GPIO_Init+0x16e>
 8001404:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001408:	42b0      	cmp	r0, r6
 800140a:	d030      	beq.n	800146e <HAL_GPIO_Init+0x172>
 800140c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001410:	42b0      	cmp	r0, r6
 8001412:	d02e      	beq.n	8001472 <HAL_GPIO_Init+0x176>
 8001414:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001418:	42b0      	cmp	r0, r6
 800141a:	bf0c      	ite	eq
 800141c:	2604      	moveq	r6, #4
 800141e:	2605      	movne	r6, #5
 8001420:	fa06 f60e 	lsl.w	r6, r6, lr
 8001424:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8001428:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 800142a:	6826      	ldr	r6, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 800142c:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800142e:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001432:	bf0c      	ite	eq
 8001434:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001436:	4316      	orrne	r6, r2
        EXTI->IMR = temp;
 8001438:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 800143a:	6866      	ldr	r6, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800143c:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001440:	bf0c      	ite	eq
 8001442:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001444:	4316      	orrne	r6, r2
        EXTI->EMR = temp;
 8001446:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8001448:	68a6      	ldr	r6, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800144a:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800144e:	bf0c      	ite	eq
 8001450:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001452:	4316      	orrne	r6, r2
        EXTI->RTSR = temp;
 8001454:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8001456:	68e6      	ldr	r6, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001458:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 800145a:	bf54      	ite	pl
 800145c:	403e      	andpl	r6, r7
          temp |= iocurrent;
 800145e:	4316      	orrmi	r6, r2
        EXTI->FTSR = temp;
 8001460:	60e6      	str	r6, [r4, #12]
    position++;
 8001462:	3301      	adds	r3, #1
 8001464:	e752      	b.n	800130c <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001466:	2600      	movs	r6, #0
 8001468:	e7da      	b.n	8001420 <HAL_GPIO_Init+0x124>
 800146a:	2601      	movs	r6, #1
 800146c:	e7d8      	b.n	8001420 <HAL_GPIO_Init+0x124>
 800146e:	2602      	movs	r6, #2
 8001470:	e7d6      	b.n	8001420 <HAL_GPIO_Init+0x124>
 8001472:	2603      	movs	r6, #3
 8001474:	e7d4      	b.n	8001420 <HAL_GPIO_Init+0x124>
 8001476:	bf00      	nop
 8001478:	40021000 	.word	0x40021000
 800147c:	40010400 	.word	0x40010400
 8001480:	48000400 	.word	0x48000400

08001484 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001484:	b10a      	cbz	r2, 800148a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001486:	6181      	str	r1, [r0, #24]
 8001488:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800148a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800148c:	4770      	bx	lr
 800148e:	0000      	movs	r0, r0

08001490 <UART_SetConfig>:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001490:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001492:	6881      	ldr	r1, [r0, #8]
 8001494:	69c3      	ldr	r3, [r0, #28]
{
 8001496:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001498:	6905      	ldr	r5, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800149a:	6814      	ldr	r4, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800149c:	4329      	orrs	r1, r5
 800149e:	6945      	ldr	r5, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80014a0:	f424 4416 	bic.w	r4, r4, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80014a4:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80014a6:	f024 040c 	bic.w	r4, r4, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80014aa:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80014ac:	4321      	orrs	r1, r4
 80014ae:	6011      	str	r1, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80014b0:	6851      	ldr	r1, [r2, #4]
 80014b2:	68c4      	ldr	r4, [r0, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80014b4:	6a05      	ldr	r5, [r0, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80014b6:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80014ba:	4321      	orrs	r1, r4
 80014bc:	6051      	str	r1, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80014be:	6894      	ldr	r4, [r2, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80014c0:	6981      	ldr	r1, [r0, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80014c2:	f424 6430 	bic.w	r4, r4, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80014c6:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80014c8:	4321      	orrs	r1, r4
 80014ca:	6091      	str	r1, [r2, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80014cc:	4962      	ldr	r1, [pc, #392]	; (8001658 <UART_SetConfig+0x1c8>)
 80014ce:	428a      	cmp	r2, r1
 80014d0:	d116      	bne.n	8001500 <UART_SetConfig+0x70>
 80014d2:	f501 4158 	add.w	r1, r1, #55296	; 0xd800
 80014d6:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80014d8:	f001 0103 	and.w	r1, r1, #3
 80014dc:	3901      	subs	r1, #1
 80014de:	2902      	cmp	r1, #2
 80014e0:	f200 80b2 	bhi.w	8001648 <UART_SetConfig+0x1b8>
 80014e4:	4c5d      	ldr	r4, [pc, #372]	; (800165c <UART_SetConfig+0x1cc>)

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80014e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014ea:	5c61      	ldrb	r1, [r4, r1]
 80014ec:	d177      	bne.n	80015de <UART_SetConfig+0x14e>
  {
    switch (clocksource)
 80014ee:	2908      	cmp	r1, #8
 80014f0:	d872      	bhi.n	80015d8 <UART_SetConfig+0x148>
 80014f2:	e8df f001 	tbb	[pc, r1]
 80014f6:	acac      	.short	0xacac
 80014f8:	71ac7124 	.word	0x71ac7124
 80014fc:	7171      	.short	0x7171
 80014fe:	a4          	.byte	0xa4
 80014ff:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001500:	4957      	ldr	r1, [pc, #348]	; (8001660 <UART_SetConfig+0x1d0>)
 8001502:	428a      	cmp	r2, r1
 8001504:	d12c      	bne.n	8001560 <UART_SetConfig+0xd0>
 8001506:	f501 31e6 	add.w	r1, r1, #117760	; 0x1cc00
 800150a:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800150c:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
 8001510:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8001514:	f000 8090 	beq.w	8001638 <UART_SetConfig+0x1a8>
 8001518:	d80b      	bhi.n	8001532 <UART_SetConfig+0xa2>
 800151a:	2900      	cmp	r1, #0
 800151c:	f000 8094 	beq.w	8001648 <UART_SetConfig+0x1b8>
 8001520:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8001524:	f000 8090 	beq.w	8001648 <UART_SetConfig+0x1b8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001528:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800152c:	d054      	beq.n	80015d8 <UART_SetConfig+0x148>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800152e:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 8001530:	e015      	b.n	800155e <UART_SetConfig+0xce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001532:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 8001536:	d1f7      	bne.n	8001528 <UART_SetConfig+0x98>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001538:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800153c:	d166      	bne.n	800160c <UART_SetConfig+0x17c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800153e:	6841      	ldr	r1, [r0, #4]
 8001540:	084b      	lsrs	r3, r1, #1
 8001542:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8001546:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800154a:	fbb3 f3f1 	udiv	r3, r3, r1
  HAL_StatusTypeDef ret               = HAL_OK;
 800154e:	2000      	movs	r0, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001550:	b29b      	uxth	r3, r3
    brrtemp = usartdiv & 0xFFF0U;
 8001552:	f023 010f 	bic.w	r1, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001556:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 800155a:	430b      	orrs	r3, r1
 800155c:	60d3      	str	r3, [r2, #12]

}
 800155e:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001560:	4940      	ldr	r1, [pc, #256]	; (8001664 <UART_SetConfig+0x1d4>)
 8001562:	428a      	cmp	r2, r1
 8001564:	d110      	bne.n	8001588 <UART_SetConfig+0xf8>
 8001566:	f501 31e4 	add.w	r1, r1, #116736	; 0x1c800
 800156a:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800156c:	f401 2140 	and.w	r1, r1, #786432	; 0xc0000
 8001570:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 8001574:	d060      	beq.n	8001638 <UART_SetConfig+0x1a8>
 8001576:	d804      	bhi.n	8001582 <UART_SetConfig+0xf2>
 8001578:	2900      	cmp	r1, #0
 800157a:	d065      	beq.n	8001648 <UART_SetConfig+0x1b8>
 800157c:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8001580:	e7d0      	b.n	8001524 <UART_SetConfig+0x94>
 8001582:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 8001586:	e7d6      	b.n	8001536 <UART_SetConfig+0xa6>
 8001588:	4937      	ldr	r1, [pc, #220]	; (8001668 <UART_SetConfig+0x1d8>)
 800158a:	428a      	cmp	r2, r1
 800158c:	d110      	bne.n	80015b0 <UART_SetConfig+0x120>
 800158e:	f501 31e2 	add.w	r1, r1, #115712	; 0x1c400
 8001592:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8001594:	f401 1140 	and.w	r1, r1, #3145728	; 0x300000
 8001598:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800159c:	d04c      	beq.n	8001638 <UART_SetConfig+0x1a8>
 800159e:	d804      	bhi.n	80015aa <UART_SetConfig+0x11a>
 80015a0:	2900      	cmp	r1, #0
 80015a2:	d051      	beq.n	8001648 <UART_SetConfig+0x1b8>
 80015a4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80015a8:	e7bc      	b.n	8001524 <UART_SetConfig+0x94>
 80015aa:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 80015ae:	e7c2      	b.n	8001536 <UART_SetConfig+0xa6>
 80015b0:	492e      	ldr	r1, [pc, #184]	; (800166c <UART_SetConfig+0x1dc>)
 80015b2:	428a      	cmp	r2, r1
 80015b4:	d1b8      	bne.n	8001528 <UART_SetConfig+0x98>
 80015b6:	f501 31e0 	add.w	r1, r1, #114688	; 0x1c000
 80015ba:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80015bc:	f401 0140 	and.w	r1, r1, #12582912	; 0xc00000
 80015c0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80015c4:	d038      	beq.n	8001638 <UART_SetConfig+0x1a8>
 80015c6:	d804      	bhi.n	80015d2 <UART_SetConfig+0x142>
 80015c8:	2900      	cmp	r1, #0
 80015ca:	d03d      	beq.n	8001648 <UART_SetConfig+0x1b8>
 80015cc:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80015d0:	e7a8      	b.n	8001524 <UART_SetConfig+0x94>
 80015d2:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80015d6:	e7ae      	b.n	8001536 <UART_SetConfig+0xa6>
        ret = HAL_ERROR;
 80015d8:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80015da:	2300      	movs	r3, #0
 80015dc:	e7b9      	b.n	8001552 <UART_SetConfig+0xc2>
    switch (clocksource)
 80015de:	2908      	cmp	r1, #8
 80015e0:	d8a5      	bhi.n	800152e <UART_SetConfig+0x9e>
 80015e2:	a301      	add	r3, pc, #4	; (adr r3, 80015e8 <UART_SetConfig+0x158>)
 80015e4:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80015e8:	08001625 	.word	0x08001625
 80015ec:	08001625 	.word	0x08001625
 80015f0:	0800160d 	.word	0x0800160d
 80015f4:	0800152f 	.word	0x0800152f
 80015f8:	08001625 	.word	0x08001625
 80015fc:	0800152f 	.word	0x0800152f
 8001600:	0800152f 	.word	0x0800152f
 8001604:	0800152f 	.word	0x0800152f
 8001608:	0800162f 	.word	0x0800162f
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800160c:	6841      	ldr	r1, [r0, #4]
 800160e:	084b      	lsrs	r3, r1, #1
 8001610:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001614:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001618:	fbb3 f3f1 	udiv	r3, r3, r1
 800161c:	b29b      	uxth	r3, r3
 800161e:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001620:	2000      	movs	r0, #0
        break;
 8001622:	e79c      	b.n	800155e <UART_SetConfig+0xce>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001624:	6841      	ldr	r1, [r0, #4]
 8001626:	084b      	lsrs	r3, r1, #1
 8001628:	f503 03e1 	add.w	r3, r3, #7372800	; 0x708000
 800162c:	e7f4      	b.n	8001618 <UART_SetConfig+0x188>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800162e:	6841      	ldr	r1, [r0, #4]
 8001630:	084b      	lsrs	r3, r1, #1
 8001632:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001636:	e7ef      	b.n	8001618 <UART_SetConfig+0x188>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001638:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800163c:	d1f7      	bne.n	800162e <UART_SetConfig+0x19e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800163e:	6841      	ldr	r1, [r0, #4]
 8001640:	084b      	lsrs	r3, r1, #1
 8001642:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001646:	e780      	b.n	800154a <UART_SetConfig+0xba>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001648:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800164c:	d1ea      	bne.n	8001624 <UART_SetConfig+0x194>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800164e:	6841      	ldr	r1, [r0, #4]
 8001650:	084b      	lsrs	r3, r1, #1
 8001652:	f503 0361 	add.w	r3, r3, #14745600	; 0xe10000
 8001656:	e778      	b.n	800154a <UART_SetConfig+0xba>
 8001658:	40013800 	.word	0x40013800
 800165c:	08001c8c 	.word	0x08001c8c
 8001660:	40004400 	.word	0x40004400
 8001664:	40004800 	.word	0x40004800
 8001668:	40004c00 	.word	0x40004c00
 800166c:	40005000 	.word	0x40005000

08001670 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001672:	9f06      	ldr	r7, [sp, #24]
 8001674:	4604      	mov	r4, r0
 8001676:	4615      	mov	r5, r2
 8001678:	461e      	mov	r6, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800167a:	6822      	ldr	r2, [r4, #0]
 800167c:	69d3      	ldr	r3, [r2, #28]
 800167e:	ea31 0303 	bics.w	r3, r1, r3
 8001682:	bf0c      	ite	eq
 8001684:	2301      	moveq	r3, #1
 8001686:	2300      	movne	r3, #0
 8001688:	42ab      	cmp	r3, r5
 800168a:	d001      	beq.n	8001690 <UART_WaitOnFlagUntilTimeout+0x20>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800168c:	2000      	movs	r0, #0
 800168e:	e014      	b.n	80016ba <UART_WaitOnFlagUntilTimeout+0x4a>
    if(Timeout != HAL_MAX_DELAY)
 8001690:	1c7b      	adds	r3, r7, #1
 8001692:	d0f3      	beq.n	800167c <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001694:	b997      	cbnz	r7, 80016bc <UART_WaitOnFlagUntilTimeout+0x4c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001696:	6823      	ldr	r3, [r4, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800169e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80016a0:	689a      	ldr	r2, [r3, #8]
 80016a2:	f022 0201 	bic.w	r2, r2, #1
 80016a6:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 80016a8:	2320      	movs	r3, #32
 80016aa:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80016ae:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 80016b2:	2300      	movs	r3, #0
 80016b4:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80016b8:	2003      	movs	r0, #3
}
 80016ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80016bc:	f7ff fb02 	bl	8000cc4 <HAL_GetTick>
 80016c0:	1b80      	subs	r0, r0, r6
 80016c2:	42b8      	cmp	r0, r7
 80016c4:	d9d9      	bls.n	800167a <UART_WaitOnFlagUntilTimeout+0xa>
 80016c6:	e7e6      	b.n	8001696 <UART_WaitOnFlagUntilTimeout+0x26>

080016c8 <UART_CheckIdleState>:
{
 80016c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80016ca:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016cc:	2100      	movs	r1, #0
 80016ce:	66c1      	str	r1, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 80016d0:	f7ff faf8 	bl	8000cc4 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80016d4:	6823      	ldr	r3, [r4, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80016da:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80016dc:	d417      	bmi.n	800170e <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80016de:	6823      	ldr	r3, [r4, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	075b      	lsls	r3, r3, #29
 80016e4:	d50a      	bpl.n	80016fc <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80016e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	2200      	movs	r2, #0
 80016ee:	462b      	mov	r3, r5
 80016f0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80016f4:	4620      	mov	r0, r4
 80016f6:	f7ff ffbb 	bl	8001670 <UART_WaitOnFlagUntilTimeout>
 80016fa:	b9a0      	cbnz	r0, 8001726 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 80016fc:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80016fe:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8001700:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8001704:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8001708:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 800170c:	e00c      	b.n	8001728 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800170e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	460a      	mov	r2, r1
 8001716:	4603      	mov	r3, r0
 8001718:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800171c:	4620      	mov	r0, r4
 800171e:	f7ff ffa7 	bl	8001670 <UART_WaitOnFlagUntilTimeout>
 8001722:	2800      	cmp	r0, #0
 8001724:	d0db      	beq.n	80016de <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001726:	2003      	movs	r0, #3
}
 8001728:	b003      	add	sp, #12
 800172a:	bd30      	pop	{r4, r5, pc}

0800172c <HAL_UART_Init>:
{
 800172c:	b510      	push	{r4, lr}
  if(huart == NULL)
 800172e:	4604      	mov	r4, r0
 8001730:	b328      	cbz	r0, 800177e <HAL_UART_Init+0x52>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001732:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001736:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800173a:	b90b      	cbnz	r3, 8001740 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 800173c:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
  __HAL_UART_DISABLE(huart);
 8001740:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001742:	2324      	movs	r3, #36	; 0x24
 8001744:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8001748:	6813      	ldr	r3, [r2, #0]
 800174a:	f023 0301 	bic.w	r3, r3, #1
 800174e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001750:	4620      	mov	r0, r4
 8001752:	f7ff fe9d 	bl	8001490 <UART_SetConfig>
 8001756:	2801      	cmp	r0, #1
 8001758:	d011      	beq.n	800177e <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800175a:	6823      	ldr	r3, [r4, #0]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001762:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001764:	689a      	ldr	r2, [r3, #8]
 8001766:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800176a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	f042 0201 	orr.w	r2, r2, #1
  return UART_CheckIdleState(huart);
 8001772:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001774:	601a      	str	r2, [r3, #0]
}
 8001776:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return UART_CheckIdleState(huart);
 800177a:	f7ff bfa5 	b.w	80016c8 <UART_CheckIdleState>
}
 800177e:	2001      	movs	r0, #1
 8001780:	bd10      	pop	{r4, pc}

08001782 <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001782:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001784:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001786:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800178a:	2b20      	cmp	r3, #32
{
 800178c:	460d      	mov	r5, r1
 800178e:	4604      	mov	r4, r0
 8001790:	4611      	mov	r1, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001792:	d14a      	bne.n	800182a <HAL_UART_Transmit+0xa8>
  {
    if((pData == NULL ) || (Size == 0U))
 8001794:	2d00      	cmp	r5, #0
 8001796:	d046      	beq.n	8001826 <HAL_UART_Transmit+0xa4>
 8001798:	2a00      	cmp	r2, #0
 800179a:	d044      	beq.n	8001826 <HAL_UART_Transmit+0xa4>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800179c:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d042      	beq.n	800182a <HAL_UART_Transmit+0xa8>
 80017a4:	2301      	movs	r3, #1
 80017a6:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017aa:	2300      	movs	r3, #0
 80017ac:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80017ae:	2321      	movs	r3, #33	; 0x21
 80017b0:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80017b4:	f7ff fa86 	bl	8000cc4 <HAL_GetTick>

    huart->TxXferSize = Size;
 80017b8:	f8a4 1050 	strh.w	r1, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 80017bc:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 80017be:	f8a4 1052 	strh.w	r1, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80017c2:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80017c6:	b292      	uxth	r2, r2
 80017c8:	b962      	cbnz	r2, 80017e4 <HAL_UART_Transmit+0x62>
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80017ca:	9600      	str	r6, [sp, #0]
 80017cc:	463b      	mov	r3, r7
 80017ce:	2140      	movs	r1, #64	; 0x40
 80017d0:	4620      	mov	r0, r4
 80017d2:	f7ff ff4d 	bl	8001670 <UART_WaitOnFlagUntilTimeout>
 80017d6:	b998      	cbnz	r0, 8001800 <HAL_UART_Transmit+0x7e>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80017d8:	2320      	movs	r3, #32
 80017da:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80017de:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 80017e2:	e00e      	b.n	8001802 <HAL_UART_Transmit+0x80>
      huart->TxXferCount--;
 80017e4:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80017e8:	9600      	str	r6, [sp, #0]
      huart->TxXferCount--;
 80017ea:	3a01      	subs	r2, #1
 80017ec:	b292      	uxth	r2, r2
 80017ee:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80017f2:	463b      	mov	r3, r7
 80017f4:	2200      	movs	r2, #0
 80017f6:	2180      	movs	r1, #128	; 0x80
 80017f8:	4620      	mov	r0, r4
 80017fa:	f7ff ff39 	bl	8001670 <UART_WaitOnFlagUntilTimeout>
 80017fe:	b110      	cbz	r0, 8001806 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8001800:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001802:	b003      	add	sp, #12
 8001804:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001806:	68a3      	ldr	r3, [r4, #8]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001808:	6822      	ldr	r2, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800180a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800180e:	d107      	bne.n	8001820 <HAL_UART_Transmit+0x9e>
 8001810:	6923      	ldr	r3, [r4, #16]
 8001812:	b92b      	cbnz	r3, 8001820 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001814:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001818:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800181c:	8513      	strh	r3, [r2, #40]	; 0x28
 800181e:	e7d0      	b.n	80017c2 <HAL_UART_Transmit+0x40>
 8001820:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001824:	e7fa      	b.n	800181c <HAL_UART_Transmit+0x9a>
      return  HAL_ERROR;
 8001826:	2001      	movs	r0, #1
 8001828:	e7eb      	b.n	8001802 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 800182a:	2002      	movs	r0, #2
 800182c:	e7e9      	b.n	8001802 <HAL_UART_Transmit+0x80>

0800182e <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800182e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001832:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8001834:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8001838:	2b20      	cmp	r3, #32
{
 800183a:	460d      	mov	r5, r1
 800183c:	4604      	mov	r4, r0
 800183e:	4611      	mov	r1, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 8001840:	d15c      	bne.n	80018fc <HAL_UART_Receive+0xce>
  {
    if((pData == NULL ) || (Size == 0U))
 8001842:	2d00      	cmp	r5, #0
 8001844:	d058      	beq.n	80018f8 <HAL_UART_Receive+0xca>
 8001846:	2a00      	cmp	r2, #0
 8001848:	d056      	beq.n	80018f8 <HAL_UART_Receive+0xca>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800184a:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800184e:	2b01      	cmp	r3, #1
 8001850:	d054      	beq.n	80018fc <HAL_UART_Receive+0xce>
 8001852:	2301      	movs	r3, #1
 8001854:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->Instance->ICR = 0xFFFFFFFF;
 8001858:	6803      	ldr	r3, [r0, #0]
 800185a:	f04f 32ff 	mov.w	r2, #4294967295
 800185e:	621a      	str	r2, [r3, #32]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001860:	2300      	movs	r3, #0
 8001862:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001864:	2322      	movs	r3, #34	; 0x22
 8001866:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800186a:	f7ff fa2b 	bl	8000cc4 <HAL_GetTick>

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800186e:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 8001870:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8001874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8001878:	4680      	mov	r8, r0
    huart->RxXferCount = Size;
 800187a:	f8a4 105a 	strh.w	r1, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 800187e:	d115      	bne.n	80018ac <HAL_UART_Receive+0x7e>
 8001880:	6923      	ldr	r3, [r4, #16]
 8001882:	b98b      	cbnz	r3, 80018a8 <HAL_UART_Receive+0x7a>
 8001884:	f240 13ff 	movw	r3, #511	; 0x1ff
 8001888:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 800188c:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 8001890:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8001894:	b280      	uxth	r0, r0
 8001896:	b980      	cbnz	r0, 80018ba <HAL_UART_Receive+0x8c>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001898:	2320      	movs	r3, #32
 800189a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800189e:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  }
  else
  {
    return HAL_BUSY;
  }
}
 80018a2:	b002      	add	sp, #8
 80018a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 80018a8:	23ff      	movs	r3, #255	; 0xff
 80018aa:	e7ed      	b.n	8001888 <HAL_UART_Receive+0x5a>
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d1ed      	bne.n	800188c <HAL_UART_Receive+0x5e>
 80018b0:	6923      	ldr	r3, [r4, #16]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0f8      	beq.n	80018a8 <HAL_UART_Receive+0x7a>
 80018b6:	237f      	movs	r3, #127	; 0x7f
 80018b8:	e7e6      	b.n	8001888 <HAL_UART_Receive+0x5a>
      huart->RxXferCount--;
 80018ba:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80018be:	9600      	str	r6, [sp, #0]
      huart->RxXferCount--;
 80018c0:	3a01      	subs	r2, #1
 80018c2:	b292      	uxth	r2, r2
 80018c4:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80018c8:	4643      	mov	r3, r8
 80018ca:	2200      	movs	r2, #0
 80018cc:	2120      	movs	r1, #32
 80018ce:	4620      	mov	r0, r4
 80018d0:	f7ff fece 	bl	8001670 <UART_WaitOnFlagUntilTimeout>
 80018d4:	b9a0      	cbnz	r0, 8001900 <HAL_UART_Receive+0xd2>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80018d6:	68a2      	ldr	r2, [r4, #8]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80018d8:	6823      	ldr	r3, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80018da:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80018de:	d106      	bne.n	80018ee <HAL_UART_Receive+0xc0>
 80018e0:	6922      	ldr	r2, [r4, #16]
 80018e2:	b922      	cbnz	r2, 80018ee <HAL_UART_Receive+0xc0>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80018e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80018e6:	403b      	ands	r3, r7
 80018e8:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 80018ec:	e7d0      	b.n	8001890 <HAL_UART_Receive+0x62>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80018ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80018f0:	403b      	ands	r3, r7
 80018f2:	f805 3b01 	strb.w	r3, [r5], #1
 80018f6:	e7cb      	b.n	8001890 <HAL_UART_Receive+0x62>
      return  HAL_ERROR;
 80018f8:	2001      	movs	r0, #1
 80018fa:	e7d2      	b.n	80018a2 <HAL_UART_Receive+0x74>
    return HAL_BUSY;
 80018fc:	2002      	movs	r0, #2
 80018fe:	e7d0      	b.n	80018a2 <HAL_UART_Receive+0x74>
        return HAL_TIMEOUT;
 8001900:	2003      	movs	r0, #3
 8001902:	e7ce      	b.n	80018a2 <HAL_UART_Receive+0x74>

08001904 <Reset_Handler>:
 8001904:	2100      	movs	r1, #0
 8001906:	e003      	b.n	8001910 <LoopCopyDataInit>

08001908 <CopyDataInit>:
 8001908:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <LoopForever+0x2>)
 800190a:	585b      	ldr	r3, [r3, r1]
 800190c:	5043      	str	r3, [r0, r1]
 800190e:	3104      	adds	r1, #4

08001910 <LoopCopyDataInit>:
 8001910:	480a      	ldr	r0, [pc, #40]	; (800193c <LoopForever+0x6>)
 8001912:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <LoopForever+0xa>)
 8001914:	1842      	adds	r2, r0, r1
 8001916:	429a      	cmp	r2, r3
 8001918:	d3f6      	bcc.n	8001908 <CopyDataInit>
 800191a:	4a0a      	ldr	r2, [pc, #40]	; (8001944 <LoopForever+0xe>)
 800191c:	e002      	b.n	8001924 <LoopFillZerobss>

0800191e <FillZerobss>:
 800191e:	2300      	movs	r3, #0
 8001920:	6013      	str	r3, [r2, #0]
 8001922:	3204      	adds	r2, #4

08001924 <LoopFillZerobss>:
 8001924:	4b08      	ldr	r3, [pc, #32]	; (8001948 <LoopForever+0x12>)
 8001926:	429a      	cmp	r2, r3
 8001928:	d3f9      	bcc.n	800191e <FillZerobss>
 800192a:	f3af 8000 	nop.w
 800192e:	f000 f967 	bl	8001c00 <__libc_init_array>
 8001932:	f7fe ffb3 	bl	800089c <main>

08001936 <LoopForever>:
 8001936:	e7fe      	b.n	8001936 <LoopForever>
 8001938:	08001cb0 	.word	0x08001cb0
 800193c:	20000000 	.word	0x20000000
 8001940:	200088b8 	.word	0x200088b8
 8001944:	200088b8 	.word	0x200088b8
 8001948:	20008a10 	.word	0x20008a10

0800194c <BusFault_Handler>:
 800194c:	e7fe      	b.n	800194c <BusFault_Handler>
 800194e:	0000      	movs	r0, r0

08001950 <expf>:
 8001950:	b538      	push	{r3, r4, r5, lr}
 8001952:	4604      	mov	r4, r0
 8001954:	f000 f82a 	bl	80019ac <__ieee754_expf>
 8001958:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <expf+0x50>)
 800195a:	f993 3000 	ldrsb.w	r3, [r3]
 800195e:	3301      	adds	r3, #1
 8001960:	4605      	mov	r5, r0
 8001962:	d00d      	beq.n	8001980 <expf+0x30>
 8001964:	4620      	mov	r0, r4
 8001966:	f000 f93d 	bl	8001be4 <finitef>
 800196a:	b148      	cbz	r0, 8001980 <expf+0x30>
 800196c:	490d      	ldr	r1, [pc, #52]	; (80019a4 <expf+0x54>)
 800196e:	4620      	mov	r0, r4
 8001970:	f7fe fef4 	bl	800075c <__aeabi_fcmpgt>
 8001974:	b960      	cbnz	r0, 8001990 <expf+0x40>
 8001976:	490c      	ldr	r1, [pc, #48]	; (80019a8 <expf+0x58>)
 8001978:	4620      	mov	r0, r4
 800197a:	f7fe fed1 	bl	8000720 <__aeabi_fcmplt>
 800197e:	b908      	cbnz	r0, 8001984 <expf+0x34>
 8001980:	4628      	mov	r0, r5
 8001982:	bd38      	pop	{r3, r4, r5, pc}
 8001984:	f000 f936 	bl	8001bf4 <__errno>
 8001988:	2322      	movs	r3, #34	; 0x22
 800198a:	2500      	movs	r5, #0
 800198c:	6003      	str	r3, [r0, #0]
 800198e:	e7f7      	b.n	8001980 <expf+0x30>
 8001990:	f000 f930 	bl	8001bf4 <__errno>
 8001994:	2322      	movs	r3, #34	; 0x22
 8001996:	f04f 45ff 	mov.w	r5, #2139095040	; 0x7f800000
 800199a:	6003      	str	r3, [r0, #0]
 800199c:	e7f0      	b.n	8001980 <expf+0x30>
 800199e:	bf00      	nop
 80019a0:	20008850 	.word	0x20008850
 80019a4:	42b17180 	.word	0x42b17180
 80019a8:	c2cff1b5 	.word	0xc2cff1b5

080019ac <__ieee754_expf>:
 80019ac:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80019b0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80019b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019b8:	4604      	mov	r4, r0
 80019ba:	d86a      	bhi.n	8001a92 <__ieee754_expf+0xe6>
 80019bc:	ea4f 75d0 	mov.w	r5, r0, lsr #31
 80019c0:	f000 80c2 	beq.w	8001b48 <__ieee754_expf+0x19c>
 80019c4:	4977      	ldr	r1, [pc, #476]	; (8001ba4 <__ieee754_expf+0x1f8>)
 80019c6:	4288      	cmp	r0, r1
 80019c8:	dc68      	bgt.n	8001a9c <__ieee754_expf+0xf0>
 80019ca:	2800      	cmp	r0, #0
 80019cc:	f2c0 80b5 	blt.w	8001b3a <__ieee754_expf+0x18e>
 80019d0:	4b75      	ldr	r3, [pc, #468]	; (8001ba8 <__ieee754_expf+0x1fc>)
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d968      	bls.n	8001aa8 <__ieee754_expf+0xfc>
 80019d6:	4b75      	ldr	r3, [pc, #468]	; (8001bac <__ieee754_expf+0x200>)
 80019d8:	429a      	cmp	r2, r3
 80019da:	f200 80c0 	bhi.w	8001b5e <__ieee754_expf+0x1b2>
 80019de:	4b74      	ldr	r3, [pc, #464]	; (8001bb0 <__ieee754_expf+0x204>)
 80019e0:	4620      	mov	r0, r4
 80019e2:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 80019e6:	f7fe fbf3 	bl	80001d0 <__aeabi_fsub>
 80019ea:	4b72      	ldr	r3, [pc, #456]	; (8001bb4 <__ieee754_expf+0x208>)
 80019ec:	f1c5 0601 	rsb	r6, r5, #1
 80019f0:	f853 9025 	ldr.w	r9, [r3, r5, lsl #2]
 80019f4:	4680      	mov	r8, r0
 80019f6:	1b76      	subs	r6, r6, r5
 80019f8:	4649      	mov	r1, r9
 80019fa:	4640      	mov	r0, r8
 80019fc:	f7fe fbe8 	bl	80001d0 <__aeabi_fsub>
 8001a00:	4601      	mov	r1, r0
 8001a02:	4605      	mov	r5, r0
 8001a04:	f7fe fcee 	bl	80003e4 <__aeabi_fmul>
 8001a08:	496b      	ldr	r1, [pc, #428]	; (8001bb8 <__ieee754_expf+0x20c>)
 8001a0a:	4604      	mov	r4, r0
 8001a0c:	f7fe fcea 	bl	80003e4 <__aeabi_fmul>
 8001a10:	496a      	ldr	r1, [pc, #424]	; (8001bbc <__ieee754_expf+0x210>)
 8001a12:	f7fe fbdd 	bl	80001d0 <__aeabi_fsub>
 8001a16:	4621      	mov	r1, r4
 8001a18:	f7fe fce4 	bl	80003e4 <__aeabi_fmul>
 8001a1c:	4968      	ldr	r1, [pc, #416]	; (8001bc0 <__ieee754_expf+0x214>)
 8001a1e:	f7fe fbd9 	bl	80001d4 <__addsf3>
 8001a22:	4621      	mov	r1, r4
 8001a24:	f7fe fcde 	bl	80003e4 <__aeabi_fmul>
 8001a28:	4966      	ldr	r1, [pc, #408]	; (8001bc4 <__ieee754_expf+0x218>)
 8001a2a:	f7fe fbd1 	bl	80001d0 <__aeabi_fsub>
 8001a2e:	4621      	mov	r1, r4
 8001a30:	f7fe fcd8 	bl	80003e4 <__aeabi_fmul>
 8001a34:	4964      	ldr	r1, [pc, #400]	; (8001bc8 <__ieee754_expf+0x21c>)
 8001a36:	f7fe fbcd 	bl	80001d4 <__addsf3>
 8001a3a:	4621      	mov	r1, r4
 8001a3c:	f7fe fcd2 	bl	80003e4 <__aeabi_fmul>
 8001a40:	4601      	mov	r1, r0
 8001a42:	4628      	mov	r0, r5
 8001a44:	f7fe fbc4 	bl	80001d0 <__aeabi_fsub>
 8001a48:	462c      	mov	r4, r5
 8001a4a:	4607      	mov	r7, r0
 8001a4c:	4682      	mov	sl, r0
 8001a4e:	2e00      	cmp	r6, #0
 8001a50:	d05c      	beq.n	8001b0c <__ieee754_expf+0x160>
 8001a52:	4639      	mov	r1, r7
 8001a54:	4628      	mov	r0, r5
 8001a56:	f7fe fcc5 	bl	80003e4 <__aeabi_fmul>
 8001a5a:	4639      	mov	r1, r7
 8001a5c:	4604      	mov	r4, r0
 8001a5e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001a62:	f7fe fbb5 	bl	80001d0 <__aeabi_fsub>
 8001a66:	4601      	mov	r1, r0
 8001a68:	4620      	mov	r0, r4
 8001a6a:	f7fe fd6f 	bl	800054c <__aeabi_fdiv>
 8001a6e:	4601      	mov	r1, r0
 8001a70:	4648      	mov	r0, r9
 8001a72:	f7fe fbad 	bl	80001d0 <__aeabi_fsub>
 8001a76:	4641      	mov	r1, r8
 8001a78:	f7fe fbaa 	bl	80001d0 <__aeabi_fsub>
 8001a7c:	4601      	mov	r1, r0
 8001a7e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001a82:	f7fe fba5 	bl	80001d0 <__aeabi_fsub>
 8001a86:	f116 0f7d 	cmn.w	r6, #125	; 0x7d
 8001a8a:	db60      	blt.n	8001b4e <__ieee754_expf+0x1a2>
 8001a8c:	eb00 50c6 	add.w	r0, r0, r6, lsl #23
 8001a90:	e002      	b.n	8001a98 <__ieee754_expf+0xec>
 8001a92:	4601      	mov	r1, r0
 8001a94:	f7fe fb9e 	bl	80001d4 <__addsf3>
 8001a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a9c:	494b      	ldr	r1, [pc, #300]	; (8001bcc <__ieee754_expf+0x220>)
 8001a9e:	4608      	mov	r0, r1
 8001aa0:	f7fe fca0 	bl	80003e4 <__aeabi_fmul>
 8001aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001aa8:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8001aac:	d209      	bcs.n	8001ac2 <__ieee754_expf+0x116>
 8001aae:	4947      	ldr	r1, [pc, #284]	; (8001bcc <__ieee754_expf+0x220>)
 8001ab0:	4620      	mov	r0, r4
 8001ab2:	f7fe fb8f 	bl	80001d4 <__addsf3>
 8001ab6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001aba:	f7fe fe4f 	bl	800075c <__aeabi_fcmpgt>
 8001abe:	2800      	cmp	r0, #0
 8001ac0:	d16a      	bne.n	8001b98 <__ieee754_expf+0x1ec>
 8001ac2:	4621      	mov	r1, r4
 8001ac4:	4620      	mov	r0, r4
 8001ac6:	f7fe fc8d 	bl	80003e4 <__aeabi_fmul>
 8001aca:	493b      	ldr	r1, [pc, #236]	; (8001bb8 <__ieee754_expf+0x20c>)
 8001acc:	4605      	mov	r5, r0
 8001ace:	f7fe fc89 	bl	80003e4 <__aeabi_fmul>
 8001ad2:	493a      	ldr	r1, [pc, #232]	; (8001bbc <__ieee754_expf+0x210>)
 8001ad4:	f7fe fb7c 	bl	80001d0 <__aeabi_fsub>
 8001ad8:	4629      	mov	r1, r5
 8001ada:	f7fe fc83 	bl	80003e4 <__aeabi_fmul>
 8001ade:	4938      	ldr	r1, [pc, #224]	; (8001bc0 <__ieee754_expf+0x214>)
 8001ae0:	f7fe fb78 	bl	80001d4 <__addsf3>
 8001ae4:	4629      	mov	r1, r5
 8001ae6:	f7fe fc7d 	bl	80003e4 <__aeabi_fmul>
 8001aea:	4936      	ldr	r1, [pc, #216]	; (8001bc4 <__ieee754_expf+0x218>)
 8001aec:	f7fe fb70 	bl	80001d0 <__aeabi_fsub>
 8001af0:	4629      	mov	r1, r5
 8001af2:	f7fe fc77 	bl	80003e4 <__aeabi_fmul>
 8001af6:	4934      	ldr	r1, [pc, #208]	; (8001bc8 <__ieee754_expf+0x21c>)
 8001af8:	f7fe fb6c 	bl	80001d4 <__addsf3>
 8001afc:	4629      	mov	r1, r5
 8001afe:	f7fe fc71 	bl	80003e4 <__aeabi_fmul>
 8001b02:	4601      	mov	r1, r0
 8001b04:	4620      	mov	r0, r4
 8001b06:	f7fe fb63 	bl	80001d0 <__aeabi_fsub>
 8001b0a:	4682      	mov	sl, r0
 8001b0c:	4651      	mov	r1, sl
 8001b0e:	4620      	mov	r0, r4
 8001b10:	f7fe fc68 	bl	80003e4 <__aeabi_fmul>
 8001b14:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001b18:	4605      	mov	r5, r0
 8001b1a:	4650      	mov	r0, sl
 8001b1c:	f7fe fb58 	bl	80001d0 <__aeabi_fsub>
 8001b20:	4601      	mov	r1, r0
 8001b22:	4628      	mov	r0, r5
 8001b24:	f7fe fd12 	bl	800054c <__aeabi_fdiv>
 8001b28:	4621      	mov	r1, r4
 8001b2a:	f7fe fb51 	bl	80001d0 <__aeabi_fsub>
 8001b2e:	4601      	mov	r1, r0
 8001b30:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001b34:	f7fe fb4c 	bl	80001d0 <__aeabi_fsub>
 8001b38:	e7ae      	b.n	8001a98 <__ieee754_expf+0xec>
 8001b3a:	4b25      	ldr	r3, [pc, #148]	; (8001bd0 <__ieee754_expf+0x224>)
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	f67f af47 	bls.w	80019d0 <__ieee754_expf+0x24>
 8001b42:	2000      	movs	r0, #0
 8001b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b48:	2d00      	cmp	r5, #0
 8001b4a:	d1fa      	bne.n	8001b42 <__ieee754_expf+0x196>
 8001b4c:	e7a4      	b.n	8001a98 <__ieee754_expf+0xec>
 8001b4e:	3664      	adds	r6, #100	; 0x64
 8001b50:	f04f 6158 	mov.w	r1, #226492416	; 0xd800000
 8001b54:	eb00 50c6 	add.w	r0, r0, r6, lsl #23
 8001b58:	f7fe fc44 	bl	80003e4 <__aeabi_fmul>
 8001b5c:	e79c      	b.n	8001a98 <__ieee754_expf+0xec>
 8001b5e:	491d      	ldr	r1, [pc, #116]	; (8001bd4 <__ieee754_expf+0x228>)
 8001b60:	4620      	mov	r0, r4
 8001b62:	f7fe fc3f 	bl	80003e4 <__aeabi_fmul>
 8001b66:	4b1c      	ldr	r3, [pc, #112]	; (8001bd8 <__ieee754_expf+0x22c>)
 8001b68:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 8001b6c:	f7fe fb32 	bl	80001d4 <__addsf3>
 8001b70:	f7fe fdfe 	bl	8000770 <__aeabi_f2iz>
 8001b74:	4606      	mov	r6, r0
 8001b76:	f7fe fbe1 	bl	800033c <__aeabi_i2f>
 8001b7a:	4918      	ldr	r1, [pc, #96]	; (8001bdc <__ieee754_expf+0x230>)
 8001b7c:	4605      	mov	r5, r0
 8001b7e:	f7fe fc31 	bl	80003e4 <__aeabi_fmul>
 8001b82:	4601      	mov	r1, r0
 8001b84:	4620      	mov	r0, r4
 8001b86:	f7fe fb23 	bl	80001d0 <__aeabi_fsub>
 8001b8a:	4915      	ldr	r1, [pc, #84]	; (8001be0 <__ieee754_expf+0x234>)
 8001b8c:	4680      	mov	r8, r0
 8001b8e:	4628      	mov	r0, r5
 8001b90:	f7fe fc28 	bl	80003e4 <__aeabi_fmul>
 8001b94:	4681      	mov	r9, r0
 8001b96:	e72f      	b.n	80019f8 <__ieee754_expf+0x4c>
 8001b98:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001b9c:	4620      	mov	r0, r4
 8001b9e:	f7fe fb19 	bl	80001d4 <__addsf3>
 8001ba2:	e779      	b.n	8001a98 <__ieee754_expf+0xec>
 8001ba4:	42b17217 	.word	0x42b17217
 8001ba8:	3eb17218 	.word	0x3eb17218
 8001bac:	3f851591 	.word	0x3f851591
 8001bb0:	08001c98 	.word	0x08001c98
 8001bb4:	08001ca0 	.word	0x08001ca0
 8001bb8:	3331bb4c 	.word	0x3331bb4c
 8001bbc:	35ddea0e 	.word	0x35ddea0e
 8001bc0:	388ab355 	.word	0x388ab355
 8001bc4:	3b360b61 	.word	0x3b360b61
 8001bc8:	3e2aaaab 	.word	0x3e2aaaab
 8001bcc:	7149f2ca 	.word	0x7149f2ca
 8001bd0:	42cff1b5 	.word	0x42cff1b5
 8001bd4:	3fb8aa3b 	.word	0x3fb8aa3b
 8001bd8:	08001c90 	.word	0x08001c90
 8001bdc:	3f317180 	.word	0x3f317180
 8001be0:	3717f7d1 	.word	0x3717f7d1

08001be4 <finitef>:
 8001be4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001be8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8001bec:	bfac      	ite	ge
 8001bee:	2000      	movge	r0, #0
 8001bf0:	2001      	movlt	r0, #1
 8001bf2:	4770      	bx	lr

08001bf4 <__errno>:
 8001bf4:	4b01      	ldr	r3, [pc, #4]	; (8001bfc <__errno+0x8>)
 8001bf6:	6818      	ldr	r0, [r3, #0]
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	20008854 	.word	0x20008854

08001c00 <__libc_init_array>:
 8001c00:	b570      	push	{r4, r5, r6, lr}
 8001c02:	4d0d      	ldr	r5, [pc, #52]	; (8001c38 <__libc_init_array+0x38>)
 8001c04:	4c0d      	ldr	r4, [pc, #52]	; (8001c3c <__libc_init_array+0x3c>)
 8001c06:	1b64      	subs	r4, r4, r5
 8001c08:	10a4      	asrs	r4, r4, #2
 8001c0a:	2600      	movs	r6, #0
 8001c0c:	42a6      	cmp	r6, r4
 8001c0e:	d109      	bne.n	8001c24 <__libc_init_array+0x24>
 8001c10:	4d0b      	ldr	r5, [pc, #44]	; (8001c40 <__libc_init_array+0x40>)
 8001c12:	4c0c      	ldr	r4, [pc, #48]	; (8001c44 <__libc_init_array+0x44>)
 8001c14:	f000 f82e 	bl	8001c74 <_init>
 8001c18:	1b64      	subs	r4, r4, r5
 8001c1a:	10a4      	asrs	r4, r4, #2
 8001c1c:	2600      	movs	r6, #0
 8001c1e:	42a6      	cmp	r6, r4
 8001c20:	d105      	bne.n	8001c2e <__libc_init_array+0x2e>
 8001c22:	bd70      	pop	{r4, r5, r6, pc}
 8001c24:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c28:	4798      	blx	r3
 8001c2a:	3601      	adds	r6, #1
 8001c2c:	e7ee      	b.n	8001c0c <__libc_init_array+0xc>
 8001c2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c32:	4798      	blx	r3
 8001c34:	3601      	adds	r6, #1
 8001c36:	e7f2      	b.n	8001c1e <__libc_init_array+0x1e>
 8001c38:	08001ca8 	.word	0x08001ca8
 8001c3c:	08001ca8 	.word	0x08001ca8
 8001c40:	08001ca8 	.word	0x08001ca8
 8001c44:	08001cac 	.word	0x08001cac

08001c48 <memcpy>:
 8001c48:	440a      	add	r2, r1
 8001c4a:	4291      	cmp	r1, r2
 8001c4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8001c50:	d100      	bne.n	8001c54 <memcpy+0xc>
 8001c52:	4770      	bx	lr
 8001c54:	b510      	push	{r4, lr}
 8001c56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001c5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001c5e:	4291      	cmp	r1, r2
 8001c60:	d1f9      	bne.n	8001c56 <memcpy+0xe>
 8001c62:	bd10      	pop	{r4, pc}

08001c64 <memset>:
 8001c64:	4402      	add	r2, r0
 8001c66:	4603      	mov	r3, r0
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d100      	bne.n	8001c6e <memset+0xa>
 8001c6c:	4770      	bx	lr
 8001c6e:	f803 1b01 	strb.w	r1, [r3], #1
 8001c72:	e7f9      	b.n	8001c68 <memset+0x4>

08001c74 <_init>:
 8001c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c76:	bf00      	nop
 8001c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c7a:	bc08      	pop	{r3}
 8001c7c:	469e      	mov	lr, r3
 8001c7e:	4770      	bx	lr

08001c80 <_fini>:
 8001c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c82:	bf00      	nop
 8001c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c86:	bc08      	pop	{r3}
 8001c88:	469e      	mov	lr, r3
 8001c8a:	4770      	bx	lr
