
MLP-CWLITEARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000569c  080001c0  080001c0  000101c0  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000938  08005860  08005860  00015860  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006198  08006198  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08006198  08006198  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006198  08006198  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006198  08006198  00016198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800619c  0800619c  0001619c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080061a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000068  08006208  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  200001dc  08006208  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      0000009f  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003732f  00000000  00000000  00020131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a25e  00000000  00000000  00057460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0000a1a6  00000000  00000000  000616be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b40  00000000  00000000  0006b868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000a80  00000000  00000000  0006c3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cd7b  00000000  00000000  0006ce28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003de9  00000000  00000000  00079ba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000019b4  00000000  00000000  0007d98c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000204  00000000  00000000  0007f340  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001fc  00000000  00000000  0007f544  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <deregister_tm_clones>:
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <deregister_tm_clones+0x10>)
 80001c2:	4b04      	ldr	r3, [pc, #16]	; (80001d4 <deregister_tm_clones+0x14>)
 80001c4:	4283      	cmp	r3, r0
 80001c6:	d002      	beq.n	80001ce <deregister_tm_clones+0xe>
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <deregister_tm_clones+0x18>)
 80001ca:	b103      	cbz	r3, 80001ce <deregister_tm_clones+0xe>
 80001cc:	4718      	bx	r3
 80001ce:	4770      	bx	lr
 80001d0:	20000068 	.word	0x20000068
 80001d4:	20000068 	.word	0x20000068
 80001d8:	00000000 	.word	0x00000000

080001dc <register_tm_clones>:
 80001dc:	4805      	ldr	r0, [pc, #20]	; (80001f4 <register_tm_clones+0x18>)
 80001de:	4906      	ldr	r1, [pc, #24]	; (80001f8 <register_tm_clones+0x1c>)
 80001e0:	1a09      	subs	r1, r1, r0
 80001e2:	1089      	asrs	r1, r1, #2
 80001e4:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80001e8:	1049      	asrs	r1, r1, #1
 80001ea:	d002      	beq.n	80001f2 <register_tm_clones+0x16>
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <register_tm_clones+0x20>)
 80001ee:	b103      	cbz	r3, 80001f2 <register_tm_clones+0x16>
 80001f0:	4718      	bx	r3
 80001f2:	4770      	bx	lr
 80001f4:	20000068 	.word	0x20000068
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c06      	ldr	r4, [pc, #24]	; (800021c <__do_global_dtors_aux+0x1c>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b943      	cbnz	r3, 800021a <__do_global_dtors_aux+0x1a>
 8000208:	f7ff ffda 	bl	80001c0 <deregister_tm_clones>
 800020c:	4b04      	ldr	r3, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	b113      	cbz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000210:	4804      	ldr	r0, [pc, #16]	; (8000224 <__do_global_dtors_aux+0x24>)
 8000212:	f3af 8000 	nop.w
 8000216:	2301      	movs	r3, #1
 8000218:	7023      	strb	r3, [r4, #0]
 800021a:	bd10      	pop	{r4, pc}
 800021c:	20000068 	.word	0x20000068
 8000220:	00000000 	.word	0x00000000
 8000224:	08005844 	.word	0x08005844

08000228 <frame_dummy>:
 8000228:	b508      	push	{r3, lr}
 800022a:	4b04      	ldr	r3, [pc, #16]	; (800023c <frame_dummy+0x14>)
 800022c:	b11b      	cbz	r3, 8000236 <frame_dummy+0xe>
 800022e:	4904      	ldr	r1, [pc, #16]	; (8000240 <frame_dummy+0x18>)
 8000230:	4804      	ldr	r0, [pc, #16]	; (8000244 <frame_dummy+0x1c>)
 8000232:	f3af 8000 	nop.w
 8000236:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800023a:	e7cf      	b.n	80001dc <register_tm_clones>
 800023c:	00000000 	.word	0x00000000
 8000240:	2000006c 	.word	0x2000006c
 8000244:	08005844 	.word	0x08005844

08000248 <tanh>:
 8000248:	4a3a      	ldr	r2, [pc, #232]	; (8000334 <tanh+0xec>)
 800024a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800024e:	4293      	cmp	r3, r2
 8000250:	b570      	push	{r4, r5, r6, lr}
 8000252:	460d      	mov	r5, r1
 8000254:	460c      	mov	r4, r1
 8000256:	4606      	mov	r6, r0
 8000258:	dd18      	ble.n	800028c <tanh+0x44>
 800025a:	4602      	mov	r2, r0
 800025c:	460b      	mov	r3, r1
 800025e:	2000      	movs	r0, #0
 8000260:	4935      	ldr	r1, [pc, #212]	; (8000338 <tanh+0xf0>)
 8000262:	f001 f827 	bl	80012b4 <__aeabi_ddiv>
 8000266:	2d00      	cmp	r5, #0
 8000268:	f04f 0200 	mov.w	r2, #0
 800026c:	4b32      	ldr	r3, [pc, #200]	; (8000338 <tanh+0xf0>)
 800026e:	db06      	blt.n	800027e <tanh+0x36>
 8000270:	f000 fd40 	bl	8000cf4 <__adddf3>
 8000274:	4602      	mov	r2, r0
 8000276:	460b      	mov	r3, r1
 8000278:	4610      	mov	r0, r2
 800027a:	4619      	mov	r1, r3
 800027c:	bd70      	pop	{r4, r5, r6, pc}
 800027e:	f000 fd37 	bl	8000cf0 <__aeabi_dsub>
 8000282:	4602      	mov	r2, r0
 8000284:	460b      	mov	r3, r1
 8000286:	4610      	mov	r0, r2
 8000288:	4619      	mov	r1, r3
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	4a2b      	ldr	r2, [pc, #172]	; (800033c <tanh+0xf4>)
 800028e:	4293      	cmp	r3, r2
 8000290:	dc22      	bgt.n	80002d8 <tanh+0x90>
 8000292:	f1b3 5f72 	cmp.w	r3, #1015021568	; 0x3c800000
 8000296:	db28      	blt.n	80002ea <tanh+0xa2>
 8000298:	4a29      	ldr	r2, [pc, #164]	; (8000340 <tanh+0xf8>)
 800029a:	4293      	cmp	r3, r2
 800029c:	dd30      	ble.n	8000300 <tanh+0xb8>
 800029e:	f000 fc83 	bl	8000ba8 <fabs>
 80002a2:	4602      	mov	r2, r0
 80002a4:	460b      	mov	r3, r1
 80002a6:	f000 fd25 	bl	8000cf4 <__adddf3>
 80002aa:	f000 fa45 	bl	8000738 <expm1>
 80002ae:	2200      	movs	r2, #0
 80002b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002b4:	f000 fd1e 	bl	8000cf4 <__adddf3>
 80002b8:	4602      	mov	r2, r0
 80002ba:	460b      	mov	r3, r1
 80002bc:	2000      	movs	r0, #0
 80002be:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80002c2:	f000 fff7 	bl	80012b4 <__aeabi_ddiv>
 80002c6:	4602      	mov	r2, r0
 80002c8:	460b      	mov	r3, r1
 80002ca:	2000      	movs	r0, #0
 80002cc:	491a      	ldr	r1, [pc, #104]	; (8000338 <tanh+0xf0>)
 80002ce:	f000 fd0f 	bl	8000cf0 <__aeabi_dsub>
 80002d2:	4602      	mov	r2, r0
 80002d4:	460b      	mov	r3, r1
 80002d6:	e001      	b.n	80002dc <tanh+0x94>
 80002d8:	4b17      	ldr	r3, [pc, #92]	; (8000338 <tanh+0xf0>)
 80002da:	2200      	movs	r2, #0
 80002dc:	2c00      	cmp	r4, #0
 80002de:	bfb8      	it	lt
 80002e0:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80002e4:	4610      	mov	r0, r2
 80002e6:	4619      	mov	r1, r3
 80002e8:	bd70      	pop	{r4, r5, r6, pc}
 80002ea:	2200      	movs	r2, #0
 80002ec:	4b12      	ldr	r3, [pc, #72]	; (8000338 <tanh+0xf0>)
 80002ee:	f000 fd01 	bl	8000cf4 <__adddf3>
 80002f2:	4632      	mov	r2, r6
 80002f4:	462b      	mov	r3, r5
 80002f6:	f000 feb3 	bl	8001060 <__aeabi_dmul>
 80002fa:	4602      	mov	r2, r0
 80002fc:	460b      	mov	r3, r1
 80002fe:	e7bb      	b.n	8000278 <tanh+0x30>
 8000300:	f000 fc52 	bl	8000ba8 <fabs>
 8000304:	2200      	movs	r2, #0
 8000306:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800030a:	f000 fea9 	bl	8001060 <__aeabi_dmul>
 800030e:	f000 fa13 	bl	8000738 <expm1>
 8000312:	2200      	movs	r2, #0
 8000314:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000318:	4606      	mov	r6, r0
 800031a:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800031e:	f000 fce9 	bl	8000cf4 <__adddf3>
 8000322:	4602      	mov	r2, r0
 8000324:	460b      	mov	r3, r1
 8000326:	4630      	mov	r0, r6
 8000328:	4629      	mov	r1, r5
 800032a:	f000 ffc3 	bl	80012b4 <__aeabi_ddiv>
 800032e:	4602      	mov	r2, r0
 8000330:	460b      	mov	r3, r1
 8000332:	e7d3      	b.n	80002dc <tanh+0x94>
 8000334:	7fefffff 	.word	0x7fefffff
 8000338:	3ff00000 	.word	0x3ff00000
 800033c:	4035ffff 	.word	0x4035ffff
 8000340:	3fefffff 	.word	0x3fefffff
 8000344:	00000000 	.word	0x00000000

08000348 <exp>:
 8000348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800034a:	4604      	mov	r4, r0
 800034c:	460d      	mov	r5, r1
 800034e:	f000 f83b 	bl	80003c8 <__ieee754_exp>
 8000352:	4b1b      	ldr	r3, [pc, #108]	; (80003c0 <exp+0x78>)
 8000354:	f993 3000 	ldrsb.w	r3, [r3]
 8000358:	3301      	adds	r3, #1
 800035a:	4606      	mov	r6, r0
 800035c:	460f      	mov	r7, r1
 800035e:	d014      	beq.n	800038a <exp+0x42>
 8000360:	4620      	mov	r0, r4
 8000362:	4629      	mov	r1, r5
 8000364:	f000 fc24 	bl	8000bb0 <finite>
 8000368:	b178      	cbz	r0, 800038a <exp+0x42>
 800036a:	a311      	add	r3, pc, #68	; (adr r3, 80003b0 <exp+0x68>)
 800036c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000370:	4620      	mov	r0, r4
 8000372:	4629      	mov	r1, r5
 8000374:	f001 f904 	bl	8001580 <__aeabi_dcmpgt>
 8000378:	b988      	cbnz	r0, 800039e <exp+0x56>
 800037a:	4620      	mov	r0, r4
 800037c:	4629      	mov	r1, r5
 800037e:	a30e      	add	r3, pc, #56	; (adr r3, 80003b8 <exp+0x70>)
 8000380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000384:	f001 f8de 	bl	8001544 <__aeabi_dcmplt>
 8000388:	b910      	cbnz	r0, 8000390 <exp+0x48>
 800038a:	4630      	mov	r0, r6
 800038c:	4639      	mov	r1, r7
 800038e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000390:	f001 f96e 	bl	8001670 <__errno>
 8000394:	2322      	movs	r3, #34	; 0x22
 8000396:	6003      	str	r3, [r0, #0]
 8000398:	2600      	movs	r6, #0
 800039a:	2700      	movs	r7, #0
 800039c:	e7f5      	b.n	800038a <exp+0x42>
 800039e:	f001 f967 	bl	8001670 <__errno>
 80003a2:	2322      	movs	r3, #34	; 0x22
 80003a4:	6003      	str	r3, [r0, #0]
 80003a6:	2600      	movs	r6, #0
 80003a8:	4f06      	ldr	r7, [pc, #24]	; (80003c4 <exp+0x7c>)
 80003aa:	e7ee      	b.n	800038a <exp+0x42>
 80003ac:	f3af 8000 	nop.w
 80003b0:	fefa39ef 	.word	0xfefa39ef
 80003b4:	40862e42 	.word	0x40862e42
 80003b8:	d52d3051 	.word	0xd52d3051
 80003bc:	c0874910 	.word	0xc0874910
 80003c0:	20000000 	.word	0x20000000
 80003c4:	7ff00000 	.word	0x7ff00000

080003c8 <__ieee754_exp>:
 80003c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80003cc:	4fd2      	ldr	r7, [pc, #840]	; (8000718 <__ieee754_exp+0x350>)
 80003ce:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80003d2:	42ba      	cmp	r2, r7
 80003d4:	b087      	sub	sp, #28
 80003d6:	460c      	mov	r4, r1
 80003d8:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 80003dc:	4605      	mov	r5, r0
 80003de:	d911      	bls.n	8000404 <__ieee754_exp+0x3c>
 80003e0:	4fce      	ldr	r7, [pc, #824]	; (800071c <__ieee754_exp+0x354>)
 80003e2:	42ba      	cmp	r2, r7
 80003e4:	d929      	bls.n	800043a <__ieee754_exp+0x72>
 80003e6:	f3c1 0313 	ubfx	r3, r1, #0, #20
 80003ea:	4303      	orrs	r3, r0
 80003ec:	4602      	mov	r2, r0
 80003ee:	f040 8146 	bne.w	800067e <__ieee754_exp+0x2b6>
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	f000 80e2 	beq.w	80005bc <__ieee754_exp+0x1f4>
 80003f8:	2500      	movs	r5, #0
 80003fa:	4629      	mov	r1, r5
 80003fc:	4628      	mov	r0, r5
 80003fe:	b007      	add	sp, #28
 8000400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000404:	4bc6      	ldr	r3, [pc, #792]	; (8000720 <__ieee754_exp+0x358>)
 8000406:	429a      	cmp	r2, r3
 8000408:	d854      	bhi.n	80004b4 <__ieee754_exp+0xec>
 800040a:	4bc6      	ldr	r3, [pc, #792]	; (8000724 <__ieee754_exp+0x35c>)
 800040c:	429a      	cmp	r2, r3
 800040e:	f200 80d9 	bhi.w	80005c4 <__ieee754_exp+0x1fc>
 8000412:	a3ab      	add	r3, pc, #684	; (adr r3, 80006c0 <__ieee754_exp+0x2f8>)
 8000414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000418:	f000 fc6c 	bl	8000cf4 <__adddf3>
 800041c:	2200      	movs	r2, #0
 800041e:	4bc2      	ldr	r3, [pc, #776]	; (8000728 <__ieee754_exp+0x360>)
 8000420:	f001 f8ae 	bl	8001580 <__aeabi_dcmpgt>
 8000424:	2800      	cmp	r0, #0
 8000426:	f000 80cd 	beq.w	80005c4 <__ieee754_exp+0x1fc>
 800042a:	4628      	mov	r0, r5
 800042c:	4621      	mov	r1, r4
 800042e:	2200      	movs	r2, #0
 8000430:	4bbd      	ldr	r3, [pc, #756]	; (8000728 <__ieee754_exp+0x360>)
 8000432:	f000 fc5f 	bl	8000cf4 <__adddf3>
 8000436:	4605      	mov	r5, r0
 8000438:	e0c0      	b.n	80005bc <__ieee754_exp+0x1f4>
 800043a:	a3a3      	add	r3, pc, #652	; (adr r3, 80006c8 <__ieee754_exp+0x300>)
 800043c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000440:	f001 f89e 	bl	8001580 <__aeabi_dcmpgt>
 8000444:	2800      	cmp	r0, #0
 8000446:	f040 8122 	bne.w	800068e <__ieee754_exp+0x2c6>
 800044a:	4628      	mov	r0, r5
 800044c:	4621      	mov	r1, r4
 800044e:	a3a0      	add	r3, pc, #640	; (adr r3, 80006d0 <__ieee754_exp+0x308>)
 8000450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000454:	f001 f876 	bl	8001544 <__aeabi_dcmplt>
 8000458:	2800      	cmp	r0, #0
 800045a:	d1cd      	bne.n	80003f8 <__ieee754_exp+0x30>
 800045c:	4bb3      	ldr	r3, [pc, #716]	; (800072c <__ieee754_exp+0x364>)
 800045e:	4628      	mov	r0, r5
 8000460:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8000464:	4621      	mov	r1, r4
 8000466:	a39c      	add	r3, pc, #624	; (adr r3, 80006d8 <__ieee754_exp+0x310>)
 8000468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800046c:	f000 fdf8 	bl	8001060 <__aeabi_dmul>
 8000470:	e9d6 2308 	ldrd	r2, r3, [r6, #32]
 8000474:	f000 fc3e 	bl	8000cf4 <__adddf3>
 8000478:	f001 f8a2 	bl	80015c0 <__aeabi_d2iz>
 800047c:	4680      	mov	r8, r0
 800047e:	f000 fd85 	bl	8000f8c <__aeabi_i2d>
 8000482:	a397      	add	r3, pc, #604	; (adr r3, 80006e0 <__ieee754_exp+0x318>)
 8000484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000488:	4606      	mov	r6, r0
 800048a:	460f      	mov	r7, r1
 800048c:	f000 fde8 	bl	8001060 <__aeabi_dmul>
 8000490:	4602      	mov	r2, r0
 8000492:	460b      	mov	r3, r1
 8000494:	4628      	mov	r0, r5
 8000496:	4621      	mov	r1, r4
 8000498:	f000 fc2a 	bl	8000cf0 <__aeabi_dsub>
 800049c:	a392      	add	r3, pc, #584	; (adr r3, 80006e8 <__ieee754_exp+0x320>)
 800049e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80004a2:	e9cd 0100 	strd	r0, r1, [sp]
 80004a6:	4630      	mov	r0, r6
 80004a8:	4639      	mov	r1, r7
 80004aa:	f000 fdd9 	bl	8001060 <__aeabi_dmul>
 80004ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80004b2:	e013      	b.n	80004dc <__ieee754_exp+0x114>
 80004b4:	4b9e      	ldr	r3, [pc, #632]	; (8000730 <__ieee754_exp+0x368>)
 80004b6:	429a      	cmp	r2, r3
 80004b8:	d8d0      	bhi.n	800045c <__ieee754_exp+0x94>
 80004ba:	4c9c      	ldr	r4, [pc, #624]	; (800072c <__ieee754_exp+0x364>)
 80004bc:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80004c0:	e9d4 2300 	ldrd	r2, r3, [r4]
 80004c4:	f000 fc14 	bl	8000cf0 <__aeabi_dsub>
 80004c8:	e9cd 0100 	strd	r0, r1, [sp]
 80004cc:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 80004d0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80004d4:	f1c6 0301 	rsb	r3, r6, #1
 80004d8:	eba3 0806 	sub.w	r8, r3, r6
 80004dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80004e4:	f000 fc04 	bl	8000cf0 <__aeabi_dsub>
 80004e8:	4602      	mov	r2, r0
 80004ea:	460b      	mov	r3, r1
 80004ec:	4605      	mov	r5, r0
 80004ee:	460c      	mov	r4, r1
 80004f0:	f000 fdb6 	bl	8001060 <__aeabi_dmul>
 80004f4:	a37e      	add	r3, pc, #504	; (adr r3, 80006f0 <__ieee754_exp+0x328>)
 80004f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80004fa:	4606      	mov	r6, r0
 80004fc:	460f      	mov	r7, r1
 80004fe:	f000 fdaf 	bl	8001060 <__aeabi_dmul>
 8000502:	a37d      	add	r3, pc, #500	; (adr r3, 80006f8 <__ieee754_exp+0x330>)
 8000504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000508:	f000 fbf2 	bl	8000cf0 <__aeabi_dsub>
 800050c:	4632      	mov	r2, r6
 800050e:	463b      	mov	r3, r7
 8000510:	f000 fda6 	bl	8001060 <__aeabi_dmul>
 8000514:	a37a      	add	r3, pc, #488	; (adr r3, 8000700 <__ieee754_exp+0x338>)
 8000516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800051a:	f000 fbeb 	bl	8000cf4 <__adddf3>
 800051e:	4632      	mov	r2, r6
 8000520:	463b      	mov	r3, r7
 8000522:	f000 fd9d 	bl	8001060 <__aeabi_dmul>
 8000526:	a378      	add	r3, pc, #480	; (adr r3, 8000708 <__ieee754_exp+0x340>)
 8000528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800052c:	f000 fbe0 	bl	8000cf0 <__aeabi_dsub>
 8000530:	4632      	mov	r2, r6
 8000532:	463b      	mov	r3, r7
 8000534:	f000 fd94 	bl	8001060 <__aeabi_dmul>
 8000538:	a375      	add	r3, pc, #468	; (adr r3, 8000710 <__ieee754_exp+0x348>)
 800053a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800053e:	f000 fbd9 	bl	8000cf4 <__adddf3>
 8000542:	4632      	mov	r2, r6
 8000544:	463b      	mov	r3, r7
 8000546:	f000 fd8b 	bl	8001060 <__aeabi_dmul>
 800054a:	4602      	mov	r2, r0
 800054c:	460b      	mov	r3, r1
 800054e:	4628      	mov	r0, r5
 8000550:	4621      	mov	r1, r4
 8000552:	f000 fbcd 	bl	8000cf0 <__aeabi_dsub>
 8000556:	4682      	mov	sl, r0
 8000558:	468b      	mov	fp, r1
 800055a:	4628      	mov	r0, r5
 800055c:	4621      	mov	r1, r4
 800055e:	4652      	mov	r2, sl
 8000560:	465b      	mov	r3, fp
 8000562:	f000 fd7d 	bl	8001060 <__aeabi_dmul>
 8000566:	4656      	mov	r6, sl
 8000568:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800056c:	465f      	mov	r7, fp
 800056e:	f1b8 0f00 	cmp.w	r8, #0
 8000572:	d060      	beq.n	8000636 <__ieee754_exp+0x26e>
 8000574:	4652      	mov	r2, sl
 8000576:	465b      	mov	r3, fp
 8000578:	2000      	movs	r0, #0
 800057a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800057e:	f000 fbb7 	bl	8000cf0 <__aeabi_dsub>
 8000582:	4602      	mov	r2, r0
 8000584:	460b      	mov	r3, r1
 8000586:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800058a:	f000 fe93 	bl	80012b4 <__aeabi_ddiv>
 800058e:	4602      	mov	r2, r0
 8000590:	460b      	mov	r3, r1
 8000592:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8000596:	f000 fbab 	bl	8000cf0 <__aeabi_dsub>
 800059a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800059e:	f000 fba7 	bl	8000cf0 <__aeabi_dsub>
 80005a2:	460b      	mov	r3, r1
 80005a4:	4602      	mov	r2, r0
 80005a6:	4960      	ldr	r1, [pc, #384]	; (8000728 <__ieee754_exp+0x360>)
 80005a8:	2000      	movs	r0, #0
 80005aa:	f000 fba1 	bl	8000cf0 <__aeabi_dsub>
 80005ae:	f46f 737f 	mvn.w	r3, #1020	; 0x3fc
 80005b2:	4598      	cmp	r8, r3
 80005b4:	db74      	blt.n	80006a0 <__ieee754_exp+0x2d8>
 80005b6:	eb01 5108 	add.w	r1, r1, r8, lsl #20
 80005ba:	4605      	mov	r5, r0
 80005bc:	4628      	mov	r0, r5
 80005be:	b007      	add	sp, #28
 80005c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005c4:	462a      	mov	r2, r5
 80005c6:	4623      	mov	r3, r4
 80005c8:	4628      	mov	r0, r5
 80005ca:	4621      	mov	r1, r4
 80005cc:	f000 fd48 	bl	8001060 <__aeabi_dmul>
 80005d0:	a347      	add	r3, pc, #284	; (adr r3, 80006f0 <__ieee754_exp+0x328>)
 80005d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005d6:	4606      	mov	r6, r0
 80005d8:	460f      	mov	r7, r1
 80005da:	f000 fd41 	bl	8001060 <__aeabi_dmul>
 80005de:	a346      	add	r3, pc, #280	; (adr r3, 80006f8 <__ieee754_exp+0x330>)
 80005e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005e4:	f000 fb84 	bl	8000cf0 <__aeabi_dsub>
 80005e8:	4632      	mov	r2, r6
 80005ea:	463b      	mov	r3, r7
 80005ec:	f000 fd38 	bl	8001060 <__aeabi_dmul>
 80005f0:	a343      	add	r3, pc, #268	; (adr r3, 8000700 <__ieee754_exp+0x338>)
 80005f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005f6:	f000 fb7d 	bl	8000cf4 <__adddf3>
 80005fa:	4632      	mov	r2, r6
 80005fc:	463b      	mov	r3, r7
 80005fe:	f000 fd2f 	bl	8001060 <__aeabi_dmul>
 8000602:	a341      	add	r3, pc, #260	; (adr r3, 8000708 <__ieee754_exp+0x340>)
 8000604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000608:	f000 fb72 	bl	8000cf0 <__aeabi_dsub>
 800060c:	4632      	mov	r2, r6
 800060e:	463b      	mov	r3, r7
 8000610:	f000 fd26 	bl	8001060 <__aeabi_dmul>
 8000614:	a33e      	add	r3, pc, #248	; (adr r3, 8000710 <__ieee754_exp+0x348>)
 8000616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800061a:	f000 fb6b 	bl	8000cf4 <__adddf3>
 800061e:	4632      	mov	r2, r6
 8000620:	463b      	mov	r3, r7
 8000622:	f000 fd1d 	bl	8001060 <__aeabi_dmul>
 8000626:	4602      	mov	r2, r0
 8000628:	460b      	mov	r3, r1
 800062a:	4628      	mov	r0, r5
 800062c:	4621      	mov	r1, r4
 800062e:	f000 fb5f 	bl	8000cf0 <__aeabi_dsub>
 8000632:	4606      	mov	r6, r0
 8000634:	460f      	mov	r7, r1
 8000636:	4632      	mov	r2, r6
 8000638:	463b      	mov	r3, r7
 800063a:	4628      	mov	r0, r5
 800063c:	4621      	mov	r1, r4
 800063e:	f000 fd0f 	bl	8001060 <__aeabi_dmul>
 8000642:	2200      	movs	r2, #0
 8000644:	4680      	mov	r8, r0
 8000646:	4689      	mov	r9, r1
 8000648:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800064c:	4630      	mov	r0, r6
 800064e:	4639      	mov	r1, r7
 8000650:	f000 fb4e 	bl	8000cf0 <__aeabi_dsub>
 8000654:	4602      	mov	r2, r0
 8000656:	460b      	mov	r3, r1
 8000658:	4640      	mov	r0, r8
 800065a:	4649      	mov	r1, r9
 800065c:	f000 fe2a 	bl	80012b4 <__aeabi_ddiv>
 8000660:	462a      	mov	r2, r5
 8000662:	4623      	mov	r3, r4
 8000664:	f000 fb44 	bl	8000cf0 <__aeabi_dsub>
 8000668:	4602      	mov	r2, r0
 800066a:	460b      	mov	r3, r1
 800066c:	2000      	movs	r0, #0
 800066e:	492e      	ldr	r1, [pc, #184]	; (8000728 <__ieee754_exp+0x360>)
 8000670:	f000 fb3e 	bl	8000cf0 <__aeabi_dsub>
 8000674:	4605      	mov	r5, r0
 8000676:	4628      	mov	r0, r5
 8000678:	b007      	add	sp, #28
 800067a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800067e:	460b      	mov	r3, r1
 8000680:	f000 fb38 	bl	8000cf4 <__adddf3>
 8000684:	4605      	mov	r5, r0
 8000686:	4628      	mov	r0, r5
 8000688:	b007      	add	sp, #28
 800068a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800068e:	a30c      	add	r3, pc, #48	; (adr r3, 80006c0 <__ieee754_exp+0x2f8>)
 8000690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000694:	4610      	mov	r0, r2
 8000696:	4619      	mov	r1, r3
 8000698:	f000 fce2 	bl	8001060 <__aeabi_dmul>
 800069c:	4605      	mov	r5, r0
 800069e:	e78d      	b.n	80005bc <__ieee754_exp+0x1f4>
 80006a0:	f508 737a 	add.w	r3, r8, #1000	; 0x3e8
 80006a4:	eb01 5103 	add.w	r1, r1, r3, lsl #20
 80006a8:	2200      	movs	r2, #0
 80006aa:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80006ae:	f000 fcd7 	bl	8001060 <__aeabi_dmul>
 80006b2:	4605      	mov	r5, r0
 80006b4:	4628      	mov	r0, r5
 80006b6:	b007      	add	sp, #28
 80006b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006bc:	f3af 8000 	nop.w
 80006c0:	8800759c 	.word	0x8800759c
 80006c4:	7e37e43c 	.word	0x7e37e43c
 80006c8:	fefa39ef 	.word	0xfefa39ef
 80006cc:	40862e42 	.word	0x40862e42
 80006d0:	d52d3051 	.word	0xd52d3051
 80006d4:	c0874910 	.word	0xc0874910
 80006d8:	652b82fe 	.word	0x652b82fe
 80006dc:	3ff71547 	.word	0x3ff71547
 80006e0:	fee00000 	.word	0xfee00000
 80006e4:	3fe62e42 	.word	0x3fe62e42
 80006e8:	35793c76 	.word	0x35793c76
 80006ec:	3dea39ef 	.word	0x3dea39ef
 80006f0:	72bea4d0 	.word	0x72bea4d0
 80006f4:	3e663769 	.word	0x3e663769
 80006f8:	c5d26bf1 	.word	0xc5d26bf1
 80006fc:	3ebbbd41 	.word	0x3ebbbd41
 8000700:	af25de2c 	.word	0xaf25de2c
 8000704:	3f11566a 	.word	0x3f11566a
 8000708:	16bebd93 	.word	0x16bebd93
 800070c:	3f66c16c 	.word	0x3f66c16c
 8000710:	5555553e 	.word	0x5555553e
 8000714:	3fc55555 	.word	0x3fc55555
 8000718:	40862e41 	.word	0x40862e41
 800071c:	7fefffff 	.word	0x7fefffff
 8000720:	3fd62e42 	.word	0x3fd62e42
 8000724:	3e2fffff 	.word	0x3e2fffff
 8000728:	3ff00000 	.word	0x3ff00000
 800072c:	08005c18 	.word	0x08005c18
 8000730:	3ff0a2b1 	.word	0x3ff0a2b1
 8000734:	00000000 	.word	0x00000000

08000738 <expm1>:
 8000738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800073c:	4ad8      	ldr	r2, [pc, #864]	; (8000aa0 <expm1+0x368>)
 800073e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8000742:	4293      	cmp	r3, r2
 8000744:	b085      	sub	sp, #20
 8000746:	460c      	mov	r4, r1
 8000748:	460e      	mov	r6, r1
 800074a:	4605      	mov	r5, r0
 800074c:	f240 8101 	bls.w	8000952 <expm1+0x21a>
 8000750:	4ad4      	ldr	r2, [pc, #848]	; (8000aa4 <expm1+0x36c>)
 8000752:	4293      	cmp	r3, r2
 8000754:	f200 80f0 	bhi.w	8000938 <expm1+0x200>
 8000758:	2e00      	cmp	r6, #0
 800075a:	4628      	mov	r0, r5
 800075c:	4621      	mov	r1, r4
 800075e:	f2c0 814f 	blt.w	8000a00 <expm1+0x2c8>
 8000762:	a3b7      	add	r3, pc, #732	; (adr r3, 8000a40 <expm1+0x308>)
 8000764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000768:	f000 fc7a 	bl	8001060 <__aeabi_dmul>
 800076c:	460b      	mov	r3, r1
 800076e:	49ce      	ldr	r1, [pc, #824]	; (8000aa8 <expm1+0x370>)
 8000770:	4602      	mov	r2, r0
 8000772:	2000      	movs	r0, #0
 8000774:	f000 fabe 	bl	8000cf4 <__adddf3>
 8000778:	f000 ff22 	bl	80015c0 <__aeabi_d2iz>
 800077c:	9001      	str	r0, [sp, #4]
 800077e:	f000 fc05 	bl	8000f8c <__aeabi_i2d>
 8000782:	a3b1      	add	r3, pc, #708	; (adr r3, 8000a48 <expm1+0x310>)
 8000784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000788:	4606      	mov	r6, r0
 800078a:	460f      	mov	r7, r1
 800078c:	f000 fc68 	bl	8001060 <__aeabi_dmul>
 8000790:	4602      	mov	r2, r0
 8000792:	460b      	mov	r3, r1
 8000794:	4628      	mov	r0, r5
 8000796:	4621      	mov	r1, r4
 8000798:	f000 faaa 	bl	8000cf0 <__aeabi_dsub>
 800079c:	a3ac      	add	r3, pc, #688	; (adr r3, 8000a50 <expm1+0x318>)
 800079e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007a2:	4680      	mov	r8, r0
 80007a4:	4689      	mov	r9, r1
 80007a6:	4630      	mov	r0, r6
 80007a8:	4639      	mov	r1, r7
 80007aa:	f000 fc59 	bl	8001060 <__aeabi_dmul>
 80007ae:	4606      	mov	r6, r0
 80007b0:	460f      	mov	r7, r1
 80007b2:	4632      	mov	r2, r6
 80007b4:	463b      	mov	r3, r7
 80007b6:	4640      	mov	r0, r8
 80007b8:	4649      	mov	r1, r9
 80007ba:	f000 fa99 	bl	8000cf0 <__aeabi_dsub>
 80007be:	4602      	mov	r2, r0
 80007c0:	460b      	mov	r3, r1
 80007c2:	4605      	mov	r5, r0
 80007c4:	460c      	mov	r4, r1
 80007c6:	4640      	mov	r0, r8
 80007c8:	4649      	mov	r1, r9
 80007ca:	f000 fa91 	bl	8000cf0 <__aeabi_dsub>
 80007ce:	4632      	mov	r2, r6
 80007d0:	463b      	mov	r3, r7
 80007d2:	f000 fa8d 	bl	8000cf0 <__aeabi_dsub>
 80007d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80007da:	2200      	movs	r2, #0
 80007dc:	4bb2      	ldr	r3, [pc, #712]	; (8000aa8 <expm1+0x370>)
 80007de:	4628      	mov	r0, r5
 80007e0:	4621      	mov	r1, r4
 80007e2:	f000 fc3d 	bl	8001060 <__aeabi_dmul>
 80007e6:	4606      	mov	r6, r0
 80007e8:	460f      	mov	r7, r1
 80007ea:	4602      	mov	r2, r0
 80007ec:	460b      	mov	r3, r1
 80007ee:	4628      	mov	r0, r5
 80007f0:	4621      	mov	r1, r4
 80007f2:	f000 fc35 	bl	8001060 <__aeabi_dmul>
 80007f6:	a398      	add	r3, pc, #608	; (adr r3, 8000a58 <expm1+0x320>)
 80007f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007fc:	4682      	mov	sl, r0
 80007fe:	468b      	mov	fp, r1
 8000800:	f000 fc2e 	bl	8001060 <__aeabi_dmul>
 8000804:	a396      	add	r3, pc, #600	; (adr r3, 8000a60 <expm1+0x328>)
 8000806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800080a:	f000 fa73 	bl	8000cf4 <__adddf3>
 800080e:	4652      	mov	r2, sl
 8000810:	465b      	mov	r3, fp
 8000812:	f000 fc25 	bl	8001060 <__aeabi_dmul>
 8000816:	a394      	add	r3, pc, #592	; (adr r3, 8000a68 <expm1+0x330>)
 8000818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800081c:	f000 fa68 	bl	8000cf0 <__aeabi_dsub>
 8000820:	4652      	mov	r2, sl
 8000822:	465b      	mov	r3, fp
 8000824:	f000 fc1c 	bl	8001060 <__aeabi_dmul>
 8000828:	a391      	add	r3, pc, #580	; (adr r3, 8000a70 <expm1+0x338>)
 800082a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800082e:	f000 fa61 	bl	8000cf4 <__adddf3>
 8000832:	4652      	mov	r2, sl
 8000834:	465b      	mov	r3, fp
 8000836:	f000 fc13 	bl	8001060 <__aeabi_dmul>
 800083a:	a38f      	add	r3, pc, #572	; (adr r3, 8000a78 <expm1+0x340>)
 800083c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000840:	f000 fa56 	bl	8000cf0 <__aeabi_dsub>
 8000844:	4652      	mov	r2, sl
 8000846:	465b      	mov	r3, fp
 8000848:	f000 fc0a 	bl	8001060 <__aeabi_dmul>
 800084c:	2200      	movs	r2, #0
 800084e:	4b97      	ldr	r3, [pc, #604]	; (8000aac <expm1+0x374>)
 8000850:	f000 fa50 	bl	8000cf4 <__adddf3>
 8000854:	4680      	mov	r8, r0
 8000856:	4689      	mov	r9, r1
 8000858:	4602      	mov	r2, r0
 800085a:	460b      	mov	r3, r1
 800085c:	4630      	mov	r0, r6
 800085e:	4639      	mov	r1, r7
 8000860:	f000 fbfe 	bl	8001060 <__aeabi_dmul>
 8000864:	4602      	mov	r2, r0
 8000866:	460b      	mov	r3, r1
 8000868:	2000      	movs	r0, #0
 800086a:	4991      	ldr	r1, [pc, #580]	; (8000ab0 <expm1+0x378>)
 800086c:	f000 fa40 	bl	8000cf0 <__aeabi_dsub>
 8000870:	4606      	mov	r6, r0
 8000872:	4602      	mov	r2, r0
 8000874:	460b      	mov	r3, r1
 8000876:	460f      	mov	r7, r1
 8000878:	4640      	mov	r0, r8
 800087a:	4649      	mov	r1, r9
 800087c:	f000 fa38 	bl	8000cf0 <__aeabi_dsub>
 8000880:	4632      	mov	r2, r6
 8000882:	4680      	mov	r8, r0
 8000884:	4689      	mov	r9, r1
 8000886:	463b      	mov	r3, r7
 8000888:	4628      	mov	r0, r5
 800088a:	4621      	mov	r1, r4
 800088c:	f000 fbe8 	bl	8001060 <__aeabi_dmul>
 8000890:	4602      	mov	r2, r0
 8000892:	460b      	mov	r3, r1
 8000894:	2000      	movs	r0, #0
 8000896:	4987      	ldr	r1, [pc, #540]	; (8000ab4 <expm1+0x37c>)
 8000898:	f000 fa2a 	bl	8000cf0 <__aeabi_dsub>
 800089c:	4602      	mov	r2, r0
 800089e:	460b      	mov	r3, r1
 80008a0:	4640      	mov	r0, r8
 80008a2:	4649      	mov	r1, r9
 80008a4:	f000 fd06 	bl	80012b4 <__aeabi_ddiv>
 80008a8:	4652      	mov	r2, sl
 80008aa:	465b      	mov	r3, fp
 80008ac:	f000 fbd8 	bl	8001060 <__aeabi_dmul>
 80008b0:	9e01      	ldr	r6, [sp, #4]
 80008b2:	4602      	mov	r2, r0
 80008b4:	460b      	mov	r3, r1
 80008b6:	2e00      	cmp	r6, #0
 80008b8:	d054      	beq.n	8000964 <expm1+0x22c>
 80008ba:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80008be:	4632      	mov	r2, r6
 80008c0:	463b      	mov	r3, r7
 80008c2:	f000 fa15 	bl	8000cf0 <__aeabi_dsub>
 80008c6:	462a      	mov	r2, r5
 80008c8:	4623      	mov	r3, r4
 80008ca:	f000 fbc9 	bl	8001060 <__aeabi_dmul>
 80008ce:	4632      	mov	r2, r6
 80008d0:	463b      	mov	r3, r7
 80008d2:	f000 fa0d 	bl	8000cf0 <__aeabi_dsub>
 80008d6:	465b      	mov	r3, fp
 80008d8:	4652      	mov	r2, sl
 80008da:	f000 fa09 	bl	8000cf0 <__aeabi_dsub>
 80008de:	9b01      	ldr	r3, [sp, #4]
 80008e0:	3301      	adds	r3, #1
 80008e2:	4606      	mov	r6, r0
 80008e4:	460f      	mov	r7, r1
 80008e6:	f000 810b 	beq.w	8000b00 <expm1+0x3c8>
 80008ea:	9b01      	ldr	r3, [sp, #4]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	f000 80ed 	beq.w	8000acc <expm1+0x394>
 80008f2:	9a01      	ldr	r2, [sp, #4]
 80008f4:	1c53      	adds	r3, r2, #1
 80008f6:	2b39      	cmp	r3, #57	; 0x39
 80008f8:	ea4f 5602 	mov.w	r6, r2, lsl #20
 80008fc:	d86f      	bhi.n	80009de <expm1+0x2a6>
 80008fe:	9f01      	ldr	r7, [sp, #4]
 8000900:	2f13      	cmp	r7, #19
 8000902:	f300 810c 	bgt.w	8000b1e <expm1+0x3e6>
 8000906:	f44f 1c00 	mov.w	ip, #2097152	; 0x200000
 800090a:	462a      	mov	r2, r5
 800090c:	4623      	mov	r3, r4
 800090e:	fa4c fa07 	asr.w	sl, ip, r7
 8000912:	f000 f9ed 	bl	8000cf0 <__aeabi_dsub>
 8000916:	f1ca 597f 	rsb	r9, sl, #1069547520	; 0x3fc00000
 800091a:	f04f 0800 	mov.w	r8, #0
 800091e:	f509 1940 	add.w	r9, r9, #3145728	; 0x300000
 8000922:	4602      	mov	r2, r0
 8000924:	460b      	mov	r3, r1
 8000926:	4640      	mov	r0, r8
 8000928:	4649      	mov	r1, r9
 800092a:	f000 f9e1 	bl	8000cf0 <__aeabi_dsub>
 800092e:	1873      	adds	r3, r6, r1
 8000930:	4619      	mov	r1, r3
 8000932:	b005      	add	sp, #20
 8000934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000938:	4a5f      	ldr	r2, [pc, #380]	; (8000ab8 <expm1+0x380>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d936      	bls.n	80009ac <expm1+0x274>
 800093e:	f3c1 0313 	ubfx	r3, r1, #0, #20
 8000942:	4303      	orrs	r3, r0
 8000944:	4602      	mov	r2, r0
 8000946:	f000 80ff 	beq.w	8000b48 <expm1+0x410>
 800094a:	460b      	mov	r3, r1
 800094c:	f000 f9d2 	bl	8000cf4 <__adddf3>
 8000950:	e016      	b.n	8000980 <expm1+0x248>
 8000952:	4a5a      	ldr	r2, [pc, #360]	; (8000abc <expm1+0x384>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d816      	bhi.n	8000986 <expm1+0x24e>
 8000958:	4a59      	ldr	r2, [pc, #356]	; (8000ac0 <expm1+0x388>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d968      	bls.n	8000a30 <expm1+0x2f8>
 800095e:	2300      	movs	r3, #0
 8000960:	9301      	str	r3, [sp, #4]
 8000962:	e73a      	b.n	80007da <expm1+0xa2>
 8000964:	4628      	mov	r0, r5
 8000966:	4621      	mov	r1, r4
 8000968:	f000 fb7a 	bl	8001060 <__aeabi_dmul>
 800096c:	4652      	mov	r2, sl
 800096e:	465b      	mov	r3, fp
 8000970:	f000 f9be 	bl	8000cf0 <__aeabi_dsub>
 8000974:	4602      	mov	r2, r0
 8000976:	460b      	mov	r3, r1
 8000978:	4628      	mov	r0, r5
 800097a:	4621      	mov	r1, r4
 800097c:	f000 f9b8 	bl	8000cf0 <__aeabi_dsub>
 8000980:	b005      	add	sp, #20
 8000982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000986:	4a4f      	ldr	r2, [pc, #316]	; (8000ac4 <expm1+0x38c>)
 8000988:	4293      	cmp	r3, r2
 800098a:	f200 80f2 	bhi.w	8000b72 <expm1+0x43a>
 800098e:	2900      	cmp	r1, #0
 8000990:	a32d      	add	r3, pc, #180	; (adr r3, 8000a48 <expm1+0x310>)
 8000992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000996:	db17      	blt.n	80009c8 <expm1+0x290>
 8000998:	f000 f9aa 	bl	8000cf0 <__aeabi_dsub>
 800099c:	2301      	movs	r3, #1
 800099e:	4680      	mov	r8, r0
 80009a0:	4689      	mov	r9, r1
 80009a2:	9301      	str	r3, [sp, #4]
 80009a4:	a72a      	add	r7, pc, #168	; (adr r7, 8000a50 <expm1+0x318>)
 80009a6:	e9d7 6700 	ldrd	r6, r7, [r7]
 80009aa:	e702      	b.n	80007b2 <expm1+0x7a>
 80009ac:	a334      	add	r3, pc, #208	; (adr r3, 8000a80 <expm1+0x348>)
 80009ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009b2:	f000 fde5 	bl	8001580 <__aeabi_dcmpgt>
 80009b6:	2800      	cmp	r0, #0
 80009b8:	f43f aece 	beq.w	8000758 <expm1+0x20>
 80009bc:	2000      	movs	r0, #0
 80009be:	b005      	add	sp, #20
 80009c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009c4:	f000 b924 	b.w	8000c10 <__math_oflow>
 80009c8:	f000 f994 	bl	8000cf4 <__adddf3>
 80009cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009d0:	4680      	mov	r8, r0
 80009d2:	4689      	mov	r9, r1
 80009d4:	9301      	str	r3, [sp, #4]
 80009d6:	a72c      	add	r7, pc, #176	; (adr r7, 8000a88 <expm1+0x350>)
 80009d8:	e9d7 6700 	ldrd	r6, r7, [r7]
 80009dc:	e6e9      	b.n	80007b2 <expm1+0x7a>
 80009de:	462a      	mov	r2, r5
 80009e0:	4623      	mov	r3, r4
 80009e2:	f000 f985 	bl	8000cf0 <__aeabi_dsub>
 80009e6:	4602      	mov	r2, r0
 80009e8:	460b      	mov	r3, r1
 80009ea:	2000      	movs	r0, #0
 80009ec:	492f      	ldr	r1, [pc, #188]	; (8000aac <expm1+0x374>)
 80009ee:	f000 f97f 	bl	8000cf0 <__aeabi_dsub>
 80009f2:	1873      	adds	r3, r6, r1
 80009f4:	4619      	mov	r1, r3
 80009f6:	2200      	movs	r2, #0
 80009f8:	4b2c      	ldr	r3, [pc, #176]	; (8000aac <expm1+0x374>)
 80009fa:	f000 f979 	bl	8000cf0 <__aeabi_dsub>
 80009fe:	e7bf      	b.n	8000980 <expm1+0x248>
 8000a00:	a323      	add	r3, pc, #140	; (adr r3, 8000a90 <expm1+0x358>)
 8000a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a06:	f000 f975 	bl	8000cf4 <__adddf3>
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	f000 fd99 	bl	8001544 <__aeabi_dcmplt>
 8000a12:	2800      	cmp	r0, #0
 8000a14:	f040 809b 	bne.w	8000b4e <expm1+0x416>
 8000a18:	a309      	add	r3, pc, #36	; (adr r3, 8000a40 <expm1+0x308>)
 8000a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a1e:	4628      	mov	r0, r5
 8000a20:	4621      	mov	r1, r4
 8000a22:	f000 fb1d 	bl	8001060 <__aeabi_dmul>
 8000a26:	4602      	mov	r2, r0
 8000a28:	460b      	mov	r3, r1
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	4926      	ldr	r1, [pc, #152]	; (8000ac8 <expm1+0x390>)
 8000a2e:	e6a1      	b.n	8000774 <expm1+0x3c>
 8000a30:	a319      	add	r3, pc, #100	; (adr r3, 8000a98 <expm1+0x360>)
 8000a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a36:	f000 f95d 	bl	8000cf4 <__adddf3>
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	e797      	b.n	8000970 <expm1+0x238>
 8000a40:	652b82fe 	.word	0x652b82fe
 8000a44:	3ff71547 	.word	0x3ff71547
 8000a48:	fee00000 	.word	0xfee00000
 8000a4c:	3fe62e42 	.word	0x3fe62e42
 8000a50:	35793c76 	.word	0x35793c76
 8000a54:	3dea39ef 	.word	0x3dea39ef
 8000a58:	6e09c32d 	.word	0x6e09c32d
 8000a5c:	be8afdb7 	.word	0xbe8afdb7
 8000a60:	86e65239 	.word	0x86e65239
 8000a64:	3ed0cfca 	.word	0x3ed0cfca
 8000a68:	9eaadbb7 	.word	0x9eaadbb7
 8000a6c:	3f14ce19 	.word	0x3f14ce19
 8000a70:	19fe5585 	.word	0x19fe5585
 8000a74:	3f5a01a0 	.word	0x3f5a01a0
 8000a78:	111110f4 	.word	0x111110f4
 8000a7c:	3fa11111 	.word	0x3fa11111
 8000a80:	fefa39ef 	.word	0xfefa39ef
 8000a84:	40862e42 	.word	0x40862e42
 8000a88:	35793c76 	.word	0x35793c76
 8000a8c:	bdea39ef 	.word	0xbdea39ef
 8000a90:	c2f8f359 	.word	0xc2f8f359
 8000a94:	01a56e1f 	.word	0x01a56e1f
 8000a98:	8800759c 	.word	0x8800759c
 8000a9c:	7e37e43c 	.word	0x7e37e43c
 8000aa0:	40436879 	.word	0x40436879
 8000aa4:	40862e41 	.word	0x40862e41
 8000aa8:	3fe00000 	.word	0x3fe00000
 8000aac:	3ff00000 	.word	0x3ff00000
 8000ab0:	40080000 	.word	0x40080000
 8000ab4:	40180000 	.word	0x40180000
 8000ab8:	7fefffff 	.word	0x7fefffff
 8000abc:	3fd62e42 	.word	0x3fd62e42
 8000ac0:	3c8fffff 	.word	0x3c8fffff
 8000ac4:	3ff0a2b1 	.word	0x3ff0a2b1
 8000ac8:	bfe00000 	.word	0xbfe00000
 8000acc:	4628      	mov	r0, r5
 8000ace:	4621      	mov	r1, r4
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	4b31      	ldr	r3, [pc, #196]	; (8000b98 <expm1+0x460>)
 8000ad4:	f000 fd36 	bl	8001544 <__aeabi_dcmplt>
 8000ad8:	2800      	cmp	r0, #0
 8000ada:	d03b      	beq.n	8000b54 <expm1+0x41c>
 8000adc:	4628      	mov	r0, r5
 8000ade:	4621      	mov	r1, r4
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	4b2e      	ldr	r3, [pc, #184]	; (8000b9c <expm1+0x464>)
 8000ae4:	f000 f906 	bl	8000cf4 <__adddf3>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	460b      	mov	r3, r1
 8000aec:	4630      	mov	r0, r6
 8000aee:	4639      	mov	r1, r7
 8000af0:	f000 f8fe 	bl	8000cf0 <__aeabi_dsub>
 8000af4:	2200      	movs	r2, #0
 8000af6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000afa:	f000 fab1 	bl	8001060 <__aeabi_dmul>
 8000afe:	e73f      	b.n	8000980 <expm1+0x248>
 8000b00:	4632      	mov	r2, r6
 8000b02:	463b      	mov	r3, r7
 8000b04:	4628      	mov	r0, r5
 8000b06:	4621      	mov	r1, r4
 8000b08:	f000 f8f2 	bl	8000cf0 <__aeabi_dsub>
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	4b23      	ldr	r3, [pc, #140]	; (8000b9c <expm1+0x464>)
 8000b10:	f000 faa6 	bl	8001060 <__aeabi_dmul>
 8000b14:	2200      	movs	r2, #0
 8000b16:	4b21      	ldr	r3, [pc, #132]	; (8000b9c <expm1+0x464>)
 8000b18:	f000 f8ea 	bl	8000cf0 <__aeabi_dsub>
 8000b1c:	e730      	b.n	8000980 <expm1+0x248>
 8000b1e:	9b01      	ldr	r3, [sp, #4]
 8000b20:	f5c3 7a7f 	rsb	sl, r3, #1020	; 0x3fc
 8000b24:	f10a 0a03 	add.w	sl, sl, #3
 8000b28:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f000 f8e1 	bl	8000cf4 <__adddf3>
 8000b32:	4602      	mov	r2, r0
 8000b34:	460b      	mov	r3, r1
 8000b36:	4628      	mov	r0, r5
 8000b38:	4621      	mov	r1, r4
 8000b3a:	f000 f8d9 	bl	8000cf0 <__aeabi_dsub>
 8000b3e:	2200      	movs	r2, #0
 8000b40:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <expm1+0x468>)
 8000b42:	f000 f8d7 	bl	8000cf4 <__adddf3>
 8000b46:	e6f2      	b.n	800092e <expm1+0x1f6>
 8000b48:	2900      	cmp	r1, #0
 8000b4a:	f6bf af19 	bge.w	8000980 <expm1+0x248>
 8000b4e:	2000      	movs	r0, #0
 8000b50:	4914      	ldr	r1, [pc, #80]	; (8000ba4 <expm1+0x46c>)
 8000b52:	e715      	b.n	8000980 <expm1+0x248>
 8000b54:	4632      	mov	r2, r6
 8000b56:	463b      	mov	r3, r7
 8000b58:	4628      	mov	r0, r5
 8000b5a:	4621      	mov	r1, r4
 8000b5c:	f000 f8c8 	bl	8000cf0 <__aeabi_dsub>
 8000b60:	4602      	mov	r2, r0
 8000b62:	460b      	mov	r3, r1
 8000b64:	f000 f8c6 	bl	8000cf4 <__adddf3>
 8000b68:	2200      	movs	r2, #0
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <expm1+0x468>)
 8000b6c:	f000 f8c2 	bl	8000cf4 <__adddf3>
 8000b70:	e706      	b.n	8000980 <expm1+0x248>
 8000b72:	a307      	add	r3, pc, #28	; (adr r3, 8000b90 <expm1+0x458>)
 8000b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b78:	f000 fa72 	bl	8001060 <__aeabi_dmul>
 8000b7c:	2c00      	cmp	r4, #0
 8000b7e:	4602      	mov	r2, r0
 8000b80:	460b      	mov	r3, r1
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	f6ff af51 	blt.w	8000a2c <expm1+0x2f4>
 8000b8a:	4904      	ldr	r1, [pc, #16]	; (8000b9c <expm1+0x464>)
 8000b8c:	e5f2      	b.n	8000774 <expm1+0x3c>
 8000b8e:	bf00      	nop
 8000b90:	652b82fe 	.word	0x652b82fe
 8000b94:	3ff71547 	.word	0x3ff71547
 8000b98:	bfd00000 	.word	0xbfd00000
 8000b9c:	3fe00000 	.word	0x3fe00000
 8000ba0:	3ff00000 	.word	0x3ff00000
 8000ba4:	bff00000 	.word	0xbff00000

08000ba8 <fabs>:
 8000ba8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8000bac:	4619      	mov	r1, r3
 8000bae:	4770      	bx	lr

08000bb0 <finite>:
 8000bb0:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8000bb4:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8000bb8:	0fc0      	lsrs	r0, r0, #31
 8000bba:	4770      	bx	lr

08000bbc <with_errno>:
 8000bbc:	b570      	push	{r4, r5, r6, lr}
 8000bbe:	4604      	mov	r4, r0
 8000bc0:	460d      	mov	r5, r1
 8000bc2:	4616      	mov	r6, r2
 8000bc4:	f000 fd54 	bl	8001670 <__errno>
 8000bc8:	4629      	mov	r1, r5
 8000bca:	6006      	str	r6, [r0, #0]
 8000bcc:	4620      	mov	r0, r4
 8000bce:	bd70      	pop	{r4, r5, r6, pc}

08000bd0 <xflow>:
 8000bd0:	b530      	push	{r4, r5, lr}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	b178      	cbz	r0, 8000bf6 <xflow+0x26>
 8000bd6:	4614      	mov	r4, r2
 8000bd8:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
 8000bdc:	e9cd 4500 	strd	r4, r5, [sp]
 8000be0:	4610      	mov	r0, r2
 8000be2:	4619      	mov	r1, r3
 8000be4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8000be8:	f000 fa3a 	bl	8001060 <__aeabi_dmul>
 8000bec:	2222      	movs	r2, #34	; 0x22
 8000bee:	b003      	add	sp, #12
 8000bf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000bf4:	e7e2      	b.n	8000bbc <with_errno>
 8000bf6:	4614      	mov	r4, r2
 8000bf8:	461d      	mov	r5, r3
 8000bfa:	e7ef      	b.n	8000bdc <xflow+0xc>

08000bfc <__math_uflow>:
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c02:	e7e5      	b.n	8000bd0 <xflow>

08000c04 <__math_may_uflow>:
 8000c04:	2200      	movs	r2, #0
 8000c06:	4b01      	ldr	r3, [pc, #4]	; (8000c0c <__math_may_uflow+0x8>)
 8000c08:	e7e2      	b.n	8000bd0 <xflow>
 8000c0a:	bf00      	nop
 8000c0c:	1e580000 	.word	0x1e580000

08000c10 <__math_oflow>:
 8000c10:	2200      	movs	r2, #0
 8000c12:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8000c16:	e7db      	b.n	8000bd0 <xflow>

08000c18 <__math_divzero>:
 8000c18:	b500      	push	{lr}
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	b083      	sub	sp, #12
 8000c1e:	b968      	cbnz	r0, 8000c3c <__math_divzero+0x24>
 8000c20:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <__math_divzero+0x28>)
 8000c22:	e9cd 2300 	strd	r2, r3, [sp]
 8000c26:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	f000 fb41 	bl	80012b4 <__aeabi_ddiv>
 8000c32:	2222      	movs	r2, #34	; 0x22
 8000c34:	b003      	add	sp, #12
 8000c36:	f85d eb04 	ldr.w	lr, [sp], #4
 8000c3a:	e7bf      	b.n	8000bbc <with_errno>
 8000c3c:	4b01      	ldr	r3, [pc, #4]	; (8000c44 <__math_divzero+0x2c>)
 8000c3e:	e7f0      	b.n	8000c22 <__math_divzero+0xa>
 8000c40:	3ff00000 	.word	0x3ff00000
 8000c44:	bff00000 	.word	0xbff00000

08000c48 <__math_invalid>:
 8000c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c4a:	4602      	mov	r2, r0
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	4604      	mov	r4, r0
 8000c50:	460d      	mov	r5, r1
 8000c52:	f000 f84d 	bl	8000cf0 <__aeabi_dsub>
 8000c56:	4602      	mov	r2, r0
 8000c58:	460b      	mov	r3, r1
 8000c5a:	f000 fb2b 	bl	80012b4 <__aeabi_ddiv>
 8000c5e:	4622      	mov	r2, r4
 8000c60:	4606      	mov	r6, r0
 8000c62:	460f      	mov	r7, r1
 8000c64:	462b      	mov	r3, r5
 8000c66:	4620      	mov	r0, r4
 8000c68:	4629      	mov	r1, r5
 8000c6a:	f000 fc93 	bl	8001594 <__aeabi_dcmpun>
 8000c6e:	b928      	cbnz	r0, 8000c7c <__math_invalid+0x34>
 8000c70:	4630      	mov	r0, r6
 8000c72:	4639      	mov	r1, r7
 8000c74:	2221      	movs	r2, #33	; 0x21
 8000c76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8000c7a:	e79f      	b.n	8000bbc <with_errno>
 8000c7c:	4630      	mov	r0, r6
 8000c7e:	4639      	mov	r1, r7
 8000c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c82:	bf00      	nop

08000c84 <__math_check_uflow>:
 8000c84:	b538      	push	{r3, r4, r5, lr}
 8000c86:	2200      	movs	r2, #0
 8000c88:	2300      	movs	r3, #0
 8000c8a:	4604      	mov	r4, r0
 8000c8c:	460d      	mov	r5, r1
 8000c8e:	f000 fc4f 	bl	8001530 <__aeabi_dcmpeq>
 8000c92:	b910      	cbnz	r0, 8000c9a <__math_check_uflow+0x16>
 8000c94:	4620      	mov	r0, r4
 8000c96:	4629      	mov	r1, r5
 8000c98:	bd38      	pop	{r3, r4, r5, pc}
 8000c9a:	4620      	mov	r0, r4
 8000c9c:	4629      	mov	r1, r5
 8000c9e:	2222      	movs	r2, #34	; 0x22
 8000ca0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca4:	e78a      	b.n	8000bbc <with_errno>
 8000ca6:	bf00      	nop

08000ca8 <__math_check_oflow>:
 8000ca8:	b570      	push	{r4, r5, r6, lr}
 8000caa:	4604      	mov	r4, r0
 8000cac:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	4620      	mov	r0, r4
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cba:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <__math_check_oflow+0x3c>)
 8000cbc:	f000 fc6a 	bl	8001594 <__aeabi_dcmpun>
 8000cc0:	b938      	cbnz	r0, 8000cd2 <__math_check_oflow+0x2a>
 8000cc2:	4620      	mov	r0, r4
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <__math_check_oflow+0x3c>)
 8000ccc:	f000 fc44 	bl	8001558 <__aeabi_dcmple>
 8000cd0:	b110      	cbz	r0, 8000cd8 <__math_check_oflow+0x30>
 8000cd2:	4620      	mov	r0, r4
 8000cd4:	4629      	mov	r1, r5
 8000cd6:	bd70      	pop	{r4, r5, r6, pc}
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	2222      	movs	r2, #34	; 0x22
 8000cde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000ce2:	e76b      	b.n	8000bbc <with_errno>
 8000ce4:	7fefffff 	.word	0x7fefffff

08000ce8 <__aeabi_drsub>:
 8000ce8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000cec:	e002      	b.n	8000cf4 <__adddf3>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_dsub>:
 8000cf0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000cf4 <__adddf3>:
 8000cf4:	b530      	push	{r4, r5, lr}
 8000cf6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000cfa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000cfe:	ea94 0f05 	teq	r4, r5
 8000d02:	bf08      	it	eq
 8000d04:	ea90 0f02 	teqeq	r0, r2
 8000d08:	bf1f      	itttt	ne
 8000d0a:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000d0e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000d12:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000d16:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000d1a:	f000 80e2 	beq.w	8000ee2 <__adddf3+0x1ee>
 8000d1e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000d22:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000d26:	bfb8      	it	lt
 8000d28:	426d      	neglt	r5, r5
 8000d2a:	dd0c      	ble.n	8000d46 <__adddf3+0x52>
 8000d2c:	442c      	add	r4, r5
 8000d2e:	ea80 0202 	eor.w	r2, r0, r2
 8000d32:	ea81 0303 	eor.w	r3, r1, r3
 8000d36:	ea82 0000 	eor.w	r0, r2, r0
 8000d3a:	ea83 0101 	eor.w	r1, r3, r1
 8000d3e:	ea80 0202 	eor.w	r2, r0, r2
 8000d42:	ea81 0303 	eor.w	r3, r1, r3
 8000d46:	2d36      	cmp	r5, #54	; 0x36
 8000d48:	bf88      	it	hi
 8000d4a:	bd30      	pophi	{r4, r5, pc}
 8000d4c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d50:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000d54:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000d58:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000d5c:	d002      	beq.n	8000d64 <__adddf3+0x70>
 8000d5e:	4240      	negs	r0, r0
 8000d60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d64:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000d68:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000d6c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000d70:	d002      	beq.n	8000d78 <__adddf3+0x84>
 8000d72:	4252      	negs	r2, r2
 8000d74:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d78:	ea94 0f05 	teq	r4, r5
 8000d7c:	f000 80a7 	beq.w	8000ece <__adddf3+0x1da>
 8000d80:	f1a4 0401 	sub.w	r4, r4, #1
 8000d84:	f1d5 0e20 	rsbs	lr, r5, #32
 8000d88:	db0d      	blt.n	8000da6 <__adddf3+0xb2>
 8000d8a:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000d8e:	fa22 f205 	lsr.w	r2, r2, r5
 8000d92:	1880      	adds	r0, r0, r2
 8000d94:	f141 0100 	adc.w	r1, r1, #0
 8000d98:	fa03 f20e 	lsl.w	r2, r3, lr
 8000d9c:	1880      	adds	r0, r0, r2
 8000d9e:	fa43 f305 	asr.w	r3, r3, r5
 8000da2:	4159      	adcs	r1, r3
 8000da4:	e00e      	b.n	8000dc4 <__adddf3+0xd0>
 8000da6:	f1a5 0520 	sub.w	r5, r5, #32
 8000daa:	f10e 0e20 	add.w	lr, lr, #32
 8000dae:	2a01      	cmp	r2, #1
 8000db0:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000db4:	bf28      	it	cs
 8000db6:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000dba:	fa43 f305 	asr.w	r3, r3, r5
 8000dbe:	18c0      	adds	r0, r0, r3
 8000dc0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000dc4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000dc8:	d507      	bpl.n	8000dda <__adddf3+0xe6>
 8000dca:	f04f 0e00 	mov.w	lr, #0
 8000dce:	f1dc 0c00 	rsbs	ip, ip, #0
 8000dd2:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000dd6:	eb6e 0101 	sbc.w	r1, lr, r1
 8000dda:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000dde:	d31b      	bcc.n	8000e18 <__adddf3+0x124>
 8000de0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000de4:	d30c      	bcc.n	8000e00 <__adddf3+0x10c>
 8000de6:	0849      	lsrs	r1, r1, #1
 8000de8:	ea5f 0030 	movs.w	r0, r0, rrx
 8000dec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000df0:	f104 0401 	add.w	r4, r4, #1
 8000df4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000df8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000dfc:	f080 809a 	bcs.w	8000f34 <__adddf3+0x240>
 8000e00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e04:	bf08      	it	eq
 8000e06:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000e0a:	f150 0000 	adcs.w	r0, r0, #0
 8000e0e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000e12:	ea41 0105 	orr.w	r1, r1, r5
 8000e16:	bd30      	pop	{r4, r5, pc}
 8000e18:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000e1c:	4140      	adcs	r0, r0
 8000e1e:	eb41 0101 	adc.w	r1, r1, r1
 8000e22:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000e26:	f1a4 0401 	sub.w	r4, r4, #1
 8000e2a:	d1e9      	bne.n	8000e00 <__adddf3+0x10c>
 8000e2c:	f091 0f00 	teq	r1, #0
 8000e30:	bf04      	itt	eq
 8000e32:	4601      	moveq	r1, r0
 8000e34:	2000      	moveq	r0, #0
 8000e36:	fab1 f381 	clz	r3, r1
 8000e3a:	bf08      	it	eq
 8000e3c:	3320      	addeq	r3, #32
 8000e3e:	f1a3 030b 	sub.w	r3, r3, #11
 8000e42:	f1b3 0220 	subs.w	r2, r3, #32
 8000e46:	da0c      	bge.n	8000e62 <__adddf3+0x16e>
 8000e48:	320c      	adds	r2, #12
 8000e4a:	dd08      	ble.n	8000e5e <__adddf3+0x16a>
 8000e4c:	f102 0c14 	add.w	ip, r2, #20
 8000e50:	f1c2 020c 	rsb	r2, r2, #12
 8000e54:	fa01 f00c 	lsl.w	r0, r1, ip
 8000e58:	fa21 f102 	lsr.w	r1, r1, r2
 8000e5c:	e00c      	b.n	8000e78 <__adddf3+0x184>
 8000e5e:	f102 0214 	add.w	r2, r2, #20
 8000e62:	bfd8      	it	le
 8000e64:	f1c2 0c20 	rsble	ip, r2, #32
 8000e68:	fa01 f102 	lsl.w	r1, r1, r2
 8000e6c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000e70:	bfdc      	itt	le
 8000e72:	ea41 010c 	orrle.w	r1, r1, ip
 8000e76:	4090      	lslle	r0, r2
 8000e78:	1ae4      	subs	r4, r4, r3
 8000e7a:	bfa2      	ittt	ge
 8000e7c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000e80:	4329      	orrge	r1, r5
 8000e82:	bd30      	popge	{r4, r5, pc}
 8000e84:	ea6f 0404 	mvn.w	r4, r4
 8000e88:	3c1f      	subs	r4, #31
 8000e8a:	da1c      	bge.n	8000ec6 <__adddf3+0x1d2>
 8000e8c:	340c      	adds	r4, #12
 8000e8e:	dc0e      	bgt.n	8000eae <__adddf3+0x1ba>
 8000e90:	f104 0414 	add.w	r4, r4, #20
 8000e94:	f1c4 0220 	rsb	r2, r4, #32
 8000e98:	fa20 f004 	lsr.w	r0, r0, r4
 8000e9c:	fa01 f302 	lsl.w	r3, r1, r2
 8000ea0:	ea40 0003 	orr.w	r0, r0, r3
 8000ea4:	fa21 f304 	lsr.w	r3, r1, r4
 8000ea8:	ea45 0103 	orr.w	r1, r5, r3
 8000eac:	bd30      	pop	{r4, r5, pc}
 8000eae:	f1c4 040c 	rsb	r4, r4, #12
 8000eb2:	f1c4 0220 	rsb	r2, r4, #32
 8000eb6:	fa20 f002 	lsr.w	r0, r0, r2
 8000eba:	fa01 f304 	lsl.w	r3, r1, r4
 8000ebe:	ea40 0003 	orr.w	r0, r0, r3
 8000ec2:	4629      	mov	r1, r5
 8000ec4:	bd30      	pop	{r4, r5, pc}
 8000ec6:	fa21 f004 	lsr.w	r0, r1, r4
 8000eca:	4629      	mov	r1, r5
 8000ecc:	bd30      	pop	{r4, r5, pc}
 8000ece:	f094 0f00 	teq	r4, #0
 8000ed2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000ed6:	bf06      	itte	eq
 8000ed8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000edc:	3401      	addeq	r4, #1
 8000ede:	3d01      	subne	r5, #1
 8000ee0:	e74e      	b.n	8000d80 <__adddf3+0x8c>
 8000ee2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000ee6:	bf18      	it	ne
 8000ee8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000eec:	d029      	beq.n	8000f42 <__adddf3+0x24e>
 8000eee:	ea94 0f05 	teq	r4, r5
 8000ef2:	bf08      	it	eq
 8000ef4:	ea90 0f02 	teqeq	r0, r2
 8000ef8:	d005      	beq.n	8000f06 <__adddf3+0x212>
 8000efa:	ea54 0c00 	orrs.w	ip, r4, r0
 8000efe:	bf04      	itt	eq
 8000f00:	4619      	moveq	r1, r3
 8000f02:	4610      	moveq	r0, r2
 8000f04:	bd30      	pop	{r4, r5, pc}
 8000f06:	ea91 0f03 	teq	r1, r3
 8000f0a:	bf1e      	ittt	ne
 8000f0c:	2100      	movne	r1, #0
 8000f0e:	2000      	movne	r0, #0
 8000f10:	bd30      	popne	{r4, r5, pc}
 8000f12:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000f16:	d105      	bne.n	8000f24 <__adddf3+0x230>
 8000f18:	0040      	lsls	r0, r0, #1
 8000f1a:	4149      	adcs	r1, r1
 8000f1c:	bf28      	it	cs
 8000f1e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000f22:	bd30      	pop	{r4, r5, pc}
 8000f24:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000f28:	bf3c      	itt	cc
 8000f2a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000f2e:	bd30      	popcc	{r4, r5, pc}
 8000f30:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000f34:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000f38:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000f3c:	f04f 0000 	mov.w	r0, #0
 8000f40:	bd30      	pop	{r4, r5, pc}
 8000f42:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000f46:	bf1a      	itte	ne
 8000f48:	4619      	movne	r1, r3
 8000f4a:	4610      	movne	r0, r2
 8000f4c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000f50:	bf1c      	itt	ne
 8000f52:	460b      	movne	r3, r1
 8000f54:	4602      	movne	r2, r0
 8000f56:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000f5a:	bf06      	itte	eq
 8000f5c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000f60:	ea91 0f03 	teqeq	r1, r3
 8000f64:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000f68:	bd30      	pop	{r4, r5, pc}
 8000f6a:	bf00      	nop

08000f6c <__aeabi_ui2d>:
 8000f6c:	f090 0f00 	teq	r0, #0
 8000f70:	bf04      	itt	eq
 8000f72:	2100      	moveq	r1, #0
 8000f74:	4770      	bxeq	lr
 8000f76:	b530      	push	{r4, r5, lr}
 8000f78:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000f7c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000f80:	f04f 0500 	mov.w	r5, #0
 8000f84:	f04f 0100 	mov.w	r1, #0
 8000f88:	e750      	b.n	8000e2c <__adddf3+0x138>
 8000f8a:	bf00      	nop

08000f8c <__aeabi_i2d>:
 8000f8c:	f090 0f00 	teq	r0, #0
 8000f90:	bf04      	itt	eq
 8000f92:	2100      	moveq	r1, #0
 8000f94:	4770      	bxeq	lr
 8000f96:	b530      	push	{r4, r5, lr}
 8000f98:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000f9c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000fa0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000fa4:	bf48      	it	mi
 8000fa6:	4240      	negmi	r0, r0
 8000fa8:	f04f 0100 	mov.w	r1, #0
 8000fac:	e73e      	b.n	8000e2c <__adddf3+0x138>
 8000fae:	bf00      	nop

08000fb0 <__aeabi_f2d>:
 8000fb0:	0042      	lsls	r2, r0, #1
 8000fb2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000fb6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000fba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000fbe:	bf1f      	itttt	ne
 8000fc0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000fc4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000fc8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000fcc:	4770      	bxne	lr
 8000fce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000fd2:	bf08      	it	eq
 8000fd4:	4770      	bxeq	lr
 8000fd6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000fda:	bf04      	itt	eq
 8000fdc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000fe0:	4770      	bxeq	lr
 8000fe2:	b530      	push	{r4, r5, lr}
 8000fe4:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000fe8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000fec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000ff0:	e71c      	b.n	8000e2c <__adddf3+0x138>
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_ul2d>:
 8000ff4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ff8:	bf08      	it	eq
 8000ffa:	4770      	bxeq	lr
 8000ffc:	b530      	push	{r4, r5, lr}
 8000ffe:	f04f 0500 	mov.w	r5, #0
 8001002:	e00a      	b.n	800101a <__aeabi_l2d+0x16>

08001004 <__aeabi_l2d>:
 8001004:	ea50 0201 	orrs.w	r2, r0, r1
 8001008:	bf08      	it	eq
 800100a:	4770      	bxeq	lr
 800100c:	b530      	push	{r4, r5, lr}
 800100e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8001012:	d502      	bpl.n	800101a <__aeabi_l2d+0x16>
 8001014:	4240      	negs	r0, r0
 8001016:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800101a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800101e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8001022:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8001026:	f43f aed8 	beq.w	8000dda <__adddf3+0xe6>
 800102a:	f04f 0203 	mov.w	r2, #3
 800102e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8001032:	bf18      	it	ne
 8001034:	3203      	addne	r2, #3
 8001036:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800103a:	bf18      	it	ne
 800103c:	3203      	addne	r2, #3
 800103e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8001042:	f1c2 0320 	rsb	r3, r2, #32
 8001046:	fa00 fc03 	lsl.w	ip, r0, r3
 800104a:	fa20 f002 	lsr.w	r0, r0, r2
 800104e:	fa01 fe03 	lsl.w	lr, r1, r3
 8001052:	ea40 000e 	orr.w	r0, r0, lr
 8001056:	fa21 f102 	lsr.w	r1, r1, r2
 800105a:	4414      	add	r4, r2
 800105c:	e6bd      	b.n	8000dda <__adddf3+0xe6>
 800105e:	bf00      	nop

08001060 <__aeabi_dmul>:
 8001060:	b570      	push	{r4, r5, r6, lr}
 8001062:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8001066:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800106a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800106e:	bf1d      	ittte	ne
 8001070:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8001074:	ea94 0f0c 	teqne	r4, ip
 8001078:	ea95 0f0c 	teqne	r5, ip
 800107c:	f000 f8de 	bleq	800123c <__aeabi_dmul+0x1dc>
 8001080:	442c      	add	r4, r5
 8001082:	ea81 0603 	eor.w	r6, r1, r3
 8001086:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800108a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800108e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8001092:	bf18      	it	ne
 8001094:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8001098:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800109c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80010a0:	d038      	beq.n	8001114 <__aeabi_dmul+0xb4>
 80010a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80010a6:	f04f 0500 	mov.w	r5, #0
 80010aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80010ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80010b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80010b6:	f04f 0600 	mov.w	r6, #0
 80010ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80010be:	f09c 0f00 	teq	ip, #0
 80010c2:	bf18      	it	ne
 80010c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80010c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80010cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80010d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80010d4:	d204      	bcs.n	80010e0 <__aeabi_dmul+0x80>
 80010d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80010da:	416d      	adcs	r5, r5
 80010dc:	eb46 0606 	adc.w	r6, r6, r6
 80010e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80010e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80010e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80010ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80010f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80010f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80010f8:	bf88      	it	hi
 80010fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80010fe:	d81e      	bhi.n	800113e <__aeabi_dmul+0xde>
 8001100:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8001104:	bf08      	it	eq
 8001106:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800110a:	f150 0000 	adcs.w	r0, r0, #0
 800110e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8001112:	bd70      	pop	{r4, r5, r6, pc}
 8001114:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8001118:	ea46 0101 	orr.w	r1, r6, r1
 800111c:	ea40 0002 	orr.w	r0, r0, r2
 8001120:	ea81 0103 	eor.w	r1, r1, r3
 8001124:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8001128:	bfc2      	ittt	gt
 800112a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800112e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8001132:	bd70      	popgt	{r4, r5, r6, pc}
 8001134:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001138:	f04f 0e00 	mov.w	lr, #0
 800113c:	3c01      	subs	r4, #1
 800113e:	f300 80ab 	bgt.w	8001298 <__aeabi_dmul+0x238>
 8001142:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8001146:	bfde      	ittt	le
 8001148:	2000      	movle	r0, #0
 800114a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800114e:	bd70      	pople	{r4, r5, r6, pc}
 8001150:	f1c4 0400 	rsb	r4, r4, #0
 8001154:	3c20      	subs	r4, #32
 8001156:	da35      	bge.n	80011c4 <__aeabi_dmul+0x164>
 8001158:	340c      	adds	r4, #12
 800115a:	dc1b      	bgt.n	8001194 <__aeabi_dmul+0x134>
 800115c:	f104 0414 	add.w	r4, r4, #20
 8001160:	f1c4 0520 	rsb	r5, r4, #32
 8001164:	fa00 f305 	lsl.w	r3, r0, r5
 8001168:	fa20 f004 	lsr.w	r0, r0, r4
 800116c:	fa01 f205 	lsl.w	r2, r1, r5
 8001170:	ea40 0002 	orr.w	r0, r0, r2
 8001174:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8001178:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800117c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8001180:	fa21 f604 	lsr.w	r6, r1, r4
 8001184:	eb42 0106 	adc.w	r1, r2, r6
 8001188:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800118c:	bf08      	it	eq
 800118e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8001192:	bd70      	pop	{r4, r5, r6, pc}
 8001194:	f1c4 040c 	rsb	r4, r4, #12
 8001198:	f1c4 0520 	rsb	r5, r4, #32
 800119c:	fa00 f304 	lsl.w	r3, r0, r4
 80011a0:	fa20 f005 	lsr.w	r0, r0, r5
 80011a4:	fa01 f204 	lsl.w	r2, r1, r4
 80011a8:	ea40 0002 	orr.w	r0, r0, r2
 80011ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80011b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80011b4:	f141 0100 	adc.w	r1, r1, #0
 80011b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80011bc:	bf08      	it	eq
 80011be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80011c2:	bd70      	pop	{r4, r5, r6, pc}
 80011c4:	f1c4 0520 	rsb	r5, r4, #32
 80011c8:	fa00 f205 	lsl.w	r2, r0, r5
 80011cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80011d0:	fa20 f304 	lsr.w	r3, r0, r4
 80011d4:	fa01 f205 	lsl.w	r2, r1, r5
 80011d8:	ea43 0302 	orr.w	r3, r3, r2
 80011dc:	fa21 f004 	lsr.w	r0, r1, r4
 80011e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80011e4:	fa21 f204 	lsr.w	r2, r1, r4
 80011e8:	ea20 0002 	bic.w	r0, r0, r2
 80011ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80011f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80011f4:	bf08      	it	eq
 80011f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80011fa:	bd70      	pop	{r4, r5, r6, pc}
 80011fc:	f094 0f00 	teq	r4, #0
 8001200:	d10f      	bne.n	8001222 <__aeabi_dmul+0x1c2>
 8001202:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8001206:	0040      	lsls	r0, r0, #1
 8001208:	eb41 0101 	adc.w	r1, r1, r1
 800120c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8001210:	bf08      	it	eq
 8001212:	3c01      	subeq	r4, #1
 8001214:	d0f7      	beq.n	8001206 <__aeabi_dmul+0x1a6>
 8001216:	ea41 0106 	orr.w	r1, r1, r6
 800121a:	f095 0f00 	teq	r5, #0
 800121e:	bf18      	it	ne
 8001220:	4770      	bxne	lr
 8001222:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8001226:	0052      	lsls	r2, r2, #1
 8001228:	eb43 0303 	adc.w	r3, r3, r3
 800122c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001230:	bf08      	it	eq
 8001232:	3d01      	subeq	r5, #1
 8001234:	d0f7      	beq.n	8001226 <__aeabi_dmul+0x1c6>
 8001236:	ea43 0306 	orr.w	r3, r3, r6
 800123a:	4770      	bx	lr
 800123c:	ea94 0f0c 	teq	r4, ip
 8001240:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8001244:	bf18      	it	ne
 8001246:	ea95 0f0c 	teqne	r5, ip
 800124a:	d00c      	beq.n	8001266 <__aeabi_dmul+0x206>
 800124c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001250:	bf18      	it	ne
 8001252:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8001256:	d1d1      	bne.n	80011fc <__aeabi_dmul+0x19c>
 8001258:	ea81 0103 	eor.w	r1, r1, r3
 800125c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001260:	f04f 0000 	mov.w	r0, #0
 8001264:	bd70      	pop	{r4, r5, r6, pc}
 8001266:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800126a:	bf06      	itte	eq
 800126c:	4610      	moveq	r0, r2
 800126e:	4619      	moveq	r1, r3
 8001270:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8001274:	d019      	beq.n	80012aa <__aeabi_dmul+0x24a>
 8001276:	ea94 0f0c 	teq	r4, ip
 800127a:	d102      	bne.n	8001282 <__aeabi_dmul+0x222>
 800127c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8001280:	d113      	bne.n	80012aa <__aeabi_dmul+0x24a>
 8001282:	ea95 0f0c 	teq	r5, ip
 8001286:	d105      	bne.n	8001294 <__aeabi_dmul+0x234>
 8001288:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800128c:	bf1c      	itt	ne
 800128e:	4610      	movne	r0, r2
 8001290:	4619      	movne	r1, r3
 8001292:	d10a      	bne.n	80012aa <__aeabi_dmul+0x24a>
 8001294:	ea81 0103 	eor.w	r1, r1, r3
 8001298:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800129c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80012a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80012a4:	f04f 0000 	mov.w	r0, #0
 80012a8:	bd70      	pop	{r4, r5, r6, pc}
 80012aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80012ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80012b2:	bd70      	pop	{r4, r5, r6, pc}

080012b4 <__aeabi_ddiv>:
 80012b4:	b570      	push	{r4, r5, r6, lr}
 80012b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80012ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80012be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80012c2:	bf1d      	ittte	ne
 80012c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80012c8:	ea94 0f0c 	teqne	r4, ip
 80012cc:	ea95 0f0c 	teqne	r5, ip
 80012d0:	f000 f8a7 	bleq	8001422 <__aeabi_ddiv+0x16e>
 80012d4:	eba4 0405 	sub.w	r4, r4, r5
 80012d8:	ea81 0e03 	eor.w	lr, r1, r3
 80012dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80012e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80012e4:	f000 8088 	beq.w	80013f8 <__aeabi_ddiv+0x144>
 80012e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80012ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80012f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80012f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80012f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80012fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8001300:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8001304:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8001308:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800130c:	429d      	cmp	r5, r3
 800130e:	bf08      	it	eq
 8001310:	4296      	cmpeq	r6, r2
 8001312:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8001316:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800131a:	d202      	bcs.n	8001322 <__aeabi_ddiv+0x6e>
 800131c:	085b      	lsrs	r3, r3, #1
 800131e:	ea4f 0232 	mov.w	r2, r2, rrx
 8001322:	1ab6      	subs	r6, r6, r2
 8001324:	eb65 0503 	sbc.w	r5, r5, r3
 8001328:	085b      	lsrs	r3, r3, #1
 800132a:	ea4f 0232 	mov.w	r2, r2, rrx
 800132e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001332:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8001336:	ebb6 0e02 	subs.w	lr, r6, r2
 800133a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800133e:	bf22      	ittt	cs
 8001340:	1ab6      	subcs	r6, r6, r2
 8001342:	4675      	movcs	r5, lr
 8001344:	ea40 000c 	orrcs.w	r0, r0, ip
 8001348:	085b      	lsrs	r3, r3, #1
 800134a:	ea4f 0232 	mov.w	r2, r2, rrx
 800134e:	ebb6 0e02 	subs.w	lr, r6, r2
 8001352:	eb75 0e03 	sbcs.w	lr, r5, r3
 8001356:	bf22      	ittt	cs
 8001358:	1ab6      	subcs	r6, r6, r2
 800135a:	4675      	movcs	r5, lr
 800135c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001360:	085b      	lsrs	r3, r3, #1
 8001362:	ea4f 0232 	mov.w	r2, r2, rrx
 8001366:	ebb6 0e02 	subs.w	lr, r6, r2
 800136a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800136e:	bf22      	ittt	cs
 8001370:	1ab6      	subcs	r6, r6, r2
 8001372:	4675      	movcs	r5, lr
 8001374:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001378:	085b      	lsrs	r3, r3, #1
 800137a:	ea4f 0232 	mov.w	r2, r2, rrx
 800137e:	ebb6 0e02 	subs.w	lr, r6, r2
 8001382:	eb75 0e03 	sbcs.w	lr, r5, r3
 8001386:	bf22      	ittt	cs
 8001388:	1ab6      	subcs	r6, r6, r2
 800138a:	4675      	movcs	r5, lr
 800138c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001390:	ea55 0e06 	orrs.w	lr, r5, r6
 8001394:	d018      	beq.n	80013c8 <__aeabi_ddiv+0x114>
 8001396:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800139a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800139e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80013a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80013a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80013aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80013ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80013b2:	d1c0      	bne.n	8001336 <__aeabi_ddiv+0x82>
 80013b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80013b8:	d10b      	bne.n	80013d2 <__aeabi_ddiv+0x11e>
 80013ba:	ea41 0100 	orr.w	r1, r1, r0
 80013be:	f04f 0000 	mov.w	r0, #0
 80013c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80013c6:	e7b6      	b.n	8001336 <__aeabi_ddiv+0x82>
 80013c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80013cc:	bf04      	itt	eq
 80013ce:	4301      	orreq	r1, r0
 80013d0:	2000      	moveq	r0, #0
 80013d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80013d6:	bf88      	it	hi
 80013d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80013dc:	f63f aeaf 	bhi.w	800113e <__aeabi_dmul+0xde>
 80013e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80013e4:	bf04      	itt	eq
 80013e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80013ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80013ee:	f150 0000 	adcs.w	r0, r0, #0
 80013f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80013f6:	bd70      	pop	{r4, r5, r6, pc}
 80013f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80013fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8001400:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8001404:	bfc2      	ittt	gt
 8001406:	ebd4 050c 	rsbsgt	r5, r4, ip
 800140a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800140e:	bd70      	popgt	{r4, r5, r6, pc}
 8001410:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001414:	f04f 0e00 	mov.w	lr, #0
 8001418:	3c01      	subs	r4, #1
 800141a:	e690      	b.n	800113e <__aeabi_dmul+0xde>
 800141c:	ea45 0e06 	orr.w	lr, r5, r6
 8001420:	e68d      	b.n	800113e <__aeabi_dmul+0xde>
 8001422:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8001426:	ea94 0f0c 	teq	r4, ip
 800142a:	bf08      	it	eq
 800142c:	ea95 0f0c 	teqeq	r5, ip
 8001430:	f43f af3b 	beq.w	80012aa <__aeabi_dmul+0x24a>
 8001434:	ea94 0f0c 	teq	r4, ip
 8001438:	d10a      	bne.n	8001450 <__aeabi_ddiv+0x19c>
 800143a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800143e:	f47f af34 	bne.w	80012aa <__aeabi_dmul+0x24a>
 8001442:	ea95 0f0c 	teq	r5, ip
 8001446:	f47f af25 	bne.w	8001294 <__aeabi_dmul+0x234>
 800144a:	4610      	mov	r0, r2
 800144c:	4619      	mov	r1, r3
 800144e:	e72c      	b.n	80012aa <__aeabi_dmul+0x24a>
 8001450:	ea95 0f0c 	teq	r5, ip
 8001454:	d106      	bne.n	8001464 <__aeabi_ddiv+0x1b0>
 8001456:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800145a:	f43f aefd 	beq.w	8001258 <__aeabi_dmul+0x1f8>
 800145e:	4610      	mov	r0, r2
 8001460:	4619      	mov	r1, r3
 8001462:	e722      	b.n	80012aa <__aeabi_dmul+0x24a>
 8001464:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001468:	bf18      	it	ne
 800146a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800146e:	f47f aec5 	bne.w	80011fc <__aeabi_dmul+0x19c>
 8001472:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8001476:	f47f af0d 	bne.w	8001294 <__aeabi_dmul+0x234>
 800147a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800147e:	f47f aeeb 	bne.w	8001258 <__aeabi_dmul+0x1f8>
 8001482:	e712      	b.n	80012aa <__aeabi_dmul+0x24a>

08001484 <__gedf2>:
 8001484:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001488:	e006      	b.n	8001498 <__cmpdf2+0x4>
 800148a:	bf00      	nop

0800148c <__ledf2>:
 800148c:	f04f 0c01 	mov.w	ip, #1
 8001490:	e002      	b.n	8001498 <__cmpdf2+0x4>
 8001492:	bf00      	nop

08001494 <__cmpdf2>:
 8001494:	f04f 0c01 	mov.w	ip, #1
 8001498:	f84d cd04 	str.w	ip, [sp, #-4]!
 800149c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80014a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80014a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80014a8:	bf18      	it	ne
 80014aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80014ae:	d01b      	beq.n	80014e8 <__cmpdf2+0x54>
 80014b0:	b001      	add	sp, #4
 80014b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80014b6:	bf0c      	ite	eq
 80014b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80014bc:	ea91 0f03 	teqne	r1, r3
 80014c0:	bf02      	ittt	eq
 80014c2:	ea90 0f02 	teqeq	r0, r2
 80014c6:	2000      	moveq	r0, #0
 80014c8:	4770      	bxeq	lr
 80014ca:	f110 0f00 	cmn.w	r0, #0
 80014ce:	ea91 0f03 	teq	r1, r3
 80014d2:	bf58      	it	pl
 80014d4:	4299      	cmppl	r1, r3
 80014d6:	bf08      	it	eq
 80014d8:	4290      	cmpeq	r0, r2
 80014da:	bf2c      	ite	cs
 80014dc:	17d8      	asrcs	r0, r3, #31
 80014de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80014e2:	f040 0001 	orr.w	r0, r0, #1
 80014e6:	4770      	bx	lr
 80014e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80014ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80014f0:	d102      	bne.n	80014f8 <__cmpdf2+0x64>
 80014f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80014f6:	d107      	bne.n	8001508 <__cmpdf2+0x74>
 80014f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80014fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001500:	d1d6      	bne.n	80014b0 <__cmpdf2+0x1c>
 8001502:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8001506:	d0d3      	beq.n	80014b0 <__cmpdf2+0x1c>
 8001508:	f85d 0b04 	ldr.w	r0, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop

08001510 <__aeabi_cdrcmple>:
 8001510:	4684      	mov	ip, r0
 8001512:	4610      	mov	r0, r2
 8001514:	4662      	mov	r2, ip
 8001516:	468c      	mov	ip, r1
 8001518:	4619      	mov	r1, r3
 800151a:	4663      	mov	r3, ip
 800151c:	e000      	b.n	8001520 <__aeabi_cdcmpeq>
 800151e:	bf00      	nop

08001520 <__aeabi_cdcmpeq>:
 8001520:	b501      	push	{r0, lr}
 8001522:	f7ff ffb7 	bl	8001494 <__cmpdf2>
 8001526:	2800      	cmp	r0, #0
 8001528:	bf48      	it	mi
 800152a:	f110 0f00 	cmnmi.w	r0, #0
 800152e:	bd01      	pop	{r0, pc}

08001530 <__aeabi_dcmpeq>:
 8001530:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001534:	f7ff fff4 	bl	8001520 <__aeabi_cdcmpeq>
 8001538:	bf0c      	ite	eq
 800153a:	2001      	moveq	r0, #1
 800153c:	2000      	movne	r0, #0
 800153e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001542:	bf00      	nop

08001544 <__aeabi_dcmplt>:
 8001544:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001548:	f7ff ffea 	bl	8001520 <__aeabi_cdcmpeq>
 800154c:	bf34      	ite	cc
 800154e:	2001      	movcc	r0, #1
 8001550:	2000      	movcs	r0, #0
 8001552:	f85d fb08 	ldr.w	pc, [sp], #8
 8001556:	bf00      	nop

08001558 <__aeabi_dcmple>:
 8001558:	f84d ed08 	str.w	lr, [sp, #-8]!
 800155c:	f7ff ffe0 	bl	8001520 <__aeabi_cdcmpeq>
 8001560:	bf94      	ite	ls
 8001562:	2001      	movls	r0, #1
 8001564:	2000      	movhi	r0, #0
 8001566:	f85d fb08 	ldr.w	pc, [sp], #8
 800156a:	bf00      	nop

0800156c <__aeabi_dcmpge>:
 800156c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001570:	f7ff ffce 	bl	8001510 <__aeabi_cdrcmple>
 8001574:	bf94      	ite	ls
 8001576:	2001      	movls	r0, #1
 8001578:	2000      	movhi	r0, #0
 800157a:	f85d fb08 	ldr.w	pc, [sp], #8
 800157e:	bf00      	nop

08001580 <__aeabi_dcmpgt>:
 8001580:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001584:	f7ff ffc4 	bl	8001510 <__aeabi_cdrcmple>
 8001588:	bf34      	ite	cc
 800158a:	2001      	movcc	r0, #1
 800158c:	2000      	movcs	r0, #0
 800158e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001592:	bf00      	nop

08001594 <__aeabi_dcmpun>:
 8001594:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8001598:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800159c:	d102      	bne.n	80015a4 <__aeabi_dcmpun+0x10>
 800159e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80015a2:	d10a      	bne.n	80015ba <__aeabi_dcmpun+0x26>
 80015a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80015a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80015ac:	d102      	bne.n	80015b4 <__aeabi_dcmpun+0x20>
 80015ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80015b2:	d102      	bne.n	80015ba <__aeabi_dcmpun+0x26>
 80015b4:	f04f 0000 	mov.w	r0, #0
 80015b8:	4770      	bx	lr
 80015ba:	f04f 0001 	mov.w	r0, #1
 80015be:	4770      	bx	lr

080015c0 <__aeabi_d2iz>:
 80015c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80015c4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80015c8:	d215      	bcs.n	80015f6 <__aeabi_d2iz+0x36>
 80015ca:	d511      	bpl.n	80015f0 <__aeabi_d2iz+0x30>
 80015cc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80015d0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80015d4:	d912      	bls.n	80015fc <__aeabi_d2iz+0x3c>
 80015d6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80015da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80015de:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80015e2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80015e6:	fa23 f002 	lsr.w	r0, r3, r2
 80015ea:	bf18      	it	ne
 80015ec:	4240      	negne	r0, r0
 80015ee:	4770      	bx	lr
 80015f0:	f04f 0000 	mov.w	r0, #0
 80015f4:	4770      	bx	lr
 80015f6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80015fa:	d105      	bne.n	8001608 <__aeabi_d2iz+0x48>
 80015fc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8001600:	bf08      	it	eq
 8001602:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001606:	4770      	bx	lr
 8001608:	f04f 0000 	mov.w	r0, #0
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop

08001610 <__aeabi_d2uiz>:
 8001610:	004a      	lsls	r2, r1, #1
 8001612:	d211      	bcs.n	8001638 <__aeabi_d2uiz+0x28>
 8001614:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8001618:	d211      	bcs.n	800163e <__aeabi_d2uiz+0x2e>
 800161a:	d50d      	bpl.n	8001638 <__aeabi_d2uiz+0x28>
 800161c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8001620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001624:	d40e      	bmi.n	8001644 <__aeabi_d2uiz+0x34>
 8001626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800162a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800162e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001632:	fa23 f002 	lsr.w	r0, r3, r2
 8001636:	4770      	bx	lr
 8001638:	f04f 0000 	mov.w	r0, #0
 800163c:	4770      	bx	lr
 800163e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001642:	d102      	bne.n	800164a <__aeabi_d2uiz+0x3a>
 8001644:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001648:	4770      	bx	lr
 800164a:	f04f 0000 	mov.w	r0, #0
 800164e:	4770      	bx	lr

08001650 <atoi>:
 8001650:	220a      	movs	r2, #10
 8001652:	2100      	movs	r1, #0
 8001654:	f000 be56 	b.w	8002304 <strtol>

08001658 <_atoi_r>:
 8001658:	230a      	movs	r3, #10
 800165a:	2200      	movs	r2, #0
 800165c:	f000 be46 	b.w	80022ec <_strtol_r>

08001660 <calloc>:
 8001660:	4b02      	ldr	r3, [pc, #8]	; (800166c <calloc+0xc>)
 8001662:	460a      	mov	r2, r1
 8001664:	4601      	mov	r1, r0
 8001666:	6818      	ldr	r0, [r3, #0]
 8001668:	f000 b93a 	b.w	80018e0 <_calloc_r>
 800166c:	20000004 	.word	0x20000004

08001670 <__errno>:
 8001670:	4b01      	ldr	r3, [pc, #4]	; (8001678 <__errno+0x8>)
 8001672:	6818      	ldr	r0, [r3, #0]
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	20000004 	.word	0x20000004

0800167c <exit>:
 800167c:	b508      	push	{r3, lr}
 800167e:	4b07      	ldr	r3, [pc, #28]	; (800169c <exit+0x20>)
 8001680:	4604      	mov	r4, r0
 8001682:	b113      	cbz	r3, 800168a <exit+0xe>
 8001684:	2100      	movs	r1, #0
 8001686:	f000 ff27 	bl	80024d8 <__call_exitprocs>
 800168a:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <exit+0x24>)
 800168c:	6818      	ldr	r0, [r3, #0]
 800168e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001690:	b103      	cbz	r3, 8001694 <exit+0x18>
 8001692:	4798      	blx	r3
 8001694:	4620      	mov	r0, r4
 8001696:	f002 faad 	bl	8003bf4 <_exit>
 800169a:	bf00      	nop
 800169c:	080024d9 	.word	0x080024d9
 80016a0:	08005c48 	.word	0x08005c48

080016a4 <__libc_init_array>:
 80016a4:	b570      	push	{r4, r5, r6, lr}
 80016a6:	4e0d      	ldr	r6, [pc, #52]	; (80016dc <__libc_init_array+0x38>)
 80016a8:	4d0d      	ldr	r5, [pc, #52]	; (80016e0 <__libc_init_array+0x3c>)
 80016aa:	1b76      	subs	r6, r6, r5
 80016ac:	10b6      	asrs	r6, r6, #2
 80016ae:	d006      	beq.n	80016be <__libc_init_array+0x1a>
 80016b0:	2400      	movs	r4, #0
 80016b2:	3401      	adds	r4, #1
 80016b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80016b8:	4798      	blx	r3
 80016ba:	42a6      	cmp	r6, r4
 80016bc:	d1f9      	bne.n	80016b2 <__libc_init_array+0xe>
 80016be:	4e09      	ldr	r6, [pc, #36]	; (80016e4 <__libc_init_array+0x40>)
 80016c0:	4d09      	ldr	r5, [pc, #36]	; (80016e8 <__libc_init_array+0x44>)
 80016c2:	1b76      	subs	r6, r6, r5
 80016c4:	f004 f8be 	bl	8005844 <_init>
 80016c8:	10b6      	asrs	r6, r6, #2
 80016ca:	d006      	beq.n	80016da <__libc_init_array+0x36>
 80016cc:	2400      	movs	r4, #0
 80016ce:	3401      	adds	r4, #1
 80016d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80016d4:	4798      	blx	r3
 80016d6:	42a6      	cmp	r6, r4
 80016d8:	d1f9      	bne.n	80016ce <__libc_init_array+0x2a>
 80016da:	bd70      	pop	{r4, r5, r6, pc}
 80016dc:	08006198 	.word	0x08006198
 80016e0:	08006198 	.word	0x08006198
 80016e4:	0800619c 	.word	0x0800619c
 80016e8:	08006198 	.word	0x08006198

080016ec <malloc>:
 80016ec:	4b02      	ldr	r3, [pc, #8]	; (80016f8 <malloc+0xc>)
 80016ee:	4601      	mov	r1, r0
 80016f0:	6818      	ldr	r0, [r3, #0]
 80016f2:	f000 b959 	b.w	80019a8 <_malloc_r>
 80016f6:	bf00      	nop
 80016f8:	20000004 	.word	0x20000004

080016fc <free>:
 80016fc:	4b02      	ldr	r3, [pc, #8]	; (8001708 <free+0xc>)
 80016fe:	4601      	mov	r1, r0
 8001700:	6818      	ldr	r0, [r3, #0]
 8001702:	f000 b8fb 	b.w	80018fc <_free_r>
 8001706:	bf00      	nop
 8001708:	20000004 	.word	0x20000004

0800170c <memcpy>:
 800170c:	4684      	mov	ip, r0
 800170e:	ea41 0300 	orr.w	r3, r1, r0
 8001712:	f013 0303 	ands.w	r3, r3, #3
 8001716:	d16d      	bne.n	80017f4 <memcpy+0xe8>
 8001718:	3a40      	subs	r2, #64	; 0x40
 800171a:	d341      	bcc.n	80017a0 <memcpy+0x94>
 800171c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001720:	f840 3b04 	str.w	r3, [r0], #4
 8001724:	f851 3b04 	ldr.w	r3, [r1], #4
 8001728:	f840 3b04 	str.w	r3, [r0], #4
 800172c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001730:	f840 3b04 	str.w	r3, [r0], #4
 8001734:	f851 3b04 	ldr.w	r3, [r1], #4
 8001738:	f840 3b04 	str.w	r3, [r0], #4
 800173c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001740:	f840 3b04 	str.w	r3, [r0], #4
 8001744:	f851 3b04 	ldr.w	r3, [r1], #4
 8001748:	f840 3b04 	str.w	r3, [r0], #4
 800174c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001750:	f840 3b04 	str.w	r3, [r0], #4
 8001754:	f851 3b04 	ldr.w	r3, [r1], #4
 8001758:	f840 3b04 	str.w	r3, [r0], #4
 800175c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001760:	f840 3b04 	str.w	r3, [r0], #4
 8001764:	f851 3b04 	ldr.w	r3, [r1], #4
 8001768:	f840 3b04 	str.w	r3, [r0], #4
 800176c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001770:	f840 3b04 	str.w	r3, [r0], #4
 8001774:	f851 3b04 	ldr.w	r3, [r1], #4
 8001778:	f840 3b04 	str.w	r3, [r0], #4
 800177c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001780:	f840 3b04 	str.w	r3, [r0], #4
 8001784:	f851 3b04 	ldr.w	r3, [r1], #4
 8001788:	f840 3b04 	str.w	r3, [r0], #4
 800178c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001790:	f840 3b04 	str.w	r3, [r0], #4
 8001794:	f851 3b04 	ldr.w	r3, [r1], #4
 8001798:	f840 3b04 	str.w	r3, [r0], #4
 800179c:	3a40      	subs	r2, #64	; 0x40
 800179e:	d2bd      	bcs.n	800171c <memcpy+0x10>
 80017a0:	3230      	adds	r2, #48	; 0x30
 80017a2:	d311      	bcc.n	80017c8 <memcpy+0xbc>
 80017a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80017a8:	f840 3b04 	str.w	r3, [r0], #4
 80017ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80017b0:	f840 3b04 	str.w	r3, [r0], #4
 80017b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80017b8:	f840 3b04 	str.w	r3, [r0], #4
 80017bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80017c0:	f840 3b04 	str.w	r3, [r0], #4
 80017c4:	3a10      	subs	r2, #16
 80017c6:	d2ed      	bcs.n	80017a4 <memcpy+0x98>
 80017c8:	320c      	adds	r2, #12
 80017ca:	d305      	bcc.n	80017d8 <memcpy+0xcc>
 80017cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80017d0:	f840 3b04 	str.w	r3, [r0], #4
 80017d4:	3a04      	subs	r2, #4
 80017d6:	d2f9      	bcs.n	80017cc <memcpy+0xc0>
 80017d8:	3204      	adds	r2, #4
 80017da:	d008      	beq.n	80017ee <memcpy+0xe2>
 80017dc:	07d2      	lsls	r2, r2, #31
 80017de:	bf1c      	itt	ne
 80017e0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80017e4:	f800 3b01 	strbne.w	r3, [r0], #1
 80017e8:	d301      	bcc.n	80017ee <memcpy+0xe2>
 80017ea:	880b      	ldrh	r3, [r1, #0]
 80017ec:	8003      	strh	r3, [r0, #0]
 80017ee:	4660      	mov	r0, ip
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	2a08      	cmp	r2, #8
 80017f6:	d313      	bcc.n	8001820 <memcpy+0x114>
 80017f8:	078b      	lsls	r3, r1, #30
 80017fa:	d08d      	beq.n	8001718 <memcpy+0xc>
 80017fc:	f010 0303 	ands.w	r3, r0, #3
 8001800:	d08a      	beq.n	8001718 <memcpy+0xc>
 8001802:	f1c3 0304 	rsb	r3, r3, #4
 8001806:	1ad2      	subs	r2, r2, r3
 8001808:	07db      	lsls	r3, r3, #31
 800180a:	bf1c      	itt	ne
 800180c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8001810:	f800 3b01 	strbne.w	r3, [r0], #1
 8001814:	d380      	bcc.n	8001718 <memcpy+0xc>
 8001816:	f831 3b02 	ldrh.w	r3, [r1], #2
 800181a:	f820 3b02 	strh.w	r3, [r0], #2
 800181e:	e77b      	b.n	8001718 <memcpy+0xc>
 8001820:	3a04      	subs	r2, #4
 8001822:	d3d9      	bcc.n	80017d8 <memcpy+0xcc>
 8001824:	3a01      	subs	r2, #1
 8001826:	f811 3b01 	ldrb.w	r3, [r1], #1
 800182a:	f800 3b01 	strb.w	r3, [r0], #1
 800182e:	d2f9      	bcs.n	8001824 <memcpy+0x118>
 8001830:	780b      	ldrb	r3, [r1, #0]
 8001832:	7003      	strb	r3, [r0, #0]
 8001834:	784b      	ldrb	r3, [r1, #1]
 8001836:	7043      	strb	r3, [r0, #1]
 8001838:	788b      	ldrb	r3, [r1, #2]
 800183a:	7083      	strb	r3, [r0, #2]
 800183c:	4660      	mov	r0, ip
 800183e:	4770      	bx	lr

08001840 <memset>:
 8001840:	b4f0      	push	{r4, r5, r6, r7}
 8001842:	0786      	lsls	r6, r0, #30
 8001844:	d046      	beq.n	80018d4 <memset+0x94>
 8001846:	1e54      	subs	r4, r2, #1
 8001848:	2a00      	cmp	r2, #0
 800184a:	d03c      	beq.n	80018c6 <memset+0x86>
 800184c:	b2ca      	uxtb	r2, r1
 800184e:	4603      	mov	r3, r0
 8001850:	e002      	b.n	8001858 <memset+0x18>
 8001852:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 8001856:	d336      	bcc.n	80018c6 <memset+0x86>
 8001858:	f803 2b01 	strb.w	r2, [r3], #1
 800185c:	079d      	lsls	r5, r3, #30
 800185e:	d1f8      	bne.n	8001852 <memset+0x12>
 8001860:	2c03      	cmp	r4, #3
 8001862:	d929      	bls.n	80018b8 <memset+0x78>
 8001864:	b2cd      	uxtb	r5, r1
 8001866:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800186a:	2c0f      	cmp	r4, #15
 800186c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8001870:	d933      	bls.n	80018da <memset+0x9a>
 8001872:	f1a4 0610 	sub.w	r6, r4, #16
 8001876:	0936      	lsrs	r6, r6, #4
 8001878:	f103 0720 	add.w	r7, r3, #32
 800187c:	eb07 1706 	add.w	r7, r7, r6, lsl #4
 8001880:	f103 0210 	add.w	r2, r3, #16
 8001884:	e942 5504 	strd	r5, r5, [r2, #-16]
 8001888:	e942 5502 	strd	r5, r5, [r2, #-8]
 800188c:	3210      	adds	r2, #16
 800188e:	42ba      	cmp	r2, r7
 8001890:	d1f8      	bne.n	8001884 <memset+0x44>
 8001892:	1c72      	adds	r2, r6, #1
 8001894:	f014 0f0c 	tst.w	r4, #12
 8001898:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800189c:	f004 060f 	and.w	r6, r4, #15
 80018a0:	d013      	beq.n	80018ca <memset+0x8a>
 80018a2:	1f33      	subs	r3, r6, #4
 80018a4:	f023 0303 	bic.w	r3, r3, #3
 80018a8:	3304      	adds	r3, #4
 80018aa:	4413      	add	r3, r2
 80018ac:	f842 5b04 	str.w	r5, [r2], #4
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d1fb      	bne.n	80018ac <memset+0x6c>
 80018b4:	f006 0403 	and.w	r4, r6, #3
 80018b8:	b12c      	cbz	r4, 80018c6 <memset+0x86>
 80018ba:	b2c9      	uxtb	r1, r1
 80018bc:	441c      	add	r4, r3
 80018be:	f803 1b01 	strb.w	r1, [r3], #1
 80018c2:	429c      	cmp	r4, r3
 80018c4:	d1fb      	bne.n	80018be <memset+0x7e>
 80018c6:	bcf0      	pop	{r4, r5, r6, r7}
 80018c8:	4770      	bx	lr
 80018ca:	4634      	mov	r4, r6
 80018cc:	4613      	mov	r3, r2
 80018ce:	2c00      	cmp	r4, #0
 80018d0:	d1f3      	bne.n	80018ba <memset+0x7a>
 80018d2:	e7f8      	b.n	80018c6 <memset+0x86>
 80018d4:	4614      	mov	r4, r2
 80018d6:	4603      	mov	r3, r0
 80018d8:	e7c2      	b.n	8001860 <memset+0x20>
 80018da:	461a      	mov	r2, r3
 80018dc:	4626      	mov	r6, r4
 80018de:	e7e0      	b.n	80018a2 <memset+0x62>

080018e0 <_calloc_r>:
 80018e0:	b538      	push	{r3, r4, r5, lr}
 80018e2:	fb02 f401 	mul.w	r4, r2, r1
 80018e6:	4621      	mov	r1, r4
 80018e8:	f000 f85e 	bl	80019a8 <_malloc_r>
 80018ec:	4605      	mov	r5, r0
 80018ee:	b118      	cbz	r0, 80018f8 <_calloc_r+0x18>
 80018f0:	4622      	mov	r2, r4
 80018f2:	2100      	movs	r1, #0
 80018f4:	f7ff ffa4 	bl	8001840 <memset>
 80018f8:	4628      	mov	r0, r5
 80018fa:	bd38      	pop	{r3, r4, r5, pc}

080018fc <_free_r>:
 80018fc:	2900      	cmp	r1, #0
 80018fe:	d03c      	beq.n	800197a <_free_r+0x7e>
 8001900:	b538      	push	{r3, r4, r5, lr}
 8001902:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001906:	1f0c      	subs	r4, r1, #4
 8001908:	2b00      	cmp	r3, #0
 800190a:	bfb8      	it	lt
 800190c:	18e4      	addlt	r4, r4, r3
 800190e:	4605      	mov	r5, r0
 8001910:	f001 f91e 	bl	8002b50 <__malloc_lock>
 8001914:	4b23      	ldr	r3, [pc, #140]	; (80019a4 <_free_r+0xa8>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	b12a      	cbz	r2, 8001926 <_free_r+0x2a>
 800191a:	42a2      	cmp	r2, r4
 800191c:	d90d      	bls.n	800193a <_free_r+0x3e>
 800191e:	6821      	ldr	r1, [r4, #0]
 8001920:	1860      	adds	r0, r4, r1
 8001922:	4282      	cmp	r2, r0
 8001924:	d023      	beq.n	800196e <_free_r+0x72>
 8001926:	6062      	str	r2, [r4, #4]
 8001928:	4628      	mov	r0, r5
 800192a:	601c      	str	r4, [r3, #0]
 800192c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001930:	f001 b910 	b.w	8002b54 <__malloc_unlock>
 8001934:	42a3      	cmp	r3, r4
 8001936:	d803      	bhi.n	8001940 <_free_r+0x44>
 8001938:	461a      	mov	r2, r3
 800193a:	6853      	ldr	r3, [r2, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1f9      	bne.n	8001934 <_free_r+0x38>
 8001940:	6811      	ldr	r1, [r2, #0]
 8001942:	1850      	adds	r0, r2, r1
 8001944:	42a0      	cmp	r0, r4
 8001946:	d019      	beq.n	800197c <_free_r+0x80>
 8001948:	d824      	bhi.n	8001994 <_free_r+0x98>
 800194a:	6821      	ldr	r1, [r4, #0]
 800194c:	1860      	adds	r0, r4, r1
 800194e:	4283      	cmp	r3, r0
 8001950:	d006      	beq.n	8001960 <_free_r+0x64>
 8001952:	6063      	str	r3, [r4, #4]
 8001954:	6054      	str	r4, [r2, #4]
 8001956:	4628      	mov	r0, r5
 8001958:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800195c:	f001 b8fa 	b.w	8002b54 <__malloc_unlock>
 8001960:	e9d3 0300 	ldrd	r0, r3, [r3]
 8001964:	4401      	add	r1, r0
 8001966:	6063      	str	r3, [r4, #4]
 8001968:	6021      	str	r1, [r4, #0]
 800196a:	6054      	str	r4, [r2, #4]
 800196c:	e7f3      	b.n	8001956 <_free_r+0x5a>
 800196e:	e9d2 0200 	ldrd	r0, r2, [r2]
 8001972:	4401      	add	r1, r0
 8001974:	6062      	str	r2, [r4, #4]
 8001976:	6021      	str	r1, [r4, #0]
 8001978:	e7d6      	b.n	8001928 <_free_r+0x2c>
 800197a:	4770      	bx	lr
 800197c:	6820      	ldr	r0, [r4, #0]
 800197e:	4401      	add	r1, r0
 8001980:	1850      	adds	r0, r2, r1
 8001982:	4283      	cmp	r3, r0
 8001984:	6011      	str	r1, [r2, #0]
 8001986:	d1e6      	bne.n	8001956 <_free_r+0x5a>
 8001988:	e9d3 0300 	ldrd	r0, r3, [r3]
 800198c:	4401      	add	r1, r0
 800198e:	6053      	str	r3, [r2, #4]
 8001990:	6011      	str	r1, [r2, #0]
 8001992:	e7e0      	b.n	8001956 <_free_r+0x5a>
 8001994:	230c      	movs	r3, #12
 8001996:	602b      	str	r3, [r5, #0]
 8001998:	4628      	mov	r0, r5
 800199a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800199e:	f001 b8d9 	b.w	8002b54 <__malloc_unlock>
 80019a2:	bf00      	nop
 80019a4:	20000154 	.word	0x20000154

080019a8 <_malloc_r>:
 80019a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019aa:	1ccd      	adds	r5, r1, #3
 80019ac:	f025 0503 	bic.w	r5, r5, #3
 80019b0:	3508      	adds	r5, #8
 80019b2:	2d0c      	cmp	r5, #12
 80019b4:	bf38      	it	cc
 80019b6:	250c      	movcc	r5, #12
 80019b8:	2d00      	cmp	r5, #0
 80019ba:	4606      	mov	r6, r0
 80019bc:	db33      	blt.n	8001a26 <_malloc_r+0x7e>
 80019be:	42a9      	cmp	r1, r5
 80019c0:	d831      	bhi.n	8001a26 <_malloc_r+0x7e>
 80019c2:	4f2a      	ldr	r7, [pc, #168]	; (8001a6c <_malloc_r+0xc4>)
 80019c4:	f001 f8c4 	bl	8002b50 <__malloc_lock>
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	b152      	cbz	r2, 80019e2 <_malloc_r+0x3a>
 80019cc:	6813      	ldr	r3, [r2, #0]
 80019ce:	1b5b      	subs	r3, r3, r5
 80019d0:	d404      	bmi.n	80019dc <_malloc_r+0x34>
 80019d2:	e03f      	b.n	8001a54 <_malloc_r+0xac>
 80019d4:	6823      	ldr	r3, [r4, #0]
 80019d6:	1b5b      	subs	r3, r3, r5
 80019d8:	d529      	bpl.n	8001a2e <_malloc_r+0x86>
 80019da:	4622      	mov	r2, r4
 80019dc:	6854      	ldr	r4, [r2, #4]
 80019de:	2c00      	cmp	r4, #0
 80019e0:	d1f8      	bne.n	80019d4 <_malloc_r+0x2c>
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	2900      	cmp	r1, #0
 80019e6:	d03b      	beq.n	8001a60 <_malloc_r+0xb8>
 80019e8:	4629      	mov	r1, r5
 80019ea:	4630      	mov	r0, r6
 80019ec:	f000 f914 	bl	8001c18 <_sbrk_r>
 80019f0:	1c43      	adds	r3, r0, #1
 80019f2:	d028      	beq.n	8001a46 <_malloc_r+0x9e>
 80019f4:	1cc4      	adds	r4, r0, #3
 80019f6:	f024 0403 	bic.w	r4, r4, #3
 80019fa:	42a0      	cmp	r0, r4
 80019fc:	d005      	beq.n	8001a0a <_malloc_r+0x62>
 80019fe:	1a21      	subs	r1, r4, r0
 8001a00:	4630      	mov	r0, r6
 8001a02:	f000 f909 	bl	8001c18 <_sbrk_r>
 8001a06:	3001      	adds	r0, #1
 8001a08:	d01d      	beq.n	8001a46 <_malloc_r+0x9e>
 8001a0a:	6025      	str	r5, [r4, #0]
 8001a0c:	4630      	mov	r0, r6
 8001a0e:	f001 f8a1 	bl	8002b54 <__malloc_unlock>
 8001a12:	f104 000b 	add.w	r0, r4, #11
 8001a16:	f020 0007 	bic.w	r0, r0, #7
 8001a1a:	1d23      	adds	r3, r4, #4
 8001a1c:	1ac2      	subs	r2, r0, r3
 8001a1e:	d001      	beq.n	8001a24 <_malloc_r+0x7c>
 8001a20:	1a1b      	subs	r3, r3, r0
 8001a22:	50a3      	str	r3, [r4, r2]
 8001a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a26:	220c      	movs	r2, #12
 8001a28:	6032      	str	r2, [r6, #0]
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a2e:	2b0b      	cmp	r3, #11
 8001a30:	d805      	bhi.n	8001a3e <_malloc_r+0x96>
 8001a32:	42a2      	cmp	r2, r4
 8001a34:	6863      	ldr	r3, [r4, #4]
 8001a36:	d011      	beq.n	8001a5c <_malloc_r+0xb4>
 8001a38:	6053      	str	r3, [r2, #4]
 8001a3a:	e7e7      	b.n	8001a0c <_malloc_r+0x64>
 8001a3c:	4614      	mov	r4, r2
 8001a3e:	6023      	str	r3, [r4, #0]
 8001a40:	441c      	add	r4, r3
 8001a42:	6025      	str	r5, [r4, #0]
 8001a44:	e7e2      	b.n	8001a0c <_malloc_r+0x64>
 8001a46:	230c      	movs	r3, #12
 8001a48:	4630      	mov	r0, r6
 8001a4a:	6033      	str	r3, [r6, #0]
 8001a4c:	f001 f882 	bl	8002b54 <__malloc_unlock>
 8001a50:	2000      	movs	r0, #0
 8001a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a54:	2b0b      	cmp	r3, #11
 8001a56:	d8f1      	bhi.n	8001a3c <_malloc_r+0x94>
 8001a58:	6853      	ldr	r3, [r2, #4]
 8001a5a:	4614      	mov	r4, r2
 8001a5c:	603b      	str	r3, [r7, #0]
 8001a5e:	e7d5      	b.n	8001a0c <_malloc_r+0x64>
 8001a60:	4630      	mov	r0, r6
 8001a62:	f000 f8d9 	bl	8001c18 <_sbrk_r>
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	e7be      	b.n	80019e8 <_malloc_r+0x40>
 8001a6a:	bf00      	nop
 8001a6c:	20000154 	.word	0x20000154

08001a70 <_iprintf_r>:
 8001a70:	b40e      	push	{r1, r2, r3}
 8001a72:	b510      	push	{r4, lr}
 8001a74:	4604      	mov	r4, r0
 8001a76:	b083      	sub	sp, #12
 8001a78:	b108      	cbz	r0, 8001a7e <_iprintf_r+0xe>
 8001a7a:	6983      	ldr	r3, [r0, #24]
 8001a7c:	b163      	cbz	r3, 8001a98 <_iprintf_r+0x28>
 8001a7e:	a806      	add	r0, sp, #24
 8001a80:	4603      	mov	r3, r0
 8001a82:	9001      	str	r0, [sp, #4]
 8001a84:	9a05      	ldr	r2, [sp, #20]
 8001a86:	68a1      	ldr	r1, [r4, #8]
 8001a88:	4620      	mov	r0, r4
 8001a8a:	f001 f8a7 	bl	8002bdc <_vfiprintf_r>
 8001a8e:	b003      	add	sp, #12
 8001a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a94:	b003      	add	sp, #12
 8001a96:	4770      	bx	lr
 8001a98:	f000 ff50 	bl	800293c <__sinit>
 8001a9c:	e7ef      	b.n	8001a7e <_iprintf_r+0xe>
 8001a9e:	bf00      	nop

08001aa0 <iprintf>:
 8001aa0:	b40f      	push	{r0, r1, r2, r3}
 8001aa2:	b510      	push	{r4, lr}
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <iprintf+0x34>)
 8001aa6:	681c      	ldr	r4, [r3, #0]
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	b10c      	cbz	r4, 8001ab0 <iprintf+0x10>
 8001aac:	69a3      	ldr	r3, [r4, #24]
 8001aae:	b163      	cbz	r3, 8001aca <iprintf+0x2a>
 8001ab0:	a805      	add	r0, sp, #20
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	9001      	str	r0, [sp, #4]
 8001ab6:	9a04      	ldr	r2, [sp, #16]
 8001ab8:	68a1      	ldr	r1, [r4, #8]
 8001aba:	4620      	mov	r0, r4
 8001abc:	f001 f88e 	bl	8002bdc <_vfiprintf_r>
 8001ac0:	b002      	add	sp, #8
 8001ac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ac6:	b004      	add	sp, #16
 8001ac8:	4770      	bx	lr
 8001aca:	4620      	mov	r0, r4
 8001acc:	f000 ff36 	bl	800293c <__sinit>
 8001ad0:	e7ee      	b.n	8001ab0 <iprintf+0x10>
 8001ad2:	bf00      	nop
 8001ad4:	20000004 	.word	0x20000004

08001ad8 <_putchar_r>:
 8001ad8:	b510      	push	{r4, lr}
 8001ada:	4604      	mov	r4, r0
 8001adc:	b082      	sub	sp, #8
 8001ade:	b108      	cbz	r0, 8001ae4 <_putchar_r+0xc>
 8001ae0:	6983      	ldr	r3, [r0, #24]
 8001ae2:	b133      	cbz	r3, 8001af2 <_putchar_r+0x1a>
 8001ae4:	68a2      	ldr	r2, [r4, #8]
 8001ae6:	4620      	mov	r0, r4
 8001ae8:	b002      	add	sp, #8
 8001aea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001aee:	f001 bbc5 	b.w	800327c <_putc_r>
 8001af2:	9101      	str	r1, [sp, #4]
 8001af4:	f000 ff22 	bl	800293c <__sinit>
 8001af8:	9901      	ldr	r1, [sp, #4]
 8001afa:	e7f3      	b.n	8001ae4 <_putchar_r+0xc>

08001afc <putchar>:
 8001afc:	b538      	push	{r3, r4, r5, lr}
 8001afe:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <putchar+0x30>)
 8001b00:	681c      	ldr	r4, [r3, #0]
 8001b02:	4605      	mov	r5, r0
 8001b04:	b10c      	cbz	r4, 8001b0a <putchar+0xe>
 8001b06:	69a3      	ldr	r3, [r4, #24]
 8001b08:	b133      	cbz	r3, 8001b18 <putchar+0x1c>
 8001b0a:	4629      	mov	r1, r5
 8001b0c:	68a2      	ldr	r2, [r4, #8]
 8001b0e:	4620      	mov	r0, r4
 8001b10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b14:	f001 bbb2 	b.w	800327c <_putc_r>
 8001b18:	4620      	mov	r0, r4
 8001b1a:	f000 ff0f 	bl	800293c <__sinit>
 8001b1e:	4629      	mov	r1, r5
 8001b20:	68a2      	ldr	r2, [r4, #8]
 8001b22:	4620      	mov	r0, r4
 8001b24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b28:	f001 bba8 	b.w	800327c <_putc_r>
 8001b2c:	20000004 	.word	0x20000004

08001b30 <_puts_r>:
 8001b30:	6983      	ldr	r3, [r0, #24]
 8001b32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b36:	4680      	mov	r8, r0
 8001b38:	460e      	mov	r6, r1
 8001b3a:	b333      	cbz	r3, 8001b8a <_puts_r+0x5a>
 8001b3c:	6884      	ldr	r4, [r0, #8]
 8001b3e:	4b2f      	ldr	r3, [pc, #188]	; (8001bfc <_puts_r+0xcc>)
 8001b40:	429c      	cmp	r4, r3
 8001b42:	d030      	beq.n	8001ba6 <_puts_r+0x76>
 8001b44:	4b2e      	ldr	r3, [pc, #184]	; (8001c00 <_puts_r+0xd0>)
 8001b46:	429c      	cmp	r4, r3
 8001b48:	d039      	beq.n	8001bbe <_puts_r+0x8e>
 8001b4a:	4b2e      	ldr	r3, [pc, #184]	; (8001c04 <_puts_r+0xd4>)
 8001b4c:	429c      	cmp	r4, r3
 8001b4e:	bf08      	it	eq
 8001b50:	f8d8 400c 	ldreq.w	r4, [r8, #12]
 8001b54:	89a3      	ldrh	r3, [r4, #12]
 8001b56:	071b      	lsls	r3, r3, #28
 8001b58:	d52a      	bpl.n	8001bb0 <_puts_r+0x80>
 8001b5a:	6923      	ldr	r3, [r4, #16]
 8001b5c:	b343      	cbz	r3, 8001bb0 <_puts_r+0x80>
 8001b5e:	3e01      	subs	r6, #1
 8001b60:	68a3      	ldr	r3, [r4, #8]
 8001b62:	f816 5f01 	ldrb.w	r5, [r6, #1]!
 8001b66:	3b01      	subs	r3, #1
 8001b68:	60a3      	str	r3, [r4, #8]
 8001b6a:	b39d      	cbz	r5, 8001bd4 <_puts_r+0xa4>
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	da07      	bge.n	8001b80 <_puts_r+0x50>
 8001b70:	69a7      	ldr	r7, [r4, #24]
 8001b72:	429f      	cmp	r7, r3
 8001b74:	4622      	mov	r2, r4
 8001b76:	4629      	mov	r1, r5
 8001b78:	4640      	mov	r0, r8
 8001b7a:	dc23      	bgt.n	8001bc4 <_puts_r+0x94>
 8001b7c:	2d0a      	cmp	r5, #10
 8001b7e:	d021      	beq.n	8001bc4 <_puts_r+0x94>
 8001b80:	6823      	ldr	r3, [r4, #0]
 8001b82:	1c5a      	adds	r2, r3, #1
 8001b84:	6022      	str	r2, [r4, #0]
 8001b86:	701d      	strb	r5, [r3, #0]
 8001b88:	e7ea      	b.n	8001b60 <_puts_r+0x30>
 8001b8a:	f000 fed7 	bl	800293c <__sinit>
 8001b8e:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8001b92:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1d1      	bne.n	8001b3e <_puts_r+0xe>
 8001b9a:	4640      	mov	r0, r8
 8001b9c:	f000 fece 	bl	800293c <__sinit>
 8001ba0:	4b16      	ldr	r3, [pc, #88]	; (8001bfc <_puts_r+0xcc>)
 8001ba2:	429c      	cmp	r4, r3
 8001ba4:	d1ce      	bne.n	8001b44 <_puts_r+0x14>
 8001ba6:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8001baa:	89a3      	ldrh	r3, [r4, #12]
 8001bac:	071b      	lsls	r3, r3, #28
 8001bae:	d4d4      	bmi.n	8001b5a <_puts_r+0x2a>
 8001bb0:	4621      	mov	r1, r4
 8001bb2:	4640      	mov	r0, r8
 8001bb4:	f000 fc10 	bl	80023d8 <__swsetup_r>
 8001bb8:	2800      	cmp	r0, #0
 8001bba:	d0d0      	beq.n	8001b5e <_puts_r+0x2e>
 8001bbc:	e006      	b.n	8001bcc <_puts_r+0x9c>
 8001bbe:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8001bc2:	e7c7      	b.n	8001b54 <_puts_r+0x24>
 8001bc4:	f000 fba8 	bl	8002318 <__swbuf_r>
 8001bc8:	3001      	adds	r0, #1
 8001bca:	d1c9      	bne.n	8001b60 <_puts_r+0x30>
 8001bcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	da09      	bge.n	8001bec <_puts_r+0xbc>
 8001bd8:	4622      	mov	r2, r4
 8001bda:	4640      	mov	r0, r8
 8001bdc:	210a      	movs	r1, #10
 8001bde:	f000 fb9b 	bl	8002318 <__swbuf_r>
 8001be2:	3001      	adds	r0, #1
 8001be4:	d0f2      	beq.n	8001bcc <_puts_r+0x9c>
 8001be6:	200a      	movs	r0, #10
 8001be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001bec:	6823      	ldr	r3, [r4, #0]
 8001bee:	220a      	movs	r2, #10
 8001bf0:	1c59      	adds	r1, r3, #1
 8001bf2:	6021      	str	r1, [r4, #0]
 8001bf4:	701a      	strb	r2, [r3, #0]
 8001bf6:	4610      	mov	r0, r2
 8001bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001bfc:	08005d90 	.word	0x08005d90
 8001c00:	08005d70 	.word	0x08005d70
 8001c04:	08005d50 	.word	0x08005d50

08001c08 <puts>:
 8001c08:	4b02      	ldr	r3, [pc, #8]	; (8001c14 <puts+0xc>)
 8001c0a:	4601      	mov	r1, r0
 8001c0c:	6818      	ldr	r0, [r3, #0]
 8001c0e:	f7ff bf8f 	b.w	8001b30 <_puts_r>
 8001c12:	bf00      	nop
 8001c14:	20000004 	.word	0x20000004

08001c18 <_sbrk_r>:
 8001c18:	b538      	push	{r3, r4, r5, lr}
 8001c1a:	4c07      	ldr	r4, [pc, #28]	; (8001c38 <_sbrk_r+0x20>)
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	4605      	mov	r5, r0
 8001c20:	4608      	mov	r0, r1
 8001c22:	6023      	str	r3, [r4, #0]
 8001c24:	f003 fdce 	bl	80057c4 <_sbrk>
 8001c28:	1c43      	adds	r3, r0, #1
 8001c2a:	d000      	beq.n	8001c2e <_sbrk_r+0x16>
 8001c2c:	bd38      	pop	{r3, r4, r5, pc}
 8001c2e:	6823      	ldr	r3, [r4, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0fb      	beq.n	8001c2c <_sbrk_r+0x14>
 8001c34:	602b      	str	r3, [r5, #0]
 8001c36:	bd38      	pop	{r3, r4, r5, pc}
 8001c38:	200001d8 	.word	0x200001d8
 8001c3c:	00000000 	.word	0x00000000
 8001c40:	eba2 0003 	sub.w	r0, r2, r3
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop

08001c48 <strcmp>:
 8001c48:	7802      	ldrb	r2, [r0, #0]
 8001c4a:	780b      	ldrb	r3, [r1, #0]
 8001c4c:	2a01      	cmp	r2, #1
 8001c4e:	bf28      	it	cs
 8001c50:	429a      	cmpcs	r2, r3
 8001c52:	d1f5      	bne.n	8001c40 <_sbrk_r+0x28>
 8001c54:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 8001c58:	ea40 0401 	orr.w	r4, r0, r1
 8001c5c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8001c60:	f06f 0c00 	mvn.w	ip, #0
 8001c64:	ea4f 7244 	mov.w	r2, r4, lsl #29
 8001c68:	b312      	cbz	r2, 8001cb0 <strcmp+0x68>
 8001c6a:	ea80 0401 	eor.w	r4, r0, r1
 8001c6e:	f014 0f07 	tst.w	r4, #7
 8001c72:	d16a      	bne.n	8001d4a <strcmp+0x102>
 8001c74:	f000 0407 	and.w	r4, r0, #7
 8001c78:	f020 0007 	bic.w	r0, r0, #7
 8001c7c:	f004 0503 	and.w	r5, r4, #3
 8001c80:	f021 0107 	bic.w	r1, r1, #7
 8001c84:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8001c88:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8001c8c:	f014 0f04 	tst.w	r4, #4
 8001c90:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8001c94:	fa0c f405 	lsl.w	r4, ip, r5
 8001c98:	ea62 0204 	orn	r2, r2, r4
 8001c9c:	ea66 0604 	orn	r6, r6, r4
 8001ca0:	d00a      	beq.n	8001cb8 <strcmp+0x70>
 8001ca2:	ea63 0304 	orn	r3, r3, r4
 8001ca6:	4662      	mov	r2, ip
 8001ca8:	ea67 0704 	orn	r7, r7, r4
 8001cac:	4666      	mov	r6, ip
 8001cae:	e003      	b.n	8001cb8 <strcmp+0x70>
 8001cb0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8001cb4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8001cb8:	fa82 f54c 	uadd8	r5, r2, ip
 8001cbc:	ea82 0406 	eor.w	r4, r2, r6
 8001cc0:	faa4 f48c 	sel	r4, r4, ip
 8001cc4:	bb6c      	cbnz	r4, 8001d22 <strcmp+0xda>
 8001cc6:	fa83 f54c 	uadd8	r5, r3, ip
 8001cca:	ea83 0507 	eor.w	r5, r3, r7
 8001cce:	faa5 f58c 	sel	r5, r5, ip
 8001cd2:	b995      	cbnz	r5, 8001cfa <strcmp+0xb2>
 8001cd4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 8001cd8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 8001cdc:	fa82 f54c 	uadd8	r5, r2, ip
 8001ce0:	ea82 0406 	eor.w	r4, r2, r6
 8001ce4:	faa4 f48c 	sel	r4, r4, ip
 8001ce8:	fa83 f54c 	uadd8	r5, r3, ip
 8001cec:	ea83 0507 	eor.w	r5, r3, r7
 8001cf0:	faa5 f58c 	sel	r5, r5, ip
 8001cf4:	4325      	orrs	r5, r4
 8001cf6:	d0db      	beq.n	8001cb0 <strcmp+0x68>
 8001cf8:	b99c      	cbnz	r4, 8001d22 <strcmp+0xda>
 8001cfa:	ba2d      	rev	r5, r5
 8001cfc:	fab5 f485 	clz	r4, r5
 8001d00:	f024 0407 	bic.w	r4, r4, #7
 8001d04:	fa27 f104 	lsr.w	r1, r7, r4
 8001d08:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8001d0c:	fa23 f304 	lsr.w	r3, r3, r4
 8001d10:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8001d14:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8001d18:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8001d1c:	eba0 0001 	sub.w	r0, r0, r1
 8001d20:	4770      	bx	lr
 8001d22:	ba24      	rev	r4, r4
 8001d24:	fab4 f484 	clz	r4, r4
 8001d28:	f024 0407 	bic.w	r4, r4, #7
 8001d2c:	fa26 f104 	lsr.w	r1, r6, r4
 8001d30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8001d34:	fa22 f204 	lsr.w	r2, r2, r4
 8001d38:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8001d3c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8001d40:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8001d44:	eba0 0001 	sub.w	r0, r0, r1
 8001d48:	4770      	bx	lr
 8001d4a:	f014 0f03 	tst.w	r4, #3
 8001d4e:	d13c      	bne.n	8001dca <strcmp+0x182>
 8001d50:	f010 0403 	ands.w	r4, r0, #3
 8001d54:	d128      	bne.n	8001da8 <strcmp+0x160>
 8001d56:	f850 2b08 	ldr.w	r2, [r0], #8
 8001d5a:	f851 3b08 	ldr.w	r3, [r1], #8
 8001d5e:	fa82 f54c 	uadd8	r5, r2, ip
 8001d62:	ea82 0503 	eor.w	r5, r2, r3
 8001d66:	faa5 f58c 	sel	r5, r5, ip
 8001d6a:	b95d      	cbnz	r5, 8001d84 <strcmp+0x13c>
 8001d6c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8001d70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d74:	fa82 f54c 	uadd8	r5, r2, ip
 8001d78:	ea82 0503 	eor.w	r5, r2, r3
 8001d7c:	faa5 f58c 	sel	r5, r5, ip
 8001d80:	2d00      	cmp	r5, #0
 8001d82:	d0e8      	beq.n	8001d56 <strcmp+0x10e>
 8001d84:	ba2d      	rev	r5, r5
 8001d86:	fab5 f485 	clz	r4, r5
 8001d8a:	f024 0407 	bic.w	r4, r4, #7
 8001d8e:	fa23 f104 	lsr.w	r1, r3, r4
 8001d92:	fa22 f204 	lsr.w	r2, r2, r4
 8001d96:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8001d9a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8001d9e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8001da2:	eba0 0001 	sub.w	r0, r0, r1
 8001da6:	4770      	bx	lr
 8001da8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8001dac:	f020 0003 	bic.w	r0, r0, #3
 8001db0:	f850 2b08 	ldr.w	r2, [r0], #8
 8001db4:	f021 0103 	bic.w	r1, r1, #3
 8001db8:	f851 3b08 	ldr.w	r3, [r1], #8
 8001dbc:	fa0c f404 	lsl.w	r4, ip, r4
 8001dc0:	ea62 0204 	orn	r2, r2, r4
 8001dc4:	ea63 0304 	orn	r3, r3, r4
 8001dc8:	e7c9      	b.n	8001d5e <strcmp+0x116>
 8001dca:	f010 0403 	ands.w	r4, r0, #3
 8001dce:	d01a      	beq.n	8001e06 <strcmp+0x1be>
 8001dd0:	eba1 0104 	sub.w	r1, r1, r4
 8001dd4:	f020 0003 	bic.w	r0, r0, #3
 8001dd8:	07e4      	lsls	r4, r4, #31
 8001dda:	f850 2b04 	ldr.w	r2, [r0], #4
 8001dde:	d006      	beq.n	8001dee <strcmp+0x1a6>
 8001de0:	d20f      	bcs.n	8001e02 <strcmp+0x1ba>
 8001de2:	788b      	ldrb	r3, [r1, #2]
 8001de4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 8001de8:	1ae4      	subs	r4, r4, r3
 8001dea:	d106      	bne.n	8001dfa <strcmp+0x1b2>
 8001dec:	b12b      	cbz	r3, 8001dfa <strcmp+0x1b2>
 8001dee:	78cb      	ldrb	r3, [r1, #3]
 8001df0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 8001df4:	1ae4      	subs	r4, r4, r3
 8001df6:	d100      	bne.n	8001dfa <strcmp+0x1b2>
 8001df8:	b91b      	cbnz	r3, 8001e02 <strcmp+0x1ba>
 8001dfa:	4620      	mov	r0, r4
 8001dfc:	f85d 4b10 	ldr.w	r4, [sp], #16
 8001e00:	4770      	bx	lr
 8001e02:	f101 0104 	add.w	r1, r1, #4
 8001e06:	f850 2b04 	ldr.w	r2, [r0], #4
 8001e0a:	07cc      	lsls	r4, r1, #31
 8001e0c:	f021 0103 	bic.w	r1, r1, #3
 8001e10:	f851 3b04 	ldr.w	r3, [r1], #4
 8001e14:	d848      	bhi.n	8001ea8 <strcmp+0x260>
 8001e16:	d224      	bcs.n	8001e62 <strcmp+0x21a>
 8001e18:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 8001e1c:	fa82 f54c 	uadd8	r5, r2, ip
 8001e20:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 8001e24:	faa5 f58c 	sel	r5, r5, ip
 8001e28:	d10a      	bne.n	8001e40 <strcmp+0x1f8>
 8001e2a:	b965      	cbnz	r5, 8001e46 <strcmp+0x1fe>
 8001e2c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001e30:	ea84 0402 	eor.w	r4, r4, r2
 8001e34:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 8001e38:	d10e      	bne.n	8001e58 <strcmp+0x210>
 8001e3a:	f850 2b04 	ldr.w	r2, [r0], #4
 8001e3e:	e7eb      	b.n	8001e18 <strcmp+0x1d0>
 8001e40:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8001e44:	e055      	b.n	8001ef2 <strcmp+0x2aa>
 8001e46:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 8001e4a:	d14d      	bne.n	8001ee8 <strcmp+0x2a0>
 8001e4c:	7808      	ldrb	r0, [r1, #0]
 8001e4e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8001e52:	f1c0 0000 	rsb	r0, r0, #0
 8001e56:	4770      	bx	lr
 8001e58:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8001e5c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8001e60:	e047      	b.n	8001ef2 <strcmp+0x2aa>
 8001e62:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 8001e66:	fa82 f54c 	uadd8	r5, r2, ip
 8001e6a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 8001e6e:	faa5 f58c 	sel	r5, r5, ip
 8001e72:	d10a      	bne.n	8001e8a <strcmp+0x242>
 8001e74:	b965      	cbnz	r5, 8001e90 <strcmp+0x248>
 8001e76:	f851 3b04 	ldr.w	r3, [r1], #4
 8001e7a:	ea84 0402 	eor.w	r4, r4, r2
 8001e7e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 8001e82:	d10c      	bne.n	8001e9e <strcmp+0x256>
 8001e84:	f850 2b04 	ldr.w	r2, [r0], #4
 8001e88:	e7eb      	b.n	8001e62 <strcmp+0x21a>
 8001e8a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8001e8e:	e030      	b.n	8001ef2 <strcmp+0x2aa>
 8001e90:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 8001e94:	d128      	bne.n	8001ee8 <strcmp+0x2a0>
 8001e96:	880b      	ldrh	r3, [r1, #0]
 8001e98:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8001e9c:	e029      	b.n	8001ef2 <strcmp+0x2aa>
 8001e9e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8001ea2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 8001ea6:	e024      	b.n	8001ef2 <strcmp+0x2aa>
 8001ea8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 8001eac:	fa82 f54c 	uadd8	r5, r2, ip
 8001eb0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 8001eb4:	faa5 f58c 	sel	r5, r5, ip
 8001eb8:	d10a      	bne.n	8001ed0 <strcmp+0x288>
 8001eba:	b965      	cbnz	r5, 8001ed6 <strcmp+0x28e>
 8001ebc:	f851 3b04 	ldr.w	r3, [r1], #4
 8001ec0:	ea84 0402 	eor.w	r4, r4, r2
 8001ec4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 8001ec8:	d109      	bne.n	8001ede <strcmp+0x296>
 8001eca:	f850 2b04 	ldr.w	r2, [r0], #4
 8001ece:	e7eb      	b.n	8001ea8 <strcmp+0x260>
 8001ed0:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8001ed4:	e00d      	b.n	8001ef2 <strcmp+0x2aa>
 8001ed6:	f015 0fff 	tst.w	r5, #255	; 0xff
 8001eda:	d105      	bne.n	8001ee8 <strcmp+0x2a0>
 8001edc:	680b      	ldr	r3, [r1, #0]
 8001ede:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8001ee2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001ee6:	e004      	b.n	8001ef2 <strcmp+0x2aa>
 8001ee8:	f04f 0000 	mov.w	r0, #0
 8001eec:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8001ef0:	4770      	bx	lr
 8001ef2:	ba12      	rev	r2, r2
 8001ef4:	ba1b      	rev	r3, r3
 8001ef6:	fa82 f44c 	uadd8	r4, r2, ip
 8001efa:	ea82 0403 	eor.w	r4, r2, r3
 8001efe:	faa4 f58c 	sel	r5, r4, ip
 8001f02:	fab5 f485 	clz	r4, r5
 8001f06:	fa02 f204 	lsl.w	r2, r2, r4
 8001f0a:	fa03 f304 	lsl.w	r3, r3, r4
 8001f0e:	ea4f 6012 	mov.w	r0, r2, lsr #24
 8001f12:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8001f16:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 8001f1a:	4770      	bx	lr

08001f1c <strcpy>:
 8001f1c:	ea80 0201 	eor.w	r2, r0, r1
 8001f20:	4684      	mov	ip, r0
 8001f22:	f012 0f03 	tst.w	r2, #3
 8001f26:	d14f      	bne.n	8001fc8 <strcpy+0xac>
 8001f28:	f011 0f03 	tst.w	r1, #3
 8001f2c:	d132      	bne.n	8001f94 <strcpy+0x78>
 8001f2e:	f84d 4d04 	str.w	r4, [sp, #-4]!
 8001f32:	f011 0f04 	tst.w	r1, #4
 8001f36:	f851 3b04 	ldr.w	r3, [r1], #4
 8001f3a:	d00b      	beq.n	8001f54 <strcpy+0x38>
 8001f3c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8001f40:	439a      	bics	r2, r3
 8001f42:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8001f46:	bf04      	itt	eq
 8001f48:	f84c 3b04 	streq.w	r3, [ip], #4
 8001f4c:	f851 3b04 	ldreq.w	r3, [r1], #4
 8001f50:	d116      	bne.n	8001f80 <strcpy+0x64>
 8001f52:	bf00      	nop
 8001f54:	f851 4b04 	ldr.w	r4, [r1], #4
 8001f58:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8001f5c:	439a      	bics	r2, r3
 8001f5e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8001f62:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 8001f66:	d10b      	bne.n	8001f80 <strcpy+0x64>
 8001f68:	f84c 3b04 	str.w	r3, [ip], #4
 8001f6c:	43a2      	bics	r2, r4
 8001f6e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8001f72:	bf04      	itt	eq
 8001f74:	f851 3b04 	ldreq.w	r3, [r1], #4
 8001f78:	f84c 4b04 	streq.w	r4, [ip], #4
 8001f7c:	d0ea      	beq.n	8001f54 <strcpy+0x38>
 8001f7e:	4623      	mov	r3, r4
 8001f80:	f80c 3b01 	strb.w	r3, [ip], #1
 8001f84:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001f88:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001f8c:	d1f8      	bne.n	8001f80 <strcpy+0x64>
 8001f8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	f011 0f01 	tst.w	r1, #1
 8001f98:	d006      	beq.n	8001fa8 <strcpy+0x8c>
 8001f9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001f9e:	f80c 2b01 	strb.w	r2, [ip], #1
 8001fa2:	2a00      	cmp	r2, #0
 8001fa4:	bf08      	it	eq
 8001fa6:	4770      	bxeq	lr
 8001fa8:	f011 0f02 	tst.w	r1, #2
 8001fac:	d0bf      	beq.n	8001f2e <strcpy+0x12>
 8001fae:	f831 2b02 	ldrh.w	r2, [r1], #2
 8001fb2:	f012 0fff 	tst.w	r2, #255	; 0xff
 8001fb6:	bf16      	itet	ne
 8001fb8:	f82c 2b02 	strhne.w	r2, [ip], #2
 8001fbc:	f88c 2000 	strbeq.w	r2, [ip]
 8001fc0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 8001fc4:	d1b3      	bne.n	8001f2e <strcpy+0x12>
 8001fc6:	4770      	bx	lr
 8001fc8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001fcc:	f80c 2b01 	strb.w	r2, [ip], #1
 8001fd0:	2a00      	cmp	r2, #0
 8001fd2:	d1f9      	bne.n	8001fc8 <strcpy+0xac>
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	0000      	movs	r0, r0
 8001fda:	0000      	movs	r0, r0
 8001fdc:	0000      	movs	r0, r0
 8001fde:	0000      	movs	r0, r0
 8001fe0:	0000      	movs	r0, r0
 8001fe2:	0000      	movs	r0, r0
 8001fe4:	0000      	movs	r0, r0
 8001fe6:	0000      	movs	r0, r0
 8001fe8:	0000      	movs	r0, r0
 8001fea:	0000      	movs	r0, r0
 8001fec:	0000      	movs	r0, r0
 8001fee:	0000      	movs	r0, r0
 8001ff0:	0000      	movs	r0, r0
 8001ff2:	0000      	movs	r0, r0
 8001ff4:	0000      	movs	r0, r0
 8001ff6:	0000      	movs	r0, r0
 8001ff8:	0000      	movs	r0, r0
 8001ffa:	0000      	movs	r0, r0
 8001ffc:	0000      	movs	r0, r0
 8001ffe:	0000      	movs	r0, r0

08002000 <strlen>:
 8002000:	f890 f000 	pld	[r0]
 8002004:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8002008:	f020 0107 	bic.w	r1, r0, #7
 800200c:	f06f 0c00 	mvn.w	ip, #0
 8002010:	f010 0407 	ands.w	r4, r0, #7
 8002014:	f891 f020 	pld	[r1, #32]
 8002018:	f040 8049 	bne.w	80020ae <strlen+0xae>
 800201c:	f04f 0400 	mov.w	r4, #0
 8002020:	f06f 0007 	mvn.w	r0, #7
 8002024:	e9d1 2300 	ldrd	r2, r3, [r1]
 8002028:	f891 f040 	pld	[r1, #64]	; 0x40
 800202c:	f100 0008 	add.w	r0, r0, #8
 8002030:	fa82 f24c 	uadd8	r2, r2, ip
 8002034:	faa4 f28c 	sel	r2, r4, ip
 8002038:	fa83 f34c 	uadd8	r3, r3, ip
 800203c:	faa2 f38c 	sel	r3, r2, ip
 8002040:	bb4b      	cbnz	r3, 8002096 <strlen+0x96>
 8002042:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8002046:	fa82 f24c 	uadd8	r2, r2, ip
 800204a:	f100 0008 	add.w	r0, r0, #8
 800204e:	faa4 f28c 	sel	r2, r4, ip
 8002052:	fa83 f34c 	uadd8	r3, r3, ip
 8002056:	faa2 f38c 	sel	r3, r2, ip
 800205a:	b9e3      	cbnz	r3, 8002096 <strlen+0x96>
 800205c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8002060:	fa82 f24c 	uadd8	r2, r2, ip
 8002064:	f100 0008 	add.w	r0, r0, #8
 8002068:	faa4 f28c 	sel	r2, r4, ip
 800206c:	fa83 f34c 	uadd8	r3, r3, ip
 8002070:	faa2 f38c 	sel	r3, r2, ip
 8002074:	b97b      	cbnz	r3, 8002096 <strlen+0x96>
 8002076:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 800207a:	f101 0120 	add.w	r1, r1, #32
 800207e:	fa82 f24c 	uadd8	r2, r2, ip
 8002082:	f100 0008 	add.w	r0, r0, #8
 8002086:	faa4 f28c 	sel	r2, r4, ip
 800208a:	fa83 f34c 	uadd8	r3, r3, ip
 800208e:	faa2 f38c 	sel	r3, r2, ip
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0c6      	beq.n	8002024 <strlen+0x24>
 8002096:	2a00      	cmp	r2, #0
 8002098:	bf04      	itt	eq
 800209a:	3004      	addeq	r0, #4
 800209c:	461a      	moveq	r2, r3
 800209e:	ba12      	rev	r2, r2
 80020a0:	fab2 f282 	clz	r2, r2
 80020a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 80020a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80020ac:	4770      	bx	lr
 80020ae:	e9d1 2300 	ldrd	r2, r3, [r1]
 80020b2:	f004 0503 	and.w	r5, r4, #3
 80020b6:	f1c4 0000 	rsb	r0, r4, #0
 80020ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80020be:	f014 0f04 	tst.w	r4, #4
 80020c2:	f891 f040 	pld	[r1, #64]	; 0x40
 80020c6:	fa0c f505 	lsl.w	r5, ip, r5
 80020ca:	ea62 0205 	orn	r2, r2, r5
 80020ce:	bf1c      	itt	ne
 80020d0:	ea63 0305 	ornne	r3, r3, r5
 80020d4:	4662      	movne	r2, ip
 80020d6:	f04f 0400 	mov.w	r4, #0
 80020da:	e7a9      	b.n	8002030 <strlen+0x30>

080020dc <strtok>:
 80020dc:	4b17      	ldr	r3, [pc, #92]	; (800213c <strtok+0x60>)
 80020de:	b530      	push	{r4, r5, lr}
 80020e0:	681c      	ldr	r4, [r3, #0]
 80020e2:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80020e4:	b083      	sub	sp, #12
 80020e6:	4605      	mov	r5, r0
 80020e8:	b132      	cbz	r2, 80020f8 <strtok+0x1c>
 80020ea:	4628      	mov	r0, r5
 80020ec:	2301      	movs	r3, #1
 80020ee:	b003      	add	sp, #12
 80020f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80020f4:	f000 b828 	b.w	8002148 <__strtok_r>
 80020f8:	2050      	movs	r0, #80	; 0x50
 80020fa:	9101      	str	r1, [sp, #4]
 80020fc:	f7ff faf6 	bl	80016ec <malloc>
 8002100:	9901      	ldr	r1, [sp, #4]
 8002102:	65a0      	str	r0, [r4, #88]	; 0x58
 8002104:	4602      	mov	r2, r0
 8002106:	b1a0      	cbz	r0, 8002132 <strtok+0x56>
 8002108:	2300      	movs	r3, #0
 800210a:	e9c0 3300 	strd	r3, r3, [r0]
 800210e:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8002112:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002116:	6183      	str	r3, [r0, #24]
 8002118:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 800211c:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
 8002120:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
 8002124:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
 8002128:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800212c:	7703      	strb	r3, [r0, #28]
 800212e:	6243      	str	r3, [r0, #36]	; 0x24
 8002130:	e7db      	b.n	80020ea <strtok+0xe>
 8002132:	4b03      	ldr	r3, [pc, #12]	; (8002140 <strtok+0x64>)
 8002134:	4803      	ldr	r0, [pc, #12]	; (8002144 <strtok+0x68>)
 8002136:	2157      	movs	r1, #87	; 0x57
 8002138:	f000 fa1c 	bl	8002574 <__assert_func>
 800213c:	20000004 	.word	0x20000004
 8002140:	080060d0 	.word	0x080060d0
 8002144:	080060e8 	.word	0x080060e8

08002148 <__strtok_r>:
 8002148:	b4f0      	push	{r4, r5, r6, r7}
 800214a:	b318      	cbz	r0, 8002194 <__strtok_r+0x4c>
 800214c:	4607      	mov	r7, r0
 800214e:	460d      	mov	r5, r1
 8002150:	f817 6b01 	ldrb.w	r6, [r7], #1
 8002154:	e001      	b.n	800215a <__strtok_r+0x12>
 8002156:	42a6      	cmp	r6, r4
 8002158:	d017      	beq.n	800218a <__strtok_r+0x42>
 800215a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800215e:	2c00      	cmp	r4, #0
 8002160:	d1f9      	bne.n	8002156 <__strtok_r+0xe>
 8002162:	b1e6      	cbz	r6, 800219e <__strtok_r+0x56>
 8002164:	f817 5b01 	ldrb.w	r5, [r7], #1
 8002168:	460c      	mov	r4, r1
 800216a:	e001      	b.n	8002170 <__strtok_r+0x28>
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0f9      	beq.n	8002164 <__strtok_r+0x1c>
 8002170:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002174:	429d      	cmp	r5, r3
 8002176:	d1f9      	bne.n	800216c <__strtok_r+0x24>
 8002178:	b155      	cbz	r5, 8002190 <__strtok_r+0x48>
 800217a:	2300      	movs	r3, #0
 800217c:	f807 3c01 	strb.w	r3, [r7, #-1]
 8002180:	6017      	str	r7, [r2, #0]
 8002182:	4606      	mov	r6, r0
 8002184:	4630      	mov	r0, r6
 8002186:	bcf0      	pop	{r4, r5, r6, r7}
 8002188:	4770      	bx	lr
 800218a:	b163      	cbz	r3, 80021a6 <__strtok_r+0x5e>
 800218c:	4638      	mov	r0, r7
 800218e:	e7dd      	b.n	800214c <__strtok_r+0x4>
 8002190:	462f      	mov	r7, r5
 8002192:	e7f5      	b.n	8002180 <__strtok_r+0x38>
 8002194:	6810      	ldr	r0, [r2, #0]
 8002196:	2800      	cmp	r0, #0
 8002198:	d1d8      	bne.n	800214c <__strtok_r+0x4>
 800219a:	4606      	mov	r6, r0
 800219c:	e7f2      	b.n	8002184 <__strtok_r+0x3c>
 800219e:	4630      	mov	r0, r6
 80021a0:	6016      	str	r6, [r2, #0]
 80021a2:	bcf0      	pop	{r4, r5, r6, r7}
 80021a4:	4770      	bx	lr
 80021a6:	6017      	str	r7, [r2, #0]
 80021a8:	4606      	mov	r6, r0
 80021aa:	7003      	strb	r3, [r0, #0]
 80021ac:	e7ea      	b.n	8002184 <__strtok_r+0x3c>
 80021ae:	bf00      	nop

080021b0 <strtok_r>:
 80021b0:	2301      	movs	r3, #1
 80021b2:	f7ff bfc9 	b.w	8002148 <__strtok_r>
 80021b6:	bf00      	nop

080021b8 <_strtol_l.isra.0>:
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021be:	d041      	beq.n	8002244 <_strtol_l.isra.0+0x8c>
 80021c0:	2b24      	cmp	r3, #36	; 0x24
 80021c2:	4698      	mov	r8, r3
 80021c4:	d83e      	bhi.n	8002244 <_strtol_l.isra.0+0x8c>
 80021c6:	460f      	mov	r7, r1
 80021c8:	f8df c11c 	ldr.w	ip, [pc, #284]	; 80022e8 <_strtol_l.isra.0+0x130>
 80021cc:	e000      	b.n	80021d0 <_strtol_l.isra.0+0x18>
 80021ce:	462f      	mov	r7, r5
 80021d0:	463d      	mov	r5, r7
 80021d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80021d6:	f81c 6004 	ldrb.w	r6, [ip, r4]
 80021da:	f016 0608 	ands.w	r6, r6, #8
 80021de:	d1f6      	bne.n	80021ce <_strtol_l.isra.0+0x16>
 80021e0:	2c2d      	cmp	r4, #45	; 0x2d
 80021e2:	d06c      	beq.n	80022be <_strtol_l.isra.0+0x106>
 80021e4:	2c2b      	cmp	r4, #43	; 0x2b
 80021e6:	bf0a      	itet	eq
 80021e8:	f895 b000 	ldrbeq.w	fp, [r5]
 80021ec:	46a3      	movne	fp, r4
 80021ee:	1cbd      	addeq	r5, r7, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d046      	beq.n	8002282 <_strtol_l.isra.0+0xca>
 80021f4:	2b10      	cmp	r3, #16
 80021f6:	d057      	beq.n	80022a8 <_strtol_l.isra.0+0xf0>
 80021f8:	2e00      	cmp	r6, #0
 80021fa:	bf14      	ite	ne
 80021fc:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
 8002200:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
 8002204:	2700      	movs	r7, #0
 8002206:	fbb9 fef8 	udiv	lr, r9, r8
 800220a:	46bc      	mov	ip, r7
 800220c:	fb08 9a1e 	mls	sl, r8, lr, r9
 8002210:	e007      	b.n	8002222 <_strtol_l.isra.0+0x6a>
 8002212:	45e6      	cmp	lr, ip
 8002214:	d313      	bcc.n	800223e <_strtol_l.isra.0+0x86>
 8002216:	d02f      	beq.n	8002278 <_strtol_l.isra.0+0xc0>
 8002218:	fb0c 4c08 	mla	ip, ip, r8, r4
 800221c:	2701      	movs	r7, #1
 800221e:	f815 bb01 	ldrb.w	fp, [r5], #1
 8002222:	f1ab 0430 	sub.w	r4, fp, #48	; 0x30
 8002226:	2c09      	cmp	r4, #9
 8002228:	d905      	bls.n	8002236 <_strtol_l.isra.0+0x7e>
 800222a:	f1ab 0441 	sub.w	r4, fp, #65	; 0x41
 800222e:	2c19      	cmp	r4, #25
 8002230:	d80f      	bhi.n	8002252 <_strtol_l.isra.0+0x9a>
 8002232:	f1ab 0437 	sub.w	r4, fp, #55	; 0x37
 8002236:	42a3      	cmp	r3, r4
 8002238:	dd13      	ble.n	8002262 <_strtol_l.isra.0+0xaa>
 800223a:	2f00      	cmp	r7, #0
 800223c:	dae9      	bge.n	8002212 <_strtol_l.isra.0+0x5a>
 800223e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002242:	e7ec      	b.n	800221e <_strtol_l.isra.0+0x66>
 8002244:	f7ff fa14 	bl	8001670 <__errno>
 8002248:	2316      	movs	r3, #22
 800224a:	6003      	str	r3, [r0, #0]
 800224c:	2000      	movs	r0, #0
 800224e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002252:	f1ab 0461 	sub.w	r4, fp, #97	; 0x61
 8002256:	2c19      	cmp	r4, #25
 8002258:	d803      	bhi.n	8002262 <_strtol_l.isra.0+0xaa>
 800225a:	f1ab 0457 	sub.w	r4, fp, #87	; 0x57
 800225e:	42a3      	cmp	r3, r4
 8002260:	dceb      	bgt.n	800223a <_strtol_l.isra.0+0x82>
 8002262:	2f00      	cmp	r7, #0
 8002264:	db25      	blt.n	80022b2 <_strtol_l.isra.0+0xfa>
 8002266:	b10e      	cbz	r6, 800226c <_strtol_l.isra.0+0xb4>
 8002268:	f1cc 0c00 	rsb	ip, ip, #0
 800226c:	b10a      	cbz	r2, 8002272 <_strtol_l.isra.0+0xba>
 800226e:	bb77      	cbnz	r7, 80022ce <_strtol_l.isra.0+0x116>
 8002270:	6011      	str	r1, [r2, #0]
 8002272:	4660      	mov	r0, ip
 8002274:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002278:	45a2      	cmp	sl, r4
 800227a:	dacd      	bge.n	8002218 <_strtol_l.isra.0+0x60>
 800227c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002280:	e7cd      	b.n	800221e <_strtol_l.isra.0+0x66>
 8002282:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 8002286:	d003      	beq.n	8002290 <_strtol_l.isra.0+0xd8>
 8002288:	f04f 080a 	mov.w	r8, #10
 800228c:	4643      	mov	r3, r8
 800228e:	e7b3      	b.n	80021f8 <_strtol_l.isra.0+0x40>
 8002290:	782b      	ldrb	r3, [r5, #0]
 8002292:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8002296:	2b58      	cmp	r3, #88	; 0x58
 8002298:	d11b      	bne.n	80022d2 <_strtol_l.isra.0+0x11a>
 800229a:	f04f 0810 	mov.w	r8, #16
 800229e:	f895 b001 	ldrb.w	fp, [r5, #1]
 80022a2:	4643      	mov	r3, r8
 80022a4:	3502      	adds	r5, #2
 80022a6:	e7a7      	b.n	80021f8 <_strtol_l.isra.0+0x40>
 80022a8:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 80022ac:	d015      	beq.n	80022da <_strtol_l.isra.0+0x122>
 80022ae:	4698      	mov	r8, r3
 80022b0:	e7a2      	b.n	80021f8 <_strtol_l.isra.0+0x40>
 80022b2:	2322      	movs	r3, #34	; 0x22
 80022b4:	6003      	str	r3, [r0, #0]
 80022b6:	b13a      	cbz	r2, 80022c8 <_strtol_l.isra.0+0x110>
 80022b8:	1e69      	subs	r1, r5, #1
 80022ba:	46cc      	mov	ip, r9
 80022bc:	e7d8      	b.n	8002270 <_strtol_l.isra.0+0xb8>
 80022be:	f895 b000 	ldrb.w	fp, [r5]
 80022c2:	2601      	movs	r6, #1
 80022c4:	1cbd      	adds	r5, r7, #2
 80022c6:	e793      	b.n	80021f0 <_strtol_l.isra.0+0x38>
 80022c8:	46cc      	mov	ip, r9
 80022ca:	4660      	mov	r0, ip
 80022cc:	e7d2      	b.n	8002274 <_strtol_l.isra.0+0xbc>
 80022ce:	46e1      	mov	r9, ip
 80022d0:	e7f2      	b.n	80022b8 <_strtol_l.isra.0+0x100>
 80022d2:	f04f 0808 	mov.w	r8, #8
 80022d6:	4643      	mov	r3, r8
 80022d8:	e78e      	b.n	80021f8 <_strtol_l.isra.0+0x40>
 80022da:	782c      	ldrb	r4, [r5, #0]
 80022dc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80022e0:	2c58      	cmp	r4, #88	; 0x58
 80022e2:	d0da      	beq.n	800229a <_strtol_l.isra.0+0xe2>
 80022e4:	4698      	mov	r8, r3
 80022e6:	e787      	b.n	80021f8 <_strtol_l.isra.0+0x40>
 80022e8:	08005c4d 	.word	0x08005c4d

080022ec <_strtol_r>:
 80022ec:	e764      	b.n	80021b8 <_strtol_l.isra.0>
 80022ee:	bf00      	nop

080022f0 <strtol_l>:
 80022f0:	b410      	push	{r4}
 80022f2:	4c03      	ldr	r4, [pc, #12]	; (8002300 <strtol_l+0x10>)
 80022f4:	4613      	mov	r3, r2
 80022f6:	460a      	mov	r2, r1
 80022f8:	4601      	mov	r1, r0
 80022fa:	6820      	ldr	r0, [r4, #0]
 80022fc:	bc10      	pop	{r4}
 80022fe:	e75b      	b.n	80021b8 <_strtol_l.isra.0>
 8002300:	20000004 	.word	0x20000004

08002304 <strtol>:
 8002304:	b410      	push	{r4}
 8002306:	4c03      	ldr	r4, [pc, #12]	; (8002314 <strtol+0x10>)
 8002308:	4613      	mov	r3, r2
 800230a:	460a      	mov	r2, r1
 800230c:	4601      	mov	r1, r0
 800230e:	6820      	ldr	r0, [r4, #0]
 8002310:	bc10      	pop	{r4}
 8002312:	e751      	b.n	80021b8 <_strtol_l.isra.0>
 8002314:	20000004 	.word	0x20000004

08002318 <__swbuf_r>:
 8002318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800231a:	460d      	mov	r5, r1
 800231c:	4614      	mov	r4, r2
 800231e:	4606      	mov	r6, r0
 8002320:	b108      	cbz	r0, 8002326 <__swbuf_r+0xe>
 8002322:	6983      	ldr	r3, [r0, #24]
 8002324:	b343      	cbz	r3, 8002378 <__swbuf_r+0x60>
 8002326:	4b25      	ldr	r3, [pc, #148]	; (80023bc <__swbuf_r+0xa4>)
 8002328:	429c      	cmp	r4, r3
 800232a:	d02a      	beq.n	8002382 <__swbuf_r+0x6a>
 800232c:	4b24      	ldr	r3, [pc, #144]	; (80023c0 <__swbuf_r+0xa8>)
 800232e:	429c      	cmp	r4, r3
 8002330:	d029      	beq.n	8002386 <__swbuf_r+0x6e>
 8002332:	4b24      	ldr	r3, [pc, #144]	; (80023c4 <__swbuf_r+0xac>)
 8002334:	429c      	cmp	r4, r3
 8002336:	bf08      	it	eq
 8002338:	68f4      	ldreq	r4, [r6, #12]
 800233a:	89a3      	ldrh	r3, [r4, #12]
 800233c:	69a2      	ldr	r2, [r4, #24]
 800233e:	60a2      	str	r2, [r4, #8]
 8002340:	071a      	lsls	r2, r3, #28
 8002342:	d522      	bpl.n	800238a <__swbuf_r+0x72>
 8002344:	6923      	ldr	r3, [r4, #16]
 8002346:	b303      	cbz	r3, 800238a <__swbuf_r+0x72>
 8002348:	6822      	ldr	r2, [r4, #0]
 800234a:	6961      	ldr	r1, [r4, #20]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	b2ed      	uxtb	r5, r5
 8002350:	4299      	cmp	r1, r3
 8002352:	462f      	mov	r7, r5
 8002354:	dd29      	ble.n	80023aa <__swbuf_r+0x92>
 8002356:	3301      	adds	r3, #1
 8002358:	68a1      	ldr	r1, [r4, #8]
 800235a:	1c50      	adds	r0, r2, #1
 800235c:	3901      	subs	r1, #1
 800235e:	60a1      	str	r1, [r4, #8]
 8002360:	6020      	str	r0, [r4, #0]
 8002362:	7015      	strb	r5, [r2, #0]
 8002364:	6962      	ldr	r2, [r4, #20]
 8002366:	429a      	cmp	r2, r3
 8002368:	d016      	beq.n	8002398 <__swbuf_r+0x80>
 800236a:	89a3      	ldrh	r3, [r4, #12]
 800236c:	07db      	lsls	r3, r3, #31
 800236e:	d501      	bpl.n	8002374 <__swbuf_r+0x5c>
 8002370:	2d0a      	cmp	r5, #10
 8002372:	d011      	beq.n	8002398 <__swbuf_r+0x80>
 8002374:	4638      	mov	r0, r7
 8002376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002378:	f000 fae0 	bl	800293c <__sinit>
 800237c:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <__swbuf_r+0xa4>)
 800237e:	429c      	cmp	r4, r3
 8002380:	d1d4      	bne.n	800232c <__swbuf_r+0x14>
 8002382:	6874      	ldr	r4, [r6, #4]
 8002384:	e7d9      	b.n	800233a <__swbuf_r+0x22>
 8002386:	68b4      	ldr	r4, [r6, #8]
 8002388:	e7d7      	b.n	800233a <__swbuf_r+0x22>
 800238a:	4621      	mov	r1, r4
 800238c:	4630      	mov	r0, r6
 800238e:	f000 f823 	bl	80023d8 <__swsetup_r>
 8002392:	b938      	cbnz	r0, 80023a4 <__swbuf_r+0x8c>
 8002394:	6923      	ldr	r3, [r4, #16]
 8002396:	e7d7      	b.n	8002348 <__swbuf_r+0x30>
 8002398:	4621      	mov	r1, r4
 800239a:	4630      	mov	r0, r6
 800239c:	f000 f9a4 	bl	80026e8 <_fflush_r>
 80023a0:	2800      	cmp	r0, #0
 80023a2:	d0e7      	beq.n	8002374 <__swbuf_r+0x5c>
 80023a4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80023a8:	e7e4      	b.n	8002374 <__swbuf_r+0x5c>
 80023aa:	4621      	mov	r1, r4
 80023ac:	4630      	mov	r0, r6
 80023ae:	f000 f99b 	bl	80026e8 <_fflush_r>
 80023b2:	2800      	cmp	r0, #0
 80023b4:	d1f6      	bne.n	80023a4 <__swbuf_r+0x8c>
 80023b6:	6822      	ldr	r2, [r4, #0]
 80023b8:	2301      	movs	r3, #1
 80023ba:	e7cd      	b.n	8002358 <__swbuf_r+0x40>
 80023bc:	08005d90 	.word	0x08005d90
 80023c0:	08005d70 	.word	0x08005d70
 80023c4:	08005d50 	.word	0x08005d50

080023c8 <__swbuf>:
 80023c8:	4b02      	ldr	r3, [pc, #8]	; (80023d4 <__swbuf+0xc>)
 80023ca:	460a      	mov	r2, r1
 80023cc:	4601      	mov	r1, r0
 80023ce:	6818      	ldr	r0, [r3, #0]
 80023d0:	f7ff bfa2 	b.w	8002318 <__swbuf_r>
 80023d4:	20000004 	.word	0x20000004

080023d8 <__swsetup_r>:
 80023d8:	4b3b      	ldr	r3, [pc, #236]	; (80024c8 <__swsetup_r+0xf0>)
 80023da:	b570      	push	{r4, r5, r6, lr}
 80023dc:	681d      	ldr	r5, [r3, #0]
 80023de:	4606      	mov	r6, r0
 80023e0:	460c      	mov	r4, r1
 80023e2:	b10d      	cbz	r5, 80023e8 <__swsetup_r+0x10>
 80023e4:	69ab      	ldr	r3, [r5, #24]
 80023e6:	b1db      	cbz	r3, 8002420 <__swsetup_r+0x48>
 80023e8:	4b38      	ldr	r3, [pc, #224]	; (80024cc <__swsetup_r+0xf4>)
 80023ea:	429c      	cmp	r4, r3
 80023ec:	d01e      	beq.n	800242c <__swsetup_r+0x54>
 80023ee:	4b38      	ldr	r3, [pc, #224]	; (80024d0 <__swsetup_r+0xf8>)
 80023f0:	429c      	cmp	r4, r3
 80023f2:	d04a      	beq.n	800248a <__swsetup_r+0xb2>
 80023f4:	4b37      	ldr	r3, [pc, #220]	; (80024d4 <__swsetup_r+0xfc>)
 80023f6:	429c      	cmp	r4, r3
 80023f8:	bf08      	it	eq
 80023fa:	68ec      	ldreq	r4, [r5, #12]
 80023fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002400:	b293      	uxth	r3, r2
 8002402:	0719      	lsls	r1, r3, #28
 8002404:	d518      	bpl.n	8002438 <__swsetup_r+0x60>
 8002406:	6920      	ldr	r0, [r4, #16]
 8002408:	b308      	cbz	r0, 800244e <__swsetup_r+0x76>
 800240a:	f013 0201 	ands.w	r2, r3, #1
 800240e:	d02c      	beq.n	800246a <__swsetup_r+0x92>
 8002410:	6963      	ldr	r3, [r4, #20]
 8002412:	2200      	movs	r2, #0
 8002414:	425b      	negs	r3, r3
 8002416:	61a3      	str	r3, [r4, #24]
 8002418:	60a2      	str	r2, [r4, #8]
 800241a:	b360      	cbz	r0, 8002476 <__swsetup_r+0x9e>
 800241c:	2000      	movs	r0, #0
 800241e:	bd70      	pop	{r4, r5, r6, pc}
 8002420:	4628      	mov	r0, r5
 8002422:	f000 fa8b 	bl	800293c <__sinit>
 8002426:	4b29      	ldr	r3, [pc, #164]	; (80024cc <__swsetup_r+0xf4>)
 8002428:	429c      	cmp	r4, r3
 800242a:	d1e0      	bne.n	80023ee <__swsetup_r+0x16>
 800242c:	686c      	ldr	r4, [r5, #4]
 800242e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002432:	b293      	uxth	r3, r2
 8002434:	0719      	lsls	r1, r3, #28
 8002436:	d4e6      	bmi.n	8002406 <__swsetup_r+0x2e>
 8002438:	06dd      	lsls	r5, r3, #27
 800243a:	d53c      	bpl.n	80024b6 <__swsetup_r+0xde>
 800243c:	0758      	lsls	r0, r3, #29
 800243e:	d426      	bmi.n	800248e <__swsetup_r+0xb6>
 8002440:	6920      	ldr	r0, [r4, #16]
 8002442:	f042 0308 	orr.w	r3, r2, #8
 8002446:	81a3      	strh	r3, [r4, #12]
 8002448:	b29b      	uxth	r3, r3
 800244a:	2800      	cmp	r0, #0
 800244c:	d1dd      	bne.n	800240a <__swsetup_r+0x32>
 800244e:	f403 7220 	and.w	r2, r3, #640	; 0x280
 8002452:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002456:	d0d8      	beq.n	800240a <__swsetup_r+0x32>
 8002458:	4630      	mov	r0, r6
 800245a:	4621      	mov	r1, r4
 800245c:	f000 fb2e 	bl	8002abc <__smakebuf_r>
 8002460:	89a3      	ldrh	r3, [r4, #12]
 8002462:	6920      	ldr	r0, [r4, #16]
 8002464:	f013 0201 	ands.w	r2, r3, #1
 8002468:	d1d2      	bne.n	8002410 <__swsetup_r+0x38>
 800246a:	0799      	lsls	r1, r3, #30
 800246c:	bf58      	it	pl
 800246e:	6962      	ldrpl	r2, [r4, #20]
 8002470:	60a2      	str	r2, [r4, #8]
 8002472:	2800      	cmp	r0, #0
 8002474:	d1d2      	bne.n	800241c <__swsetup_r+0x44>
 8002476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800247a:	061a      	lsls	r2, r3, #24
 800247c:	d5cf      	bpl.n	800241e <__swsetup_r+0x46>
 800247e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002482:	81a3      	strh	r3, [r4, #12]
 8002484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002488:	bd70      	pop	{r4, r5, r6, pc}
 800248a:	68ac      	ldr	r4, [r5, #8]
 800248c:	e7b6      	b.n	80023fc <__swsetup_r+0x24>
 800248e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002490:	b151      	cbz	r1, 80024a8 <__swsetup_r+0xd0>
 8002492:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002496:	4299      	cmp	r1, r3
 8002498:	d004      	beq.n	80024a4 <__swsetup_r+0xcc>
 800249a:	4630      	mov	r0, r6
 800249c:	f7ff fa2e 	bl	80018fc <_free_r>
 80024a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80024a4:	2300      	movs	r3, #0
 80024a6:	6363      	str	r3, [r4, #52]	; 0x34
 80024a8:	2300      	movs	r3, #0
 80024aa:	6920      	ldr	r0, [r4, #16]
 80024ac:	6063      	str	r3, [r4, #4]
 80024ae:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 80024b2:	6020      	str	r0, [r4, #0]
 80024b4:	e7c5      	b.n	8002442 <__swsetup_r+0x6a>
 80024b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024ba:	2309      	movs	r3, #9
 80024bc:	6033      	str	r3, [r6, #0]
 80024be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024c2:	81a2      	strh	r2, [r4, #12]
 80024c4:	bd70      	pop	{r4, r5, r6, pc}
 80024c6:	bf00      	nop
 80024c8:	20000004 	.word	0x20000004
 80024cc:	08005d90 	.word	0x08005d90
 80024d0:	08005d70 	.word	0x08005d70
 80024d4:	08005d50 	.word	0x08005d50

080024d8 <__call_exitprocs>:
 80024d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024dc:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8002570 <__call_exitprocs+0x98>
 80024e0:	b083      	sub	sp, #12
 80024e2:	f8d8 5000 	ldr.w	r5, [r8]
 80024e6:	9001      	str	r0, [sp, #4]
 80024e8:	460f      	mov	r7, r1
 80024ea:	f04f 0a01 	mov.w	sl, #1
 80024ee:	b18d      	cbz	r5, 8002514 <__call_exitprocs+0x3c>
 80024f0:	686c      	ldr	r4, [r5, #4]
 80024f2:	f8d5 6088 	ldr.w	r6, [r5, #136]	; 0x88
 80024f6:	3c01      	subs	r4, #1
 80024f8:	d40c      	bmi.n	8002514 <__call_exitprocs+0x3c>
 80024fa:	f105 0b08 	add.w	fp, r5, #8
 80024fe:	b167      	cbz	r7, 800251a <__call_exitprocs+0x42>
 8002500:	b12e      	cbz	r6, 800250e <__call_exitprocs+0x36>
 8002502:	f106 0380 	add.w	r3, r6, #128	; 0x80
 8002506:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800250a:	42bb      	cmp	r3, r7
 800250c:	d005      	beq.n	800251a <__call_exitprocs+0x42>
 800250e:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 8002512:	d2f4      	bcs.n	80024fe <__call_exitprocs+0x26>
 8002514:	b003      	add	sp, #12
 8002516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800251a:	686b      	ldr	r3, [r5, #4]
 800251c:	f85b 2024 	ldr.w	r2, [fp, r4, lsl #2]
 8002520:	3b01      	subs	r3, #1
 8002522:	42a3      	cmp	r3, r4
 8002524:	bf16      	itet	ne
 8002526:	2300      	movne	r3, #0
 8002528:	606c      	streq	r4, [r5, #4]
 800252a:	f84b 3024 	strne.w	r3, [fp, r4, lsl #2]
 800252e:	2a00      	cmp	r2, #0
 8002530:	d0ed      	beq.n	800250e <__call_exitprocs+0x36>
 8002532:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8002536:	b1b6      	cbz	r6, 8002566 <__call_exitprocs+0x8e>
 8002538:	f8d6 1100 	ldr.w	r1, [r6, #256]	; 0x100
 800253c:	fa0a f304 	lsl.w	r3, sl, r4
 8002540:	420b      	tst	r3, r1
 8002542:	d010      	beq.n	8002566 <__call_exitprocs+0x8e>
 8002544:	f8d6 0104 	ldr.w	r0, [r6, #260]	; 0x104
 8002548:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 800254c:	4203      	tst	r3, r0
 800254e:	d10c      	bne.n	800256a <__call_exitprocs+0x92>
 8002550:	9801      	ldr	r0, [sp, #4]
 8002552:	4790      	blx	r2
 8002554:	686b      	ldr	r3, [r5, #4]
 8002556:	f8d8 2000 	ldr.w	r2, [r8]
 800255a:	454b      	cmp	r3, r9
 800255c:	d101      	bne.n	8002562 <__call_exitprocs+0x8a>
 800255e:	42aa      	cmp	r2, r5
 8002560:	d0d5      	beq.n	800250e <__call_exitprocs+0x36>
 8002562:	4615      	mov	r5, r2
 8002564:	e7c3      	b.n	80024ee <__call_exitprocs+0x16>
 8002566:	4790      	blx	r2
 8002568:	e7f4      	b.n	8002554 <__call_exitprocs+0x7c>
 800256a:	4608      	mov	r0, r1
 800256c:	4790      	blx	r2
 800256e:	e7f1      	b.n	8002554 <__call_exitprocs+0x7c>
 8002570:	2000015c 	.word	0x2000015c

08002574 <__assert_func>:
 8002574:	b500      	push	{lr}
 8002576:	4c0a      	ldr	r4, [pc, #40]	; (80025a0 <__assert_func+0x2c>)
 8002578:	6826      	ldr	r6, [r4, #0]
 800257a:	4605      	mov	r5, r0
 800257c:	b085      	sub	sp, #20
 800257e:	461c      	mov	r4, r3
 8002580:	68f0      	ldr	r0, [r6, #12]
 8002582:	b152      	cbz	r2, 800259a <__assert_func+0x26>
 8002584:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <__assert_func+0x30>)
 8002586:	9100      	str	r1, [sp, #0]
 8002588:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800258c:	4906      	ldr	r1, [pc, #24]	; (80025a8 <__assert_func+0x34>)
 800258e:	462b      	mov	r3, r5
 8002590:	4622      	mov	r2, r4
 8002592:	f000 fa01 	bl	8002998 <fiprintf>
 8002596:	f000 ff55 	bl	8003444 <abort>
 800259a:	4b04      	ldr	r3, [pc, #16]	; (80025ac <__assert_func+0x38>)
 800259c:	461a      	mov	r2, r3
 800259e:	e7f2      	b.n	8002586 <__assert_func+0x12>
 80025a0:	20000004 	.word	0x20000004
 80025a4:	0800611c 	.word	0x0800611c
 80025a8:	0800612c 	.word	0x0800612c
 80025ac:	08006128 	.word	0x08006128

080025b0 <__assert>:
 80025b0:	b508      	push	{r3, lr}
 80025b2:	4613      	mov	r3, r2
 80025b4:	2200      	movs	r2, #0
 80025b6:	f7ff ffdd 	bl	8002574 <__assert_func>
 80025ba:	bf00      	nop

080025bc <__sflush_r>:
 80025bc:	898b      	ldrh	r3, [r1, #12]
 80025be:	071a      	lsls	r2, r3, #28
 80025c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025c4:	460c      	mov	r4, r1
 80025c6:	4680      	mov	r8, r0
 80025c8:	d441      	bmi.n	800264e <__sflush_r+0x92>
 80025ca:	684a      	ldr	r2, [r1, #4]
 80025cc:	2a00      	cmp	r2, #0
 80025ce:	dd59      	ble.n	8002684 <__sflush_r+0xc8>
 80025d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80025d2:	2e00      	cmp	r6, #0
 80025d4:	d053      	beq.n	800267e <__sflush_r+0xc2>
 80025d6:	2200      	movs	r2, #0
 80025d8:	f8d8 5000 	ldr.w	r5, [r8]
 80025dc:	6a21      	ldr	r1, [r4, #32]
 80025de:	f8c8 2000 	str.w	r2, [r8]
 80025e2:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
 80025e6:	d151      	bne.n	800268c <__sflush_r+0xd0>
 80025e8:	2301      	movs	r3, #1
 80025ea:	4640      	mov	r0, r8
 80025ec:	47b0      	blx	r6
 80025ee:	1c43      	adds	r3, r0, #1
 80025f0:	d05f      	beq.n	80026b2 <__sflush_r+0xf6>
 80025f2:	89a3      	ldrh	r3, [r4, #12]
 80025f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80025f6:	6a21      	ldr	r1, [r4, #32]
 80025f8:	075f      	lsls	r7, r3, #29
 80025fa:	d505      	bpl.n	8002608 <__sflush_r+0x4c>
 80025fc:	6862      	ldr	r2, [r4, #4]
 80025fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002600:	1a80      	subs	r0, r0, r2
 8002602:	b10b      	cbz	r3, 8002608 <__sflush_r+0x4c>
 8002604:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002606:	1ac0      	subs	r0, r0, r3
 8002608:	4602      	mov	r2, r0
 800260a:	2300      	movs	r3, #0
 800260c:	4640      	mov	r0, r8
 800260e:	47b0      	blx	r6
 8002610:	1c46      	adds	r6, r0, #1
 8002612:	d145      	bne.n	80026a0 <__sflush_r+0xe4>
 8002614:	f8d8 3000 	ldr.w	r3, [r8]
 8002618:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d055      	beq.n	80026cc <__sflush_r+0x110>
 8002620:	2b1d      	cmp	r3, #29
 8002622:	d001      	beq.n	8002628 <__sflush_r+0x6c>
 8002624:	2b16      	cmp	r3, #22
 8002626:	d15a      	bne.n	80026de <__sflush_r+0x122>
 8002628:	6923      	ldr	r3, [r4, #16]
 800262a:	2200      	movs	r2, #0
 800262c:	e9c4 3200 	strd	r3, r2, [r4]
 8002630:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002632:	f8c8 5000 	str.w	r5, [r8]
 8002636:	b311      	cbz	r1, 800267e <__sflush_r+0xc2>
 8002638:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800263c:	4299      	cmp	r1, r3
 800263e:	d002      	beq.n	8002646 <__sflush_r+0x8a>
 8002640:	4640      	mov	r0, r8
 8002642:	f7ff f95b 	bl	80018fc <_free_r>
 8002646:	2000      	movs	r0, #0
 8002648:	6360      	str	r0, [r4, #52]	; 0x34
 800264a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800264e:	690e      	ldr	r6, [r1, #16]
 8002650:	b1ae      	cbz	r6, 800267e <__sflush_r+0xc2>
 8002652:	680d      	ldr	r5, [r1, #0]
 8002654:	600e      	str	r6, [r1, #0]
 8002656:	0799      	lsls	r1, r3, #30
 8002658:	bf0c      	ite	eq
 800265a:	6963      	ldreq	r3, [r4, #20]
 800265c:	2300      	movne	r3, #0
 800265e:	1bad      	subs	r5, r5, r6
 8002660:	60a3      	str	r3, [r4, #8]
 8002662:	e00a      	b.n	800267a <__sflush_r+0xbe>
 8002664:	462b      	mov	r3, r5
 8002666:	4632      	mov	r2, r6
 8002668:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800266a:	6a21      	ldr	r1, [r4, #32]
 800266c:	4640      	mov	r0, r8
 800266e:	47b8      	blx	r7
 8002670:	2800      	cmp	r0, #0
 8002672:	eba5 0500 	sub.w	r5, r5, r0
 8002676:	4406      	add	r6, r0
 8002678:	dd0a      	ble.n	8002690 <__sflush_r+0xd4>
 800267a:	2d00      	cmp	r5, #0
 800267c:	dcf2      	bgt.n	8002664 <__sflush_r+0xa8>
 800267e:	2000      	movs	r0, #0
 8002680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002684:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8002686:	2a00      	cmp	r2, #0
 8002688:	dca2      	bgt.n	80025d0 <__sflush_r+0x14>
 800268a:	e7f8      	b.n	800267e <__sflush_r+0xc2>
 800268c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800268e:	e7b3      	b.n	80025f8 <__sflush_r+0x3c>
 8002690:	89a3      	ldrh	r3, [r4, #12]
 8002692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002696:	81a3      	strh	r3, [r4, #12]
 8002698:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800269c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026a0:	6922      	ldr	r2, [r4, #16]
 80026a2:	89a3      	ldrh	r3, [r4, #12]
 80026a4:	6022      	str	r2, [r4, #0]
 80026a6:	2200      	movs	r2, #0
 80026a8:	6062      	str	r2, [r4, #4]
 80026aa:	04da      	lsls	r2, r3, #19
 80026ac:	d5c0      	bpl.n	8002630 <__sflush_r+0x74>
 80026ae:	6560      	str	r0, [r4, #84]	; 0x54
 80026b0:	e7be      	b.n	8002630 <__sflush_r+0x74>
 80026b2:	f8d8 3000 	ldr.w	r3, [r8]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d09b      	beq.n	80025f2 <__sflush_r+0x36>
 80026ba:	2b1d      	cmp	r3, #29
 80026bc:	d00c      	beq.n	80026d8 <__sflush_r+0x11c>
 80026be:	2b16      	cmp	r3, #22
 80026c0:	d00a      	beq.n	80026d8 <__sflush_r+0x11c>
 80026c2:	89a3      	ldrh	r3, [r4, #12]
 80026c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026c8:	81a3      	strh	r3, [r4, #12]
 80026ca:	e7d9      	b.n	8002680 <__sflush_r+0xc4>
 80026cc:	6921      	ldr	r1, [r4, #16]
 80026ce:	e9c4 1300 	strd	r1, r3, [r4]
 80026d2:	04d3      	lsls	r3, r2, #19
 80026d4:	d5ac      	bpl.n	8002630 <__sflush_r+0x74>
 80026d6:	e7ea      	b.n	80026ae <__sflush_r+0xf2>
 80026d8:	f8c8 5000 	str.w	r5, [r8]
 80026dc:	e7cf      	b.n	800267e <__sflush_r+0xc2>
 80026de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026e2:	81a2      	strh	r2, [r4, #12]
 80026e4:	e7cc      	b.n	8002680 <__sflush_r+0xc4>
 80026e6:	bf00      	nop

080026e8 <_fflush_r>:
 80026e8:	690b      	ldr	r3, [r1, #16]
 80026ea:	b323      	cbz	r3, 8002736 <_fflush_r+0x4e>
 80026ec:	b510      	push	{r4, lr}
 80026ee:	4604      	mov	r4, r0
 80026f0:	b082      	sub	sp, #8
 80026f2:	b108      	cbz	r0, 80026f8 <_fflush_r+0x10>
 80026f4:	6983      	ldr	r3, [r0, #24]
 80026f6:	b1bb      	cbz	r3, 8002728 <_fflush_r+0x40>
 80026f8:	4b10      	ldr	r3, [pc, #64]	; (800273c <_fflush_r+0x54>)
 80026fa:	4299      	cmp	r1, r3
 80026fc:	d012      	beq.n	8002724 <_fflush_r+0x3c>
 80026fe:	4b10      	ldr	r3, [pc, #64]	; (8002740 <_fflush_r+0x58>)
 8002700:	4299      	cmp	r1, r3
 8002702:	d016      	beq.n	8002732 <_fflush_r+0x4a>
 8002704:	4b0f      	ldr	r3, [pc, #60]	; (8002744 <_fflush_r+0x5c>)
 8002706:	4299      	cmp	r1, r3
 8002708:	bf08      	it	eq
 800270a:	68e1      	ldreq	r1, [r4, #12]
 800270c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8002710:	b12b      	cbz	r3, 800271e <_fflush_r+0x36>
 8002712:	4620      	mov	r0, r4
 8002714:	b002      	add	sp, #8
 8002716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800271a:	f7ff bf4f 	b.w	80025bc <__sflush_r>
 800271e:	2000      	movs	r0, #0
 8002720:	b002      	add	sp, #8
 8002722:	bd10      	pop	{r4, pc}
 8002724:	6861      	ldr	r1, [r4, #4]
 8002726:	e7f1      	b.n	800270c <_fflush_r+0x24>
 8002728:	9101      	str	r1, [sp, #4]
 800272a:	f000 f907 	bl	800293c <__sinit>
 800272e:	9901      	ldr	r1, [sp, #4]
 8002730:	e7e2      	b.n	80026f8 <_fflush_r+0x10>
 8002732:	68a1      	ldr	r1, [r4, #8]
 8002734:	e7ea      	b.n	800270c <_fflush_r+0x24>
 8002736:	2000      	movs	r0, #0
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	08005d90 	.word	0x08005d90
 8002740:	08005d70 	.word	0x08005d70
 8002744:	08005d50 	.word	0x08005d50

08002748 <fflush>:
 8002748:	b120      	cbz	r0, 8002754 <fflush+0xc>
 800274a:	4b05      	ldr	r3, [pc, #20]	; (8002760 <fflush+0x18>)
 800274c:	4601      	mov	r1, r0
 800274e:	6818      	ldr	r0, [r3, #0]
 8002750:	f7ff bfca 	b.w	80026e8 <_fflush_r>
 8002754:	4b03      	ldr	r3, [pc, #12]	; (8002764 <fflush+0x1c>)
 8002756:	4904      	ldr	r1, [pc, #16]	; (8002768 <fflush+0x20>)
 8002758:	6818      	ldr	r0, [r3, #0]
 800275a:	f000 b957 	b.w	8002a0c <_fwalk_reent>
 800275e:	bf00      	nop
 8002760:	20000004 	.word	0x20000004
 8002764:	08005c48 	.word	0x08005c48
 8002768:	080026e9 	.word	0x080026e9

0800276c <__fp_lock>:
 800276c:	2000      	movs	r0, #0
 800276e:	4770      	bx	lr

08002770 <_cleanup_r>:
 8002770:	4901      	ldr	r1, [pc, #4]	; (8002778 <_cleanup_r+0x8>)
 8002772:	f000 b94b 	b.w	8002a0c <_fwalk_reent>
 8002776:	bf00      	nop
 8002778:	080026e9 	.word	0x080026e9

0800277c <__fp_unlock>:
 800277c:	2000      	movs	r0, #0
 800277e:	4770      	bx	lr

08002780 <__sfmoreglue>:
 8002780:	b570      	push	{r4, r5, r6, lr}
 8002782:	1e4a      	subs	r2, r1, #1
 8002784:	2568      	movs	r5, #104	; 0x68
 8002786:	fb05 f502 	mul.w	r5, r5, r2
 800278a:	460e      	mov	r6, r1
 800278c:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002790:	f7ff f90a 	bl	80019a8 <_malloc_r>
 8002794:	4604      	mov	r4, r0
 8002796:	b140      	cbz	r0, 80027aa <__sfmoreglue+0x2a>
 8002798:	2100      	movs	r1, #0
 800279a:	300c      	adds	r0, #12
 800279c:	6066      	str	r6, [r4, #4]
 800279e:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80027a2:	6021      	str	r1, [r4, #0]
 80027a4:	60a0      	str	r0, [r4, #8]
 80027a6:	f7ff f84b 	bl	8001840 <memset>
 80027aa:	4620      	mov	r0, r4
 80027ac:	bd70      	pop	{r4, r5, r6, pc}
 80027ae:	bf00      	nop

080027b0 <__sfp>:
 80027b0:	4b1e      	ldr	r3, [pc, #120]	; (800282c <__sfp+0x7c>)
 80027b2:	b570      	push	{r4, r5, r6, lr}
 80027b4:	681d      	ldr	r5, [r3, #0]
 80027b6:	69ab      	ldr	r3, [r5, #24]
 80027b8:	4606      	mov	r6, r0
 80027ba:	b343      	cbz	r3, 800280e <__sfp+0x5e>
 80027bc:	3548      	adds	r5, #72	; 0x48
 80027be:	e9d5 3401 	ldrd	r3, r4, [r5, #4]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	d505      	bpl.n	80027d2 <__sfp+0x22>
 80027c6:	e01e      	b.n	8002806 <__sfp+0x56>
 80027c8:	3b01      	subs	r3, #1
 80027ca:	1c5a      	adds	r2, r3, #1
 80027cc:	f104 0468 	add.w	r4, r4, #104	; 0x68
 80027d0:	d019      	beq.n	8002806 <__sfp+0x56>
 80027d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80027d6:	2a00      	cmp	r2, #0
 80027d8:	d1f6      	bne.n	80027c8 <__sfp+0x18>
 80027da:	2500      	movs	r5, #0
 80027dc:	4b14      	ldr	r3, [pc, #80]	; (8002830 <__sfp+0x80>)
 80027de:	6665      	str	r5, [r4, #100]	; 0x64
 80027e0:	e9c4 5500 	strd	r5, r5, [r4]
 80027e4:	60a5      	str	r5, [r4, #8]
 80027e6:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80027ea:	61a5      	str	r5, [r4, #24]
 80027ec:	4629      	mov	r1, r5
 80027ee:	60e3      	str	r3, [r4, #12]
 80027f0:	2208      	movs	r2, #8
 80027f2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80027f6:	f7ff f823 	bl	8001840 <memset>
 80027fa:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80027fe:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002802:	4620      	mov	r0, r4
 8002804:	bd70      	pop	{r4, r5, r6, pc}
 8002806:	682c      	ldr	r4, [r5, #0]
 8002808:	b12c      	cbz	r4, 8002816 <__sfp+0x66>
 800280a:	4625      	mov	r5, r4
 800280c:	e7d7      	b.n	80027be <__sfp+0xe>
 800280e:	4628      	mov	r0, r5
 8002810:	f000 f810 	bl	8002834 <__sinit.part.0>
 8002814:	e7d2      	b.n	80027bc <__sfp+0xc>
 8002816:	2104      	movs	r1, #4
 8002818:	4630      	mov	r0, r6
 800281a:	f7ff ffb1 	bl	8002780 <__sfmoreglue>
 800281e:	4604      	mov	r4, r0
 8002820:	6028      	str	r0, [r5, #0]
 8002822:	2800      	cmp	r0, #0
 8002824:	d1f1      	bne.n	800280a <__sfp+0x5a>
 8002826:	230c      	movs	r3, #12
 8002828:	6033      	str	r3, [r6, #0]
 800282a:	e7ea      	b.n	8002802 <__sfp+0x52>
 800282c:	08005c48 	.word	0x08005c48
 8002830:	ffff0001 	.word	0xffff0001

08002834 <__sinit.part.0>:
 8002834:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002838:	4b33      	ldr	r3, [pc, #204]	; (8002908 <__sinit.part.0+0xd4>)
 800283a:	4934      	ldr	r1, [pc, #208]	; (800290c <__sinit.part.0+0xd8>)
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	6281      	str	r1, [r0, #40]	; 0x28
 8002840:	4290      	cmp	r0, r2
 8002842:	f04f 0300 	mov.w	r3, #0
 8002846:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800284a:	6503      	str	r3, [r0, #80]	; 0x50
 800284c:	bf04      	itt	eq
 800284e:	2301      	moveq	r3, #1
 8002850:	6183      	streq	r3, [r0, #24]
 8002852:	4605      	mov	r5, r0
 8002854:	f7ff ffac 	bl	80027b0 <__sfp>
 8002858:	6068      	str	r0, [r5, #4]
 800285a:	4628      	mov	r0, r5
 800285c:	f7ff ffa8 	bl	80027b0 <__sfp>
 8002860:	60a8      	str	r0, [r5, #8]
 8002862:	4628      	mov	r0, r5
 8002864:	f7ff ffa4 	bl	80027b0 <__sfp>
 8002868:	686e      	ldr	r6, [r5, #4]
 800286a:	60e8      	str	r0, [r5, #12]
 800286c:	2400      	movs	r4, #0
 800286e:	2304      	movs	r3, #4
 8002870:	60f3      	str	r3, [r6, #12]
 8002872:	6674      	str	r4, [r6, #100]	; 0x64
 8002874:	e9c6 4400 	strd	r4, r4, [r6]
 8002878:	60b4      	str	r4, [r6, #8]
 800287a:	e9c6 4404 	strd	r4, r4, [r6, #16]
 800287e:	61b4      	str	r4, [r6, #24]
 8002880:	4621      	mov	r1, r4
 8002882:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8002886:	2208      	movs	r2, #8
 8002888:	f7fe ffda 	bl	8001840 <memset>
 800288c:	f8df b088 	ldr.w	fp, [pc, #136]	; 8002918 <__sinit.part.0+0xe4>
 8002890:	68af      	ldr	r7, [r5, #8]
 8002892:	f8df a088 	ldr.w	sl, [pc, #136]	; 800291c <__sinit.part.0+0xe8>
 8002896:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8002920 <__sinit.part.0+0xec>
 800289a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8002924 <__sinit.part.0+0xf0>
 800289e:	4b1c      	ldr	r3, [pc, #112]	; (8002910 <__sinit.part.0+0xdc>)
 80028a0:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
 80028a4:	e9c6 6b08 	strd	r6, fp, [r6, #32]
 80028a8:	e9c6 a90a 	strd	sl, r9, [r6, #40]	; 0x28
 80028ac:	4621      	mov	r1, r4
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	2208      	movs	r2, #8
 80028b2:	667c      	str	r4, [r7, #100]	; 0x64
 80028b4:	e9c7 4400 	strd	r4, r4, [r7]
 80028b8:	60bc      	str	r4, [r7, #8]
 80028ba:	e9c7 4404 	strd	r4, r4, [r7, #16]
 80028be:	61bc      	str	r4, [r7, #24]
 80028c0:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80028c4:	f7fe ffbc 	bl	8001840 <memset>
 80028c8:	68ee      	ldr	r6, [r5, #12]
 80028ca:	4b12      	ldr	r3, [pc, #72]	; (8002914 <__sinit.part.0+0xe0>)
 80028cc:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
 80028d0:	e9c7 7b08 	strd	r7, fp, [r7, #32]
 80028d4:	e9c7 a90a 	strd	sl, r9, [r7, #40]	; 0x28
 80028d8:	4621      	mov	r1, r4
 80028da:	60f3      	str	r3, [r6, #12]
 80028dc:	6674      	str	r4, [r6, #100]	; 0x64
 80028de:	e9c6 4400 	strd	r4, r4, [r6]
 80028e2:	60b4      	str	r4, [r6, #8]
 80028e4:	e9c6 4404 	strd	r4, r4, [r6, #16]
 80028e8:	61b4      	str	r4, [r6, #24]
 80028ea:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 80028ee:	2208      	movs	r2, #8
 80028f0:	f7fe ffa6 	bl	8001840 <memset>
 80028f4:	2301      	movs	r3, #1
 80028f6:	e9c6 6b08 	strd	r6, fp, [r6, #32]
 80028fa:	e9c6 a90a 	strd	sl, r9, [r6, #40]	; 0x28
 80028fe:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
 8002902:	61ab      	str	r3, [r5, #24]
 8002904:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002908:	08005c48 	.word	0x08005c48
 800290c:	08002771 	.word	0x08002771
 8002910:	00010009 	.word	0x00010009
 8002914:	00020012 	.word	0x00020012
 8002918:	08003389 	.word	0x08003389
 800291c:	080033b1 	.word	0x080033b1
 8002920:	080033f1 	.word	0x080033f1
 8002924:	08003411 	.word	0x08003411

08002928 <_cleanup>:
 8002928:	4b02      	ldr	r3, [pc, #8]	; (8002934 <_cleanup+0xc>)
 800292a:	4903      	ldr	r1, [pc, #12]	; (8002938 <_cleanup+0x10>)
 800292c:	6818      	ldr	r0, [r3, #0]
 800292e:	f000 b86d 	b.w	8002a0c <_fwalk_reent>
 8002932:	bf00      	nop
 8002934:	08005c48 	.word	0x08005c48
 8002938:	080026e9 	.word	0x080026e9

0800293c <__sinit>:
 800293c:	6983      	ldr	r3, [r0, #24]
 800293e:	b903      	cbnz	r3, 8002942 <__sinit+0x6>
 8002940:	e778      	b.n	8002834 <__sinit.part.0>
 8002942:	4770      	bx	lr

08002944 <__sfp_lock_acquire>:
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop

08002948 <__sfp_lock_release>:
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop

0800294c <__sinit_lock_acquire>:
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop

08002950 <__sinit_lock_release>:
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop

08002954 <__fp_lock_all>:
 8002954:	4b02      	ldr	r3, [pc, #8]	; (8002960 <__fp_lock_all+0xc>)
 8002956:	4903      	ldr	r1, [pc, #12]	; (8002964 <__fp_lock_all+0x10>)
 8002958:	6818      	ldr	r0, [r3, #0]
 800295a:	f000 b831 	b.w	80029c0 <_fwalk>
 800295e:	bf00      	nop
 8002960:	20000004 	.word	0x20000004
 8002964:	0800276d 	.word	0x0800276d

08002968 <__fp_unlock_all>:
 8002968:	4b02      	ldr	r3, [pc, #8]	; (8002974 <__fp_unlock_all+0xc>)
 800296a:	4903      	ldr	r1, [pc, #12]	; (8002978 <__fp_unlock_all+0x10>)
 800296c:	6818      	ldr	r0, [r3, #0]
 800296e:	f000 b827 	b.w	80029c0 <_fwalk>
 8002972:	bf00      	nop
 8002974:	20000004 	.word	0x20000004
 8002978:	0800277d 	.word	0x0800277d

0800297c <_fiprintf_r>:
 800297c:	b40c      	push	{r2, r3}
 800297e:	b500      	push	{lr}
 8002980:	b083      	sub	sp, #12
 8002982:	ab04      	add	r3, sp, #16
 8002984:	f853 2b04 	ldr.w	r2, [r3], #4
 8002988:	9301      	str	r3, [sp, #4]
 800298a:	f000 f927 	bl	8002bdc <_vfiprintf_r>
 800298e:	b003      	add	sp, #12
 8002990:	f85d eb04 	ldr.w	lr, [sp], #4
 8002994:	b002      	add	sp, #8
 8002996:	4770      	bx	lr

08002998 <fiprintf>:
 8002998:	b40e      	push	{r1, r2, r3}
 800299a:	b510      	push	{r4, lr}
 800299c:	b083      	sub	sp, #12
 800299e:	ab05      	add	r3, sp, #20
 80029a0:	4c06      	ldr	r4, [pc, #24]	; (80029bc <fiprintf+0x24>)
 80029a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80029a6:	9301      	str	r3, [sp, #4]
 80029a8:	4601      	mov	r1, r0
 80029aa:	6820      	ldr	r0, [r4, #0]
 80029ac:	f000 f916 	bl	8002bdc <_vfiprintf_r>
 80029b0:	b003      	add	sp, #12
 80029b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029b6:	b003      	add	sp, #12
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	20000004 	.word	0x20000004

080029c0 <_fwalk>:
 80029c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029c4:	f110 0748 	adds.w	r7, r0, #72	; 0x48
 80029c8:	d01b      	beq.n	8002a02 <_fwalk+0x42>
 80029ca:	4688      	mov	r8, r1
 80029cc:	2600      	movs	r6, #0
 80029ce:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 80029d2:	3d01      	subs	r5, #1
 80029d4:	d40f      	bmi.n	80029f6 <_fwalk+0x36>
 80029d6:	89a3      	ldrh	r3, [r4, #12]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80029de:	d906      	bls.n	80029ee <_fwalk+0x2e>
 80029e0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80029e4:	3301      	adds	r3, #1
 80029e6:	4620      	mov	r0, r4
 80029e8:	d001      	beq.n	80029ee <_fwalk+0x2e>
 80029ea:	47c0      	blx	r8
 80029ec:	4306      	orrs	r6, r0
 80029ee:	1c6b      	adds	r3, r5, #1
 80029f0:	f104 0468 	add.w	r4, r4, #104	; 0x68
 80029f4:	d1ef      	bne.n	80029d6 <_fwalk+0x16>
 80029f6:	683f      	ldr	r7, [r7, #0]
 80029f8:	2f00      	cmp	r7, #0
 80029fa:	d1e8      	bne.n	80029ce <_fwalk+0xe>
 80029fc:	4630      	mov	r0, r6
 80029fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a02:	463e      	mov	r6, r7
 8002a04:	4630      	mov	r0, r6
 8002a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a0a:	bf00      	nop

08002a0c <_fwalk_reent>:
 8002a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a10:	f110 0748 	adds.w	r7, r0, #72	; 0x48
 8002a14:	d01f      	beq.n	8002a56 <_fwalk_reent+0x4a>
 8002a16:	4688      	mov	r8, r1
 8002a18:	4606      	mov	r6, r0
 8002a1a:	f04f 0900 	mov.w	r9, #0
 8002a1e:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 8002a22:	3d01      	subs	r5, #1
 8002a24:	d411      	bmi.n	8002a4a <_fwalk_reent+0x3e>
 8002a26:	89a3      	ldrh	r3, [r4, #12]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8002a2e:	d908      	bls.n	8002a42 <_fwalk_reent+0x36>
 8002a30:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8002a34:	3301      	adds	r3, #1
 8002a36:	4621      	mov	r1, r4
 8002a38:	4630      	mov	r0, r6
 8002a3a:	d002      	beq.n	8002a42 <_fwalk_reent+0x36>
 8002a3c:	47c0      	blx	r8
 8002a3e:	ea49 0900 	orr.w	r9, r9, r0
 8002a42:	1c6b      	adds	r3, r5, #1
 8002a44:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8002a48:	d1ed      	bne.n	8002a26 <_fwalk_reent+0x1a>
 8002a4a:	683f      	ldr	r7, [r7, #0]
 8002a4c:	2f00      	cmp	r7, #0
 8002a4e:	d1e6      	bne.n	8002a1e <_fwalk_reent+0x12>
 8002a50:	4648      	mov	r0, r9
 8002a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a56:	46b9      	mov	r9, r7
 8002a58:	4648      	mov	r0, r9
 8002a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a5e:	bf00      	nop

08002a60 <__swhatbuf_r>:
 8002a60:	b570      	push	{r4, r5, r6, lr}
 8002a62:	460c      	mov	r4, r1
 8002a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a68:	2900      	cmp	r1, #0
 8002a6a:	b096      	sub	sp, #88	; 0x58
 8002a6c:	4616      	mov	r6, r2
 8002a6e:	461d      	mov	r5, r3
 8002a70:	db13      	blt.n	8002a9a <__swhatbuf_r+0x3a>
 8002a72:	466a      	mov	r2, sp
 8002a74:	f000 fd00 	bl	8003478 <_fstat_r>
 8002a78:	2800      	cmp	r0, #0
 8002a7a:	db0e      	blt.n	8002a9a <__swhatbuf_r+0x3a>
 8002a7c:	9a01      	ldr	r2, [sp, #4]
 8002a7e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002a82:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 8002a86:	fab2 f282 	clz	r2, r2
 8002a8a:	0952      	lsrs	r2, r2, #5
 8002a8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a90:	2000      	movs	r0, #0
 8002a92:	602a      	str	r2, [r5, #0]
 8002a94:	6033      	str	r3, [r6, #0]
 8002a96:	b016      	add	sp, #88	; 0x58
 8002a98:	bd70      	pop	{r4, r5, r6, pc}
 8002a9a:	89a3      	ldrh	r3, [r4, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	061b      	lsls	r3, r3, #24
 8002aa0:	602a      	str	r2, [r5, #0]
 8002aa2:	d504      	bpl.n	8002aae <__swhatbuf_r+0x4e>
 8002aa4:	2340      	movs	r3, #64	; 0x40
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	6033      	str	r3, [r6, #0]
 8002aaa:	b016      	add	sp, #88	; 0x58
 8002aac:	bd70      	pop	{r4, r5, r6, pc}
 8002aae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	6033      	str	r3, [r6, #0]
 8002ab6:	b016      	add	sp, #88	; 0x58
 8002ab8:	bd70      	pop	{r4, r5, r6, pc}
 8002aba:	bf00      	nop

08002abc <__smakebuf_r>:
 8002abc:	898a      	ldrh	r2, [r1, #12]
 8002abe:	0792      	lsls	r2, r2, #30
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	d506      	bpl.n	8002ad2 <__smakebuf_r+0x16>
 8002ac4:	f101 0247 	add.w	r2, r1, #71	; 0x47
 8002ac8:	2101      	movs	r1, #1
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	e9c3 2104 	strd	r2, r1, [r3, #16]
 8002ad0:	4770      	bx	lr
 8002ad2:	b570      	push	{r4, r5, r6, lr}
 8002ad4:	b082      	sub	sp, #8
 8002ad6:	ab01      	add	r3, sp, #4
 8002ad8:	466a      	mov	r2, sp
 8002ada:	460c      	mov	r4, r1
 8002adc:	4606      	mov	r6, r0
 8002ade:	f7ff ffbf 	bl	8002a60 <__swhatbuf_r>
 8002ae2:	9900      	ldr	r1, [sp, #0]
 8002ae4:	4605      	mov	r5, r0
 8002ae6:	4630      	mov	r0, r6
 8002ae8:	f7fe ff5e 	bl	80019a8 <_malloc_r>
 8002aec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002af0:	b170      	cbz	r0, 8002b10 <__smakebuf_r+0x54>
 8002af2:	4916      	ldr	r1, [pc, #88]	; (8002b4c <__smakebuf_r+0x90>)
 8002af4:	62b1      	str	r1, [r6, #40]	; 0x28
 8002af6:	9a01      	ldr	r2, [sp, #4]
 8002af8:	9900      	ldr	r1, [sp, #0]
 8002afa:	6020      	str	r0, [r4, #0]
 8002afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b00:	81a3      	strh	r3, [r4, #12]
 8002b02:	e9c4 0104 	strd	r0, r1, [r4, #16]
 8002b06:	b98a      	cbnz	r2, 8002b2c <__smakebuf_r+0x70>
 8002b08:	432b      	orrs	r3, r5
 8002b0a:	81a3      	strh	r3, [r4, #12]
 8002b0c:	b002      	add	sp, #8
 8002b0e:	bd70      	pop	{r4, r5, r6, pc}
 8002b10:	059a      	lsls	r2, r3, #22
 8002b12:	d4fb      	bmi.n	8002b0c <__smakebuf_r+0x50>
 8002b14:	f023 0303 	bic.w	r3, r3, #3
 8002b18:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8002b1c:	f043 0302 	orr.w	r3, r3, #2
 8002b20:	2101      	movs	r1, #1
 8002b22:	81a3      	strh	r3, [r4, #12]
 8002b24:	6022      	str	r2, [r4, #0]
 8002b26:	e9c4 2104 	strd	r2, r1, [r4, #16]
 8002b2a:	e7ef      	b.n	8002b0c <__smakebuf_r+0x50>
 8002b2c:	4630      	mov	r0, r6
 8002b2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b32:	f000 fe39 	bl	80037a8 <_isatty_r>
 8002b36:	b910      	cbnz	r0, 8002b3e <__smakebuf_r+0x82>
 8002b38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b3c:	e7e4      	b.n	8002b08 <__smakebuf_r+0x4c>
 8002b3e:	89a3      	ldrh	r3, [r4, #12]
 8002b40:	f023 0303 	bic.w	r3, r3, #3
 8002b44:	f043 0301 	orr.w	r3, r3, #1
 8002b48:	b21b      	sxth	r3, r3
 8002b4a:	e7dd      	b.n	8002b08 <__smakebuf_r+0x4c>
 8002b4c:	08002771 	.word	0x08002771

08002b50 <__malloc_lock>:
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop

08002b54 <__malloc_unlock>:
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop

08002b58 <__sfputc_r>:
 8002b58:	6893      	ldr	r3, [r2, #8]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	6093      	str	r3, [r2, #8]
 8002b60:	da0f      	bge.n	8002b82 <__sfputc_r+0x2a>
 8002b62:	b410      	push	{r4}
 8002b64:	6994      	ldr	r4, [r2, #24]
 8002b66:	42a3      	cmp	r3, r4
 8002b68:	db08      	blt.n	8002b7c <__sfputc_r+0x24>
 8002b6a:	290a      	cmp	r1, #10
 8002b6c:	d006      	beq.n	8002b7c <__sfputc_r+0x24>
 8002b6e:	6813      	ldr	r3, [r2, #0]
 8002b70:	1c58      	adds	r0, r3, #1
 8002b72:	6010      	str	r0, [r2, #0]
 8002b74:	7019      	strb	r1, [r3, #0]
 8002b76:	4608      	mov	r0, r1
 8002b78:	bc10      	pop	{r4}
 8002b7a:	4770      	bx	lr
 8002b7c:	bc10      	pop	{r4}
 8002b7e:	f7ff bbcb 	b.w	8002318 <__swbuf_r>
 8002b82:	6813      	ldr	r3, [r2, #0]
 8002b84:	1c58      	adds	r0, r3, #1
 8002b86:	6010      	str	r0, [r2, #0]
 8002b88:	7019      	strb	r1, [r3, #0]
 8002b8a:	4608      	mov	r0, r1
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop

08002b90 <__sfputs_r>:
 8002b90:	b19b      	cbz	r3, 8002bba <__sfputs_r+0x2a>
 8002b92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b94:	4413      	add	r3, r2
 8002b96:	460f      	mov	r7, r1
 8002b98:	4606      	mov	r6, r0
 8002b9a:	1e5d      	subs	r5, r3, #1
 8002b9c:	1e54      	subs	r4, r2, #1
 8002b9e:	e001      	b.n	8002ba4 <__sfputs_r+0x14>
 8002ba0:	42ac      	cmp	r4, r5
 8002ba2:	d008      	beq.n	8002bb6 <__sfputs_r+0x26>
 8002ba4:	463a      	mov	r2, r7
 8002ba6:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002baa:	4630      	mov	r0, r6
 8002bac:	f7ff ffd4 	bl	8002b58 <__sfputc_r>
 8002bb0:	1c43      	adds	r3, r0, #1
 8002bb2:	d1f5      	bne.n	8002ba0 <__sfputs_r+0x10>
 8002bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bba:	2000      	movs	r0, #0
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop

08002bc0 <__sprint_r>:
 8002bc0:	6893      	ldr	r3, [r2, #8]
 8002bc2:	b510      	push	{r4, lr}
 8002bc4:	4614      	mov	r4, r2
 8002bc6:	b913      	cbnz	r3, 8002bce <__sprint_r+0xe>
 8002bc8:	6053      	str	r3, [r2, #4]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	bd10      	pop	{r4, pc}
 8002bce:	f000 fc67 	bl	80034a0 <__sfvwrite_r>
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8002bd8:	bd10      	pop	{r4, pc}
 8002bda:	bf00      	nop

08002bdc <_vfiprintf_r>:
 8002bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002be0:	b09f      	sub	sp, #124	; 0x7c
 8002be2:	468b      	mov	fp, r1
 8002be4:	4690      	mov	r8, r2
 8002be6:	461c      	mov	r4, r3
 8002be8:	9003      	str	r0, [sp, #12]
 8002bea:	b118      	cbz	r0, 8002bf4 <_vfiprintf_r+0x18>
 8002bec:	6983      	ldr	r3, [r0, #24]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 80b7 	beq.w	8002d62 <_vfiprintf_r+0x186>
 8002bf4:	4ba2      	ldr	r3, [pc, #648]	; (8002e80 <_vfiprintf_r+0x2a4>)
 8002bf6:	459b      	cmp	fp, r3
 8002bf8:	f000 80b9 	beq.w	8002d6e <_vfiprintf_r+0x192>
 8002bfc:	4ba1      	ldr	r3, [pc, #644]	; (8002e84 <_vfiprintf_r+0x2a8>)
 8002bfe:	459b      	cmp	fp, r3
 8002c00:	f000 80c7 	beq.w	8002d92 <_vfiprintf_r+0x1b6>
 8002c04:	4ba0      	ldr	r3, [pc, #640]	; (8002e88 <_vfiprintf_r+0x2ac>)
 8002c06:	459b      	cmp	fp, r3
 8002c08:	bf04      	itt	eq
 8002c0a:	9b03      	ldreq	r3, [sp, #12]
 8002c0c:	f8d3 b00c 	ldreq.w	fp, [r3, #12]
 8002c10:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8002c14:	0718      	lsls	r0, r3, #28
 8002c16:	f140 80b2 	bpl.w	8002d7e <_vfiprintf_r+0x1a2>
 8002c1a:	f8db 3010 	ldr.w	r3, [fp, #16]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 80ad 	beq.w	8002d7e <_vfiprintf_r+0x1a2>
 8002c24:	2330      	movs	r3, #48	; 0x30
 8002c26:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
 8002c2a:	f898 3000 	ldrb.w	r3, [r8]
 8002c2e:	9405      	str	r4, [sp, #20]
 8002c30:	2100      	movs	r1, #0
 8002c32:	2220      	movs	r2, #32
 8002c34:	910b      	str	r1, [sp, #44]	; 0x2c
 8002c36:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 8002c3a:	4e94      	ldr	r6, [pc, #592]	; (8002e8c <_vfiprintf_r+0x2b0>)
 8002c3c:	2701      	movs	r7, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f000 8087 	beq.w	8002d52 <_vfiprintf_r+0x176>
 8002c44:	2b25      	cmp	r3, #37	; 0x25
 8002c46:	f000 8115 	beq.w	8002e74 <_vfiprintf_r+0x298>
 8002c4a:	4645      	mov	r5, r8
 8002c4c:	e003      	b.n	8002c56 <_vfiprintf_r+0x7a>
 8002c4e:	2b25      	cmp	r3, #37	; 0x25
 8002c50:	f000 80a3 	beq.w	8002d9a <_vfiprintf_r+0x1be>
 8002c54:	4625      	mov	r5, r4
 8002c56:	786b      	ldrb	r3, [r5, #1]
 8002c58:	1c6c      	adds	r4, r5, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1f7      	bne.n	8002c4e <_vfiprintf_r+0x72>
 8002c5e:	ebb4 0a08 	subs.w	sl, r4, r8
 8002c62:	d076      	beq.n	8002d52 <_vfiprintf_r+0x176>
 8002c64:	4642      	mov	r2, r8
 8002c66:	4653      	mov	r3, sl
 8002c68:	4659      	mov	r1, fp
 8002c6a:	9803      	ldr	r0, [sp, #12]
 8002c6c:	f7ff ff90 	bl	8002b90 <__sfputs_r>
 8002c70:	3001      	adds	r0, #1
 8002c72:	d06e      	beq.n	8002d52 <_vfiprintf_r+0x176>
 8002c74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002c76:	786a      	ldrb	r2, [r5, #1]
 8002c78:	4453      	add	r3, sl
 8002c7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8002c7c:	2a00      	cmp	r2, #0
 8002c7e:	d068      	beq.n	8002d52 <_vfiprintf_r+0x176>
 8002c80:	2300      	movs	r3, #0
 8002c82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c86:	3401      	adds	r4, #1
 8002c88:	9306      	str	r3, [sp, #24]
 8002c8a:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8002c8e:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 8002c92:	931c      	str	r3, [sp, #112]	; 0x70
 8002c94:	9207      	str	r2, [sp, #28]
 8002c96:	e005      	b.n	8002ca4 <_vfiprintf_r+0xc8>
 8002c98:	9a06      	ldr	r2, [sp, #24]
 8002c9a:	fa07 f303 	lsl.w	r3, r7, r3
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	462c      	mov	r4, r5
 8002ca2:	9306      	str	r3, [sp, #24]
 8002ca4:	4625      	mov	r5, r4
 8002ca6:	2205      	movs	r2, #5
 8002ca8:	f815 1b01 	ldrb.w	r1, [r5], #1
 8002cac:	4630      	mov	r0, r6
 8002cae:	f000 fda7 	bl	8003800 <memchr>
 8002cb2:	46aa      	mov	sl, r5
 8002cb4:	1b83      	subs	r3, r0, r6
 8002cb6:	2800      	cmp	r0, #0
 8002cb8:	d1ee      	bne.n	8002c98 <_vfiprintf_r+0xbc>
 8002cba:	9b06      	ldr	r3, [sp, #24]
 8002cbc:	06d9      	lsls	r1, r3, #27
 8002cbe:	bf44      	itt	mi
 8002cc0:	2220      	movmi	r2, #32
 8002cc2:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
 8002cc6:	7821      	ldrb	r1, [r4, #0]
 8002cc8:	071a      	lsls	r2, r3, #28
 8002cca:	bf44      	itt	mi
 8002ccc:	222b      	movmi	r2, #43	; 0x2b
 8002cce:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
 8002cd2:	292a      	cmp	r1, #42	; 0x2a
 8002cd4:	d166      	bne.n	8002da4 <_vfiprintf_r+0x1c8>
 8002cd6:	9a05      	ldr	r2, [sp, #20]
 8002cd8:	6811      	ldr	r1, [r2, #0]
 8002cda:	3204      	adds	r2, #4
 8002cdc:	2900      	cmp	r1, #0
 8002cde:	9205      	str	r2, [sp, #20]
 8002ce0:	f2c0 809d 	blt.w	8002e1e <_vfiprintf_r+0x242>
 8002ce4:	9109      	str	r1, [sp, #36]	; 0x24
 8002ce6:	7861      	ldrb	r1, [r4, #1]
 8002ce8:	1ca5      	adds	r5, r4, #2
 8002cea:	292e      	cmp	r1, #46	; 0x2e
 8002cec:	d073      	beq.n	8002dd6 <_vfiprintf_r+0x1fa>
 8002cee:	4c68      	ldr	r4, [pc, #416]	; (8002e90 <_vfiprintf_r+0x2b4>)
 8002cf0:	2203      	movs	r2, #3
 8002cf2:	4620      	mov	r0, r4
 8002cf4:	f000 fd84 	bl	8003800 <memchr>
 8002cf8:	2800      	cmp	r0, #0
 8002cfa:	f000 8086 	beq.w	8002e0a <_vfiprintf_r+0x22e>
 8002cfe:	1b00      	subs	r0, r0, r4
 8002d00:	9b06      	ldr	r3, [sp, #24]
 8002d02:	2440      	movs	r4, #64	; 0x40
 8002d04:	fa04 f000 	lsl.w	r0, r4, r0
 8002d08:	4303      	orrs	r3, r0
 8002d0a:	9306      	str	r3, [sp, #24]
 8002d0c:	f105 0801 	add.w	r8, r5, #1
 8002d10:	7829      	ldrb	r1, [r5, #0]
 8002d12:	4860      	ldr	r0, [pc, #384]	; (8002e94 <_vfiprintf_r+0x2b8>)
 8002d14:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
 8002d18:	2206      	movs	r2, #6
 8002d1a:	f000 fd71 	bl	8003800 <memchr>
 8002d1e:	2800      	cmp	r0, #0
 8002d20:	f000 8083 	beq.w	8002e2a <_vfiprintf_r+0x24e>
 8002d24:	4b5c      	ldr	r3, [pc, #368]	; (8002e98 <_vfiprintf_r+0x2bc>)
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d072      	beq.n	8002e10 <_vfiprintf_r+0x234>
 8002d2a:	ab05      	add	r3, sp, #20
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	465a      	mov	r2, fp
 8002d30:	4b5a      	ldr	r3, [pc, #360]	; (8002e9c <_vfiprintf_r+0x2c0>)
 8002d32:	9803      	ldr	r0, [sp, #12]
 8002d34:	a906      	add	r1, sp, #24
 8002d36:	f3af 8000 	nop.w
 8002d3a:	4681      	mov	r9, r0
 8002d3c:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8002d40:	d007      	beq.n	8002d52 <_vfiprintf_r+0x176>
 8002d42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002d44:	444b      	add	r3, r9
 8002d46:	930b      	str	r3, [sp, #44]	; 0x2c
 8002d48:	f898 3000 	ldrb.w	r3, [r8]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f47f af79 	bne.w	8002c44 <_vfiprintf_r+0x68>
 8002d52:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8002d56:	065b      	lsls	r3, r3, #25
 8002d58:	d418      	bmi.n	8002d8c <_vfiprintf_r+0x1b0>
 8002d5a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002d5c:	b01f      	add	sp, #124	; 0x7c
 8002d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d62:	f7ff fdeb 	bl	800293c <__sinit>
 8002d66:	4b46      	ldr	r3, [pc, #280]	; (8002e80 <_vfiprintf_r+0x2a4>)
 8002d68:	459b      	cmp	fp, r3
 8002d6a:	f47f af47 	bne.w	8002bfc <_vfiprintf_r+0x20>
 8002d6e:	9b03      	ldr	r3, [sp, #12]
 8002d70:	f8d3 b004 	ldr.w	fp, [r3, #4]
 8002d74:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8002d78:	0718      	lsls	r0, r3, #28
 8002d7a:	f53f af4e 	bmi.w	8002c1a <_vfiprintf_r+0x3e>
 8002d7e:	4659      	mov	r1, fp
 8002d80:	9803      	ldr	r0, [sp, #12]
 8002d82:	f7ff fb29 	bl	80023d8 <__swsetup_r>
 8002d86:	2800      	cmp	r0, #0
 8002d88:	f43f af4c 	beq.w	8002c24 <_vfiprintf_r+0x48>
 8002d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d90:	e7e4      	b.n	8002d5c <_vfiprintf_r+0x180>
 8002d92:	9b03      	ldr	r3, [sp, #12]
 8002d94:	f8d3 b008 	ldr.w	fp, [r3, #8]
 8002d98:	e73a      	b.n	8002c10 <_vfiprintf_r+0x34>
 8002d9a:	ebb4 0a08 	subs.w	sl, r4, r8
 8002d9e:	f43f af6f 	beq.w	8002c80 <_vfiprintf_r+0xa4>
 8002da2:	e75f      	b.n	8002c64 <_vfiprintf_r+0x88>
 8002da4:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8002da8:	2a09      	cmp	r2, #9
 8002daa:	bf88      	it	hi
 8002dac:	46a2      	movhi	sl, r4
 8002dae:	d89c      	bhi.n	8002cea <_vfiprintf_r+0x10e>
 8002db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002db2:	e001      	b.n	8002db8 <_vfiprintf_r+0x1dc>
 8002db4:	462c      	mov	r4, r5
 8002db6:	3501      	adds	r5, #1
 8002db8:	7829      	ldrb	r1, [r5, #0]
 8002dba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002dbe:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002dc2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8002dc6:	2a09      	cmp	r2, #9
 8002dc8:	46aa      	mov	sl, r5
 8002dca:	d9f3      	bls.n	8002db4 <_vfiprintf_r+0x1d8>
 8002dcc:	292e      	cmp	r1, #46	; 0x2e
 8002dce:	f104 0502 	add.w	r5, r4, #2
 8002dd2:	9309      	str	r3, [sp, #36]	; 0x24
 8002dd4:	d18b      	bne.n	8002cee <_vfiprintf_r+0x112>
 8002dd6:	f89a 1001 	ldrb.w	r1, [sl, #1]
 8002dda:	292a      	cmp	r1, #42	; 0x2a
 8002ddc:	d12f      	bne.n	8002e3e <_vfiprintf_r+0x262>
 8002dde:	9b05      	ldr	r3, [sp, #20]
 8002de0:	f89a 1002 	ldrb.w	r1, [sl, #2]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	9207      	str	r2, [sp, #28]
 8002de8:	3304      	adds	r3, #4
 8002dea:	2a00      	cmp	r2, #0
 8002dec:	9305      	str	r3, [sp, #20]
 8002dee:	f10a 0503 	add.w	r5, sl, #3
 8002df2:	f10a 0302 	add.w	r3, sl, #2
 8002df6:	db38      	blt.n	8002e6a <_vfiprintf_r+0x28e>
 8002df8:	4c25      	ldr	r4, [pc, #148]	; (8002e90 <_vfiprintf_r+0x2b4>)
 8002dfa:	2203      	movs	r2, #3
 8002dfc:	4620      	mov	r0, r4
 8002dfe:	469a      	mov	sl, r3
 8002e00:	f000 fcfe 	bl	8003800 <memchr>
 8002e04:	2800      	cmp	r0, #0
 8002e06:	f47f af7a 	bne.w	8002cfe <_vfiprintf_r+0x122>
 8002e0a:	46a8      	mov	r8, r5
 8002e0c:	4655      	mov	r5, sl
 8002e0e:	e77f      	b.n	8002d10 <_vfiprintf_r+0x134>
 8002e10:	9b05      	ldr	r3, [sp, #20]
 8002e12:	3307      	adds	r3, #7
 8002e14:	f023 0307 	bic.w	r3, r3, #7
 8002e18:	3308      	adds	r3, #8
 8002e1a:	9305      	str	r3, [sp, #20]
 8002e1c:	e791      	b.n	8002d42 <_vfiprintf_r+0x166>
 8002e1e:	4249      	negs	r1, r1
 8002e20:	f043 0302 	orr.w	r3, r3, #2
 8002e24:	9109      	str	r1, [sp, #36]	; 0x24
 8002e26:	9306      	str	r3, [sp, #24]
 8002e28:	e75d      	b.n	8002ce6 <_vfiprintf_r+0x10a>
 8002e2a:	ab05      	add	r3, sp, #20
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	465a      	mov	r2, fp
 8002e30:	4b1a      	ldr	r3, [pc, #104]	; (8002e9c <_vfiprintf_r+0x2c0>)
 8002e32:	9803      	ldr	r0, [sp, #12]
 8002e34:	a906      	add	r1, sp, #24
 8002e36:	f000 f8d5 	bl	8002fe4 <_printf_i>
 8002e3a:	4681      	mov	r9, r0
 8002e3c:	e77e      	b.n	8002d3c <_vfiprintf_r+0x160>
 8002e3e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8002e42:	2300      	movs	r3, #0
 8002e44:	2a09      	cmp	r2, #9
 8002e46:	9307      	str	r3, [sp, #28]
 8002e48:	d901      	bls.n	8002e4e <_vfiprintf_r+0x272>
 8002e4a:	e015      	b.n	8002e78 <_vfiprintf_r+0x29c>
 8002e4c:	4655      	mov	r5, sl
 8002e4e:	7869      	ldrb	r1, [r5, #1]
 8002e50:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002e54:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002e58:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8002e5c:	2a09      	cmp	r2, #9
 8002e5e:	f105 0a01 	add.w	sl, r5, #1
 8002e62:	d9f3      	bls.n	8002e4c <_vfiprintf_r+0x270>
 8002e64:	3502      	adds	r5, #2
 8002e66:	9307      	str	r3, [sp, #28]
 8002e68:	e741      	b.n	8002cee <_vfiprintf_r+0x112>
 8002e6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e6e:	469a      	mov	sl, r3
 8002e70:	9207      	str	r2, [sp, #28]
 8002e72:	e73c      	b.n	8002cee <_vfiprintf_r+0x112>
 8002e74:	4644      	mov	r4, r8
 8002e76:	e703      	b.n	8002c80 <_vfiprintf_r+0xa4>
 8002e78:	46aa      	mov	sl, r5
 8002e7a:	3501      	adds	r5, #1
 8002e7c:	e737      	b.n	8002cee <_vfiprintf_r+0x112>
 8002e7e:	bf00      	nop
 8002e80:	08005d90 	.word	0x08005d90
 8002e84:	08005d70 	.word	0x08005d70
 8002e88:	08005d50 	.word	0x08005d50
 8002e8c:	0800615c 	.word	0x0800615c
 8002e90:	08006164 	.word	0x08006164
 8002e94:	08006168 	.word	0x08006168
 8002e98:	00000000 	.word	0x00000000
 8002e9c:	08002b91 	.word	0x08002b91

08002ea0 <vfiprintf>:
 8002ea0:	b410      	push	{r4}
 8002ea2:	4c04      	ldr	r4, [pc, #16]	; (8002eb4 <vfiprintf+0x14>)
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	460a      	mov	r2, r1
 8002ea8:	4601      	mov	r1, r0
 8002eaa:	6820      	ldr	r0, [r4, #0]
 8002eac:	bc10      	pop	{r4}
 8002eae:	f7ff be95 	b.w	8002bdc <_vfiprintf_r>
 8002eb2:	bf00      	nop
 8002eb4:	20000004 	.word	0x20000004

08002eb8 <_printf_common>:
 8002eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ebc:	460c      	mov	r4, r1
 8002ebe:	4691      	mov	r9, r2
 8002ec0:	690a      	ldr	r2, [r1, #16]
 8002ec2:	6889      	ldr	r1, [r1, #8]
 8002ec4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ec8:	428a      	cmp	r2, r1
 8002eca:	bfb8      	it	lt
 8002ecc:	460a      	movlt	r2, r1
 8002ece:	f8c9 2000 	str.w	r2, [r9]
 8002ed2:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 8002ed6:	4606      	mov	r6, r0
 8002ed8:	461f      	mov	r7, r3
 8002eda:	b111      	cbz	r1, 8002ee2 <_printf_common+0x2a>
 8002edc:	3201      	adds	r2, #1
 8002ede:	f8c9 2000 	str.w	r2, [r9]
 8002ee2:	6823      	ldr	r3, [r4, #0]
 8002ee4:	0699      	lsls	r1, r3, #26
 8002ee6:	d55c      	bpl.n	8002fa2 <_printf_common+0xea>
 8002ee8:	f8d9 2000 	ldr.w	r2, [r9]
 8002eec:	3202      	adds	r2, #2
 8002eee:	f8c9 2000 	str.w	r2, [r9]
 8002ef2:	6823      	ldr	r3, [r4, #0]
 8002ef4:	f013 0f06 	tst.w	r3, #6
 8002ef8:	4619      	mov	r1, r3
 8002efa:	d11d      	bne.n	8002f38 <_printf_common+0x80>
 8002efc:	68e1      	ldr	r1, [r4, #12]
 8002efe:	1a8a      	subs	r2, r1, r2
 8002f00:	2a00      	cmp	r2, #0
 8002f02:	bfd8      	it	le
 8002f04:	4619      	movle	r1, r3
 8002f06:	dd17      	ble.n	8002f38 <_printf_common+0x80>
 8002f08:	f104 0a19 	add.w	sl, r4, #25
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	e005      	b.n	8002f1c <_printf_common+0x64>
 8002f10:	68e3      	ldr	r3, [r4, #12]
 8002f12:	f8d9 2000 	ldr.w	r2, [r9]
 8002f16:	1a9b      	subs	r3, r3, r2
 8002f18:	42ab      	cmp	r3, r5
 8002f1a:	dd0c      	ble.n	8002f36 <_printf_common+0x7e>
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	4652      	mov	r2, sl
 8002f20:	4639      	mov	r1, r7
 8002f22:	4630      	mov	r0, r6
 8002f24:	47c0      	blx	r8
 8002f26:	3001      	adds	r0, #1
 8002f28:	f105 0501 	add.w	r5, r5, #1
 8002f2c:	d1f0      	bne.n	8002f10 <_printf_common+0x58>
 8002f2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f36:	6821      	ldr	r1, [r4, #0]
 8002f38:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002f3c:	3300      	adds	r3, #0
 8002f3e:	bf18      	it	ne
 8002f40:	2301      	movne	r3, #1
 8002f42:	068a      	lsls	r2, r1, #26
 8002f44:	d50a      	bpl.n	8002f5c <_printf_common+0xa4>
 8002f46:	18e1      	adds	r1, r4, r3
 8002f48:	1c5a      	adds	r2, r3, #1
 8002f4a:	2030      	movs	r0, #48	; 0x30
 8002f4c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f50:	4422      	add	r2, r4
 8002f52:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f5a:	3302      	adds	r3, #2
 8002f5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f60:	4639      	mov	r1, r7
 8002f62:	4630      	mov	r0, r6
 8002f64:	47c0      	blx	r8
 8002f66:	3001      	adds	r0, #1
 8002f68:	d0e1      	beq.n	8002f2e <_printf_common+0x76>
 8002f6a:	6823      	ldr	r3, [r4, #0]
 8002f6c:	68a2      	ldr	r2, [r4, #8]
 8002f6e:	6921      	ldr	r1, [r4, #16]
 8002f70:	f003 0306 	and.w	r3, r3, #6
 8002f74:	2b04      	cmp	r3, #4
 8002f76:	d01d      	beq.n	8002fb4 <_printf_common+0xfc>
 8002f78:	428a      	cmp	r2, r1
 8002f7a:	dd26      	ble.n	8002fca <_printf_common+0x112>
 8002f7c:	f04f 0900 	mov.w	r9, #0
 8002f80:	1a52      	subs	r2, r2, r1
 8002f82:	4491      	add	r9, r2
 8002f84:	341a      	adds	r4, #26
 8002f86:	2500      	movs	r5, #0
 8002f88:	e001      	b.n	8002f8e <_printf_common+0xd6>
 8002f8a:	454d      	cmp	r5, r9
 8002f8c:	da1d      	bge.n	8002fca <_printf_common+0x112>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	4622      	mov	r2, r4
 8002f92:	4639      	mov	r1, r7
 8002f94:	4630      	mov	r0, r6
 8002f96:	47c0      	blx	r8
 8002f98:	3001      	adds	r0, #1
 8002f9a:	f105 0501 	add.w	r5, r5, #1
 8002f9e:	d1f4      	bne.n	8002f8a <_printf_common+0xd2>
 8002fa0:	e7c5      	b.n	8002f2e <_printf_common+0x76>
 8002fa2:	f013 0f06 	tst.w	r3, #6
 8002fa6:	d013      	beq.n	8002fd0 <_printf_common+0x118>
 8002fa8:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002fac:	3300      	adds	r3, #0
 8002fae:	bf18      	it	ne
 8002fb0:	2301      	movne	r3, #1
 8002fb2:	e7d3      	b.n	8002f5c <_printf_common+0xa4>
 8002fb4:	f8d9 0000 	ldr.w	r0, [r9]
 8002fb8:	68e3      	ldr	r3, [r4, #12]
 8002fba:	428a      	cmp	r2, r1
 8002fbc:	eba3 0300 	sub.w	r3, r3, r0
 8002fc0:	ea23 79e3 	bic.w	r9, r3, r3, asr #31
 8002fc4:	dcdc      	bgt.n	8002f80 <_printf_common+0xc8>
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	dcdc      	bgt.n	8002f84 <_printf_common+0xcc>
 8002fca:	2000      	movs	r0, #0
 8002fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fd0:	68e1      	ldr	r1, [r4, #12]
 8002fd2:	f8d9 2000 	ldr.w	r2, [r9]
 8002fd6:	1a8a      	subs	r2, r1, r2
 8002fd8:	2a00      	cmp	r2, #0
 8002fda:	bfd8      	it	le
 8002fdc:	4619      	movle	r1, r3
 8002fde:	dc93      	bgt.n	8002f08 <_printf_common+0x50>
 8002fe0:	e7aa      	b.n	8002f38 <_printf_common+0x80>
 8002fe2:	bf00      	nop

08002fe4 <_printf_i>:
 8002fe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002fe8:	460c      	mov	r4, r1
 8002fea:	7e09      	ldrb	r1, [r1, #24]
 8002fec:	b085      	sub	sp, #20
 8002fee:	296e      	cmp	r1, #110	; 0x6e
 8002ff0:	4606      	mov	r6, r0
 8002ff2:	4617      	mov	r7, r2
 8002ff4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002ff6:	4698      	mov	r8, r3
 8002ff8:	f104 0e43 	add.w	lr, r4, #67	; 0x43
 8002ffc:	d06d      	beq.n	80030da <_printf_i+0xf6>
 8002ffe:	d939      	bls.n	8003074 <_printf_i+0x90>
 8003000:	2973      	cmp	r1, #115	; 0x73
 8003002:	f000 80f6 	beq.w	80031f2 <_printf_i+0x20e>
 8003006:	d944      	bls.n	8003092 <_printf_i+0xae>
 8003008:	2975      	cmp	r1, #117	; 0x75
 800300a:	f000 8104 	beq.w	8003216 <_printf_i+0x232>
 800300e:	2978      	cmp	r1, #120	; 0x78
 8003010:	f040 8111 	bne.w	8003236 <_printf_i+0x252>
 8003014:	2378      	movs	r3, #120	; 0x78
 8003016:	6822      	ldr	r2, [r4, #0]
 8003018:	f8df c258 	ldr.w	ip, [pc, #600]	; 8003274 <_printf_i+0x290>
 800301c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003020:	6801      	ldr	r1, [r0, #0]
 8003022:	0615      	lsls	r5, r2, #24
 8003024:	f851 3b04 	ldr.w	r3, [r1], #4
 8003028:	6001      	str	r1, [r0, #0]
 800302a:	f140 80a1 	bpl.w	8003170 <_printf_i+0x18c>
 800302e:	07d1      	lsls	r1, r2, #31
 8003030:	bf44      	itt	mi
 8003032:	f042 0220 	orrmi.w	r2, r2, #32
 8003036:	6022      	strmi	r2, [r4, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 8093 	beq.w	8003164 <_printf_i+0x180>
 800303e:	2210      	movs	r2, #16
 8003040:	2100      	movs	r1, #0
 8003042:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003046:	6860      	ldr	r0, [r4, #4]
 8003048:	60a0      	str	r0, [r4, #8]
 800304a:	2800      	cmp	r0, #0
 800304c:	f2c0 80c8 	blt.w	80031e0 <_printf_i+0x1fc>
 8003050:	6821      	ldr	r1, [r4, #0]
 8003052:	f021 0104 	bic.w	r1, r1, #4
 8003056:	6021      	str	r1, [r4, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	f040 80a3 	bne.w	80031a4 <_printf_i+0x1c0>
 800305e:	2800      	cmp	r0, #0
 8003060:	f040 80c0 	bne.w	80031e4 <_printf_i+0x200>
 8003064:	4675      	mov	r5, lr
 8003066:	2a08      	cmp	r2, #8
 8003068:	f000 80ac 	beq.w	80031c4 <_printf_i+0x1e0>
 800306c:	ebae 0305 	sub.w	r3, lr, r5
 8003070:	6123      	str	r3, [r4, #16]
 8003072:	e041      	b.n	80030f8 <_printf_i+0x114>
 8003074:	2963      	cmp	r1, #99	; 0x63
 8003076:	f000 80e5 	beq.w	8003244 <_printf_i+0x260>
 800307a:	d81a      	bhi.n	80030b2 <_printf_i+0xce>
 800307c:	2900      	cmp	r1, #0
 800307e:	d038      	beq.n	80030f2 <_printf_i+0x10e>
 8003080:	2958      	cmp	r1, #88	; 0x58
 8003082:	f040 80d8 	bne.w	8003236 <_printf_i+0x252>
 8003086:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800308a:	6822      	ldr	r2, [r4, #0]
 800308c:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 8003278 <_printf_i+0x294>
 8003090:	e7c6      	b.n	8003020 <_printf_i+0x3c>
 8003092:	296f      	cmp	r1, #111	; 0x6f
 8003094:	f000 80bf 	beq.w	8003216 <_printf_i+0x232>
 8003098:	2970      	cmp	r1, #112	; 0x70
 800309a:	f040 80cc 	bne.w	8003236 <_printf_i+0x252>
 800309e:	6822      	ldr	r2, [r4, #0]
 80030a0:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 8003274 <_printf_i+0x290>
 80030a4:	f042 0220 	orr.w	r2, r2, #32
 80030a8:	2378      	movs	r3, #120	; 0x78
 80030aa:	6022      	str	r2, [r4, #0]
 80030ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80030b0:	e7b6      	b.n	8003020 <_printf_i+0x3c>
 80030b2:	2964      	cmp	r1, #100	; 0x64
 80030b4:	d002      	beq.n	80030bc <_printf_i+0xd8>
 80030b6:	2969      	cmp	r1, #105	; 0x69
 80030b8:	f040 80bd 	bne.w	8003236 <_printf_i+0x252>
 80030bc:	6822      	ldr	r2, [r4, #0]
 80030be:	6803      	ldr	r3, [r0, #0]
 80030c0:	0611      	lsls	r1, r2, #24
 80030c2:	f103 0504 	add.w	r5, r3, #4
 80030c6:	d557      	bpl.n	8003178 <_printf_i+0x194>
 80030c8:	6819      	ldr	r1, [r3, #0]
 80030ca:	6005      	str	r5, [r0, #0]
 80030cc:	460b      	mov	r3, r1
 80030ce:	2900      	cmp	r1, #0
 80030d0:	db59      	blt.n	8003186 <_printf_i+0x1a2>
 80030d2:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8003278 <_printf_i+0x294>
 80030d6:	220a      	movs	r2, #10
 80030d8:	e7b5      	b.n	8003046 <_printf_i+0x62>
 80030da:	6803      	ldr	r3, [r0, #0]
 80030dc:	6822      	ldr	r2, [r4, #0]
 80030de:	6961      	ldr	r1, [r4, #20]
 80030e0:	1d1d      	adds	r5, r3, #4
 80030e2:	6005      	str	r5, [r0, #0]
 80030e4:	0615      	lsls	r5, r2, #24
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	d402      	bmi.n	80030f0 <_printf_i+0x10c>
 80030ea:	0650      	lsls	r0, r2, #25
 80030ec:	f100 80bd 	bmi.w	800326a <_printf_i+0x286>
 80030f0:	6019      	str	r1, [r3, #0]
 80030f2:	2300      	movs	r3, #0
 80030f4:	4675      	mov	r5, lr
 80030f6:	6123      	str	r3, [r4, #16]
 80030f8:	f8cd 8000 	str.w	r8, [sp]
 80030fc:	463b      	mov	r3, r7
 80030fe:	aa03      	add	r2, sp, #12
 8003100:	4621      	mov	r1, r4
 8003102:	4630      	mov	r0, r6
 8003104:	f7ff fed8 	bl	8002eb8 <_printf_common>
 8003108:	3001      	adds	r0, #1
 800310a:	d020      	beq.n	800314e <_printf_i+0x16a>
 800310c:	462a      	mov	r2, r5
 800310e:	6923      	ldr	r3, [r4, #16]
 8003110:	4639      	mov	r1, r7
 8003112:	4630      	mov	r0, r6
 8003114:	47c0      	blx	r8
 8003116:	3001      	adds	r0, #1
 8003118:	d019      	beq.n	800314e <_printf_i+0x16a>
 800311a:	6822      	ldr	r2, [r4, #0]
 800311c:	9803      	ldr	r0, [sp, #12]
 800311e:	68e3      	ldr	r3, [r4, #12]
 8003120:	0792      	lsls	r2, r2, #30
 8003122:	d519      	bpl.n	8003158 <_printf_i+0x174>
 8003124:	1a1a      	subs	r2, r3, r0
 8003126:	2a00      	cmp	r2, #0
 8003128:	dd16      	ble.n	8003158 <_printf_i+0x174>
 800312a:	f104 0919 	add.w	r9, r4, #25
 800312e:	2500      	movs	r5, #0
 8003130:	e004      	b.n	800313c <_printf_i+0x158>
 8003132:	68e3      	ldr	r3, [r4, #12]
 8003134:	9803      	ldr	r0, [sp, #12]
 8003136:	1a1a      	subs	r2, r3, r0
 8003138:	42aa      	cmp	r2, r5
 800313a:	dd0d      	ble.n	8003158 <_printf_i+0x174>
 800313c:	2301      	movs	r3, #1
 800313e:	464a      	mov	r2, r9
 8003140:	4639      	mov	r1, r7
 8003142:	4630      	mov	r0, r6
 8003144:	47c0      	blx	r8
 8003146:	3001      	adds	r0, #1
 8003148:	f105 0501 	add.w	r5, r5, #1
 800314c:	d1f1      	bne.n	8003132 <_printf_i+0x14e>
 800314e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003152:	b005      	add	sp, #20
 8003154:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003158:	4298      	cmp	r0, r3
 800315a:	bfb8      	it	lt
 800315c:	4618      	movlt	r0, r3
 800315e:	b005      	add	sp, #20
 8003160:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003164:	6822      	ldr	r2, [r4, #0]
 8003166:	f022 0220 	bic.w	r2, r2, #32
 800316a:	6022      	str	r2, [r4, #0]
 800316c:	2210      	movs	r2, #16
 800316e:	e767      	b.n	8003040 <_printf_i+0x5c>
 8003170:	0650      	lsls	r0, r2, #25
 8003172:	bf48      	it	mi
 8003174:	b29b      	uxthmi	r3, r3
 8003176:	e75a      	b.n	800302e <_printf_i+0x4a>
 8003178:	0651      	lsls	r1, r2, #25
 800317a:	d5a5      	bpl.n	80030c8 <_printf_i+0xe4>
 800317c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003180:	6005      	str	r5, [r0, #0]
 8003182:	4619      	mov	r1, r3
 8003184:	e7a3      	b.n	80030ce <_printf_i+0xea>
 8003186:	6861      	ldr	r1, [r4, #4]
 8003188:	60a1      	str	r1, [r4, #8]
 800318a:	202d      	movs	r0, #45	; 0x2d
 800318c:	2900      	cmp	r1, #0
 800318e:	f1c3 0300 	rsb	r3, r3, #0
 8003192:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003196:	db02      	blt.n	800319e <_printf_i+0x1ba>
 8003198:	f022 0204 	bic.w	r2, r2, #4
 800319c:	6022      	str	r2, [r4, #0]
 800319e:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 8003278 <_printf_i+0x294>
 80031a2:	220a      	movs	r2, #10
 80031a4:	4675      	mov	r5, lr
 80031a6:	e000      	b.n	80031aa <_printf_i+0x1c6>
 80031a8:	460b      	mov	r3, r1
 80031aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80031ae:	fb02 3011 	mls	r0, r2, r1, r3
 80031b2:	4293      	cmp	r3, r2
 80031b4:	f81c 0000 	ldrb.w	r0, [ip, r0]
 80031b8:	f805 0d01 	strb.w	r0, [r5, #-1]!
 80031bc:	d2f4      	bcs.n	80031a8 <_printf_i+0x1c4>
 80031be:	2a08      	cmp	r2, #8
 80031c0:	f47f af54 	bne.w	800306c <_printf_i+0x88>
 80031c4:	6823      	ldr	r3, [r4, #0]
 80031c6:	07db      	lsls	r3, r3, #31
 80031c8:	f57f af50 	bpl.w	800306c <_printf_i+0x88>
 80031cc:	6862      	ldr	r2, [r4, #4]
 80031ce:	6923      	ldr	r3, [r4, #16]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	f73f af4b 	bgt.w	800306c <_printf_i+0x88>
 80031d6:	2330      	movs	r3, #48	; 0x30
 80031d8:	f805 3c01 	strb.w	r3, [r5, #-1]
 80031dc:	3d01      	subs	r5, #1
 80031de:	e745      	b.n	800306c <_printf_i+0x88>
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1df      	bne.n	80031a4 <_printf_i+0x1c0>
 80031e4:	f89c 3000 	ldrb.w	r3, [ip]
 80031e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80031ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031f0:	e739      	b.n	8003066 <_printf_i+0x82>
 80031f2:	6803      	ldr	r3, [r0, #0]
 80031f4:	6862      	ldr	r2, [r4, #4]
 80031f6:	1d19      	adds	r1, r3, #4
 80031f8:	6001      	str	r1, [r0, #0]
 80031fa:	681d      	ldr	r5, [r3, #0]
 80031fc:	2100      	movs	r1, #0
 80031fe:	4628      	mov	r0, r5
 8003200:	f000 fafe 	bl	8003800 <memchr>
 8003204:	2800      	cmp	r0, #0
 8003206:	d032      	beq.n	800326e <_printf_i+0x28a>
 8003208:	1b40      	subs	r0, r0, r5
 800320a:	6060      	str	r0, [r4, #4]
 800320c:	6120      	str	r0, [r4, #16]
 800320e:	2300      	movs	r3, #0
 8003210:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003214:	e770      	b.n	80030f8 <_printf_i+0x114>
 8003216:	6822      	ldr	r2, [r4, #0]
 8003218:	6803      	ldr	r3, [r0, #0]
 800321a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800321e:	f103 0504 	add.w	r5, r3, #4
 8003222:	d01a      	beq.n	800325a <_printf_i+0x276>
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6005      	str	r5, [r0, #0]
 8003228:	296f      	cmp	r1, #111	; 0x6f
 800322a:	bf0c      	ite	eq
 800322c:	2208      	moveq	r2, #8
 800322e:	220a      	movne	r2, #10
 8003230:	f8df c044 	ldr.w	ip, [pc, #68]	; 8003278 <_printf_i+0x294>
 8003234:	e704      	b.n	8003040 <_printf_i+0x5c>
 8003236:	2301      	movs	r3, #1
 8003238:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800323c:	6123      	str	r3, [r4, #16]
 800323e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003242:	e7e4      	b.n	800320e <_printf_i+0x22a>
 8003244:	6803      	ldr	r3, [r0, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	1d19      	adds	r1, r3, #4
 800324a:	2301      	movs	r3, #1
 800324c:	6001      	str	r1, [r0, #0]
 800324e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003252:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003256:	6123      	str	r3, [r4, #16]
 8003258:	e7d9      	b.n	800320e <_printf_i+0x22a>
 800325a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800325e:	bf0d      	iteet	eq
 8003260:	681b      	ldreq	r3, [r3, #0]
 8003262:	6005      	strne	r5, [r0, #0]
 8003264:	881b      	ldrhne	r3, [r3, #0]
 8003266:	6005      	streq	r5, [r0, #0]
 8003268:	e7de      	b.n	8003228 <_printf_i+0x244>
 800326a:	8019      	strh	r1, [r3, #0]
 800326c:	e741      	b.n	80030f2 <_printf_i+0x10e>
 800326e:	6860      	ldr	r0, [r4, #4]
 8003270:	e7cc      	b.n	800320c <_printf_i+0x228>
 8003272:	bf00      	nop
 8003274:	08006184 	.word	0x08006184
 8003278:	08006170 	.word	0x08006170

0800327c <_putc_r>:
 800327c:	b510      	push	{r4, lr}
 800327e:	4604      	mov	r4, r0
 8003280:	b082      	sub	sp, #8
 8003282:	b108      	cbz	r0, 8003288 <_putc_r+0xc>
 8003284:	6983      	ldr	r3, [r0, #24]
 8003286:	b1d3      	cbz	r3, 80032be <_putc_r+0x42>
 8003288:	4b19      	ldr	r3, [pc, #100]	; (80032f0 <_putc_r+0x74>)
 800328a:	429a      	cmp	r2, r3
 800328c:	d020      	beq.n	80032d0 <_putc_r+0x54>
 800328e:	4b19      	ldr	r3, [pc, #100]	; (80032f4 <_putc_r+0x78>)
 8003290:	429a      	cmp	r2, r3
 8003292:	d025      	beq.n	80032e0 <_putc_r+0x64>
 8003294:	4b18      	ldr	r3, [pc, #96]	; (80032f8 <_putc_r+0x7c>)
 8003296:	429a      	cmp	r2, r3
 8003298:	bf08      	it	eq
 800329a:	68e2      	ldreq	r2, [r4, #12]
 800329c:	6893      	ldr	r3, [r2, #8]
 800329e:	3b01      	subs	r3, #1
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	6093      	str	r3, [r2, #8]
 80032a4:	da1a      	bge.n	80032dc <_putc_r+0x60>
 80032a6:	6990      	ldr	r0, [r2, #24]
 80032a8:	4283      	cmp	r3, r0
 80032aa:	db1b      	blt.n	80032e4 <_putc_r+0x68>
 80032ac:	b2c8      	uxtb	r0, r1
 80032ae:	280a      	cmp	r0, #10
 80032b0:	d018      	beq.n	80032e4 <_putc_r+0x68>
 80032b2:	6813      	ldr	r3, [r2, #0]
 80032b4:	1c5c      	adds	r4, r3, #1
 80032b6:	6014      	str	r4, [r2, #0]
 80032b8:	7019      	strb	r1, [r3, #0]
 80032ba:	b002      	add	sp, #8
 80032bc:	bd10      	pop	{r4, pc}
 80032be:	e9cd 1200 	strd	r1, r2, [sp]
 80032c2:	f7ff fb3b 	bl	800293c <__sinit>
 80032c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80032ca:	4b09      	ldr	r3, [pc, #36]	; (80032f0 <_putc_r+0x74>)
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d1de      	bne.n	800328e <_putc_r+0x12>
 80032d0:	6862      	ldr	r2, [r4, #4]
 80032d2:	6893      	ldr	r3, [r2, #8]
 80032d4:	3b01      	subs	r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	6093      	str	r3, [r2, #8]
 80032da:	dbe4      	blt.n	80032a6 <_putc_r+0x2a>
 80032dc:	b2c8      	uxtb	r0, r1
 80032de:	e7e8      	b.n	80032b2 <_putc_r+0x36>
 80032e0:	68a2      	ldr	r2, [r4, #8]
 80032e2:	e7db      	b.n	800329c <_putc_r+0x20>
 80032e4:	4620      	mov	r0, r4
 80032e6:	b002      	add	sp, #8
 80032e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032ec:	f7ff b814 	b.w	8002318 <__swbuf_r>
 80032f0:	08005d90 	.word	0x08005d90
 80032f4:	08005d70 	.word	0x08005d70
 80032f8:	08005d50 	.word	0x08005d50

080032fc <putc>:
 80032fc:	4b1e      	ldr	r3, [pc, #120]	; (8003378 <putc+0x7c>)
 80032fe:	b570      	push	{r4, r5, r6, lr}
 8003300:	681d      	ldr	r5, [r3, #0]
 8003302:	4606      	mov	r6, r0
 8003304:	460c      	mov	r4, r1
 8003306:	b10d      	cbz	r5, 800330c <putc+0x10>
 8003308:	69ab      	ldr	r3, [r5, #24]
 800330a:	b1cb      	cbz	r3, 8003340 <putc+0x44>
 800330c:	4b1b      	ldr	r3, [pc, #108]	; (800337c <putc+0x80>)
 800330e:	429c      	cmp	r4, r3
 8003310:	d01c      	beq.n	800334c <putc+0x50>
 8003312:	4b1b      	ldr	r3, [pc, #108]	; (8003380 <putc+0x84>)
 8003314:	429c      	cmp	r4, r3
 8003316:	d025      	beq.n	8003364 <putc+0x68>
 8003318:	4b1a      	ldr	r3, [pc, #104]	; (8003384 <putc+0x88>)
 800331a:	429c      	cmp	r4, r3
 800331c:	bf08      	it	eq
 800331e:	68ec      	ldreq	r4, [r5, #12]
 8003320:	68a3      	ldr	r3, [r4, #8]
 8003322:	3b01      	subs	r3, #1
 8003324:	2b00      	cmp	r3, #0
 8003326:	60a3      	str	r3, [r4, #8]
 8003328:	da16      	bge.n	8003358 <putc+0x5c>
 800332a:	69a2      	ldr	r2, [r4, #24]
 800332c:	4293      	cmp	r3, r2
 800332e:	db1b      	blt.n	8003368 <putc+0x6c>
 8003330:	b2f0      	uxtb	r0, r6
 8003332:	280a      	cmp	r0, #10
 8003334:	d018      	beq.n	8003368 <putc+0x6c>
 8003336:	6823      	ldr	r3, [r4, #0]
 8003338:	1c5a      	adds	r2, r3, #1
 800333a:	6022      	str	r2, [r4, #0]
 800333c:	701e      	strb	r6, [r3, #0]
 800333e:	bd70      	pop	{r4, r5, r6, pc}
 8003340:	4628      	mov	r0, r5
 8003342:	f7ff fafb 	bl	800293c <__sinit>
 8003346:	4b0d      	ldr	r3, [pc, #52]	; (800337c <putc+0x80>)
 8003348:	429c      	cmp	r4, r3
 800334a:	d1e2      	bne.n	8003312 <putc+0x16>
 800334c:	686c      	ldr	r4, [r5, #4]
 800334e:	68a3      	ldr	r3, [r4, #8]
 8003350:	3b01      	subs	r3, #1
 8003352:	2b00      	cmp	r3, #0
 8003354:	60a3      	str	r3, [r4, #8]
 8003356:	dbe8      	blt.n	800332a <putc+0x2e>
 8003358:	6823      	ldr	r3, [r4, #0]
 800335a:	1c5a      	adds	r2, r3, #1
 800335c:	6022      	str	r2, [r4, #0]
 800335e:	701e      	strb	r6, [r3, #0]
 8003360:	b2f0      	uxtb	r0, r6
 8003362:	bd70      	pop	{r4, r5, r6, pc}
 8003364:	68ac      	ldr	r4, [r5, #8]
 8003366:	e7db      	b.n	8003320 <putc+0x24>
 8003368:	4622      	mov	r2, r4
 800336a:	4631      	mov	r1, r6
 800336c:	4628      	mov	r0, r5
 800336e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003372:	f7fe bfd1 	b.w	8002318 <__swbuf_r>
 8003376:	bf00      	nop
 8003378:	20000004 	.word	0x20000004
 800337c:	08005d90 	.word	0x08005d90
 8003380:	08005d70 	.word	0x08005d70
 8003384:	08005d50 	.word	0x08005d50

08003388 <__sread>:
 8003388:	b510      	push	{r4, lr}
 800338a:	460c      	mov	r4, r1
 800338c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003390:	f000 fb14 	bl	80039bc <_read_r>
 8003394:	2800      	cmp	r0, #0
 8003396:	db03      	blt.n	80033a0 <__sread+0x18>
 8003398:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800339a:	4403      	add	r3, r0
 800339c:	6563      	str	r3, [r4, #84]	; 0x54
 800339e:	bd10      	pop	{r4, pc}
 80033a0:	89a3      	ldrh	r3, [r4, #12]
 80033a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033a6:	81a3      	strh	r3, [r4, #12]
 80033a8:	bd10      	pop	{r4, pc}
 80033aa:	bf00      	nop

080033ac <__seofread>:
 80033ac:	2000      	movs	r0, #0
 80033ae:	4770      	bx	lr

080033b0 <__swrite>:
 80033b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033b4:	4616      	mov	r6, r2
 80033b6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80033ba:	461f      	mov	r7, r3
 80033bc:	05d3      	lsls	r3, r2, #23
 80033be:	460c      	mov	r4, r1
 80033c0:	4605      	mov	r5, r0
 80033c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033c6:	d409      	bmi.n	80033dc <__swrite+0x2c>
 80033c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033cc:	81a2      	strh	r2, [r4, #12]
 80033ce:	463b      	mov	r3, r7
 80033d0:	4632      	mov	r2, r6
 80033d2:	4628      	mov	r0, r5
 80033d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80033d8:	f000 b81e 	b.w	8003418 <_write_r>
 80033dc:	2200      	movs	r2, #0
 80033de:	2302      	movs	r3, #2
 80033e0:	f000 f9f4 	bl	80037cc <_lseek_r>
 80033e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80033e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033ec:	e7ec      	b.n	80033c8 <__swrite+0x18>
 80033ee:	bf00      	nop

080033f0 <__sseek>:
 80033f0:	b510      	push	{r4, lr}
 80033f2:	460c      	mov	r4, r1
 80033f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033f8:	f000 f9e8 	bl	80037cc <_lseek_r>
 80033fc:	89a3      	ldrh	r3, [r4, #12]
 80033fe:	1c42      	adds	r2, r0, #1
 8003400:	bf0e      	itee	eq
 8003402:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003406:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800340a:	6560      	strne	r0, [r4, #84]	; 0x54
 800340c:	81a3      	strh	r3, [r4, #12]
 800340e:	bd10      	pop	{r4, pc}

08003410 <__sclose>:
 8003410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003414:	f000 b81e 	b.w	8003454 <_close_r>

08003418 <_write_r>:
 8003418:	b570      	push	{r4, r5, r6, lr}
 800341a:	460d      	mov	r5, r1
 800341c:	4c08      	ldr	r4, [pc, #32]	; (8003440 <_write_r+0x28>)
 800341e:	4611      	mov	r1, r2
 8003420:	4606      	mov	r6, r0
 8003422:	461a      	mov	r2, r3
 8003424:	4628      	mov	r0, r5
 8003426:	2300      	movs	r3, #0
 8003428:	6023      	str	r3, [r4, #0]
 800342a:	f000 fbdb 	bl	8003be4 <_write>
 800342e:	1c43      	adds	r3, r0, #1
 8003430:	d000      	beq.n	8003434 <_write_r+0x1c>
 8003432:	bd70      	pop	{r4, r5, r6, pc}
 8003434:	6823      	ldr	r3, [r4, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0fb      	beq.n	8003432 <_write_r+0x1a>
 800343a:	6033      	str	r3, [r6, #0]
 800343c:	bd70      	pop	{r4, r5, r6, pc}
 800343e:	bf00      	nop
 8003440:	200001d8 	.word	0x200001d8

08003444 <abort>:
 8003444:	b508      	push	{r3, lr}
 8003446:	2006      	movs	r0, #6
 8003448:	f000 fb54 	bl	8003af4 <raise>
 800344c:	2001      	movs	r0, #1
 800344e:	f000 fbd1 	bl	8003bf4 <_exit>
 8003452:	bf00      	nop

08003454 <_close_r>:
 8003454:	b538      	push	{r3, r4, r5, lr}
 8003456:	4c07      	ldr	r4, [pc, #28]	; (8003474 <_close_r+0x20>)
 8003458:	2300      	movs	r3, #0
 800345a:	4605      	mov	r5, r0
 800345c:	4608      	mov	r0, r1
 800345e:	6023      	str	r3, [r4, #0]
 8003460:	f000 fb88 	bl	8003b74 <_close>
 8003464:	1c43      	adds	r3, r0, #1
 8003466:	d000      	beq.n	800346a <_close_r+0x16>
 8003468:	bd38      	pop	{r3, r4, r5, pc}
 800346a:	6823      	ldr	r3, [r4, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0fb      	beq.n	8003468 <_close_r+0x14>
 8003470:	602b      	str	r3, [r5, #0]
 8003472:	bd38      	pop	{r3, r4, r5, pc}
 8003474:	200001d8 	.word	0x200001d8

08003478 <_fstat_r>:
 8003478:	b538      	push	{r3, r4, r5, lr}
 800347a:	460b      	mov	r3, r1
 800347c:	4c07      	ldr	r4, [pc, #28]	; (800349c <_fstat_r+0x24>)
 800347e:	4605      	mov	r5, r0
 8003480:	4611      	mov	r1, r2
 8003482:	4618      	mov	r0, r3
 8003484:	2300      	movs	r3, #0
 8003486:	6023      	str	r3, [r4, #0]
 8003488:	f000 fb7c 	bl	8003b84 <_fstat>
 800348c:	1c43      	adds	r3, r0, #1
 800348e:	d000      	beq.n	8003492 <_fstat_r+0x1a>
 8003490:	bd38      	pop	{r3, r4, r5, pc}
 8003492:	6823      	ldr	r3, [r4, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0fb      	beq.n	8003490 <_fstat_r+0x18>
 8003498:	602b      	str	r3, [r5, #0]
 800349a:	bd38      	pop	{r3, r4, r5, pc}
 800349c:	200001d8 	.word	0x200001d8

080034a0 <__sfvwrite_r>:
 80034a0:	6893      	ldr	r3, [r2, #8]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 8102 	beq.w	80036ac <__sfvwrite_r+0x20c>
 80034a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034ac:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	460c      	mov	r4, r1
 80034b4:	0719      	lsls	r1, r3, #28
 80034b6:	b083      	sub	sp, #12
 80034b8:	4682      	mov	sl, r0
 80034ba:	4690      	mov	r8, r2
 80034bc:	d535      	bpl.n	800352a <__sfvwrite_r+0x8a>
 80034be:	6922      	ldr	r2, [r4, #16]
 80034c0:	b39a      	cbz	r2, 800352a <__sfvwrite_r+0x8a>
 80034c2:	f013 0202 	ands.w	r2, r3, #2
 80034c6:	f8d8 6000 	ldr.w	r6, [r8]
 80034ca:	d03d      	beq.n	8003548 <__sfvwrite_r+0xa8>
 80034cc:	2700      	movs	r7, #0
 80034ce:	f8d4 b028 	ldr.w	fp, [r4, #40]	; 0x28
 80034d2:	f8d4 c020 	ldr.w	ip, [r4, #32]
 80034d6:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 80037a4 <__sfvwrite_r+0x304>
 80034da:	463d      	mov	r5, r7
 80034dc:	454d      	cmp	r5, r9
 80034de:	462b      	mov	r3, r5
 80034e0:	463a      	mov	r2, r7
 80034e2:	bf28      	it	cs
 80034e4:	464b      	movcs	r3, r9
 80034e6:	4661      	mov	r1, ip
 80034e8:	4650      	mov	r0, sl
 80034ea:	b1d5      	cbz	r5, 8003522 <__sfvwrite_r+0x82>
 80034ec:	47d8      	blx	fp
 80034ee:	2800      	cmp	r0, #0
 80034f0:	f340 80d2 	ble.w	8003698 <__sfvwrite_r+0x1f8>
 80034f4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80034f8:	1a1b      	subs	r3, r3, r0
 80034fa:	4407      	add	r7, r0
 80034fc:	1a2d      	subs	r5, r5, r0
 80034fe:	f8c8 3008 	str.w	r3, [r8, #8]
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 80b7 	beq.w	8003676 <__sfvwrite_r+0x1d6>
 8003508:	f8d4 c020 	ldr.w	ip, [r4, #32]
 800350c:	f8d4 b028 	ldr.w	fp, [r4, #40]	; 0x28
 8003510:	454d      	cmp	r5, r9
 8003512:	462b      	mov	r3, r5
 8003514:	463a      	mov	r2, r7
 8003516:	bf28      	it	cs
 8003518:	464b      	movcs	r3, r9
 800351a:	4661      	mov	r1, ip
 800351c:	4650      	mov	r0, sl
 800351e:	2d00      	cmp	r5, #0
 8003520:	d1e4      	bne.n	80034ec <__sfvwrite_r+0x4c>
 8003522:	e9d6 7500 	ldrd	r7, r5, [r6]
 8003526:	3608      	adds	r6, #8
 8003528:	e7d8      	b.n	80034dc <__sfvwrite_r+0x3c>
 800352a:	4621      	mov	r1, r4
 800352c:	4650      	mov	r0, sl
 800352e:	f7fe ff53 	bl	80023d8 <__swsetup_r>
 8003532:	2800      	cmp	r0, #0
 8003534:	f040 8130 	bne.w	8003798 <__sfvwrite_r+0x2f8>
 8003538:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800353c:	f8d8 6000 	ldr.w	r6, [r8]
 8003540:	b29b      	uxth	r3, r3
 8003542:	f013 0202 	ands.w	r2, r3, #2
 8003546:	d1c1      	bne.n	80034cc <__sfvwrite_r+0x2c>
 8003548:	f013 0901 	ands.w	r9, r3, #1
 800354c:	f040 80b0 	bne.w	80036b0 <__sfvwrite_r+0x210>
 8003550:	68a7      	ldr	r7, [r4, #8]
 8003552:	6820      	ldr	r0, [r4, #0]
 8003554:	464d      	mov	r5, r9
 8003556:	2d00      	cmp	r5, #0
 8003558:	d054      	beq.n	8003604 <__sfvwrite_r+0x164>
 800355a:	059a      	lsls	r2, r3, #22
 800355c:	f140 80bc 	bpl.w	80036d8 <__sfvwrite_r+0x238>
 8003560:	42af      	cmp	r7, r5
 8003562:	46bb      	mov	fp, r7
 8003564:	f200 80e7 	bhi.w	8003736 <__sfvwrite_r+0x296>
 8003568:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800356c:	d02f      	beq.n	80035ce <__sfvwrite_r+0x12e>
 800356e:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
 8003572:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8003576:	eba0 0b01 	sub.w	fp, r0, r1
 800357a:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 800357e:	1c68      	adds	r0, r5, #1
 8003580:	107f      	asrs	r7, r7, #1
 8003582:	4458      	add	r0, fp
 8003584:	42b8      	cmp	r0, r7
 8003586:	463a      	mov	r2, r7
 8003588:	bf84      	itt	hi
 800358a:	4607      	movhi	r7, r0
 800358c:	463a      	movhi	r2, r7
 800358e:	055b      	lsls	r3, r3, #21
 8003590:	f140 80e9 	bpl.w	8003766 <__sfvwrite_r+0x2c6>
 8003594:	4611      	mov	r1, r2
 8003596:	4650      	mov	r0, sl
 8003598:	f7fe fa06 	bl	80019a8 <_malloc_r>
 800359c:	2800      	cmp	r0, #0
 800359e:	f000 80f5 	beq.w	800378c <__sfvwrite_r+0x2ec>
 80035a2:	465a      	mov	r2, fp
 80035a4:	6921      	ldr	r1, [r4, #16]
 80035a6:	9001      	str	r0, [sp, #4]
 80035a8:	f7fe f8b0 	bl	800170c <memcpy>
 80035ac:	89a2      	ldrh	r2, [r4, #12]
 80035ae:	9b01      	ldr	r3, [sp, #4]
 80035b0:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80035b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035b8:	81a2      	strh	r2, [r4, #12]
 80035ba:	eba7 020b 	sub.w	r2, r7, fp
 80035be:	eb03 000b 	add.w	r0, r3, fp
 80035c2:	6167      	str	r7, [r4, #20]
 80035c4:	6123      	str	r3, [r4, #16]
 80035c6:	6020      	str	r0, [r4, #0]
 80035c8:	60a2      	str	r2, [r4, #8]
 80035ca:	462f      	mov	r7, r5
 80035cc:	46ab      	mov	fp, r5
 80035ce:	465a      	mov	r2, fp
 80035d0:	4649      	mov	r1, r9
 80035d2:	f000 f965 	bl	80038a0 <memmove>
 80035d6:	68a2      	ldr	r2, [r4, #8]
 80035d8:	6823      	ldr	r3, [r4, #0]
 80035da:	1bd2      	subs	r2, r2, r7
 80035dc:	445b      	add	r3, fp
 80035de:	462f      	mov	r7, r5
 80035e0:	60a2      	str	r2, [r4, #8]
 80035e2:	6023      	str	r3, [r4, #0]
 80035e4:	2500      	movs	r5, #0
 80035e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80035ea:	1bdb      	subs	r3, r3, r7
 80035ec:	44b9      	add	r9, r7
 80035ee:	f8c8 3008 	str.w	r3, [r8, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d03f      	beq.n	8003676 <__sfvwrite_r+0x1d6>
 80035f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035fa:	68a7      	ldr	r7, [r4, #8]
 80035fc:	6820      	ldr	r0, [r4, #0]
 80035fe:	b29b      	uxth	r3, r3
 8003600:	2d00      	cmp	r5, #0
 8003602:	d1aa      	bne.n	800355a <__sfvwrite_r+0xba>
 8003604:	e9d6 9500 	ldrd	r9, r5, [r6]
 8003608:	3608      	adds	r6, #8
 800360a:	e7a4      	b.n	8003556 <__sfvwrite_r+0xb6>
 800360c:	f10b 0308 	add.w	r3, fp, #8
 8003610:	e953 6702 	ldrd	r6, r7, [r3, #-8]
 8003614:	469b      	mov	fp, r3
 8003616:	3308      	adds	r3, #8
 8003618:	2f00      	cmp	r7, #0
 800361a:	d0f9      	beq.n	8003610 <__sfvwrite_r+0x170>
 800361c:	463a      	mov	r2, r7
 800361e:	210a      	movs	r1, #10
 8003620:	4630      	mov	r0, r6
 8003622:	f000 f8ed 	bl	8003800 <memchr>
 8003626:	2800      	cmp	r0, #0
 8003628:	d053      	beq.n	80036d2 <__sfvwrite_r+0x232>
 800362a:	3001      	adds	r0, #1
 800362c:	eba0 0906 	sub.w	r9, r0, r6
 8003630:	464b      	mov	r3, r9
 8003632:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 8003636:	6820      	ldr	r0, [r4, #0]
 8003638:	42bb      	cmp	r3, r7
 800363a:	bf28      	it	cs
 800363c:	463b      	movcs	r3, r7
 800363e:	4288      	cmp	r0, r1
 8003640:	d903      	bls.n	800364a <__sfvwrite_r+0x1aa>
 8003642:	68a5      	ldr	r5, [r4, #8]
 8003644:	4415      	add	r5, r2
 8003646:	42ab      	cmp	r3, r5
 8003648:	dc19      	bgt.n	800367e <__sfvwrite_r+0x1de>
 800364a:	429a      	cmp	r2, r3
 800364c:	dc7d      	bgt.n	800374a <__sfvwrite_r+0x2aa>
 800364e:	4613      	mov	r3, r2
 8003650:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8003652:	6a21      	ldr	r1, [r4, #32]
 8003654:	4632      	mov	r2, r6
 8003656:	4650      	mov	r0, sl
 8003658:	47a8      	blx	r5
 800365a:	1e05      	subs	r5, r0, #0
 800365c:	dd1c      	ble.n	8003698 <__sfvwrite_r+0x1f8>
 800365e:	ebb9 0905 	subs.w	r9, r9, r5
 8003662:	d06b      	beq.n	800373c <__sfvwrite_r+0x29c>
 8003664:	2001      	movs	r0, #1
 8003666:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800366a:	1b5b      	subs	r3, r3, r5
 800366c:	442e      	add	r6, r5
 800366e:	1b7f      	subs	r7, r7, r5
 8003670:	f8c8 3008 	str.w	r3, [r8, #8]
 8003674:	bb13      	cbnz	r3, 80036bc <__sfvwrite_r+0x21c>
 8003676:	2000      	movs	r0, #0
 8003678:	b003      	add	sp, #12
 800367a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800367e:	4631      	mov	r1, r6
 8003680:	462a      	mov	r2, r5
 8003682:	f000 f90d 	bl	80038a0 <memmove>
 8003686:	6823      	ldr	r3, [r4, #0]
 8003688:	442b      	add	r3, r5
 800368a:	6023      	str	r3, [r4, #0]
 800368c:	4621      	mov	r1, r4
 800368e:	4650      	mov	r0, sl
 8003690:	f7ff f82a 	bl	80026e8 <_fflush_r>
 8003694:	2800      	cmp	r0, #0
 8003696:	d0e2      	beq.n	800365e <__sfvwrite_r+0x1be>
 8003698:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800369c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036a4:	81a3      	strh	r3, [r4, #12]
 80036a6:	b003      	add	sp, #12
 80036a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036ac:	2000      	movs	r0, #0
 80036ae:	4770      	bx	lr
 80036b0:	4633      	mov	r3, r6
 80036b2:	4691      	mov	r9, r2
 80036b4:	4610      	mov	r0, r2
 80036b6:	4617      	mov	r7, r2
 80036b8:	464e      	mov	r6, r9
 80036ba:	469b      	mov	fp, r3
 80036bc:	2f00      	cmp	r7, #0
 80036be:	d0a5      	beq.n	800360c <__sfvwrite_r+0x16c>
 80036c0:	2800      	cmp	r0, #0
 80036c2:	d1b5      	bne.n	8003630 <__sfvwrite_r+0x190>
 80036c4:	463a      	mov	r2, r7
 80036c6:	210a      	movs	r1, #10
 80036c8:	4630      	mov	r0, r6
 80036ca:	f000 f899 	bl	8003800 <memchr>
 80036ce:	2800      	cmp	r0, #0
 80036d0:	d1ab      	bne.n	800362a <__sfvwrite_r+0x18a>
 80036d2:	1c7b      	adds	r3, r7, #1
 80036d4:	4699      	mov	r9, r3
 80036d6:	e7ac      	b.n	8003632 <__sfvwrite_r+0x192>
 80036d8:	6923      	ldr	r3, [r4, #16]
 80036da:	4283      	cmp	r3, r0
 80036dc:	d315      	bcc.n	800370a <__sfvwrite_r+0x26a>
 80036de:	6961      	ldr	r1, [r4, #20]
 80036e0:	42a9      	cmp	r1, r5
 80036e2:	d812      	bhi.n	800370a <__sfvwrite_r+0x26a>
 80036e4:	4b2e      	ldr	r3, [pc, #184]	; (80037a0 <__sfvwrite_r+0x300>)
 80036e6:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80036e8:	429d      	cmp	r5, r3
 80036ea:	bf94      	ite	ls
 80036ec:	462b      	movls	r3, r5
 80036ee:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
 80036f2:	464a      	mov	r2, r9
 80036f4:	fb93 f3f1 	sdiv	r3, r3, r1
 80036f8:	4650      	mov	r0, sl
 80036fa:	fb01 f303 	mul.w	r3, r1, r3
 80036fe:	6a21      	ldr	r1, [r4, #32]
 8003700:	47b8      	blx	r7
 8003702:	1e07      	subs	r7, r0, #0
 8003704:	ddc8      	ble.n	8003698 <__sfvwrite_r+0x1f8>
 8003706:	1bed      	subs	r5, r5, r7
 8003708:	e76d      	b.n	80035e6 <__sfvwrite_r+0x146>
 800370a:	42af      	cmp	r7, r5
 800370c:	bf28      	it	cs
 800370e:	462f      	movcs	r7, r5
 8003710:	463a      	mov	r2, r7
 8003712:	4649      	mov	r1, r9
 8003714:	f000 f8c4 	bl	80038a0 <memmove>
 8003718:	68a3      	ldr	r3, [r4, #8]
 800371a:	6822      	ldr	r2, [r4, #0]
 800371c:	1bdb      	subs	r3, r3, r7
 800371e:	443a      	add	r2, r7
 8003720:	60a3      	str	r3, [r4, #8]
 8003722:	6022      	str	r2, [r4, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1ee      	bne.n	8003706 <__sfvwrite_r+0x266>
 8003728:	4621      	mov	r1, r4
 800372a:	4650      	mov	r0, sl
 800372c:	f7fe ffdc 	bl	80026e8 <_fflush_r>
 8003730:	2800      	cmp	r0, #0
 8003732:	d0e8      	beq.n	8003706 <__sfvwrite_r+0x266>
 8003734:	e7b0      	b.n	8003698 <__sfvwrite_r+0x1f8>
 8003736:	462f      	mov	r7, r5
 8003738:	46ab      	mov	fp, r5
 800373a:	e748      	b.n	80035ce <__sfvwrite_r+0x12e>
 800373c:	4621      	mov	r1, r4
 800373e:	4650      	mov	r0, sl
 8003740:	f7fe ffd2 	bl	80026e8 <_fflush_r>
 8003744:	2800      	cmp	r0, #0
 8003746:	d08e      	beq.n	8003666 <__sfvwrite_r+0x1c6>
 8003748:	e7a6      	b.n	8003698 <__sfvwrite_r+0x1f8>
 800374a:	461a      	mov	r2, r3
 800374c:	4631      	mov	r1, r6
 800374e:	9301      	str	r3, [sp, #4]
 8003750:	f000 f8a6 	bl	80038a0 <memmove>
 8003754:	9b01      	ldr	r3, [sp, #4]
 8003756:	68a1      	ldr	r1, [r4, #8]
 8003758:	6822      	ldr	r2, [r4, #0]
 800375a:	1ac9      	subs	r1, r1, r3
 800375c:	441a      	add	r2, r3
 800375e:	60a1      	str	r1, [r4, #8]
 8003760:	6022      	str	r2, [r4, #0]
 8003762:	461d      	mov	r5, r3
 8003764:	e77b      	b.n	800365e <__sfvwrite_r+0x1be>
 8003766:	4650      	mov	r0, sl
 8003768:	f000 f902 	bl	8003970 <_realloc_r>
 800376c:	4603      	mov	r3, r0
 800376e:	2800      	cmp	r0, #0
 8003770:	f47f af23 	bne.w	80035ba <__sfvwrite_r+0x11a>
 8003774:	6921      	ldr	r1, [r4, #16]
 8003776:	4650      	mov	r0, sl
 8003778:	f7fe f8c0 	bl	80018fc <_free_r>
 800377c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003780:	220c      	movs	r2, #12
 8003782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003786:	f8ca 2000 	str.w	r2, [sl]
 800378a:	e787      	b.n	800369c <__sfvwrite_r+0x1fc>
 800378c:	230c      	movs	r3, #12
 800378e:	f8ca 3000 	str.w	r3, [sl]
 8003792:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003796:	e781      	b.n	800369c <__sfvwrite_r+0x1fc>
 8003798:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800379c:	e76c      	b.n	8003678 <__sfvwrite_r+0x1d8>
 800379e:	bf00      	nop
 80037a0:	7ffffffe 	.word	0x7ffffffe
 80037a4:	7ffffc00 	.word	0x7ffffc00

080037a8 <_isatty_r>:
 80037a8:	b538      	push	{r3, r4, r5, lr}
 80037aa:	4c07      	ldr	r4, [pc, #28]	; (80037c8 <_isatty_r+0x20>)
 80037ac:	2300      	movs	r3, #0
 80037ae:	4605      	mov	r5, r0
 80037b0:	4608      	mov	r0, r1
 80037b2:	6023      	str	r3, [r4, #0]
 80037b4:	f000 f9f6 	bl	8003ba4 <_isatty>
 80037b8:	1c43      	adds	r3, r0, #1
 80037ba:	d000      	beq.n	80037be <_isatty_r+0x16>
 80037bc:	bd38      	pop	{r3, r4, r5, pc}
 80037be:	6823      	ldr	r3, [r4, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0fb      	beq.n	80037bc <_isatty_r+0x14>
 80037c4:	602b      	str	r3, [r5, #0]
 80037c6:	bd38      	pop	{r3, r4, r5, pc}
 80037c8:	200001d8 	.word	0x200001d8

080037cc <_lseek_r>:
 80037cc:	b570      	push	{r4, r5, r6, lr}
 80037ce:	460d      	mov	r5, r1
 80037d0:	4c08      	ldr	r4, [pc, #32]	; (80037f4 <_lseek_r+0x28>)
 80037d2:	4611      	mov	r1, r2
 80037d4:	4606      	mov	r6, r0
 80037d6:	461a      	mov	r2, r3
 80037d8:	4628      	mov	r0, r5
 80037da:	2300      	movs	r3, #0
 80037dc:	6023      	str	r3, [r4, #0]
 80037de:	f000 f9f1 	bl	8003bc4 <_lseek>
 80037e2:	1c43      	adds	r3, r0, #1
 80037e4:	d000      	beq.n	80037e8 <_lseek_r+0x1c>
 80037e6:	bd70      	pop	{r4, r5, r6, pc}
 80037e8:	6823      	ldr	r3, [r4, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0fb      	beq.n	80037e6 <_lseek_r+0x1a>
 80037ee:	6033      	str	r3, [r6, #0]
 80037f0:	bd70      	pop	{r4, r5, r6, pc}
 80037f2:	bf00      	nop
 80037f4:	200001d8 	.word	0x200001d8
 80037f8:	00000000 	.word	0x00000000
 80037fc:	00000000 	.word	0x00000000

08003800 <memchr>:
 8003800:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8003804:	2a10      	cmp	r2, #16
 8003806:	db2b      	blt.n	8003860 <memchr+0x60>
 8003808:	f010 0f07 	tst.w	r0, #7
 800380c:	d008      	beq.n	8003820 <memchr+0x20>
 800380e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003812:	3a01      	subs	r2, #1
 8003814:	428b      	cmp	r3, r1
 8003816:	d02d      	beq.n	8003874 <memchr+0x74>
 8003818:	f010 0f07 	tst.w	r0, #7
 800381c:	b342      	cbz	r2, 8003870 <memchr+0x70>
 800381e:	d1f6      	bne.n	800380e <memchr+0xe>
 8003820:	b4f0      	push	{r4, r5, r6, r7}
 8003822:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8003826:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800382a:	f022 0407 	bic.w	r4, r2, #7
 800382e:	f07f 0700 	mvns.w	r7, #0
 8003832:	2300      	movs	r3, #0
 8003834:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8003838:	3c08      	subs	r4, #8
 800383a:	ea85 0501 	eor.w	r5, r5, r1
 800383e:	ea86 0601 	eor.w	r6, r6, r1
 8003842:	fa85 f547 	uadd8	r5, r5, r7
 8003846:	faa3 f587 	sel	r5, r3, r7
 800384a:	fa86 f647 	uadd8	r6, r6, r7
 800384e:	faa5 f687 	sel	r6, r5, r7
 8003852:	b98e      	cbnz	r6, 8003878 <memchr+0x78>
 8003854:	d1ee      	bne.n	8003834 <memchr+0x34>
 8003856:	bcf0      	pop	{r4, r5, r6, r7}
 8003858:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800385c:	f002 0207 	and.w	r2, r2, #7
 8003860:	b132      	cbz	r2, 8003870 <memchr+0x70>
 8003862:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003866:	3a01      	subs	r2, #1
 8003868:	ea83 0301 	eor.w	r3, r3, r1
 800386c:	b113      	cbz	r3, 8003874 <memchr+0x74>
 800386e:	d1f8      	bne.n	8003862 <memchr+0x62>
 8003870:	2000      	movs	r0, #0
 8003872:	4770      	bx	lr
 8003874:	3801      	subs	r0, #1
 8003876:	4770      	bx	lr
 8003878:	2d00      	cmp	r5, #0
 800387a:	bf06      	itte	eq
 800387c:	4635      	moveq	r5, r6
 800387e:	3803      	subeq	r0, #3
 8003880:	3807      	subne	r0, #7
 8003882:	f015 0f01 	tst.w	r5, #1
 8003886:	d107      	bne.n	8003898 <memchr+0x98>
 8003888:	3001      	adds	r0, #1
 800388a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800388e:	bf02      	ittt	eq
 8003890:	3001      	addeq	r0, #1
 8003892:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8003896:	3001      	addeq	r0, #1
 8003898:	bcf0      	pop	{r4, r5, r6, r7}
 800389a:	3801      	subs	r0, #1
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop

080038a0 <memmove>:
 80038a0:	4288      	cmp	r0, r1
 80038a2:	b4f0      	push	{r4, r5, r6, r7}
 80038a4:	d90d      	bls.n	80038c2 <memmove+0x22>
 80038a6:	188b      	adds	r3, r1, r2
 80038a8:	4283      	cmp	r3, r0
 80038aa:	d90a      	bls.n	80038c2 <memmove+0x22>
 80038ac:	1884      	adds	r4, r0, r2
 80038ae:	b132      	cbz	r2, 80038be <memmove+0x1e>
 80038b0:	4622      	mov	r2, r4
 80038b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80038b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80038ba:	4299      	cmp	r1, r3
 80038bc:	d1f9      	bne.n	80038b2 <memmove+0x12>
 80038be:	bcf0      	pop	{r4, r5, r6, r7}
 80038c0:	4770      	bx	lr
 80038c2:	2a0f      	cmp	r2, #15
 80038c4:	d80e      	bhi.n	80038e4 <memmove+0x44>
 80038c6:	4603      	mov	r3, r0
 80038c8:	1e54      	subs	r4, r2, #1
 80038ca:	2a00      	cmp	r2, #0
 80038cc:	d0f7      	beq.n	80038be <memmove+0x1e>
 80038ce:	3401      	adds	r4, #1
 80038d0:	440c      	add	r4, r1
 80038d2:	3b01      	subs	r3, #1
 80038d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038d8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80038dc:	42a1      	cmp	r1, r4
 80038de:	d1f9      	bne.n	80038d4 <memmove+0x34>
 80038e0:	bcf0      	pop	{r4, r5, r6, r7}
 80038e2:	4770      	bx	lr
 80038e4:	ea40 0301 	orr.w	r3, r0, r1
 80038e8:	079b      	lsls	r3, r3, #30
 80038ea:	d13b      	bne.n	8003964 <memmove+0xc4>
 80038ec:	f1a2 0710 	sub.w	r7, r2, #16
 80038f0:	093f      	lsrs	r7, r7, #4
 80038f2:	f101 0620 	add.w	r6, r1, #32
 80038f6:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 80038fa:	f101 0310 	add.w	r3, r1, #16
 80038fe:	f100 0410 	add.w	r4, r0, #16
 8003902:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8003906:	f844 5c10 	str.w	r5, [r4, #-16]
 800390a:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 800390e:	f844 5c0c 	str.w	r5, [r4, #-12]
 8003912:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8003916:	f844 5c08 	str.w	r5, [r4, #-8]
 800391a:	f853 5c04 	ldr.w	r5, [r3, #-4]
 800391e:	f844 5c04 	str.w	r5, [r4, #-4]
 8003922:	3310      	adds	r3, #16
 8003924:	42b3      	cmp	r3, r6
 8003926:	f104 0410 	add.w	r4, r4, #16
 800392a:	d1ea      	bne.n	8003902 <memmove+0x62>
 800392c:	1c7b      	adds	r3, r7, #1
 800392e:	011b      	lsls	r3, r3, #4
 8003930:	f012 0f0c 	tst.w	r2, #12
 8003934:	4419      	add	r1, r3
 8003936:	f002 050f 	and.w	r5, r2, #15
 800393a:	4403      	add	r3, r0
 800393c:	d015      	beq.n	800396a <memmove+0xca>
 800393e:	3d04      	subs	r5, #4
 8003940:	08ad      	lsrs	r5, r5, #2
 8003942:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
 8003946:	1f1c      	subs	r4, r3, #4
 8003948:	460e      	mov	r6, r1
 800394a:	f856 7b04 	ldr.w	r7, [r6], #4
 800394e:	f844 7f04 	str.w	r7, [r4, #4]!
 8003952:	4564      	cmp	r4, ip
 8003954:	d1f9      	bne.n	800394a <memmove+0xaa>
 8003956:	3501      	adds	r5, #1
 8003958:	00ad      	lsls	r5, r5, #2
 800395a:	442b      	add	r3, r5
 800395c:	4429      	add	r1, r5
 800395e:	f002 0203 	and.w	r2, r2, #3
 8003962:	e7b1      	b.n	80038c8 <memmove+0x28>
 8003964:	1e54      	subs	r4, r2, #1
 8003966:	4603      	mov	r3, r0
 8003968:	e7b1      	b.n	80038ce <memmove+0x2e>
 800396a:	462a      	mov	r2, r5
 800396c:	e7ac      	b.n	80038c8 <memmove+0x28>
 800396e:	bf00      	nop

08003970 <_realloc_r>:
 8003970:	b309      	cbz	r1, 80039b6 <_realloc_r+0x46>
 8003972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003974:	4614      	mov	r4, r2
 8003976:	b1ca      	cbz	r2, 80039ac <_realloc_r+0x3c>
 8003978:	4606      	mov	r6, r0
 800397a:	460d      	mov	r5, r1
 800397c:	f000 f8f2 	bl	8003b64 <_malloc_usable_size_r>
 8003980:	42a0      	cmp	r0, r4
 8003982:	d302      	bcc.n	800398a <_realloc_r+0x1a>
 8003984:	462f      	mov	r7, r5
 8003986:	4638      	mov	r0, r7
 8003988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800398a:	4621      	mov	r1, r4
 800398c:	4630      	mov	r0, r6
 800398e:	f7fe f80b 	bl	80019a8 <_malloc_r>
 8003992:	4607      	mov	r7, r0
 8003994:	2800      	cmp	r0, #0
 8003996:	d0f6      	beq.n	8003986 <_realloc_r+0x16>
 8003998:	4622      	mov	r2, r4
 800399a:	4629      	mov	r1, r5
 800399c:	f7fd feb6 	bl	800170c <memcpy>
 80039a0:	4630      	mov	r0, r6
 80039a2:	4629      	mov	r1, r5
 80039a4:	f7fd ffaa 	bl	80018fc <_free_r>
 80039a8:	4638      	mov	r0, r7
 80039aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039ac:	4627      	mov	r7, r4
 80039ae:	f7fd ffa5 	bl	80018fc <_free_r>
 80039b2:	4638      	mov	r0, r7
 80039b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039b6:	4611      	mov	r1, r2
 80039b8:	f7fd bff6 	b.w	80019a8 <_malloc_r>

080039bc <_read_r>:
 80039bc:	b570      	push	{r4, r5, r6, lr}
 80039be:	460d      	mov	r5, r1
 80039c0:	4c08      	ldr	r4, [pc, #32]	; (80039e4 <_read_r+0x28>)
 80039c2:	4611      	mov	r1, r2
 80039c4:	4606      	mov	r6, r0
 80039c6:	461a      	mov	r2, r3
 80039c8:	4628      	mov	r0, r5
 80039ca:	2300      	movs	r3, #0
 80039cc:	6023      	str	r3, [r4, #0]
 80039ce:	f000 f901 	bl	8003bd4 <_read>
 80039d2:	1c43      	adds	r3, r0, #1
 80039d4:	d000      	beq.n	80039d8 <_read_r+0x1c>
 80039d6:	bd70      	pop	{r4, r5, r6, pc}
 80039d8:	6823      	ldr	r3, [r4, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0fb      	beq.n	80039d6 <_read_r+0x1a>
 80039de:	6033      	str	r3, [r6, #0]
 80039e0:	bd70      	pop	{r4, r5, r6, pc}
 80039e2:	bf00      	nop
 80039e4:	200001d8 	.word	0x200001d8

080039e8 <_init_signal_r.part.0>:
 80039e8:	b510      	push	{r4, lr}
 80039ea:	2180      	movs	r1, #128	; 0x80
 80039ec:	4604      	mov	r4, r0
 80039ee:	f7fd ffdb 	bl	80019a8 <_malloc_r>
 80039f2:	6460      	str	r0, [r4, #68]	; 0x44
 80039f4:	b140      	cbz	r0, 8003a08 <_init_signal_r.part.0+0x20>
 80039f6:	1f03      	subs	r3, r0, #4
 80039f8:	2200      	movs	r2, #0
 80039fa:	307c      	adds	r0, #124	; 0x7c
 80039fc:	f843 2f04 	str.w	r2, [r3, #4]!
 8003a00:	4283      	cmp	r3, r0
 8003a02:	d1fb      	bne.n	80039fc <_init_signal_r.part.0+0x14>
 8003a04:	2000      	movs	r0, #0
 8003a06:	bd10      	pop	{r4, pc}
 8003a08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a0c:	bd10      	pop	{r4, pc}
 8003a0e:	bf00      	nop

08003a10 <_init_signal_r>:
 8003a10:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003a12:	b10b      	cbz	r3, 8003a18 <_init_signal_r+0x8>
 8003a14:	2000      	movs	r0, #0
 8003a16:	4770      	bx	lr
 8003a18:	e7e6      	b.n	80039e8 <_init_signal_r.part.0>
 8003a1a:	bf00      	nop

08003a1c <_signal_r>:
 8003a1c:	291f      	cmp	r1, #31
 8003a1e:	b570      	push	{r4, r5, r6, lr}
 8003a20:	4605      	mov	r5, r0
 8003a22:	d808      	bhi.n	8003a36 <_signal_r+0x1a>
 8003a24:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003a26:	4616      	mov	r6, r2
 8003a28:	460c      	mov	r4, r1
 8003a2a:	b14b      	cbz	r3, 8003a40 <_signal_r+0x24>
 8003a2c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003a30:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8003a34:	bd70      	pop	{r4, r5, r6, pc}
 8003a36:	2216      	movs	r2, #22
 8003a38:	6002      	str	r2, [r0, #0]
 8003a3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a3e:	bd70      	pop	{r4, r5, r6, pc}
 8003a40:	f7ff ffd2 	bl	80039e8 <_init_signal_r.part.0>
 8003a44:	b908      	cbnz	r0, 8003a4a <_signal_r+0x2e>
 8003a46:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003a48:	e7f0      	b.n	8003a2c <_signal_r+0x10>
 8003a4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a4e:	bd70      	pop	{r4, r5, r6, pc}

08003a50 <_raise_r>:
 8003a50:	291f      	cmp	r1, #31
 8003a52:	b538      	push	{r3, r4, r5, lr}
 8003a54:	d821      	bhi.n	8003a9a <_raise_r+0x4a>
 8003a56:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003a58:	4605      	mov	r5, r0
 8003a5a:	460c      	mov	r4, r1
 8003a5c:	b16a      	cbz	r2, 8003a7a <_raise_r+0x2a>
 8003a5e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003a62:	b153      	cbz	r3, 8003a7a <_raise_r+0x2a>
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d016      	beq.n	8003a96 <_raise_r+0x46>
 8003a68:	1c59      	adds	r1, r3, #1
 8003a6a:	d010      	beq.n	8003a8e <_raise_r+0x3e>
 8003a6c:	2500      	movs	r5, #0
 8003a6e:	4620      	mov	r0, r4
 8003a70:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 8003a74:	4798      	blx	r3
 8003a76:	4628      	mov	r0, r5
 8003a78:	bd38      	pop	{r3, r4, r5, pc}
 8003a7a:	4628      	mov	r0, r5
 8003a7c:	f000 f870 	bl	8003b60 <_getpid_r>
 8003a80:	4622      	mov	r2, r4
 8003a82:	4601      	mov	r1, r0
 8003a84:	4628      	mov	r0, r5
 8003a86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a8a:	f000 b855 	b.w	8003b38 <_kill_r>
 8003a8e:	2316      	movs	r3, #22
 8003a90:	6003      	str	r3, [r0, #0]
 8003a92:	2001      	movs	r0, #1
 8003a94:	bd38      	pop	{r3, r4, r5, pc}
 8003a96:	2000      	movs	r0, #0
 8003a98:	bd38      	pop	{r3, r4, r5, pc}
 8003a9a:	2316      	movs	r3, #22
 8003a9c:	6003      	str	r3, [r0, #0]
 8003a9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003aa2:	bd38      	pop	{r3, r4, r5, pc}

08003aa4 <__sigtramp_r>:
 8003aa4:	291f      	cmp	r1, #31
 8003aa6:	d821      	bhi.n	8003aec <__sigtramp_r+0x48>
 8003aa8:	b538      	push	{r3, r4, r5, lr}
 8003aaa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003aac:	4605      	mov	r5, r0
 8003aae:	460c      	mov	r4, r1
 8003ab0:	b183      	cbz	r3, 8003ad4 <__sigtramp_r+0x30>
 8003ab2:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 8003ab6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003aba:	b14a      	cbz	r2, 8003ad0 <__sigtramp_r+0x2c>
 8003abc:	1c51      	adds	r1, r2, #1
 8003abe:	d010      	beq.n	8003ae2 <__sigtramp_r+0x3e>
 8003ac0:	2a01      	cmp	r2, #1
 8003ac2:	d00c      	beq.n	8003ade <__sigtramp_r+0x3a>
 8003ac4:	2500      	movs	r5, #0
 8003ac6:	4620      	mov	r0, r4
 8003ac8:	601d      	str	r5, [r3, #0]
 8003aca:	4790      	blx	r2
 8003acc:	4628      	mov	r0, r5
 8003ace:	bd38      	pop	{r3, r4, r5, pc}
 8003ad0:	2001      	movs	r0, #1
 8003ad2:	bd38      	pop	{r3, r4, r5, pc}
 8003ad4:	f7ff ff88 	bl	80039e8 <_init_signal_r.part.0>
 8003ad8:	b928      	cbnz	r0, 8003ae6 <__sigtramp_r+0x42>
 8003ada:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003adc:	e7e9      	b.n	8003ab2 <__sigtramp_r+0xe>
 8003ade:	2003      	movs	r0, #3
 8003ae0:	bd38      	pop	{r3, r4, r5, pc}
 8003ae2:	2002      	movs	r0, #2
 8003ae4:	bd38      	pop	{r3, r4, r5, pc}
 8003ae6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003aea:	bd38      	pop	{r3, r4, r5, pc}
 8003aec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop

08003af4 <raise>:
 8003af4:	4b02      	ldr	r3, [pc, #8]	; (8003b00 <raise+0xc>)
 8003af6:	4601      	mov	r1, r0
 8003af8:	6818      	ldr	r0, [r3, #0]
 8003afa:	f7ff bfa9 	b.w	8003a50 <_raise_r>
 8003afe:	bf00      	nop
 8003b00:	20000004 	.word	0x20000004

08003b04 <signal>:
 8003b04:	4b02      	ldr	r3, [pc, #8]	; (8003b10 <signal+0xc>)
 8003b06:	460a      	mov	r2, r1
 8003b08:	4601      	mov	r1, r0
 8003b0a:	6818      	ldr	r0, [r3, #0]
 8003b0c:	f7ff bf86 	b.w	8003a1c <_signal_r>
 8003b10:	20000004 	.word	0x20000004

08003b14 <_init_signal>:
 8003b14:	4b03      	ldr	r3, [pc, #12]	; (8003b24 <_init_signal+0x10>)
 8003b16:	6818      	ldr	r0, [r3, #0]
 8003b18:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003b1a:	b10b      	cbz	r3, 8003b20 <_init_signal+0xc>
 8003b1c:	2000      	movs	r0, #0
 8003b1e:	4770      	bx	lr
 8003b20:	e762      	b.n	80039e8 <_init_signal_r.part.0>
 8003b22:	bf00      	nop
 8003b24:	20000004 	.word	0x20000004

08003b28 <__sigtramp>:
 8003b28:	4b02      	ldr	r3, [pc, #8]	; (8003b34 <__sigtramp+0xc>)
 8003b2a:	4601      	mov	r1, r0
 8003b2c:	6818      	ldr	r0, [r3, #0]
 8003b2e:	f7ff bfb9 	b.w	8003aa4 <__sigtramp_r>
 8003b32:	bf00      	nop
 8003b34:	20000004 	.word	0x20000004

08003b38 <_kill_r>:
 8003b38:	b538      	push	{r3, r4, r5, lr}
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	4c07      	ldr	r4, [pc, #28]	; (8003b5c <_kill_r+0x24>)
 8003b3e:	4605      	mov	r5, r0
 8003b40:	4611      	mov	r1, r2
 8003b42:	4618      	mov	r0, r3
 8003b44:	2300      	movs	r3, #0
 8003b46:	6023      	str	r3, [r4, #0]
 8003b48:	f000 f834 	bl	8003bb4 <_kill>
 8003b4c:	1c43      	adds	r3, r0, #1
 8003b4e:	d000      	beq.n	8003b52 <_kill_r+0x1a>
 8003b50:	bd38      	pop	{r3, r4, r5, pc}
 8003b52:	6823      	ldr	r3, [r4, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0fb      	beq.n	8003b50 <_kill_r+0x18>
 8003b58:	602b      	str	r3, [r5, #0]
 8003b5a:	bd38      	pop	{r3, r4, r5, pc}
 8003b5c:	200001d8 	.word	0x200001d8

08003b60 <_getpid_r>:
 8003b60:	f000 b818 	b.w	8003b94 <_getpid>

08003b64 <_malloc_usable_size_r>:
 8003b64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b68:	1f18      	subs	r0, r3, #4
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	bfbc      	itt	lt
 8003b6e:	580b      	ldrlt	r3, [r1, r0]
 8003b70:	18c0      	addlt	r0, r0, r3
 8003b72:	4770      	bx	lr

08003b74 <_close>:
 8003b74:	4b02      	ldr	r3, [pc, #8]	; (8003b80 <_close+0xc>)
 8003b76:	2258      	movs	r2, #88	; 0x58
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b7e:	4770      	bx	lr
 8003b80:	200001d8 	.word	0x200001d8

08003b84 <_fstat>:
 8003b84:	4b02      	ldr	r3, [pc, #8]	; (8003b90 <_fstat+0xc>)
 8003b86:	2258      	movs	r2, #88	; 0x58
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b8e:	4770      	bx	lr
 8003b90:	200001d8 	.word	0x200001d8

08003b94 <_getpid>:
 8003b94:	4b02      	ldr	r3, [pc, #8]	; (8003ba0 <_getpid+0xc>)
 8003b96:	2258      	movs	r2, #88	; 0x58
 8003b98:	601a      	str	r2, [r3, #0]
 8003b9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b9e:	4770      	bx	lr
 8003ba0:	200001d8 	.word	0x200001d8

08003ba4 <_isatty>:
 8003ba4:	4b02      	ldr	r3, [pc, #8]	; (8003bb0 <_isatty+0xc>)
 8003ba6:	2258      	movs	r2, #88	; 0x58
 8003ba8:	601a      	str	r2, [r3, #0]
 8003baa:	2000      	movs	r0, #0
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	200001d8 	.word	0x200001d8

08003bb4 <_kill>:
 8003bb4:	4b02      	ldr	r3, [pc, #8]	; (8003bc0 <_kill+0xc>)
 8003bb6:	2258      	movs	r2, #88	; 0x58
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bbe:	4770      	bx	lr
 8003bc0:	200001d8 	.word	0x200001d8

08003bc4 <_lseek>:
 8003bc4:	4b02      	ldr	r3, [pc, #8]	; (8003bd0 <_lseek+0xc>)
 8003bc6:	2258      	movs	r2, #88	; 0x58
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bce:	4770      	bx	lr
 8003bd0:	200001d8 	.word	0x200001d8

08003bd4 <_read>:
 8003bd4:	4b02      	ldr	r3, [pc, #8]	; (8003be0 <_read+0xc>)
 8003bd6:	2258      	movs	r2, #88	; 0x58
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bde:	4770      	bx	lr
 8003be0:	200001d8 	.word	0x200001d8

08003be4 <_write>:
 8003be4:	4b02      	ldr	r3, [pc, #8]	; (8003bf0 <_write+0xc>)
 8003be6:	2258      	movs	r2, #88	; 0x58
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bee:	4770      	bx	lr
 8003bf0:	200001d8 	.word	0x200001d8

08003bf4 <_exit>:
 8003bf4:	e7fe      	b.n	8003bf4 <_exit>
 8003bf6:	bf00      	nop

08003bf8 <mlp>:

//     // Return a dummy value (assuming simpleserial_addcmd doesn't need a meaningful return value)
//     return 0;
// }

uint8_t mlp(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *in) {
 8003bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // putch(' ');
    // putch('\n');


    //HARDCODED VALS
    char *hardcoded_args[] = {
 8003bfc:	4daf      	ldr	r5, [pc, #700]	; (8003ebc <mlp+0x2c4>)
 8003bfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
uint8_t mlp(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *in) {
 8003c00:	f5ad 7d73 	sub.w	sp, sp, #972	; 0x3cc
    char *hardcoded_args[] = {
 8003c04:	ac07      	add	r4, sp, #28
 8003c06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c10:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003c14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    };

    int new_argc = sizeof(hardcoded_args) / sizeof(char *) - 1; // Exclude the NULL sentinel

    // Allocate memory for the new new_argv
    char **new_argv = (char **)malloc(new_argc * sizeof(char *));
 8003c18:	2038      	movs	r0, #56	; 0x38
 8003c1a:	f7fd fd67 	bl	80016ec <malloc>
 8003c1e:	ac07      	add	r4, sp, #28
 8003c20:	4605      	mov	r5, r0

    // Copy the hardcoded strings to the new new_argv
    for (int i = 0; i < new_argc; i++) {
 8003c22:	1f06      	subs	r6, r0, #4
 8003c24:	f100 0834 	add.w	r8, r0, #52	; 0x34
        new_argv[i] = (char *)malloc((strlen(hardcoded_args[i]) + 1) * sizeof(char));
 8003c28:	f854 7b04 	ldr.w	r7, [r4], #4
 8003c2c:	4638      	mov	r0, r7
 8003c2e:	f7fe f9e7 	bl	8002000 <strlen>
 8003c32:	3001      	adds	r0, #1
 8003c34:	f7fd fd5a 	bl	80016ec <malloc>
 8003c38:	f846 0f04 	str.w	r0, [r6, #4]!
        strcpy(new_argv[i], hardcoded_args[i]);
 8003c3c:	4639      	mov	r1, r7
 8003c3e:	f7fe f96d 	bl	8001f1c <strcpy>
    for (int i = 0; i < new_argc; i++) {
 8003c42:	4546      	cmp	r6, r8
 8003c44:	d1f0      	bne.n	8003c28 <mlp+0x30>
    //     exit(0);
    // }


    // Create memory for training parameters struct
    param = (parameters*)malloc(sizeof(parameters));
 8003c46:	2040      	movs	r0, #64	; 0x40
 8003c48:	f7fd fd50 	bl	80016ec <malloc>
 8003c4c:	4c9c      	ldr	r4, [pc, #624]	; (8003ec0 <mlp+0x2c8>)
 8003c4e:	4606      	mov	r6, r0
 8003c50:	6020      	str	r0, [r4, #0]

    // Number of hidden layers
    param->n_hidden = atoi(new_argv[1]);
 8003c52:	6868      	ldr	r0, [r5, #4]
 8003c54:	f7fd fcfc 	bl	8001650 <atoi>
 8003c58:	6030      	str	r0, [r6, #0]
    // Sanity check of number of hidden layers
    if (param->n_hidden < 0) {
 8003c5a:	6826      	ldr	r6, [r4, #0]
 8003c5c:	6830      	ldr	r0, [r6, #0]
 8003c5e:	2800      	cmp	r0, #0
 8003c60:	da05      	bge.n	8003c6e <mlp+0x76>
        printf("Error: Number of hidden layers should be >= 0\n");
 8003c62:	4898      	ldr	r0, [pc, #608]	; (8003ec4 <mlp+0x2cc>)
    char* tok;
    for (i = 0, tok = strtok(new_argv[2], ","); i < param->n_hidden; i++) {
        param->hidden_layers_size[i] = atoi(tok);
        // Sanity check of size of hidden layer
        if (param->hidden_layers_size[i] <= 0) {
            printf("Error: Hidden layer sizes should be positive\n");
 8003c64:	f7fd ffd0 	bl	8001c08 <puts>
            exit(0);
 8003c68:	2000      	movs	r0, #0
 8003c6a:	f7fd fd07 	bl	800167c <exit>
    param->hidden_layers_size = (int*)malloc(param->n_hidden * sizeof(int));
 8003c6e:	0080      	lsls	r0, r0, #2
 8003c70:	f7fd fd3c 	bl	80016ec <malloc>
    for (i = 0, tok = strtok(new_argv[2], ","); i < param->n_hidden; i++) {
 8003c74:	4994      	ldr	r1, [pc, #592]	; (8003ec8 <mlp+0x2d0>)
    param->hidden_layers_size = (int*)malloc(param->n_hidden * sizeof(int));
 8003c76:	6070      	str	r0, [r6, #4]
    for (i = 0, tok = strtok(new_argv[2], ","); i < param->n_hidden; i++) {
 8003c78:	68a8      	ldr	r0, [r5, #8]
        }
        tok = strtok(NULL, ",");
 8003c7a:	f8df 824c 	ldr.w	r8, [pc, #588]	; 8003ec8 <mlp+0x2d0>
    for (i = 0, tok = strtok(new_argv[2], ","); i < param->n_hidden; i++) {
 8003c7e:	f7fe fa2d 	bl	80020dc <strtok>
 8003c82:	2600      	movs	r6, #0
 8003c84:	6827      	ldr	r7, [r4, #0]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	42b3      	cmp	r3, r6
 8003c8a:	dc1d      	bgt.n	8003cc8 <mlp+0xd0>
    }

    // Hidden activation functions - Activation functions for each hidden layer
    param->hidden_activation_functions = (int*)malloc(param->n_hidden * sizeof(int));
 8003c8c:	0098      	lsls	r0, r3, #2
 8003c8e:	f7fd fd2d 	bl	80016ec <malloc>
    for (i = 0, tok = strtok(new_argv[3], ","); i < param->n_hidden; i++) {
 8003c92:	498d      	ldr	r1, [pc, #564]	; (8003ec8 <mlp+0x2d0>)
    param->hidden_activation_functions = (int*)malloc(param->n_hidden * sizeof(int));
 8003c94:	60b8      	str	r0, [r7, #8]
    for (i = 0, tok = strtok(new_argv[3], ","); i < param->n_hidden; i++) {
 8003c96:	68e8      	ldr	r0, [r5, #12]
        if (strcmp(tok, "identity") == 0) {
 8003c98:	f8df 9248 	ldr.w	r9, [pc, #584]	; 8003ee4 <mlp+0x2ec>
            param->hidden_activation_functions[i] = 1;
        }
        else if (strcmp(tok, "sigmoid") == 0) {
 8003c9c:	f8df a24c 	ldr.w	sl, [pc, #588]	; 8003eec <mlp+0x2f4>
            param->hidden_activation_functions[i] = 2;
        }
        else if (strcmp(tok, "tanh") == 0) {
 8003ca0:	f8df b24c 	ldr.w	fp, [pc, #588]	; 8003ef0 <mlp+0x2f8>
    for (i = 0, tok = strtok(new_argv[3], ","); i < param->n_hidden; i++) {
 8003ca4:	f7fe fa1a 	bl	80020dc <strtok>
 8003ca8:	2600      	movs	r6, #0
 8003caa:	4680      	mov	r8, r0
 8003cac:	6827      	ldr	r7, [r4, #0]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	42b3      	cmp	r3, r6
 8003cb2:	dc1c      	bgt.n	8003cee <mlp+0xf6>

        tok = strtok(NULL, ",");
    }

    // Output layer size
    param->output_layer_size = atoi(new_argv[4]);
 8003cb4:	6928      	ldr	r0, [r5, #16]
 8003cb6:	f7fd fccb 	bl	8001650 <atoi>
    if (param->output_layer_size <= 0) {
 8003cba:	6826      	ldr	r6, [r4, #0]
    param->output_layer_size = atoi(new_argv[4]);
 8003cbc:	6238      	str	r0, [r7, #32]
    if (param->output_layer_size <= 0) {
 8003cbe:	6a33      	ldr	r3, [r6, #32]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	dc49      	bgt.n	8003d58 <mlp+0x160>
        printf("Output layer size should be positive\n");
 8003cc4:	4881      	ldr	r0, [pc, #516]	; (8003ecc <mlp+0x2d4>)
 8003cc6:	e7cd      	b.n	8003c64 <mlp+0x6c>
        param->hidden_layers_size[i] = atoi(tok);
 8003cc8:	687f      	ldr	r7, [r7, #4]
 8003cca:	f7fd fcc1 	bl	8001650 <atoi>
        if (param->hidden_layers_size[i] <= 0) {
 8003cce:	6823      	ldr	r3, [r4, #0]
        param->hidden_layers_size[i] = atoi(tok);
 8003cd0:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
        if (param->hidden_layers_size[i] <= 0) {
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	dc01      	bgt.n	8003ce2 <mlp+0xea>
            printf("Error: Hidden layer sizes should be positive\n");
 8003cde:	487c      	ldr	r0, [pc, #496]	; (8003ed0 <mlp+0x2d8>)
 8003ce0:	e7c0      	b.n	8003c64 <mlp+0x6c>
        tok = strtok(NULL, ",");
 8003ce2:	4641      	mov	r1, r8
 8003ce4:	2000      	movs	r0, #0
 8003ce6:	f7fe f9f9 	bl	80020dc <strtok>
    for (i = 0, tok = strtok(new_argv[2], ","); i < param->n_hidden; i++) {
 8003cea:	3601      	adds	r6, #1
 8003cec:	e7ca      	b.n	8003c84 <mlp+0x8c>
        if (strcmp(tok, "identity") == 0) {
 8003cee:	4649      	mov	r1, r9
 8003cf0:	4640      	mov	r0, r8
 8003cf2:	f7fd ffa9 	bl	8001c48 <strcmp>
 8003cf6:	b950      	cbnz	r0, 8003d0e <mlp+0x116>
            param->hidden_activation_functions[i] = 1;
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	2201      	movs	r2, #1
            param->hidden_activation_functions[i] = 5;
 8003cfc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
        tok = strtok(NULL, ",");
 8003d00:	4971      	ldr	r1, [pc, #452]	; (8003ec8 <mlp+0x2d0>)
 8003d02:	2000      	movs	r0, #0
 8003d04:	f7fe f9ea 	bl	80020dc <strtok>
    for (i = 0, tok = strtok(new_argv[3], ","); i < param->n_hidden; i++) {
 8003d08:	3601      	adds	r6, #1
        tok = strtok(NULL, ",");
 8003d0a:	4680      	mov	r8, r0
 8003d0c:	e7ce      	b.n	8003cac <mlp+0xb4>
        else if (strcmp(tok, "sigmoid") == 0) {
 8003d0e:	4651      	mov	r1, sl
 8003d10:	4640      	mov	r0, r8
 8003d12:	f7fd ff99 	bl	8001c48 <strcmp>
 8003d16:	b910      	cbnz	r0, 8003d1e <mlp+0x126>
            param->hidden_activation_functions[i] = 2;
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	e7ee      	b.n	8003cfc <mlp+0x104>
        else if (strcmp(tok, "tanh") == 0) {
 8003d1e:	4659      	mov	r1, fp
 8003d20:	4640      	mov	r0, r8
 8003d22:	f7fd ff91 	bl	8001c48 <strcmp>
 8003d26:	b910      	cbnz	r0, 8003d2e <mlp+0x136>
            param->hidden_activation_functions[i] = 3;
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	2203      	movs	r2, #3
 8003d2c:	e7e6      	b.n	8003cfc <mlp+0x104>
        else if (strcmp(tok, "relu") == 0) {
 8003d2e:	4969      	ldr	r1, [pc, #420]	; (8003ed4 <mlp+0x2dc>)
 8003d30:	4640      	mov	r0, r8
 8003d32:	f7fd ff89 	bl	8001c48 <strcmp>
 8003d36:	b910      	cbnz	r0, 8003d3e <mlp+0x146>
            param->hidden_activation_functions[i] = 4;
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	2204      	movs	r2, #4
 8003d3c:	e7de      	b.n	8003cfc <mlp+0x104>
        else if (strcmp(tok, "softmax") == 0) {
 8003d3e:	4966      	ldr	r1, [pc, #408]	; (8003ed8 <mlp+0x2e0>)
 8003d40:	4640      	mov	r0, r8
 8003d42:	f7fd ff81 	bl	8001c48 <strcmp>
 8003d46:	b910      	cbnz	r0, 8003d4e <mlp+0x156>
            param->hidden_activation_functions[i] = 5;
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	2205      	movs	r2, #5
 8003d4c:	e7d6      	b.n	8003cfc <mlp+0x104>
            printf("Error: Invalid value for hidden activation function\n");
 8003d4e:	4863      	ldr	r0, [pc, #396]	; (8003edc <mlp+0x2e4>)
 8003d50:	f7fd ff5a 	bl	8001c08 <puts>
            printf("Input either identity or sigmoid or tanh or relu or softmax for hidden activation function\n");
 8003d54:	4862      	ldr	r0, [pc, #392]	; (8003ee0 <mlp+0x2e8>)
 8003d56:	e785      	b.n	8003c64 <mlp+0x6c>
        exit(0);
    }

    // Output activation function
    if (strcmp(new_argv[5], "identity") == 0) {
 8003d58:	696f      	ldr	r7, [r5, #20]
 8003d5a:	4962      	ldr	r1, [pc, #392]	; (8003ee4 <mlp+0x2ec>)
 8003d5c:	4638      	mov	r0, r7
 8003d5e:	f7fd ff73 	bl	8001c48 <strcmp>
 8003d62:	b998      	cbnz	r0, 8003d8c <mlp+0x194>
        param->output_activation_function = 1;
 8003d64:	2301      	movs	r3, #1
    }
    else if (strcmp(new_argv[5], "relu") == 0) {
        param->output_activation_function = 4;
    }
    else if (strcmp(new_argv[5], "softmax") == 0) {
        param->output_activation_function = 5;
 8003d66:	6273      	str	r3, [r6, #36]	; 0x24
        exit(0);
    }


    // L2 Regularization parameter
    param->learning_rate = atoi(new_argv[6]);
 8003d68:	69a8      	ldr	r0, [r5, #24]
 8003d6a:	f7fd fc71 	bl	8001650 <atoi>
 8003d6e:	f7fd f90d 	bl	8000f8c <__aeabi_i2d>
 8003d72:	6826      	ldr	r6, [r4, #0]
 8003d74:	e9c6 0104 	strd	r0, r1, [r6, #16]

    // Max. number of iterations
    param->n_iterations_max = atoi(new_argv[7]);
 8003d78:	69e8      	ldr	r0, [r5, #28]
 8003d7a:	f7fd fc69 	bl	8001650 <atoi>
    if (param->n_iterations_max <= 0) {
 8003d7e:	6825      	ldr	r5, [r4, #0]
    param->n_iterations_max = atoi(new_argv[7]);
 8003d80:	61b0      	str	r0, [r6, #24]
    if (param->n_iterations_max <= 0) {
 8003d82:	69ab      	ldr	r3, [r5, #24]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	dc22      	bgt.n	8003dce <mlp+0x1d6>
        printf("Max. number of iterations value should be positive\n");
 8003d88:	4857      	ldr	r0, [pc, #348]	; (8003ee8 <mlp+0x2f0>)
 8003d8a:	e76b      	b.n	8003c64 <mlp+0x6c>
    else if (strcmp(new_argv[5], "sigmoid") == 0) {
 8003d8c:	4957      	ldr	r1, [pc, #348]	; (8003eec <mlp+0x2f4>)
 8003d8e:	4638      	mov	r0, r7
 8003d90:	f7fd ff5a 	bl	8001c48 <strcmp>
 8003d94:	b908      	cbnz	r0, 8003d9a <mlp+0x1a2>
        param->output_activation_function = 2;
 8003d96:	2302      	movs	r3, #2
 8003d98:	e7e5      	b.n	8003d66 <mlp+0x16e>
    else if (strcmp(new_argv[5], "tanh") == 0) {
 8003d9a:	4955      	ldr	r1, [pc, #340]	; (8003ef0 <mlp+0x2f8>)
 8003d9c:	4638      	mov	r0, r7
 8003d9e:	f7fd ff53 	bl	8001c48 <strcmp>
 8003da2:	b908      	cbnz	r0, 8003da8 <mlp+0x1b0>
        param->output_activation_function = 3;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e7de      	b.n	8003d66 <mlp+0x16e>
    else if (strcmp(new_argv[5], "relu") == 0) {
 8003da8:	494a      	ldr	r1, [pc, #296]	; (8003ed4 <mlp+0x2dc>)
 8003daa:	4638      	mov	r0, r7
 8003dac:	f7fd ff4c 	bl	8001c48 <strcmp>
 8003db0:	b908      	cbnz	r0, 8003db6 <mlp+0x1be>
        param->output_activation_function = 4;
 8003db2:	2304      	movs	r3, #4
 8003db4:	e7d7      	b.n	8003d66 <mlp+0x16e>
    else if (strcmp(new_argv[5], "softmax") == 0) {
 8003db6:	4948      	ldr	r1, [pc, #288]	; (8003ed8 <mlp+0x2e0>)
 8003db8:	4638      	mov	r0, r7
 8003dba:	f7fd ff45 	bl	8001c48 <strcmp>
 8003dbe:	b908      	cbnz	r0, 8003dc4 <mlp+0x1cc>
        param->output_activation_function = 5;
 8003dc0:	2305      	movs	r3, #5
 8003dc2:	e7d0      	b.n	8003d66 <mlp+0x16e>
        printf("Error: Invalid value for output activation function\n");
 8003dc4:	484b      	ldr	r0, [pc, #300]	; (8003ef4 <mlp+0x2fc>)
 8003dc6:	f7fd ff1f 	bl	8001c08 <puts>
        printf("Input either identity or sigmoid or tanh or relu or softmax for output activation function\n");
 8003dca:	484b      	ldr	r0, [pc, #300]	; (8003ef8 <mlp+0x300>)
 8003dcc:	e74a      	b.n	8003c64 <mlp+0x6c>
    //    param->data_train[i] = (double*)malloc(param->feature_size * sizeof(double));

    // Read the train dataset from the csv into the 2D array
    //read_csv(train_filename, param->train_sample_size, param->feature_size, param->data_train);
    
    double test_lines[][5] = {
 8003dce:	22c8      	movs	r2, #200	; 0xc8
 8003dd0:	494a      	ldr	r1, [pc, #296]	; (8003efc <mlp+0x304>)
 8003dd2:	a816      	add	r0, sp, #88	; 0x58
 8003dd4:	f7fd fc9a 	bl	800170c <memcpy>
    //param->test_sample_size = atoi(new_argv[12]);
    // Feature size = Number of input features + 1 output feature
    //param->feature_size = atoi(new_argv[13]);

   // Create 2D array memory for the test data
    param->data_test = (double **)malloc(test_sample_size * sizeof(double *));
 8003dd8:	2014      	movs	r0, #20
 8003dda:	f7fd fc87 	bl	80016ec <malloc>
 8003dde:	f10d 0858 	add.w	r8, sp, #88	; 0x58
 8003de2:	62e8      	str	r0, [r5, #44]	; 0x2c
 8003de4:	f04f 0900 	mov.w	r9, #0
    for (int i = 0; i < test_sample_size; i++) {
        param->data_test[i] = (double *)malloc(feature_size * sizeof(double));
 8003de8:	2028      	movs	r0, #40	; 0x28
 8003dea:	6aee      	ldr	r6, [r5, #44]	; 0x2c
 8003dec:	f7fd fc7e 	bl	80016ec <malloc>
        memcpy(param->data_test[i], test_lines[i], feature_size * sizeof(double));
 8003df0:	4647      	mov	r7, r8
        param->data_test[i] = (double *)malloc(feature_size * sizeof(double));
 8003df2:	f846 0009 	str.w	r0, [r6, r9]
        memcpy(param->data_test[i], test_lines[i], feature_size * sizeof(double));
 8003df6:	4606      	mov	r6, r0
 8003df8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003dfa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003dfc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003dfe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003e00:	e897 0003 	ldmia.w	r7, {r0, r1}
 8003e04:	f109 0904 	add.w	r9, r9, #4
    for (int i = 0; i < test_sample_size; i++) {
 8003e08:	f1b9 0f14 	cmp.w	r9, #20
        memcpy(param->data_test[i], test_lines[i], feature_size * sizeof(double));
 8003e0c:	e886 0003 	stmia.w	r6, {r0, r1}
 8003e10:	f108 0828 	add.w	r8, r8, #40	; 0x28
    for (int i = 0; i < test_sample_size; i++) {
 8003e14:	d1e8      	bne.n	8003de8 <mlp+0x1f0>

    // Read the test dataset from the csv into the 2D array
    //read_csv(test_filename, param->test_sample_size, param->feature_size, param->data_test);

    // Total number of layers
    int n_layers = param->n_hidden + 2;
 8003e16:	682e      	ldr	r6, [r5, #0]
    param->test_sample_size = test_sample_size;
 8003e18:	2305      	movs	r3, #5
 8003e1a:	63ab      	str	r3, [r5, #56]	; 0x38
    param->feature_size = feature_size;
 8003e1c:	632b      	str	r3, [r5, #48]	; 0x30

    // Save the sizes of layers in an array
    layer_sizes = (int*)calloc(n_layers, sizeof(int));
 8003e1e:	2104      	movs	r1, #4
 8003e20:	1cb0      	adds	r0, r6, #2
 8003e22:	f7fd fc1d 	bl	8001660 <calloc>

    layer_sizes[0] = param->feature_size - 1;
 8003e26:	2304      	movs	r3, #4
 8003e28:	6003      	str	r3, [r0, #0]
    layer_sizes[n_layers-1] = param->output_layer_size;
 8003e2a:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
    layer_sizes = (int*)calloc(n_layers, sizeof(int));
 8003e2e:	4a34      	ldr	r2, [pc, #208]	; (8003f00 <mlp+0x308>)
    layer_sizes[n_layers-1] = param->output_layer_size;
 8003e30:	6a29      	ldr	r1, [r5, #32]
    layer_sizes = (int*)calloc(n_layers, sizeof(int));
 8003e32:	6010      	str	r0, [r2, #0]
    layer_sizes[n_layers-1] = param->output_layer_size;
 8003e34:	3301      	adds	r3, #1
    layer_sizes = (int*)calloc(n_layers, sizeof(int));
 8003e36:	4607      	mov	r7, r0
    layer_sizes[n_layers-1] = param->output_layer_size;
 8003e38:	f840 1023 	str.w	r1, [r0, r3, lsl #2]

    for (i = 1; i < n_layers-1 ; i++)
 8003e3c:	9202      	str	r2, [sp, #8]
 8003e3e:	2301      	movs	r3, #1
 8003e40:	429e      	cmp	r6, r3
 8003e42:	da27      	bge.n	8003e94 <mlp+0x29c>
        layer_sizes[i] = param->hidden_layers_size[i-1];

    // Create memory for the weight matrices between layers
    // weight is a pointer to the array of 2D arrays between the layers
    param->weight = (double***)calloc(n_layers - 1, sizeof(double**));
 8003e44:	2104      	movs	r1, #4
 8003e46:	1c70      	adds	r0, r6, #1
 8003e48:	f7fd fc0a 	bl	8001660 <calloc>

    // Each 2D array between two layers i and i+1 is of size ((layer_size[i]+1) x layer_size[i+1])
    // The weight matrix includes weights for the bias terms too
    for (i = 0; i < n_layers-1; i++)
 8003e4c:	f04f 0900 	mov.w	r9, #0
    param->weight = (double***)calloc(n_layers - 1, sizeof(double**));
 8003e50:	4680      	mov	r8, r0
 8003e52:	63e8      	str	r0, [r5, #60]	; 0x3c
    for (i = 0; i < n_layers-1; i++)
 8003e54:	454e      	cmp	r6, r9
 8003e56:	da26      	bge.n	8003ea6 <mlp+0x2ae>
 8003e58:	9701      	str	r7, [sp, #4]
 8003e5a:	4643      	mov	r3, r8
 8003e5c:	46b9      	mov	r9, r7
        param->weight[i] = (double**)calloc(layer_sizes[i]+1, sizeof(double*));

    int j;
    for (i = 0; i < n_layers-1; i++)
 8003e5e:	f04f 0b00 	mov.w	fp, #0
 8003e62:	455e      	cmp	r6, fp
 8003e64:	da68      	bge.n	8003f38 <mlp+0x340>
        for (j = 0; j < layer_sizes[i]+1; j++)
            param->weight[i][j] = (double*)calloc(layer_sizes[i+1], sizeof(double));

    double weights[] = {
 8003e66:	f50d 7b90 	add.w	fp, sp, #288	; 0x120
 8003e6a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8003e6e:	4925      	ldr	r1, [pc, #148]	; (8003f04 <mlp+0x30c>)
 8003e70:	4658      	mov	r0, fp
 8003e72:	f7fd fc4b 	bl	800170c <memcpy>
    0.661625, -0.322602, -0.528113, -0.431437, -0.429017, -0.452627, -0.327129, -0.325360, 0.160116, 0.749951, -0.733778, 0.178550, -0.541029, 0.356270, 0.768002, 0.112665, -0.033648, -0.269000, 0.185479, -0.177941,
    0.099907, -0.994370, 0.701389, -0.158393, -0.674160
    };

    int weightIndex = 0;
    for (int i = 0; i < n_layers - 1; i++) {
 8003e76:	2200      	movs	r2, #0
    int weightIndex = 0;
 8003e78:	4694      	mov	ip, r2
 8003e7a:	f8cd b014 	str.w	fp, [sp, #20]
    for (int i = 0; i < n_layers - 1; i++) {
 8003e7e:	4296      	cmp	r6, r2
 8003e80:	f2c0 8083 	blt.w	8003f8a <mlp+0x392>
        for (int j = 0; j < layer_sizes[i] + 1; j++) {
 8003e84:	9b01      	ldr	r3, [sp, #4]
 8003e86:	4619      	mov	r1, r3
 8003e88:	f851 3b04 	ldr.w	r3, [r1], #4
 8003e8c:	9303      	str	r3, [sp, #12]
 8003e8e:	9101      	str	r1, [sp, #4]
 8003e90:	2300      	movs	r3, #0
 8003e92:	e067      	b.n	8003f64 <mlp+0x36c>
        layer_sizes[i] = param->hidden_layers_size[i-1];
 8003e94:	686a      	ldr	r2, [r5, #4]
 8003e96:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8003e9a:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8003e9e:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
    for (i = 1; i < n_layers-1 ; i++)
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	e7cc      	b.n	8003e40 <mlp+0x248>
        param->weight[i] = (double**)calloc(layer_sizes[i]+1, sizeof(double*));
 8003ea6:	f857 0029 	ldr.w	r0, [r7, r9, lsl #2]
 8003eaa:	2104      	movs	r1, #4
 8003eac:	3001      	adds	r0, #1
 8003eae:	f7fd fbd7 	bl	8001660 <calloc>
 8003eb2:	f848 0029 	str.w	r0, [r8, r9, lsl #2]
    for (i = 0; i < n_layers-1; i++)
 8003eb6:	f109 0901 	add.w	r9, r9, #1
 8003eba:	e7cb      	b.n	8003e54 <mlp+0x25c>
 8003ebc:	08005860 	.word	0x08005860
 8003ec0:	20000160 	.word	0x20000160
 8003ec4:	08005db0 	.word	0x08005db0
 8003ec8:	08005dde 	.word	0x08005dde
 8003ecc:	08005eba 	.word	0x08005eba
 8003ed0:	08005de0 	.word	0x08005de0
 8003ed4:	08005e1e 	.word	0x08005e1e
 8003ed8:	08005e23 	.word	0x08005e23
 8003edc:	08005e2b 	.word	0x08005e2b
 8003ee0:	08005e5f 	.word	0x08005e5f
 8003ee4:	08005e0d 	.word	0x08005e0d
 8003ee8:	08005f6e 	.word	0x08005f6e
 8003eec:	08005e16 	.word	0x08005e16
 8003ef0:	08005fc6 	.word	0x08005fc6
 8003ef4:	08005edf 	.word	0x08005edf
 8003ef8:	08005f13 	.word	0x08005f13
 8003efc:	080058a0 	.word	0x080058a0
 8003f00:	20000164 	.word	0x20000164
 8003f04:	08005968 	.word	0x08005968
            param->weight[i][j] = (double*)calloc(layer_sizes[i+1], sizeof(double));
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8003f0e:	9303      	str	r3, [sp, #12]
 8003f10:	2108      	movs	r1, #8
 8003f12:	9200      	str	r2, [sp, #0]
 8003f14:	f7fd fba4 	bl	8001660 <calloc>
 8003f18:	9a00      	ldr	r2, [sp, #0]
 8003f1a:	9b03      	ldr	r3, [sp, #12]
 8003f1c:	f842 002a 	str.w	r0, [r2, sl, lsl #2]
        for (j = 0; j < layer_sizes[i]+1; j++)
 8003f20:	f10a 0a01 	add.w	sl, sl, #1
 8003f24:	f8d9 2000 	ldr.w	r2, [r9]
 8003f28:	4552      	cmp	r2, sl
 8003f2a:	daed      	bge.n	8003f08 <mlp+0x310>
    for (i = 0; i < n_layers-1; i++)
 8003f2c:	f10b 0b01 	add.w	fp, fp, #1
 8003f30:	f109 0904 	add.w	r9, r9, #4
 8003f34:	3304      	adds	r3, #4
 8003f36:	e794      	b.n	8003e62 <mlp+0x26a>
        for (j = 0; j < layer_sizes[i]+1; j++)
 8003f38:	f04f 0a00 	mov.w	sl, #0
 8003f3c:	e7f2      	b.n	8003f24 <mlp+0x32c>
            for (int k = 0; k < layer_sizes[i + 1]; k++) {
                param->weight[i][j][k] = weights[weightIndex++];
 8003f3e:	f8d8 3000 	ldr.w	r3, [r8]
 8003f42:	9904      	ldr	r1, [sp, #16]
 8003f44:	e8fe ab02 	ldrd	sl, fp, [lr], #8
 8003f48:	5859      	ldr	r1, [r3, r1]
 8003f4a:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8003f4e:	e9c1 ab00 	strd	sl, fp, [r1]
            for (int k = 0; k < layer_sizes[i + 1]; k++) {
 8003f52:	3001      	adds	r0, #1
 8003f54:	4581      	cmp	r9, r0
 8003f56:	dcf2      	bgt.n	8003f3e <mlp+0x346>
        for (int j = 0; j < layer_sizes[i] + 1; j++) {
 8003f58:	9b00      	ldr	r3, [sp, #0]
 8003f5a:	f1b9 0f00 	cmp.w	r9, #0
 8003f5e:	bfa8      	it	ge
 8003f60:	44cc      	addge	ip, r9
 8003f62:	3301      	adds	r3, #1
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	9903      	ldr	r1, [sp, #12]
 8003f68:	9b00      	ldr	r3, [sp, #0]
 8003f6a:	4299      	cmp	r1, r3
 8003f6c:	db09      	blt.n	8003f82 <mlp+0x38a>
            for (int k = 0; k < layer_sizes[i + 1]; k++) {
 8003f6e:	9901      	ldr	r1, [sp, #4]
 8003f70:	f8d1 9000 	ldr.w	r9, [r1]
 8003f74:	0099      	lsls	r1, r3, #2
 8003f76:	9104      	str	r1, [sp, #16]
 8003f78:	9905      	ldr	r1, [sp, #20]
 8003f7a:	2000      	movs	r0, #0
 8003f7c:	eb01 0ecc 	add.w	lr, r1, ip, lsl #3
 8003f80:	e7e8      	b.n	8003f54 <mlp+0x35c>
    for (int i = 0; i < n_layers - 1; i++) {
 8003f82:	3201      	adds	r2, #1
 8003f84:	f108 0804 	add.w	r8, r8, #4
 8003f88:	e779      	b.n	8003e7e <mlp+0x286>
    // fclose(fp);

    // Classify the test data using the trained parameter weights
    //printf("Classifying:\n");
    //printf("------------\n");
    uint8_t accuracy = mlp_classifier(param, layer_sizes);
 8003f8a:	4639      	mov	r1, r7
 8003f8c:	4628      	mov	r0, r5
 8003f8e:	f000 f949 	bl	8004224 <mlp_classifier>
    //while(1)
        //simpleserial_get();
    //printf("\nDone.\nOutput file generated\n");

    // Free the memory allocated in Heap
    for (i = 0; i < n_layers-1; i++)
 8003f92:	2700      	movs	r7, #0
    uint8_t accuracy = mlp_classifier(param, layer_sizes);
 8003f94:	f88d 001b 	strb.w	r0, [sp, #27]
    for (i = 0; i < n_layers-1; i++)
 8003f98:	42be      	cmp	r6, r7
 8003f9a:	db4a      	blt.n	8004032 <mlp+0x43a>
 8003f9c:	ea4f 0887 	mov.w	r8, r7, lsl #2
        for (j = 0; j < layer_sizes[i]+1; j++)
 8003fa0:	2500      	movs	r5, #0
 8003fa2:	e006      	b.n	8003fb2 <mlp+0x3ba>
            free(param->weight[i][j]);
 8003fa4:	f852 3008 	ldr.w	r3, [r2, r8]
 8003fa8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003fac:	f7fd fba6 	bl	80016fc <free>
        for (j = 0; j < layer_sizes[i]+1; j++)
 8003fb0:	3501      	adds	r5, #1
 8003fb2:	6823      	ldr	r3, [r4, #0]
 8003fb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fb6:	9b02      	ldr	r3, [sp, #8]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f853 3008 	ldr.w	r3, [r3, r8]
 8003fbe:	42ab      	cmp	r3, r5
 8003fc0:	daf0      	bge.n	8003fa4 <mlp+0x3ac>
    for (i = 0; i < n_layers-1; i++)
 8003fc2:	3701      	adds	r7, #1
 8003fc4:	e7e8      	b.n	8003f98 <mlp+0x3a0>

    for (i = 0; i < n_layers-1; i++)
        free(param->weight[i]);
 8003fc6:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8003fca:	f7fd fb97 	bl	80016fc <free>
    for (i = 0; i < n_layers-1; i++)
 8003fce:	3501      	adds	r5, #1
 8003fd0:	6823      	ldr	r3, [r4, #0]
 8003fd2:	42ae      	cmp	r6, r5
 8003fd4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003fd6:	daf6      	bge.n	8003fc6 <mlp+0x3ce>

    free(param->weight);
 8003fd8:	f7fd fb90 	bl	80016fc <free>

    free(layer_sizes);
 8003fdc:	9b02      	ldr	r3, [sp, #8]
 8003fde:	6818      	ldr	r0, [r3, #0]
 8003fe0:	f7fd fb8c 	bl	80016fc <free>

    for (i = 0; i < param->train_sample_size; i++)
 8003fe4:	2500      	movs	r5, #0
 8003fe6:	6823      	ldr	r3, [r4, #0]
 8003fe8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fea:	42aa      	cmp	r2, r5
 8003fec:	dc23      	bgt.n	8004036 <mlp+0x43e>
        free(param->data_train[i]);

    for (i = 0; i < param->test_sample_size; i++)
 8003fee:	2500      	movs	r5, #0
 8003ff0:	6823      	ldr	r3, [r4, #0]
 8003ff2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ff4:	42aa      	cmp	r2, r5
 8003ff6:	dc25      	bgt.n	8004044 <mlp+0x44c>
        free(param->data_test[i]);

    free(param->data_train);
 8003ff8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003ffa:	f7fd fb7f 	bl	80016fc <free>
    free(param->data_test);
 8003ffe:	6823      	ldr	r3, [r4, #0]
 8004000:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004002:	f7fd fb7b 	bl	80016fc <free>
    free(param->hidden_activation_functions);
 8004006:	6823      	ldr	r3, [r4, #0]
 8004008:	6898      	ldr	r0, [r3, #8]
 800400a:	f7fd fb77 	bl	80016fc <free>
    free(param->hidden_layers_size);
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	6858      	ldr	r0, [r3, #4]
 8004012:	f7fd fb73 	bl	80016fc <free>
    free(param);
 8004016:	6820      	ldr	r0, [r4, #0]
 8004018:	f7fd fb70 	bl	80016fc <free>
    
    
    simpleserial_put('r', 1, (uint8_t*)&accuracy);
 800401c:	f10d 021b 	add.w	r2, sp, #27
 8004020:	2101      	movs	r1, #1
 8004022:	2072      	movs	r0, #114	; 0x72
 8004024:	f000 fc06 	bl	8004834 <simpleserial_put>
    
    return 0x00;
}
 8004028:	2000      	movs	r0, #0
 800402a:	f50d 7d73 	add.w	sp, sp, #972	; 0x3cc
 800402e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (i = 0; i < n_layers-1; i++)
 8004032:	2500      	movs	r5, #0
 8004034:	e7cc      	b.n	8003fd0 <mlp+0x3d8>
        free(param->data_train[i]);
 8004036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004038:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800403c:	f7fd fb5e 	bl	80016fc <free>
    for (i = 0; i < param->train_sample_size; i++)
 8004040:	3501      	adds	r5, #1
 8004042:	e7d0      	b.n	8003fe6 <mlp+0x3ee>
        free(param->data_test[i]);
 8004044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004046:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800404a:	f7fd fb57 	bl	80016fc <free>
    for (i = 0; i < param->test_sample_size; i++)
 800404e:	3501      	adds	r5, #1
 8004050:	e7ce      	b.n	8003ff0 <mlp+0x3f8>
 8004052:	bf00      	nop

08004054 <main>:

int main(void) {
 8004054:	b508      	push	{r3, lr}
    // Initialize UART for serial communication
    platform_init();
 8004056:	f000 fcb3 	bl	80049c0 <platform_init>
    init_uart();
 800405a:	f000 fcf1 	bl	8004a40 <init_uart>
    trigger_setup();
 800405e:	f000 fd2d 	bl	8004abc <trigger_setup>
    simpleserial_init();
 8004062:	f000 fbd5 	bl	8004810 <simpleserial_init>

    // Add a command to the SimpleSerial module
    simpleserial_addcmd('a', 0, mlp);
 8004066:	4a04      	ldr	r2, [pc, #16]	; (8004078 <main+0x24>)
 8004068:	2100      	movs	r1, #0
 800406a:	2061      	movs	r0, #97	; 0x61
 800406c:	f000 fbb6 	bl	80047dc <simpleserial_addcmd>
    //put some value so we can verify if we cna read them.

    for (;;)
    {
        simpleserial_get();
 8004070:	f000 fc3a 	bl	80048e8 <simpleserial_get>
 8004074:	e7fc      	b.n	8004070 <main+0x1c>
 8004076:	bf00      	nop
 8004078:	08003bf9 	.word	0x08003bf9

0800407c <mat_mul_classify>:
#include "simpleserial.h"
#include "hal.h"

#define max(x, y) (x > y ? x : y)

void mat_mul_classify(double* a, double** b, double* result, int n, int p) {
 800407c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004080:	4681      	mov	r9, r0
 8004082:	468a      	mov	sl, r1
 8004084:	469b      	mov	fp, r3
 8004086:	f1a2 0508 	sub.w	r5, r2, #8
    // matrix a of size 1 x n (array)
    // matrix b of size n x p
    // matrix result of size 1 x p (array)
    // result = a * b
    int j, k;
    for (j = 0; j < p; j++) {
 800408a:	2400      	movs	r4, #0
 800408c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800408e:	429c      	cmp	r4, r3
 8004090:	db01      	blt.n	8004096 <mat_mul_classify+0x1a>
        result[j] = 0.0;
        for (k = 0; k < n; k++)
            result[j] += (a[k] * b[k][j]);
    }
}
 8004092:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        result[j] = 0.0;
 8004096:	2200      	movs	r2, #0
 8004098:	2300      	movs	r3, #0
 800409a:	e9e5 2302 	strd	r2, r3, [r5, #8]!
        for (k = 0; k < n; k++)
 800409e:	00e7      	lsls	r7, r4, #3
 80040a0:	f1a9 0808 	sub.w	r8, r9, #8
 80040a4:	2600      	movs	r6, #0
 80040a6:	455e      	cmp	r6, fp
 80040a8:	db01      	blt.n	80040ae <mat_mul_classify+0x32>
    for (j = 0; j < p; j++) {
 80040aa:	3401      	adds	r4, #1
 80040ac:	e7ee      	b.n	800408c <mat_mul_classify+0x10>
            result[j] += (a[k] * b[k][j]);
 80040ae:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 80040b2:	19d9      	adds	r1, r3, r7
 80040b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040b8:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 80040bc:	f7fc ffd0 	bl	8001060 <__aeabi_dmul>
 80040c0:	4602      	mov	r2, r0
 80040c2:	460b      	mov	r3, r1
 80040c4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80040c8:	f7fc fe14 	bl	8000cf4 <__adddf3>
        for (k = 0; k < n; k++)
 80040cc:	3601      	adds	r6, #1
            result[j] += (a[k] * b[k][j]);
 80040ce:	e9c5 0100 	strd	r0, r1, [r5]
 80040d2:	e7e8      	b.n	80040a6 <mat_mul_classify+0x2a>

080040d4 <identity_classify>:

void identity_classify(int n, double* input, double* output) {
 80040d4:	b530      	push	{r4, r5, lr}
    output[0] = 1; // Bias term
 80040d6:	4d07      	ldr	r5, [pc, #28]	; (80040f4 <identity_classify+0x20>)
 80040d8:	2400      	movs	r4, #0
 80040da:	e9c2 4500 	strd	r4, r5, [r2]

    int i;
    for (i = 0; i < n; i++) 
 80040de:	3908      	subs	r1, #8
 80040e0:	2300      	movs	r3, #0
 80040e2:	4283      	cmp	r3, r0
 80040e4:	db00      	blt.n	80040e8 <identity_classify+0x14>
        output[i+1] = input[i]; // Identity function
}
 80040e6:	bd30      	pop	{r4, r5, pc}
        output[i+1] = input[i]; // Identity function
 80040e8:	e9f1 4502 	ldrd	r4, r5, [r1, #8]!
    for (i = 0; i < n; i++) 
 80040ec:	3301      	adds	r3, #1
        output[i+1] = input[i]; // Identity function
 80040ee:	e9e2 4502 	strd	r4, r5, [r2, #8]!
 80040f2:	e7f6      	b.n	80040e2 <identity_classify+0xe>
 80040f4:	3ff00000 	.word	0x3ff00000

080040f8 <sigmoid_classify>:

void sigmoid_classify(int n, double* input, double* output) {
 80040f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    output[0] = 1; // Bias term
 80040fc:	4f11      	ldr	r7, [pc, #68]	; (8004144 <sigmoid_classify+0x4c>)
 80040fe:	2600      	movs	r6, #0
 8004100:	e9c2 6700 	strd	r6, r7, [r2]
void sigmoid_classify(int n, double* input, double* output) {
 8004104:	4681      	mov	r9, r0
 8004106:	f1a1 0808 	sub.w	r8, r1, #8
 800410a:	4614      	mov	r4, r2

    int i;
    for (i = 0; i < n; i++) 
 800410c:	2500      	movs	r5, #0
 800410e:	454d      	cmp	r5, r9
 8004110:	db01      	blt.n	8004116 <sigmoid_classify+0x1e>
        output[i+1] = 1.0 / (1.0 + exp(-input[i])); // Sigmoid function
}
 8004112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        output[i+1] = 1.0 / (1.0 + exp(-input[i])); // Sigmoid function
 8004116:	f858 2f08 	ldr.w	r2, [r8, #8]!
 800411a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800411e:	4610      	mov	r0, r2
 8004120:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004124:	f7fc f910 	bl	8000348 <exp>
 8004128:	4632      	mov	r2, r6
 800412a:	463b      	mov	r3, r7
 800412c:	f7fc fde2 	bl	8000cf4 <__adddf3>
 8004130:	4602      	mov	r2, r0
 8004132:	460b      	mov	r3, r1
 8004134:	4630      	mov	r0, r6
 8004136:	4639      	mov	r1, r7
 8004138:	f7fd f8bc 	bl	80012b4 <__aeabi_ddiv>
    for (i = 0; i < n; i++) 
 800413c:	3501      	adds	r5, #1
        output[i+1] = 1.0 / (1.0 + exp(-input[i])); // Sigmoid function
 800413e:	e9e4 0102 	strd	r0, r1, [r4, #8]!
 8004142:	e7e4      	b.n	800410e <sigmoid_classify+0x16>
 8004144:	3ff00000 	.word	0x3ff00000

08004148 <tan_h_classify>:

void tan_h_classify(int n, double* input, double* output) {
 8004148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    output[0] = 1; // Bias term
 800414a:	4d0a      	ldr	r5, [pc, #40]	; (8004174 <tan_h_classify+0x2c>)
 800414c:	2400      	movs	r4, #0
 800414e:	e9c2 4500 	strd	r4, r5, [r2]
void tan_h_classify(int n, double* input, double* output) {
 8004152:	4607      	mov	r7, r0
 8004154:	f1a1 0608 	sub.w	r6, r1, #8
 8004158:	4614      	mov	r4, r2

    int i;
    for (i = 0; i < n; i++) 
 800415a:	2500      	movs	r5, #0
 800415c:	42bd      	cmp	r5, r7
 800415e:	db00      	blt.n	8004162 <tan_h_classify+0x1a>
        output[i+1] = tanh(input[i]); // tanh function
}
 8004160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        output[i+1] = tanh(input[i]); // tanh function
 8004162:	e9f6 0102 	ldrd	r0, r1, [r6, #8]!
 8004166:	f7fc f86f 	bl	8000248 <tanh>
    for (i = 0; i < n; i++) 
 800416a:	3501      	adds	r5, #1
        output[i+1] = tanh(input[i]); // tanh function
 800416c:	e9e4 0102 	strd	r0, r1, [r4, #8]!
 8004170:	e7f4      	b.n	800415c <tan_h_classify+0x14>
 8004172:	bf00      	nop
 8004174:	3ff00000 	.word	0x3ff00000

08004178 <relu_classify>:

void relu_classify(int n, double* input, double* output) {
 8004178:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    output[0] = 1; // Bias term
 800417c:	4d0f      	ldr	r5, [pc, #60]	; (80041bc <relu_classify+0x44>)
 800417e:	2400      	movs	r4, #0
 8004180:	e9c2 4500 	strd	r4, r5, [r2]
void relu_classify(int n, double* input, double* output) {
 8004184:	4682      	mov	sl, r0
 8004186:	4614      	mov	r4, r2
 8004188:	f1a1 0b08 	sub.w	fp, r1, #8

    int i;
    for (i = 0; i < n; i++) 
 800418c:	2500      	movs	r5, #0
        output[i+1] = max(0.0, input[i]); // ReLU function
 800418e:	f04f 0800 	mov.w	r8, #0
 8004192:	f04f 0900 	mov.w	r9, #0
    for (i = 0; i < n; i++) 
 8004196:	4555      	cmp	r5, sl
 8004198:	db01      	blt.n	800419e <relu_classify+0x26>
}
 800419a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        output[i+1] = max(0.0, input[i]); // ReLU function
 800419e:	e9fb 6702 	ldrd	r6, r7, [fp, #8]!
 80041a2:	4642      	mov	r2, r8
 80041a4:	464b      	mov	r3, r9
 80041a6:	4630      	mov	r0, r6
 80041a8:	4639      	mov	r1, r7
 80041aa:	f7fd f9cb 	bl	8001544 <__aeabi_dcmplt>
 80041ae:	b108      	cbz	r0, 80041b4 <relu_classify+0x3c>
 80041b0:	4646      	mov	r6, r8
 80041b2:	464f      	mov	r7, r9
 80041b4:	e9e4 6702 	strd	r6, r7, [r4, #8]!
    for (i = 0; i < n; i++) 
 80041b8:	3501      	adds	r5, #1
 80041ba:	e7ec      	b.n	8004196 <relu_classify+0x1e>
 80041bc:	3ff00000 	.word	0x3ff00000

080041c0 <softmax_classify>:

void softmax_classify(int n, double* input, double* output) {
    output[0] = 1; // Bias term
 80041c0:	4b17      	ldr	r3, [pc, #92]	; (8004220 <softmax_classify+0x60>)
void softmax_classify(int n, double* input, double* output) {
 80041c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041c6:	4614      	mov	r4, r2
    output[0] = 1; // Bias term
 80041c8:	2200      	movs	r2, #0
 80041ca:	e9c4 2300 	strd	r2, r3, [r4]

    int i;
    double sum = 0.0;
    for (i = 0; i < n; i++)
 80041ce:	f1a1 0808 	sub.w	r8, r1, #8
void softmax_classify(int n, double* input, double* output) {
 80041d2:	4681      	mov	r9, r0
    for (i = 0; i < n; i++)
 80041d4:	46c2      	mov	sl, r8
    double sum = 0.0;
 80041d6:	2600      	movs	r6, #0
 80041d8:	2700      	movs	r7, #0
    for (i = 0; i < n; i++)
 80041da:	2500      	movs	r5, #0
 80041dc:	454d      	cmp	r5, r9
 80041de:	db04      	blt.n	80041ea <softmax_classify+0x2a>
        sum += exp(input[i]);

    for (i = 0; i < n; i++) 
 80041e0:	2500      	movs	r5, #0
 80041e2:	454d      	cmp	r5, r9
 80041e4:	db0f      	blt.n	8004206 <softmax_classify+0x46>
        output[i+1] = exp(input[i]) / sum; // Softmax function
}
 80041e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        sum += exp(input[i]);
 80041ea:	e9fa 0102 	ldrd	r0, r1, [sl, #8]!
 80041ee:	f7fc f8ab 	bl	8000348 <exp>
 80041f2:	4602      	mov	r2, r0
 80041f4:	460b      	mov	r3, r1
 80041f6:	4630      	mov	r0, r6
 80041f8:	4639      	mov	r1, r7
 80041fa:	f7fc fd7b 	bl	8000cf4 <__adddf3>
    for (i = 0; i < n; i++)
 80041fe:	3501      	adds	r5, #1
        sum += exp(input[i]);
 8004200:	4606      	mov	r6, r0
 8004202:	460f      	mov	r7, r1
 8004204:	e7ea      	b.n	80041dc <softmax_classify+0x1c>
        output[i+1] = exp(input[i]) / sum; // Softmax function
 8004206:	e9f8 0102 	ldrd	r0, r1, [r8, #8]!
 800420a:	f7fc f89d 	bl	8000348 <exp>
 800420e:	4632      	mov	r2, r6
 8004210:	463b      	mov	r3, r7
 8004212:	f7fd f84f 	bl	80012b4 <__aeabi_ddiv>
    for (i = 0; i < n; i++) 
 8004216:	3501      	adds	r5, #1
        output[i+1] = exp(input[i]) / sum; // Softmax function
 8004218:	e9e4 0102 	strd	r0, r1, [r4, #8]!
 800421c:	e7e1      	b.n	80041e2 <softmax_classify+0x22>
 800421e:	bf00      	nop
 8004220:	3ff00000 	.word	0x3ff00000

08004224 <mlp_classifier>:

uint8_t mlp_classifier(parameters* param, int* layer_sizes) {
 8004224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int n_layers = param->n_hidden + 2;
 8004228:	6803      	ldr	r3, [r0, #0]
uint8_t mlp_classifier(parameters* param, int* layer_sizes) {
 800422a:	b091      	sub	sp, #68	; 0x44
 800422c:	4604      	mov	r4, r0
    int n_layers = param->n_hidden + 2;
 800422e:	930a      	str	r3, [sp, #40]	; 0x28
 8004230:	3302      	adds	r3, #2
uint8_t mlp_classifier(parameters* param, int* layer_sizes) {
 8004232:	460e      	mov	r6, r1

    // Create memory for arrays of inputs to the layers
    double** layer_inputs = (double**)calloc(n_layers, sizeof(double*));
 8004234:	4618      	mov	r0, r3
 8004236:	2104      	movs	r1, #4
    int n_layers = param->n_hidden + 2;
 8004238:	9306      	str	r3, [sp, #24]
    double** layer_inputs = (double**)calloc(n_layers, sizeof(double*));
 800423a:	f7fd fa11 	bl	8001660 <calloc>

    int i;
    for (i = 0; i < n_layers; i++)
 800423e:	2500      	movs	r5, #0
    double** layer_inputs = (double**)calloc(n_layers, sizeof(double*));
 8004240:	9007      	str	r0, [sp, #28]
    for (i = 0; i < n_layers; i++)
 8004242:	9b06      	ldr	r3, [sp, #24]
 8004244:	429d      	cmp	r5, r3
 8004246:	db39      	blt.n	80042bc <mlp_classifier+0x98>
        layer_inputs[i] = (double*)calloc(layer_sizes[i], sizeof(double));

    // Create memory for arrays of outputs from the layers
    double** layer_outputs = (double**)calloc(n_layers, sizeof(double*));
 8004248:	2104      	movs	r1, #4
 800424a:	4618      	mov	r0, r3
 800424c:	f7fd fa08 	bl	8001660 <calloc>

    for (i = 0; i < n_layers; i++)
 8004250:	2500      	movs	r5, #0
    double** layer_outputs = (double**)calloc(n_layers, sizeof(double*));
 8004252:	4683      	mov	fp, r0
    for (i = 0; i < n_layers; i++)
 8004254:	9b06      	ldr	r3, [sp, #24]
 8004256:	429d      	cmp	r5, r3
 8004258:	db3a      	blt.n	80042d0 <mlp_classifier+0xac>
        layer_outputs[i] = (double*)calloc(layer_sizes[i]+1, sizeof(double));

    // Create memory to store final outputs
    double** final_output = (double**)calloc(param->test_sample_size, sizeof(double*));
 800425a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800425c:	2104      	movs	r1, #4
 800425e:	4628      	mov	r0, r5
 8004260:	f7fd f9fe 	bl	8001660 <calloc>
    for (i = 0; i < param->test_sample_size; i++)
 8004264:	2700      	movs	r7, #0
    double** final_output = (double**)calloc(param->test_sample_size, sizeof(double*));
 8004266:	9003      	str	r0, [sp, #12]
    for (i = 0; i < param->test_sample_size; i++)
 8004268:	42bd      	cmp	r5, r7
 800426a:	dc3b      	bgt.n	80042e4 <mlp_classifier+0xc0>
            }
        }
        trigger_low();

        // Fill the output layers's input and output
        mat_mul_classify(layer_outputs[n_layers-2], param->weight[n_layers-2], layer_inputs[n_layers-1], layer_sizes[n_layers-2]+1, layer_sizes[n_layers-1]);
 800426c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	9308      	str	r3, [sp, #32]
 8004272:	445b      	add	r3, fp
 8004274:	930c      	str	r3, [sp, #48]	; 0x30
 8004276:	9b08      	ldr	r3, [sp, #32]
 8004278:	1d1f      	adds	r7, r3, #4
 800427a:	9b07      	ldr	r3, [sp, #28]
 800427c:	443b      	add	r3, r7
 800427e:	930d      	str	r3, [sp, #52]	; 0x34
 8004280:	9b08      	ldr	r3, [sp, #32]
 8004282:	18f3      	adds	r3, r6, r3
 8004284:	eb06 0a07 	add.w	sl, r6, r7
 8004288:	930e      	str	r3, [sp, #56]	; 0x38
                break;
            case 4: // relu
                relu_classify(layer_sizes[n_layers-1], layer_inputs[n_layers-1], layer_outputs[n_layers-1]);
                break;
            case 5: // softmax
                softmax_classify(layer_sizes[n_layers-1], layer_inputs[n_layers-1], layer_outputs[n_layers-1]);
 800428a:	445f      	add	r7, fp
 800428c:	f04f 0900 	mov.w	r9, #0
    for (test_example = 0; test_example < param->test_sample_size; test_example++) {
 8004290:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8004292:	454d      	cmp	r5, r9
 8004294:	dc2f      	bgt.n	80042f6 <mlp_classifier+0xd2>
            final_output[test_example][i] = layer_outputs[n_layers-1][i+1];
    }

    //simpleserial_put('r', 1, (uint8_t*)final_output[0]);
    // Find the output class for each test example
    if (param->output_layer_size == 1) { // Binary classification
 8004296:	6a26      	ldr	r6, [r4, #32]
 8004298:	2e01      	cmp	r6, #1
 800429a:	f000 814b 	beq.w	8004534 <mlp_classifier+0x310>
 800429e:	f8dd 800c 	ldr.w	r8, [sp, #12]
            else
                final_output[test_example][0] = 1;
        }
    }
    else { // Multi-class classification
        for (test_example = 0; test_example < param->test_sample_size; test_example++) {
 80042a2:	f04f 0900 	mov.w	r9, #0
 80042a6:	454d      	cmp	r5, r9
 80042a8:	f340 824d 	ble.w	8004746 <mlp_classifier+0x522>
            double max = -1;
 80042ac:	4bb4      	ldr	r3, [pc, #720]	; (8004580 <mlp_classifier+0x35c>)
 80042ae:	f8d8 a000 	ldr.w	sl, [r8]
 80042b2:	2200      	movs	r2, #0
 80042b4:	e9cd 2308 	strd	r2, r3, [sp, #32]
            int max_class;
            for (i = 0; i < param->output_layer_size; i++) {
 80042b8:	2700      	movs	r7, #0
 80042ba:	e155      	b.n	8004568 <mlp_classifier+0x344>
        layer_inputs[i] = (double*)calloc(layer_sizes[i], sizeof(double));
 80042bc:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
 80042c0:	2108      	movs	r1, #8
 80042c2:	f7fd f9cd 	bl	8001660 <calloc>
 80042c6:	9b07      	ldr	r3, [sp, #28]
 80042c8:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
    for (i = 0; i < n_layers; i++)
 80042cc:	3501      	adds	r5, #1
 80042ce:	e7b8      	b.n	8004242 <mlp_classifier+0x1e>
        layer_outputs[i] = (double*)calloc(layer_sizes[i]+1, sizeof(double));
 80042d0:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
 80042d4:	2108      	movs	r1, #8
 80042d6:	3001      	adds	r0, #1
 80042d8:	f7fd f9c2 	bl	8001660 <calloc>
 80042dc:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
    for (i = 0; i < n_layers; i++)
 80042e0:	3501      	adds	r5, #1
 80042e2:	e7b7      	b.n	8004254 <mlp_classifier+0x30>
        final_output[i] = (double*)calloc(param->output_layer_size, sizeof(double));
 80042e4:	2108      	movs	r1, #8
 80042e6:	6a20      	ldr	r0, [r4, #32]
 80042e8:	f7fd f9ba 	bl	8001660 <calloc>
 80042ec:	9b03      	ldr	r3, [sp, #12]
 80042ee:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
    for (i = 0; i < param->test_sample_size; i++)
 80042f2:	3701      	adds	r7, #1
 80042f4:	e7b8      	b.n	8004268 <mlp_classifier+0x44>
        printf("Classifying test example %d of %d\r", test_example+1, param->test_sample_size);
 80042f6:	f109 0301 	add.w	r3, r9, #1
 80042fa:	462a      	mov	r2, r5
 80042fc:	4619      	mov	r1, r3
 80042fe:	48a1      	ldr	r0, [pc, #644]	; (8004584 <mlp_classifier+0x360>)
 8004300:	930b      	str	r3, [sp, #44]	; 0x2c
 8004302:	f7fd fbcd 	bl	8001aa0 <iprintf>
        layer_outputs[0][0] = 1; // Bias term of input layer
 8004306:	4aa0      	ldr	r2, [pc, #640]	; (8004588 <mlp_classifier+0x364>)
 8004308:	f8db 3000 	ldr.w	r3, [fp]
 800430c:	2100      	movs	r1, #0
 800430e:	e9c3 1200 	strd	r1, r2, [r3]
        for (i = 0; i < param->feature_size-1; i++)
 8004312:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004314:	ea4f 0889 	mov.w	r8, r9, lsl #2
 8004318:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 800431c:	2500      	movs	r5, #0
 800431e:	45ac      	cmp	ip, r5
 8004320:	dc22      	bgt.n	8004368 <mlp_classifier+0x144>
        trigger_high();
 8004322:	f000 fbef 	bl	8004b04 <trigger_high>
        for (i = 1; i < n_layers-1; i++) {
 8004326:	f04f 0800 	mov.w	r8, #0
 800432a:	2501      	movs	r5, #1
 800432c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800432e:	42ab      	cmp	r3, r5
 8004330:	da2b      	bge.n	800438a <mlp_classifier+0x166>
        trigger_low();
 8004332:	f000 fbee 	bl	8004b12 <trigger_low>
        mat_mul_classify(layer_outputs[n_layers-2], param->weight[n_layers-2], layer_inputs[n_layers-1], layer_sizes[n_layers-2]+1, layer_sizes[n_layers-1]);
 8004336:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004338:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800433a:	681d      	ldr	r5, [r3, #0]
 800433c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800433e:	f8da 2000 	ldr.w	r2, [sl]
 8004342:	9808      	ldr	r0, [sp, #32]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	9200      	str	r2, [sp, #0]
 8004348:	5809      	ldr	r1, [r1, r0]
 800434a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800434c:	3301      	adds	r3, #1
 800434e:	462a      	mov	r2, r5
 8004350:	6800      	ldr	r0, [r0, #0]
 8004352:	f7ff fe93 	bl	800407c <mat_mul_classify>
        switch (param->output_activation_function) {
 8004356:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004358:	3b01      	subs	r3, #1
 800435a:	2b04      	cmp	r3, #4
 800435c:	d85d      	bhi.n	800441a <mlp_classifier+0x1f6>
 800435e:	e8df f003 	tbb	[pc, r3]
 8004362:	6f62      	.short	0x6f62
 8004364:	7d76      	.short	0x7d76
 8004366:	84          	.byte	0x84
 8004367:	00          	.byte	0x00
            layer_outputs[0][i+1] = layer_inputs[0][i] = param->data_test[test_example][i];
 8004368:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800436a:	f851 2008 	ldr.w	r2, [r1, r8]
 800436e:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 8004372:	4472      	add	r2, lr
 8004374:	e9d2 0100 	ldrd	r0, r1, [r2]
 8004378:	9a07      	ldr	r2, [sp, #28]
 800437a:	6812      	ldr	r2, [r2, #0]
 800437c:	4472      	add	r2, lr
 800437e:	e9c2 0100 	strd	r0, r1, [r2]
 8004382:	e9e3 0102 	strd	r0, r1, [r3, #8]!
        for (i = 0; i < param->feature_size-1; i++)
 8004386:	3501      	adds	r5, #1
 8004388:	e7c9      	b.n	800431e <mlp_classifier+0xfa>
            mat_mul_classify(layer_outputs[i-1], param->weight[i-1], layer_inputs[i], layer_sizes[i-1]+1, layer_sizes[i]);
 800438a:	9b07      	ldr	r3, [sp, #28]
 800438c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800438e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8004392:	9304      	str	r3, [sp, #16]
 8004394:	f856 2025 	ldr.w	r2, [r6, r5, lsl #2]
 8004398:	f856 3008 	ldr.w	r3, [r6, r8]
 800439c:	9200      	str	r2, [sp, #0]
 800439e:	3301      	adds	r3, #1
 80043a0:	9a04      	ldr	r2, [sp, #16]
 80043a2:	f851 1008 	ldr.w	r1, [r1, r8]
 80043a6:	f85b 0008 	ldr.w	r0, [fp, r8]
 80043aa:	f7ff fe67 	bl	800407c <mat_mul_classify>
            switch (param->hidden_activation_functions[i-1]) {
 80043ae:	68a3      	ldr	r3, [r4, #8]
 80043b0:	f853 3008 	ldr.w	r3, [r3, r8]
 80043b4:	3b01      	subs	r3, #1
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	d82f      	bhi.n	800441a <mlp_classifier+0x1f6>
 80043ba:	e8df f003 	tbb	[pc, r3]
 80043be:	0e03      	.short	0x0e03
 80043c0:	1e16      	.short	0x1e16
 80043c2:	26          	.byte	0x26
 80043c3:	00          	.byte	0x00
                    identity_classify(layer_sizes[i], layer_inputs[i], layer_outputs[i]);
 80043c4:	f85b 2025 	ldr.w	r2, [fp, r5, lsl #2]
 80043c8:	9904      	ldr	r1, [sp, #16]
 80043ca:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
 80043ce:	f7ff fe81 	bl	80040d4 <identity_classify>
        for (i = 1; i < n_layers-1; i++) {
 80043d2:	3501      	adds	r5, #1
 80043d4:	f108 0804 	add.w	r8, r8, #4
 80043d8:	e7a8      	b.n	800432c <mlp_classifier+0x108>
                    sigmoid_classify(layer_sizes[i], layer_inputs[i], layer_outputs[i]);
 80043da:	f85b 2025 	ldr.w	r2, [fp, r5, lsl #2]
 80043de:	9904      	ldr	r1, [sp, #16]
 80043e0:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
 80043e4:	f7ff fe88 	bl	80040f8 <sigmoid_classify>
                    break;
 80043e8:	e7f3      	b.n	80043d2 <mlp_classifier+0x1ae>
                    tan_h_classify(layer_sizes[i], layer_inputs[i], layer_outputs[i]);
 80043ea:	f85b 2025 	ldr.w	r2, [fp, r5, lsl #2]
 80043ee:	9904      	ldr	r1, [sp, #16]
 80043f0:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
 80043f4:	f7ff fea8 	bl	8004148 <tan_h_classify>
                    break;
 80043f8:	e7eb      	b.n	80043d2 <mlp_classifier+0x1ae>
                    relu_classify(layer_sizes[i], layer_inputs[i], layer_outputs[i]);
 80043fa:	f85b 2025 	ldr.w	r2, [fp, r5, lsl #2]
 80043fe:	9904      	ldr	r1, [sp, #16]
 8004400:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
 8004404:	f7ff feb8 	bl	8004178 <relu_classify>
                    break;
 8004408:	e7e3      	b.n	80043d2 <mlp_classifier+0x1ae>
                    softmax_classify(layer_sizes[i], layer_inputs[i], layer_outputs[i]);
 800440a:	f85b 2025 	ldr.w	r2, [fp, r5, lsl #2]
 800440e:	9904      	ldr	r1, [sp, #16]
 8004410:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
 8004414:	f7ff fed4 	bl	80041c0 <softmax_classify>
                    break;
 8004418:	e7db      	b.n	80043d2 <mlp_classifier+0x1ae>
                    printf("Forward propagation: Invalid hidden activation function\n");
 800441a:	485c      	ldr	r0, [pc, #368]	; (800458c <mlp_classifier+0x368>)
 800441c:	f7fd fbf4 	bl	8001c08 <puts>
                    exit(0);
 8004420:	2000      	movs	r0, #0
 8004422:	f7fd f92b 	bl	800167c <exit>
                identity_classify(layer_sizes[n_layers-1], layer_inputs[n_layers-1], layer_outputs[n_layers-1]);
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	f8da 0000 	ldr.w	r0, [sl]
 800442c:	4629      	mov	r1, r5
 800442e:	f7ff fe51 	bl	80040d4 <identity_classify>
        for (i = 0; i < param->output_layer_size; i++)
 8004432:	6a25      	ldr	r5, [r4, #32]
 8004434:	2300      	movs	r3, #0
 8004436:	429d      	cmp	r5, r3
 8004438:	dc1e      	bgt.n	8004478 <mlp_classifier+0x254>
 800443a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800443e:	e727      	b.n	8004290 <mlp_classifier+0x6c>
                sigmoid_classify(layer_sizes[n_layers-1], layer_inputs[n_layers-1], layer_outputs[n_layers-1]);
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	f8da 0000 	ldr.w	r0, [sl]
 8004446:	4629      	mov	r1, r5
 8004448:	f7ff fe56 	bl	80040f8 <sigmoid_classify>
                break;
 800444c:	e7f1      	b.n	8004432 <mlp_classifier+0x20e>
                tan_h_classify(layer_sizes[n_layers-1], layer_inputs[n_layers-1], layer_outputs[n_layers-1]);
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	f8da 0000 	ldr.w	r0, [sl]
 8004454:	4629      	mov	r1, r5
 8004456:	f7ff fe77 	bl	8004148 <tan_h_classify>
                break;
 800445a:	e7ea      	b.n	8004432 <mlp_classifier+0x20e>
                relu_classify(layer_sizes[n_layers-1], layer_inputs[n_layers-1], layer_outputs[n_layers-1]);
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	f8da 0000 	ldr.w	r0, [sl]
 8004462:	4629      	mov	r1, r5
 8004464:	f7ff fe88 	bl	8004178 <relu_classify>
                break;
 8004468:	e7e3      	b.n	8004432 <mlp_classifier+0x20e>
                softmax_classify(layer_sizes[n_layers-1], layer_inputs[n_layers-1], layer_outputs[n_layers-1]);
 800446a:	683a      	ldr	r2, [r7, #0]
 800446c:	f8da 0000 	ldr.w	r0, [sl]
 8004470:	4629      	mov	r1, r5
 8004472:	f7ff fea5 	bl	80041c0 <softmax_classify>
                break;
 8004476:	e7dc      	b.n	8004432 <mlp_classifier+0x20e>
            final_output[test_example][i] = layer_outputs[n_layers-1][i+1];
 8004478:	1c59      	adds	r1, r3, #1
 800447a:	9b03      	ldr	r3, [sp, #12]
 800447c:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	00ca      	lsls	r2, r1, #3
 8004484:	4413      	add	r3, r2
 8004486:	4410      	add	r0, r2
 8004488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448c:	e940 2302 	strd	r2, r3, [r0, #-8]
        for (i = 0; i < param->output_layer_size; i++)
 8004490:	460b      	mov	r3, r1
 8004492:	e7d0      	b.n	8004436 <mlp_classifier+0x212>
            if (final_output[test_example][0] < 0.5)
 8004494:	9b03      	ldr	r3, [sp, #12]
 8004496:	f853 602a 	ldr.w	r6, [r3, sl, lsl #2]
 800449a:	4b3d      	ldr	r3, [pc, #244]	; (8004590 <mlp_classifier+0x36c>)
 800449c:	2200      	movs	r2, #0
 800449e:	e9d6 0100 	ldrd	r0, r1, [r6]
 80044a2:	f7fd f84f 	bl	8001544 <__aeabi_dcmplt>
 80044a6:	2800      	cmp	r0, #0
 80044a8:	d141      	bne.n	800452e <mlp_classifier+0x30a>
                final_output[test_example][0] = 1;
 80044aa:	4b37      	ldr	r3, [pc, #220]	; (8004588 <mlp_classifier+0x364>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	e9c6 2300 	strd	r2, r3, [r6]
        for (test_example = 0; test_example < param->test_sample_size; test_example++) {
 80044b2:	f10a 0a01 	add.w	sl, sl, #1
 80044b6:	4555      	cmp	r5, sl
 80044b8:	dcec      	bgt.n	8004494 <mlp_classifier+0x270>
    
    double accuracy = 0.0;

    // Calculate the confusion matrix
    if (param->output_layer_size == 1) { // Binary classification
        int true_positive = 0, true_negative = 0, false_positive = 0, false_negative = 0;
 80044ba:	2600      	movs	r6, #0
 80044bc:	46b2      	mov	sl, r6
        for (test_example = 0; test_example < param->test_sample_size; test_example++) {
 80044be:	4637      	mov	r7, r6
 80044c0:	42bd      	cmp	r5, r7
 80044c2:	dc69      	bgt.n	8004598 <mlp_classifier+0x374>
                    ++false_negative;
            }
        }

        // Find the accuracy
        accuracy = (double)(true_positive + true_negative) / param->test_sample_size;
 80044c4:	eb0a 0006 	add.w	r0, sl, r6
 80044c8:	f7fc fd60 	bl	8000f8c <__aeabi_i2d>
 80044cc:	4606      	mov	r6, r0
 80044ce:	4628      	mov	r0, r5
 80044d0:	460f      	mov	r7, r1
 80044d2:	f7fc fd5b 	bl	8000f8c <__aeabi_i2d>
 80044d6:	4602      	mov	r2, r0
 80044d8:	460b      	mov	r3, r1
 80044da:	4630      	mov	r0, r6
 80044dc:	4639      	mov	r1, r7
 80044de:	f7fc fee9 	bl	80012b4 <__aeabi_ddiv>
 80044e2:	4680      	mov	r8, r0
 80044e4:	4689      	mov	r9, r1
    // Write the final output into a csv file
    //char* output_file_name = "data/data_test_output.csv";
    //write_csv(output_file_name, param->test_sample_size, param->output_layer_size, final_output);

    // Free the memory allocated in Heap
    for (i = 0; i < param->test_sample_size; i++)
 80044e6:	2500      	movs	r5, #0
 80044e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80044ea:	42ab      	cmp	r3, r5
 80044ec:	f300 8117 	bgt.w	800471e <mlp_classifier+0x4fa>
        free(final_output[i]);

    free(final_output);
 80044f0:	9803      	ldr	r0, [sp, #12]
 80044f2:	f7fd f903 	bl	80016fc <free>

    for (i = 0; i < n_layers; i++)
 80044f6:	2400      	movs	r4, #0
 80044f8:	9b06      	ldr	r3, [sp, #24]
 80044fa:	429c      	cmp	r4, r3
 80044fc:	f2c0 8116 	blt.w	800472c <mlp_classifier+0x508>
        free(layer_outputs[i]);

    free(layer_outputs);
 8004500:	4658      	mov	r0, fp
 8004502:	f7fd f8fb 	bl	80016fc <free>

    for (i = 0; i < n_layers; i++)
 8004506:	2400      	movs	r4, #0
 8004508:	9b06      	ldr	r3, [sp, #24]
 800450a:	429c      	cmp	r4, r3
 800450c:	f2c0 8114 	blt.w	8004738 <mlp_classifier+0x514>
        free(layer_inputs[i]);

    free(layer_inputs);
 8004510:	9807      	ldr	r0, [sp, #28]
 8004512:	f7fd f8f3 	bl	80016fc <free>
    
    uint8_t accuracy_uint8 = (uint8_t)(accuracy * 100);
 8004516:	2200      	movs	r2, #0
 8004518:	4b1e      	ldr	r3, [pc, #120]	; (8004594 <mlp_classifier+0x370>)
 800451a:	4640      	mov	r0, r8
 800451c:	4649      	mov	r1, r9
 800451e:	f7fc fd9f 	bl	8001060 <__aeabi_dmul>
 8004522:	f7fd f875 	bl	8001610 <__aeabi_d2uiz>
    return accuracy_uint8;
 8004526:	b2c0      	uxtb	r0, r0
 8004528:	b011      	add	sp, #68	; 0x44
 800452a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                final_output[test_example][0] = 0;
 800452e:	4642      	mov	r2, r8
 8004530:	464b      	mov	r3, r9
 8004532:	e7bc      	b.n	80044ae <mlp_classifier+0x28a>
        for (test_example = 0; test_example < param->test_sample_size; test_example++) {
 8004534:	f04f 0a00 	mov.w	sl, #0
                final_output[test_example][0] = 0;
 8004538:	f04f 0800 	mov.w	r8, #0
 800453c:	f04f 0900 	mov.w	r9, #0
 8004540:	e7b9      	b.n	80044b6 <mlp_classifier+0x292>
                if (final_output[test_example][i] > max) {
 8004542:	eb0a 03c7 	add.w	r3, sl, r7, lsl #3
 8004546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800454e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004552:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004556:	3701      	adds	r7, #1
 8004558:	f7fd f812 	bl	8001580 <__aeabi_dcmpgt>
 800455c:	b120      	cbz	r0, 8004568 <mlp_classifier+0x344>
                    max = final_output[test_example][i];
 800455e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004562:	e9cd 2308 	strd	r2, r3, [sp, #32]
                    max_class = i+1;
 8004566:	970f      	str	r7, [sp, #60]	; 0x3c
            for (i = 0; i < param->output_layer_size; i++) {
 8004568:	42be      	cmp	r6, r7
 800456a:	dcea      	bgt.n	8004542 <mlp_classifier+0x31e>
            final_output[test_example][0] = max_class;
 800456c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800456e:	f7fc fd0d 	bl	8000f8c <__aeabi_i2d>
        for (test_example = 0; test_example < param->test_sample_size; test_example++) {
 8004572:	f109 0901 	add.w	r9, r9, #1
            final_output[test_example][0] = max_class;
 8004576:	e9ca 0100 	strd	r0, r1, [sl]
 800457a:	f108 0804 	add.w	r8, r8, #4
 800457e:	e692      	b.n	80042a6 <mlp_classifier+0x82>
 8004580:	bff00000 	.word	0xbff00000
 8004584:	08006007 	.word	0x08006007
 8004588:	3ff00000 	.word	0x3ff00000
 800458c:	0800602a 	.word	0x0800602a
 8004590:	3fe00000 	.word	0x3fe00000
 8004594:	40590000 	.word	0x40590000
            if (final_output[test_example][0] == 0) {
 8004598:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
 800459c:	f103 5200 	add.w	r2, r3, #536870912	; 0x20000000
 80045a0:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
 80045a4:	3a01      	subs	r2, #1
 80045a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80045aa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80045ae:	9b03      	ldr	r3, [sp, #12]
 80045b0:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 80045b4:	2200      	movs	r2, #0
 80045b6:	2300      	movs	r3, #0
 80045b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80045bc:	f7fc ffb8 	bl	8001530 <__aeabi_dcmpeq>
                if (param->data_test[test_example][param->feature_size-1] == 0)
 80045c0:	2200      	movs	r2, #0
            if (final_output[test_example][0] == 0) {
 80045c2:	b140      	cbz	r0, 80045d6 <mlp_classifier+0x3b2>
                if (param->data_test[test_example][param->feature_size-1] == 0)
 80045c4:	2300      	movs	r3, #0
 80045c6:	4640      	mov	r0, r8
 80045c8:	4649      	mov	r1, r9
 80045ca:	f7fc ffb1 	bl	8001530 <__aeabi_dcmpeq>
 80045ce:	b100      	cbz	r0, 80045d2 <mlp_classifier+0x3ae>
                    ++true_negative;
 80045d0:	3601      	adds	r6, #1
        for (test_example = 0; test_example < param->test_sample_size; test_example++) {
 80045d2:	3701      	adds	r7, #1
 80045d4:	e774      	b.n	80044c0 <mlp_classifier+0x29c>
                if (param->data_test[test_example][param->feature_size-1] == 1)
 80045d6:	4b60      	ldr	r3, [pc, #384]	; (8004758 <mlp_classifier+0x534>)
 80045d8:	4640      	mov	r0, r8
 80045da:	4649      	mov	r1, r9
 80045dc:	f7fc ffa8 	bl	8001530 <__aeabi_dcmpeq>
 80045e0:	2800      	cmp	r0, #0
 80045e2:	d0f6      	beq.n	80045d2 <mlp_classifier+0x3ae>
                    ++true_positive;
 80045e4:	f10a 0a01 	add.w	sl, sl, #1
 80045e8:	e7f3      	b.n	80045d2 <mlp_classifier+0x3ae>
            confusion_matrix[i] = (int*)calloc(param->output_layer_size, sizeof(int));
 80045ea:	2104      	movs	r1, #4
 80045ec:	4630      	mov	r0, r6
 80045ee:	f7fd f837 	bl	8001660 <calloc>
 80045f2:	f847 0028 	str.w	r0, [r7, r8, lsl #2]
        for (i = 0; i < param->output_layer_size; i++)
 80045f6:	f108 0801 	add.w	r8, r8, #1
 80045fa:	4546      	cmp	r6, r8
 80045fc:	dcf5      	bgt.n	80045ea <mlp_classifier+0x3c6>
            actual_class = param->data_test[test_example][param->feature_size-1] - 1;
 80045fe:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8004758 <mlp_classifier+0x534>
        for (test_example = 0; test_example < param->test_sample_size; test_example++) {
 8004602:	2600      	movs	r6, #0
            actual_class = param->data_test[test_example][param->feature_size-1] - 1;
 8004604:	f06f 4a60 	mvn.w	sl, #3758096384	; 0xe0000000
 8004608:	f04f 0800 	mov.w	r8, #0
        for (test_example = 0; test_example < param->test_sample_size; test_example++) {
 800460c:	42b5      	cmp	r5, r6
 800460e:	dc2c      	bgt.n	800466a <mlp_classifier+0x446>
        printf("\t");
 8004610:	2009      	movs	r0, #9
 8004612:	f7fd fa73 	bl	8001afc <putchar>
            printf("Predicted %d  ", predicted_class);
 8004616:	4e51      	ldr	r6, [pc, #324]	; (800475c <mlp_classifier+0x538>)
        for (predicted_class = 1; predicted_class <= param->output_layer_size; predicted_class++)
 8004618:	2501      	movs	r5, #1
 800461a:	6a23      	ldr	r3, [r4, #32]
 800461c:	42ab      	cmp	r3, r5
 800461e:	da4a      	bge.n	80046b6 <mlp_classifier+0x492>
        printf("\n---------------------------------------------------------------------------\n");
 8004620:	484f      	ldr	r0, [pc, #316]	; (8004760 <mlp_classifier+0x53c>)
            printf("Actual %d | ", actual_class+1);
 8004622:	f8df 9140 	ldr.w	r9, [pc, #320]	; 8004764 <mlp_classifier+0x540>
                printf("%d\t", confusion_matrix[actual_class][predicted_class]);
 8004626:	f8df a140 	ldr.w	sl, [pc, #320]	; 8004768 <mlp_classifier+0x544>
        printf("\n---------------------------------------------------------------------------\n");
 800462a:	f7fd faed 	bl	8001c08 <puts>
        for (actual_class = 0; actual_class < param->output_layer_size; actual_class++) {
 800462e:	46b8      	mov	r8, r7
 8004630:	2600      	movs	r6, #0
 8004632:	6a25      	ldr	r5, [r4, #32]
 8004634:	42b5      	cmp	r5, r6
 8004636:	dc44      	bgt.n	80046c2 <mlp_classifier+0x49e>
    double accuracy = 0.0;
 8004638:	f04f 0800 	mov.w	r8, #0
 800463c:	f04f 0900 	mov.w	r9, #0
        for (i = 0; i < param->output_layer_size; i++)
 8004640:	2600      	movs	r6, #0
 8004642:	42b5      	cmp	r5, r6
 8004644:	dc55      	bgt.n	80046f2 <mlp_classifier+0x4ce>
        accuracy /= param->test_sample_size;
 8004646:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004648:	f7fc fca0 	bl	8000f8c <__aeabi_i2d>
 800464c:	4602      	mov	r2, r0
 800464e:	460b      	mov	r3, r1
 8004650:	4640      	mov	r0, r8
 8004652:	4649      	mov	r1, r9
 8004654:	f7fc fe2e 	bl	80012b4 <__aeabi_ddiv>
        for (i = 0; i < param->output_layer_size; i++)
 8004658:	2600      	movs	r6, #0
        accuracy /= param->test_sample_size;
 800465a:	4680      	mov	r8, r0
 800465c:	4689      	mov	r9, r1
        for (i = 0; i < param->output_layer_size; i++)
 800465e:	42b5      	cmp	r5, r6
 8004660:	dc57      	bgt.n	8004712 <mlp_classifier+0x4ee>
        free(confusion_matrix);
 8004662:	4638      	mov	r0, r7
 8004664:	f7fd f84a 	bl	80016fc <free>
 8004668:	e73d      	b.n	80044e6 <mlp_classifier+0x2c2>
            actual_class = param->data_test[test_example][param->feature_size-1] - 1;
 800466a:	e9d4 210b 	ldrd	r2, r1, [r4, #44]	; 0x2c
 800466e:	eb0a 0301 	add.w	r3, sl, r1
 8004672:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
 8004676:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800467a:	4642      	mov	r2, r8
 800467c:	464b      	mov	r3, r9
 800467e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004682:	f7fc fb35 	bl	8000cf0 <__aeabi_dsub>
 8004686:	f7fc ff9b 	bl	80015c0 <__aeabi_d2iz>
            predicted_class = final_output[test_example][0] - 1;
 800468a:	9b03      	ldr	r3, [sp, #12]
            actual_class = param->data_test[test_example][param->feature_size-1] - 1;
 800468c:	9004      	str	r0, [sp, #16]
            predicted_class = final_output[test_example][0] - 1;
 800468e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8004692:	4642      	mov	r2, r8
 8004694:	464b      	mov	r3, r9
 8004696:	e9d1 0100 	ldrd	r0, r1, [r1]
 800469a:	f7fc fb29 	bl	8000cf0 <__aeabi_dsub>
 800469e:	f7fc ff8f 	bl	80015c0 <__aeabi_d2iz>
            ++confusion_matrix[actual_class][predicted_class];
 80046a2:	9b04      	ldr	r3, [sp, #16]
 80046a4:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 80046a8:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 80046ac:	3301      	adds	r3, #1
 80046ae:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
        for (test_example = 0; test_example < param->test_sample_size; test_example++) {
 80046b2:	3601      	adds	r6, #1
 80046b4:	e7aa      	b.n	800460c <mlp_classifier+0x3e8>
            printf("Predicted %d  ", predicted_class);
 80046b6:	4629      	mov	r1, r5
 80046b8:	4630      	mov	r0, r6
 80046ba:	f7fd f9f1 	bl	8001aa0 <iprintf>
        for (predicted_class = 1; predicted_class <= param->output_layer_size; predicted_class++)
 80046be:	3501      	adds	r5, #1
 80046c0:	e7ab      	b.n	800461a <mlp_classifier+0x3f6>
            printf("Actual %d | ", actual_class+1);
 80046c2:	3601      	adds	r6, #1
 80046c4:	4631      	mov	r1, r6
 80046c6:	4648      	mov	r0, r9
 80046c8:	f7fd f9ea 	bl	8001aa0 <iprintf>
            for (predicted_class = 0; predicted_class < param->output_layer_size; predicted_class++)
 80046cc:	2500      	movs	r5, #0
 80046ce:	6a23      	ldr	r3, [r4, #32]
 80046d0:	42ab      	cmp	r3, r5
 80046d2:	dc05      	bgt.n	80046e0 <mlp_classifier+0x4bc>
            printf("\n");
 80046d4:	200a      	movs	r0, #10
 80046d6:	f7fd fa11 	bl	8001afc <putchar>
 80046da:	f108 0804 	add.w	r8, r8, #4
 80046de:	e7a8      	b.n	8004632 <mlp_classifier+0x40e>
                printf("%d\t", confusion_matrix[actual_class][predicted_class]);
 80046e0:	f8d8 3000 	ldr.w	r3, [r8]
 80046e4:	4650      	mov	r0, sl
 80046e6:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 80046ea:	f7fd f9d9 	bl	8001aa0 <iprintf>
            for (predicted_class = 0; predicted_class < param->output_layer_size; predicted_class++)
 80046ee:	3501      	adds	r5, #1
 80046f0:	e7ed      	b.n	80046ce <mlp_classifier+0x4aa>
            accuracy += confusion_matrix[i][i];
 80046f2:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
 80046f6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80046fa:	f7fc fc47 	bl	8000f8c <__aeabi_i2d>
 80046fe:	4602      	mov	r2, r0
 8004700:	460b      	mov	r3, r1
 8004702:	4640      	mov	r0, r8
 8004704:	4649      	mov	r1, r9
 8004706:	f7fc faf5 	bl	8000cf4 <__adddf3>
        for (i = 0; i < param->output_layer_size; i++)
 800470a:	3601      	adds	r6, #1
            accuracy += confusion_matrix[i][i];
 800470c:	4680      	mov	r8, r0
 800470e:	4689      	mov	r9, r1
 8004710:	e797      	b.n	8004642 <mlp_classifier+0x41e>
            free(confusion_matrix[i]);
 8004712:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
 8004716:	f7fc fff1 	bl	80016fc <free>
        for (i = 0; i < param->output_layer_size; i++)
 800471a:	3601      	adds	r6, #1
 800471c:	e79f      	b.n	800465e <mlp_classifier+0x43a>
        free(final_output[i]);
 800471e:	9b03      	ldr	r3, [sp, #12]
 8004720:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004724:	f7fc ffea 	bl	80016fc <free>
    for (i = 0; i < param->test_sample_size; i++)
 8004728:	3501      	adds	r5, #1
 800472a:	e6dd      	b.n	80044e8 <mlp_classifier+0x2c4>
        free(layer_outputs[i]);
 800472c:	f85b 0024 	ldr.w	r0, [fp, r4, lsl #2]
 8004730:	f7fc ffe4 	bl	80016fc <free>
    for (i = 0; i < n_layers; i++)
 8004734:	3401      	adds	r4, #1
 8004736:	e6df      	b.n	80044f8 <mlp_classifier+0x2d4>
        free(layer_inputs[i]);
 8004738:	9b07      	ldr	r3, [sp, #28]
 800473a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800473e:	f7fc ffdd 	bl	80016fc <free>
    for (i = 0; i < n_layers; i++)
 8004742:	3401      	adds	r4, #1
 8004744:	e6e0      	b.n	8004508 <mlp_classifier+0x2e4>
        int** confusion_matrix = (int**)calloc(param->output_layer_size, sizeof(int*));
 8004746:	2104      	movs	r1, #4
 8004748:	4630      	mov	r0, r6
 800474a:	f7fc ff89 	bl	8001660 <calloc>
        for (i = 0; i < param->output_layer_size; i++)
 800474e:	f04f 0800 	mov.w	r8, #0
        int** confusion_matrix = (int**)calloc(param->output_layer_size, sizeof(int*));
 8004752:	4607      	mov	r7, r0
        for (i = 0; i < param->output_layer_size; i++)
 8004754:	e751      	b.n	80045fa <mlp_classifier+0x3d6>
 8004756:	bf00      	nop
 8004758:	3ff00000 	.word	0x3ff00000
 800475c:	08006062 	.word	0x08006062
 8004760:	08006071 	.word	0x08006071
 8004764:	080060be 	.word	0x080060be
 8004768:	080060cb 	.word	0x080060cb

0800476c <ss_crc>:


// 0xA6 formerly 
#define CW_CRC 0x4D 
uint8_t ss_crc(uint8_t *buf, uint8_t len)
{
 800476c:	b510      	push	{r4, lr}
 800476e:	4401      	add	r1, r0
	unsigned int k = 0;
	uint8_t crc = 0x00;
 8004770:	2200      	movs	r2, #0
	while (len--) {
 8004772:	4288      	cmp	r0, r1
 8004774:	d101      	bne.n	800477a <ss_crc+0xe>
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
		}
	}
	return crc;

}
 8004776:	4610      	mov	r0, r2
 8004778:	bd10      	pop	{r4, pc}
		crc ^= *buf++;
 800477a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800477e:	4053      	eors	r3, r2
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2408      	movs	r4, #8
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8004784:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004788:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800478c:	bf18      	it	ne
 800478e:	f083 034d 	eorne.w	r3, r3, #77	; 0x4d
 8004792:	b2db      	uxtb	r3, r3
		for (k = 0; k < 8; k++) {
 8004794:	3c01      	subs	r4, #1
 8004796:	461a      	mov	r2, r3
 8004798:	d1f4      	bne.n	8004784 <ss_crc+0x18>
 800479a:	e7ea      	b.n	8004772 <ss_crc+0x6>

0800479c <stuff_data>:
    return 0x00;

}

uint8_t stuff_data(uint8_t *buf, uint8_t len)
{
 800479c:	b530      	push	{r4, r5, lr}
	uint8_t i = 1;
	uint8_t last = 0;
 800479e:	2200      	movs	r2, #0
 80047a0:	4604      	mov	r4, r0
	uint8_t i = 1;
 80047a2:	2301      	movs	r3, #1
	for (; i < len; i++) {
 80047a4:	428b      	cmp	r3, r1
 80047a6:	d301      	bcc.n	80047ac <stuff_data+0x10>
			buf[last] = i - last;
			last = i;
		}
	}
	return 0x00;
}
 80047a8:	2000      	movs	r0, #0
 80047aa:	bd30      	pop	{r4, r5, pc}
		if (buf[i] == FRAME_BYTE) {
 80047ac:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 80047b0:	b915      	cbnz	r5, 80047b8 <stuff_data+0x1c>
			buf[last] = i - last;
 80047b2:	1a9d      	subs	r5, r3, r2
 80047b4:	5485      	strb	r5, [r0, r2]
 80047b6:	461a      	mov	r2, r3
	for (; i < len; i++) {
 80047b8:	3301      	adds	r3, #1
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	e7f2      	b.n	80047a4 <stuff_data+0x8>

080047be <unstuff_data>:

uint8_t unstuff_data(uint8_t *buf, uint8_t len)
{
 80047be:	b510      	push	{r4, lr}
	uint8_t next = buf[0];
 80047c0:	7802      	ldrb	r2, [r0, #0]
	buf[0] = 0x00;
 80047c2:	2400      	movs	r4, #0
 80047c4:	7004      	strb	r4, [r0, #0]
	uint8_t next = buf[0];
 80047c6:	4613      	mov	r3, r2
	//len -= 1;
	uint8_t tmp = next;
	while ((next < len) && tmp != 0) {
 80047c8:	428b      	cmp	r3, r1
 80047ca:	d200      	bcs.n	80047ce <unstuff_data+0x10>
 80047cc:	b90a      	cbnz	r2, 80047d2 <unstuff_data+0x14>
		tmp = buf[next];
		buf[next] = FRAME_BYTE;
		next += tmp;
	}
	return next;
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	bd10      	pop	{r4, pc}
		tmp = buf[next];
 80047d2:	5cc2      	ldrb	r2, [r0, r3]
		buf[next] = FRAME_BYTE;
 80047d4:	54c4      	strb	r4, [r0, r3]
		next += tmp;
 80047d6:	4413      	add	r3, r2
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	e7f5      	b.n	80047c8 <unstuff_data+0xa>

080047dc <simpleserial_addcmd>:
	simpleserial_addcmd('v', 0, check_version);
    simpleserial_addcmd('w', 0, ss_get_commands);
}

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t, uint8_t, uint8_t, uint8_t*))
{
 80047dc:	b538      	push	{r3, r4, r5, lr}
	if(num_commands >= MAX_SS_CMDS) {
 80047de:	4d0b      	ldr	r5, [pc, #44]	; (800480c <simpleserial_addcmd+0x30>)
 80047e0:	682b      	ldr	r3, [r5, #0]
 80047e2:	2b0f      	cmp	r3, #15
 80047e4:	dd04      	ble.n	80047f0 <simpleserial_addcmd+0x14>
		putch('a');
 80047e6:	2061      	movs	r0, #97	; 0x61
		return 1;
	}

	if(len >= MAX_SS_LEN) {
		putch('b');
 80047e8:	f000 f9b4 	bl	8004b54 <putch>
		return 1;
 80047ec:	2001      	movs	r0, #1
	commands[num_commands].len = len;
	commands[num_commands].fp  = fp;
	num_commands++;

	return 0;
}
 80047ee:	bd38      	pop	{r3, r4, r5, pc}
	if(len >= MAX_SS_LEN) {
 80047f0:	29ff      	cmp	r1, #255	; 0xff
 80047f2:	d901      	bls.n	80047f8 <simpleserial_addcmd+0x1c>
		putch('b');
 80047f4:	2062      	movs	r0, #98	; 0x62
 80047f6:	e7f7      	b.n	80047e8 <simpleserial_addcmd+0xc>
	commands[num_commands].c   = c;
 80047f8:	240c      	movs	r4, #12
 80047fa:	fb04 5403 	mla	r4, r4, r3, r5
	num_commands++;
 80047fe:	3301      	adds	r3, #1
	commands[num_commands].c   = c;
 8004800:	7120      	strb	r0, [r4, #4]
	commands[num_commands].fp  = fp;
 8004802:	e9c4 1202 	strd	r1, r2, [r4, #8]
	num_commands++;
 8004806:	602b      	str	r3, [r5, #0]
	return 0;
 8004808:	2000      	movs	r0, #0
 800480a:	e7f0      	b.n	80047ee <simpleserial_addcmd+0x12>
 800480c:	20000084 	.word	0x20000084

08004810 <simpleserial_init>:
{
 8004810:	b508      	push	{r3, lr}
	simpleserial_addcmd('v', 0, check_version);
 8004812:	4a06      	ldr	r2, [pc, #24]	; (800482c <simpleserial_init+0x1c>)
 8004814:	2100      	movs	r1, #0
 8004816:	2076      	movs	r0, #118	; 0x76
 8004818:	f7ff ffe0 	bl	80047dc <simpleserial_addcmd>
    simpleserial_addcmd('w', 0, ss_get_commands);
 800481c:	4a04      	ldr	r2, [pc, #16]	; (8004830 <simpleserial_init+0x20>)
 800481e:	2100      	movs	r1, #0
 8004820:	2077      	movs	r0, #119	; 0x77
}
 8004822:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    simpleserial_addcmd('w', 0, ss_get_commands);
 8004826:	f7ff bfd9 	b.w	80047dc <simpleserial_addcmd>
 800482a:	bf00      	nop
 800482c:	08004893 	.word	0x08004893
 8004830:	080048b1 	.word	0x080048b1

08004834 <simpleserial_put>:
	simpleserial_put('e', 0x01, &err);
	return;
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 8004834:	b570      	push	{r4, r5, r6, lr}
 8004836:	b0c0      	sub	sp, #256	; 0x100
	uint8_t data_buf[MAX_SS_LEN];
	data_buf[0] = 0x00;
 8004838:	2300      	movs	r3, #0
{
 800483a:	460c      	mov	r4, r1
	data_buf[1] = c;
	data_buf[2] = size;
 800483c:	f88d 1002 	strb.w	r1, [sp, #2]
	data_buf[0] = 0x00;
 8004840:	f88d 3000 	strb.w	r3, [sp]
	data_buf[1] = c;
 8004844:	f88d 0001 	strb.w	r0, [sp, #1]
	int i = 0;
	for (; i < size; i++) {
 8004848:	f10d 0103 	add.w	r1, sp, #3
 800484c:	429c      	cmp	r4, r3
 800484e:	dc1b      	bgt.n	8004888 <simpleserial_put+0x54>
		data_buf[i + 3] = output[i];
	}
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 8004850:	1ca1      	adds	r1, r4, #2
 8004852:	b2c9      	uxtb	r1, r1
 8004854:	f10d 0001 	add.w	r0, sp, #1
 8004858:	f7ff ff88 	bl	800476c <ss_crc>
 800485c:	eb0d 0304 	add.w	r3, sp, r4
	data_buf[i + 4] = 0x00;
 8004860:	1d26      	adds	r6, r4, #4
	stuff_data(data_buf, i + 5);
 8004862:	1d61      	adds	r1, r4, #5
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 8004864:	70d8      	strb	r0, [r3, #3]
	data_buf[i + 4] = 0x00;
 8004866:	2500      	movs	r5, #0
	stuff_data(data_buf, i + 5);
 8004868:	b2c9      	uxtb	r1, r1
 800486a:	4668      	mov	r0, sp
	data_buf[i + 4] = 0x00;
 800486c:	f80d 5006 	strb.w	r5, [sp, r6]
	stuff_data(data_buf, i + 5);
 8004870:	f7ff ff94 	bl	800479c <stuff_data>
	for (int i = 0; i < size + 5; i++) {
 8004874:	466c      	mov	r4, sp
		putch(data_buf[i]);
 8004876:	f814 0b01 	ldrb.w	r0, [r4], #1
	for (int i = 0; i < size + 5; i++) {
 800487a:	3501      	adds	r5, #1
		putch(data_buf[i]);
 800487c:	f000 f96a 	bl	8004b54 <putch>
	for (int i = 0; i < size + 5; i++) {
 8004880:	42ae      	cmp	r6, r5
 8004882:	daf8      	bge.n	8004876 <simpleserial_put+0x42>
	}
}
 8004884:	b040      	add	sp, #256	; 0x100
 8004886:	bd70      	pop	{r4, r5, r6, pc}
		data_buf[i + 3] = output[i];
 8004888:	5cd0      	ldrb	r0, [r2, r3]
 800488a:	f801 0b01 	strb.w	r0, [r1], #1
	for (; i < size; i++) {
 800488e:	3301      	adds	r3, #1
 8004890:	e7dc      	b.n	800484c <simpleserial_put+0x18>

08004892 <check_version>:
{
 8004892:	b507      	push	{r0, r1, r2, lr}
	uint8_t ver = SS_VER;
 8004894:	2303      	movs	r3, #3
	simpleserial_put('r', 1, &ver);
 8004896:	f10d 0207 	add.w	r2, sp, #7
 800489a:	2101      	movs	r1, #1
 800489c:	2072      	movs	r0, #114	; 0x72
	uint8_t ver = SS_VER;
 800489e:	f88d 3007 	strb.w	r3, [sp, #7]
	simpleserial_put('r', 1, &ver);
 80048a2:	f7ff ffc7 	bl	8004834 <simpleserial_put>
}
 80048a6:	2000      	movs	r0, #0
 80048a8:	b003      	add	sp, #12
 80048aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80048ae:	0000      	movs	r0, r0

080048b0 <ss_get_commands>:
{
 80048b0:	b530      	push	{r4, r5, lr}
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 80048b2:	4a0c      	ldr	r2, [pc, #48]	; (80048e4 <ss_get_commands+0x34>)
 80048b4:	7811      	ldrb	r1, [r2, #0]
{
 80048b6:	b085      	sub	sp, #20
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 80048b8:	2000      	movs	r0, #0
        cmd_chars[i] = commands[i].c;
 80048ba:	240c      	movs	r4, #12
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 80048bc:	b2c3      	uxtb	r3, r0
 80048be:	428b      	cmp	r3, r1
 80048c0:	f100 0001 	add.w	r0, r0, #1
 80048c4:	db06      	blt.n	80048d4 <ss_get_commands+0x24>
    simpleserial_put('r', num_commands & 0xFF, (void *)cmd_chars);
 80048c6:	466a      	mov	r2, sp
 80048c8:	2072      	movs	r0, #114	; 0x72
 80048ca:	f7ff ffb3 	bl	8004834 <simpleserial_put>
}
 80048ce:	2000      	movs	r0, #0
 80048d0:	b005      	add	sp, #20
 80048d2:	bd30      	pop	{r4, r5, pc}
        cmd_chars[i] = commands[i].c;
 80048d4:	ad04      	add	r5, sp, #16
 80048d6:	441d      	add	r5, r3
 80048d8:	fb04 2303 	mla	r3, r4, r3, r2
 80048dc:	791b      	ldrb	r3, [r3, #4]
 80048de:	f805 3c10 	strb.w	r3, [r5, #-16]
 80048e2:	e7eb      	b.n	80048bc <ss_get_commands+0xc>
 80048e4:	20000084 	.word	0x20000084

080048e8 <simpleserial_get>:
{
 80048e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80048ec:	b0c3      	sub	sp, #268	; 0x10c
	uint8_t err = 0;
 80048ee:	2500      	movs	r5, #0
 80048f0:	ae02      	add	r6, sp, #8
 80048f2:	f88d 5007 	strb.w	r5, [sp, #7]
	for (int i = 0; i < 4; i++) {
 80048f6:	4634      	mov	r4, r6
		data_buf[i] = getch(); //PTR, cmd, scmd, len
 80048f8:	f000 f912 	bl	8004b20 <getch>
 80048fc:	f806 0b01 	strb.w	r0, [r6], #1
		if (data_buf[i] == FRAME_BYTE) {
 8004900:	b958      	cbnz	r0, 800491a <simpleserial_get+0x32>
			err = SS_ERR_FRAME_BYTE;
 8004902:	2305      	movs	r3, #5
		err = SS_ERR_CRC;
 8004904:	f88d 3007 	strb.w	r3, [sp, #7]
	simpleserial_put('e', 0x01, &err);
 8004908:	f10d 0207 	add.w	r2, sp, #7
 800490c:	2101      	movs	r1, #1
 800490e:	2065      	movs	r0, #101	; 0x65
 8004910:	f7ff ff90 	bl	8004834 <simpleserial_put>
}
 8004914:	b043      	add	sp, #268	; 0x10c
 8004916:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (int i = 0; i < 4; i++) {
 800491a:	3501      	adds	r5, #1
 800491c:	2d04      	cmp	r5, #4
 800491e:	d1eb      	bne.n	80048f8 <simpleserial_get+0x10>
	uint8_t next_frame = unstuff_data(data_buf, 4);
 8004920:	4629      	mov	r1, r5
 8004922:	4620      	mov	r0, r4
 8004924:	f7ff ff4b 	bl	80047be <unstuff_data>
	for(c = 0; c < num_commands; c++)
 8004928:	4f24      	ldr	r7, [pc, #144]	; (80049bc <simpleserial_get+0xd4>)
		if(commands[c].c == data_buf[1])
 800492a:	7861      	ldrb	r1, [r4, #1]
	for(c = 0; c < num_commands; c++)
 800492c:	683a      	ldr	r2, [r7, #0]
	uint8_t next_frame = unstuff_data(data_buf, 4);
 800492e:	4681      	mov	r9, r0
	for(c = 0; c < num_commands; c++)
 8004930:	2300      	movs	r3, #0
 8004932:	46b8      	mov	r8, r7
		if(commands[c].c == data_buf[1])
 8004934:	200c      	movs	r0, #12
	for(c = 0; c < num_commands; c++)
 8004936:	b2df      	uxtb	r7, r3
 8004938:	4297      	cmp	r7, r2
 800493a:	db02      	blt.n	8004942 <simpleserial_get+0x5a>
	if (c == num_commands) {
 800493c:	d107      	bne.n	800494e <simpleserial_get+0x66>
		err = SS_ERR_CMD;
 800493e:	2301      	movs	r3, #1
 8004940:	e7e0      	b.n	8004904 <simpleserial_get+0x1c>
		if(commands[c].c == data_buf[1])
 8004942:	fb00 8607 	mla	r6, r0, r7, r8
 8004946:	3301      	adds	r3, #1
 8004948:	7936      	ldrb	r6, [r6, #4]
 800494a:	428e      	cmp	r6, r1
 800494c:	d1f3      	bne.n	8004936 <simpleserial_get+0x4e>
	if ((data_buf[3] + 5) < next_frame) {
 800494e:	78e3      	ldrb	r3, [r4, #3]
 8004950:	3305      	adds	r3, #5
 8004952:	454b      	cmp	r3, r9
 8004954:	da02      	bge.n	800495c <simpleserial_get+0x74>
		err = SS_ERR_LEN;
 8004956:	2304      	movs	r3, #4
 8004958:	e7d4      	b.n	8004904 <simpleserial_get+0x1c>
 800495a:	4635      	mov	r5, r6
		data_buf[i] = getch();
 800495c:	f000 f8e0 	bl	8004b20 <getch>
 8004960:	5560      	strb	r0, [r4, r5]
		if (data_buf[i] == FRAME_BYTE) {
 8004962:	2800      	cmp	r0, #0
 8004964:	d0cd      	beq.n	8004902 <simpleserial_get+0x1a>
	for (; i < data_buf[3] + 5; i++) {
 8004966:	78e3      	ldrb	r3, [r4, #3]
 8004968:	1c6e      	adds	r6, r5, #1
 800496a:	3304      	adds	r3, #4
 800496c:	42b3      	cmp	r3, r6
 800496e:	daf4      	bge.n	800495a <simpleserial_get+0x72>
	data_buf[i] = getch();
 8004970:	f000 f8d6 	bl	8004b20 <getch>
 8004974:	55a0      	strb	r0, [r4, r6]
	if (data_buf[i] != FRAME_BYTE) {
 8004976:	2800      	cmp	r0, #0
 8004978:	d1ed      	bne.n	8004956 <simpleserial_get+0x6e>
	unstuff_data(data_buf + next_frame, i - next_frame + 1);
 800497a:	b2f6      	uxtb	r6, r6
 800497c:	f1c9 0101 	rsb	r1, r9, #1
 8004980:	4431      	add	r1, r6
 8004982:	b2c9      	uxtb	r1, r1
 8004984:	eb04 0009 	add.w	r0, r4, r9
	uint8_t crc = ss_crc(data_buf+1, i-2);
 8004988:	3e02      	subs	r6, #2
	unstuff_data(data_buf + next_frame, i - next_frame + 1);
 800498a:	f7ff ff18 	bl	80047be <unstuff_data>
	uint8_t crc = ss_crc(data_buf+1, i-2);
 800498e:	b2f1      	uxtb	r1, r6
 8004990:	f10d 0009 	add.w	r0, sp, #9
 8004994:	f7ff feea 	bl	800476c <ss_crc>
	if (crc != data_buf[i-1]) {
 8004998:	5d63      	ldrb	r3, [r4, r5]
 800499a:	4283      	cmp	r3, r0
 800499c:	d001      	beq.n	80049a2 <simpleserial_get+0xba>
		err = SS_ERR_CRC;
 800499e:	2302      	movs	r3, #2
 80049a0:	e7b0      	b.n	8004904 <simpleserial_get+0x1c>
	err = commands[c].fp(data_buf[1], data_buf[2], data_buf[3], data_buf+4);
 80049a2:	230c      	movs	r3, #12
 80049a4:	fb03 8707 	mla	r7, r3, r7, r8
 80049a8:	78e2      	ldrb	r2, [r4, #3]
 80049aa:	68fd      	ldr	r5, [r7, #12]
 80049ac:	78a1      	ldrb	r1, [r4, #2]
 80049ae:	7860      	ldrb	r0, [r4, #1]
 80049b0:	446b      	add	r3, sp
 80049b2:	47a8      	blx	r5
 80049b4:	f88d 0007 	strb.w	r0, [sp, #7]
 80049b8:	e7a6      	b.n	8004908 <simpleserial_get+0x20>
 80049ba:	bf00      	nop
 80049bc:	20000084 	.word	0x20000084

080049c0 <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 80049c0:	b570      	push	{r4, r5, r6, lr}
 80049c2:	b096      	sub	sp, #88	; 0x58
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
  #else
     RCC_OscInitTypeDef RCC_OscInitStruct;
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 80049c4:	2400      	movs	r4, #0
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 80049c6:	2603      	movs	r6, #3
 80049c8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80049cc:	a80c      	add	r0, sp, #48	; 0x30

     RCC_ClkInitTypeDef RCC_ClkInitStruct;
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 80049ce:	2501      	movs	r5, #1
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 80049d0:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 80049d4:	9410      	str	r4, [sp, #64]	; 0x40
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 80049d6:	9414      	str	r4, [sp, #80]	; 0x50
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80049d8:	f000 f8d4 	bl	8004b84 <HAL_RCC_OscConfig>
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 80049dc:	230f      	movs	r3, #15
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
     uint32_t flash_latency = 0;
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 80049de:	4621      	mov	r1, r4
 80049e0:	a802      	add	r0, sp, #8
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 80049e2:	e9cd 3502 	strd	r3, r5, [sp, #8]
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80049e6:	e9cd 4404 	strd	r4, r4, [sp, #16]
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80049ea:	9406      	str	r4, [sp, #24]
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 80049ec:	f000 fb3a 	bl	8005064 <HAL_RCC_ClockConfig>




#if (PLATFORM==CWLITEARM)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80049f0:	4b11      	ldr	r3, [pc, #68]	; (8004a38 <platform_init+0x78>)
 80049f2:	695a      	ldr	r2, [r3, #20]
 80049f4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80049f8:	615a      	str	r2, [r3, #20]
 80049fa:	695b      	ldr	r3, [r3, #20]
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80049fc:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8004a04:	4c0d      	ldr	r4, [pc, #52]	; (8004a3c <platform_init+0x7c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a06:	9301      	str	r3, [sp, #4]
 8004a08:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8004a0a:	a907      	add	r1, sp, #28
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 8004a0c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8004a10:	4620      	mov	r0, r4
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8004a12:	e9cd 3507 	strd	r3, r5, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8004a16:	f000 fbcb 	bl	80051b0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8004a1a:	462a      	mov	r2, r5
 8004a1c:	4620      	mov	r0, r4
 8004a1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004a22:	f000 fc87 	bl	8005334 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8004a26:	462a      	mov	r2, r5
 8004a28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004a2c:	4620      	mov	r0, r4
 8004a2e:	f000 fc81 	bl	8005334 <HAL_GPIO_WritePin>
#endif
}
 8004a32:	b016      	add	sp, #88	; 0x58
 8004a34:	bd70      	pop	{r4, r5, r6, pc}
 8004a36:	bf00      	nop
 8004a38:	40021000 	.word	0x40021000
 8004a3c:	48000800 	.word	0x48000800

08004a40 <init_uart>:

void init_uart(void)
{
 8004a40:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 8004a42:	f44f 62c0 	mov.w	r2, #1536	; 0x600
{
 8004a46:	b088      	sub	sp, #32
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 8004a48:	2302      	movs	r3, #2
 8004a4a:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GpioInit.Pull      = GPIO_PULLUP;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8004a4e:	2101      	movs	r1, #1
 8004a50:	2303      	movs	r3, #3
 8004a52:	e9cd 1305 	strd	r1, r3, [sp, #20]
  GpioInit.Alternate = GPIO_AF7_USART1;
  __GPIOA_CLK_ENABLE();
 8004a56:	4c16      	ldr	r4, [pc, #88]	; (8004ab0 <init_uart+0x70>)
  GpioInit.Alternate = GPIO_AF7_USART1;
 8004a58:	2307      	movs	r3, #7
 8004a5a:	9307      	str	r3, [sp, #28]
  __GPIOA_CLK_ENABLE();
 8004a5c:	6963      	ldr	r3, [r4, #20]
 8004a5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a62:	6163      	str	r3, [r4, #20]
 8004a64:	6963      	ldr	r3, [r4, #20]
 8004a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6a:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8004a6c:	a903      	add	r1, sp, #12
 8004a6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __GPIOA_CLK_ENABLE();
 8004a72:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8004a74:	f000 fb9c 	bl	80051b0 <HAL_GPIO_Init>

  UartHandle.Instance        = USART1;
 8004a78:	480e      	ldr	r0, [pc, #56]	; (8004ab4 <init_uart+0x74>)
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
 8004a7a:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8004ab8 <init_uart+0x78>
 8004a7e:	f44f 3361 	mov.w	r3, #230400	; 0x38400
 8004a82:	e9c0 c300 	strd	ip, r3, [r0]
  #else
  UartHandle.Init.BaudRate   = 38400;
  #endif
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8004a86:	2300      	movs	r3, #0
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8004a88:	e9c0 3302 	strd	r3, r3, [r0, #8]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8004a8c:	6103      	str	r3, [r0, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8004a8e:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8004a90:	230c      	movs	r3, #12
 8004a92:	6143      	str	r3, [r0, #20]
  __USART1_CLK_ENABLE();
 8004a94:	69a3      	ldr	r3, [r4, #24]
 8004a96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a9a:	61a3      	str	r3, [r4, #24]
 8004a9c:	69a3      	ldr	r3, [r4, #24]
 8004a9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aa2:	9302      	str	r3, [sp, #8]
 8004aa4:	9b02      	ldr	r3, [sp, #8]
  HAL_UART_Init(&UartHandle);
 8004aa6:	f000 fd9f 	bl	80055e8 <HAL_UART_Init>
}
 8004aaa:	b008      	add	sp, #32
 8004aac:	bd10      	pop	{r4, pc}
 8004aae:	bf00      	nop
 8004ab0:	40021000 	.word	0x40021000
 8004ab4:	20000168 	.word	0x20000168
 8004ab8:	40013800 	.word	0x40013800

08004abc <trigger_setup>:

void trigger_setup(void)
{
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004abc:	4b10      	ldr	r3, [pc, #64]	; (8004b00 <trigger_setup+0x44>)
{
 8004abe:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ac0:	695a      	ldr	r2, [r3, #20]
 8004ac2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004ac6:	615a      	str	r2, [r3, #20]
 8004ac8:	695b      	ldr	r3, [r3, #20]
{
 8004aca:	b087      	sub	sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	9b00      	ldr	r3, [sp, #0]

  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_12;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8004ad4:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e9cd 4301 	strd	r4, r3, [sp, #4]
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8004ade:	2500      	movs	r5, #0
 8004ae0:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8004ae2:	a901      	add	r1, sp, #4
 8004ae4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8004ae8:	e9cd 5303 	strd	r5, r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8004aec:	f000 fb60 	bl	80051b0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8004af0:	462a      	mov	r2, r5
 8004af2:	4621      	mov	r1, r4
 8004af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004af8:	f000 fc1c 	bl	8005334 <HAL_GPIO_WritePin>
}
 8004afc:	b007      	add	sp, #28
 8004afe:	bd30      	pop	{r4, r5, pc}
 8004b00:	40021000 	.word	0x40021000

08004b04 <trigger_high>:

void trigger_high(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 8004b04:	2201      	movs	r2, #1
 8004b06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b0e:	f000 bc11 	b.w	8005334 <HAL_GPIO_WritePin>

08004b12 <trigger_low>:
}

void trigger_low(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8004b12:	2200      	movs	r2, #0
 8004b14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b1c:	f000 bc0a 	b.w	8005334 <HAL_GPIO_WritePin>

08004b20 <getch>:
}

char getch(void)
{
 8004b20:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t d;
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8004b22:	4d0a      	ldr	r5, [pc, #40]	; (8004b4c <getch+0x2c>)
    USART1->ICR |= (1 << 3);
 8004b24:	4c0a      	ldr	r4, [pc, #40]	; (8004b50 <getch+0x30>)
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8004b26:	f241 3388 	movw	r3, #5000	; 0x1388
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f10d 0107 	add.w	r1, sp, #7
 8004b30:	4628      	mov	r0, r5
 8004b32:	f000 fdda 	bl	80056ea <HAL_UART_Receive>
 8004b36:	b918      	cbnz	r0, 8004b40 <getch+0x20>
  //putch(d);
  return d;
}
 8004b38:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8004b3c:	b003      	add	sp, #12
 8004b3e:	bd30      	pop	{r4, r5, pc}
    USART1->ICR |= (1 << 3);
 8004b40:	6a23      	ldr	r3, [r4, #32]
 8004b42:	f043 0308 	orr.w	r3, r3, #8
 8004b46:	6223      	str	r3, [r4, #32]
 8004b48:	e7ed      	b.n	8004b26 <getch+0x6>
 8004b4a:	bf00      	nop
 8004b4c:	20000168 	.word	0x20000168
 8004b50:	40013800 	.word	0x40013800

08004b54 <putch>:

void putch(char c)
{
 8004b54:	b507      	push	{r0, r1, r2, lr}
  uint8_t d  = c;
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8004b56:	f241 3388 	movw	r3, #5000	; 0x1388
  uint8_t d  = c;
 8004b5a:	f88d 0007 	strb.w	r0, [sp, #7]
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f10d 0107 	add.w	r1, sp, #7
 8004b64:	4802      	ldr	r0, [pc, #8]	; (8004b70 <putch+0x1c>)
 8004b66:	f000 fd6a 	bl	800563e <HAL_UART_Transmit>
}
 8004b6a:	b003      	add	sp, #12
 8004b6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b70:	20000168 	.word	0x20000168

08004b74 <HAL_GetTick>:
	hal_sys_tick = 0;
	return HAL_OK;
}
uint32_t HAL_GetTick(void)
{
	return hal_sys_tick++;
 8004b74:	4b02      	ldr	r3, [pc, #8]	; (8004b80 <HAL_GetTick+0xc>)
 8004b76:	6818      	ldr	r0, [r3, #0]
 8004b78:	1c42      	adds	r2, r0, #1
 8004b7a:	601a      	str	r2, [r3, #0]
}
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	20000148 	.word	0x20000148

08004b84 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b84:	6803      	ldr	r3, [r0, #0]
{
 8004b86:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b8a:	07d9      	lsls	r1, r3, #31
{
 8004b8c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b8e:	d411      	bmi.n	8004bb4 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b90:	6823      	ldr	r3, [r4, #0]
 8004b92:	079a      	lsls	r2, r3, #30
 8004b94:	f100 8086 	bmi.w	8004ca4 <HAL_RCC_OscConfig+0x120>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b98:	6823      	ldr	r3, [r4, #0]
 8004b9a:	071e      	lsls	r6, r3, #28
 8004b9c:	f100 80f4 	bmi.w	8004d88 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ba0:	6823      	ldr	r3, [r4, #0]
 8004ba2:	075d      	lsls	r5, r3, #29
 8004ba4:	f100 813b 	bmi.w	8004e1e <HAL_RCC_OscConfig+0x29a>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ba8:	69e2      	ldr	r2, [r4, #28]
 8004baa:	2a00      	cmp	r2, #0
 8004bac:	f040 81cf 	bne.w	8004f4e <HAL_RCC_OscConfig+0x3ca>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8004bb0:	2000      	movs	r0, #0
 8004bb2:	e021      	b.n	8004bf8 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004bb4:	49b7      	ldr	r1, [pc, #732]	; (8004e94 <HAL_RCC_OscConfig+0x310>)
 8004bb6:	684b      	ldr	r3, [r1, #4]
 8004bb8:	f003 030c 	and.w	r3, r3, #12
 8004bbc:	2b04      	cmp	r3, #4
 8004bbe:	d007      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004bc0:	684b      	ldr	r3, [r1, #4]
 8004bc2:	f003 030c 	and.w	r3, r3, #12
 8004bc6:	2b08      	cmp	r3, #8
 8004bc8:	d119      	bne.n	8004bfe <HAL_RCC_OscConfig+0x7a>
 8004bca:	684b      	ldr	r3, [r1, #4]
 8004bcc:	03db      	lsls	r3, r3, #15
 8004bce:	d516      	bpl.n	8004bfe <HAL_RCC_OscConfig+0x7a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bd4:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bd8:	6809      	ldr	r1, [r1, #0]
 8004bda:	fa93 f3a3 	rbit	r3, r3
 8004bde:	fab3 f383 	clz	r3, r3
 8004be2:	f003 031f 	and.w	r3, r3, #31
 8004be6:	2201      	movs	r2, #1
 8004be8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bec:	420b      	tst	r3, r1
 8004bee:	d0cf      	beq.n	8004b90 <HAL_RCC_OscConfig+0xc>
 8004bf0:	6863      	ldr	r3, [r4, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1cc      	bne.n	8004b90 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8004bf6:	2001      	movs	r0, #1
}
 8004bf8:	b003      	add	sp, #12
 8004bfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bfe:	6862      	ldr	r2, [r4, #4]
 8004c00:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004c04:	d124      	bne.n	8004c50 <HAL_RCC_OscConfig+0xcc>
 8004c06:	680b      	ldr	r3, [r1, #0]
 8004c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c0c:	600b      	str	r3, [r1, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004c0e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8004c10:	68a0      	ldr	r0, [r4, #8]
 8004c12:	f023 030f 	bic.w	r3, r3, #15
 8004c16:	4303      	orrs	r3, r0
 8004c18:	62cb      	str	r3, [r1, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c1a:	b34a      	cbz	r2, 8004c70 <HAL_RCC_OscConfig+0xec>
        tickstart = HAL_GetTick();
 8004c1c:	f7ff ffaa 	bl	8004b74 <HAL_GetTick>
 8004c20:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8004c24:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c26:	2601      	movs	r6, #1
 8004c28:	fa95 f3a5 	rbit	r3, r5
 8004c2c:	680a      	ldr	r2, [r1, #0]
 8004c2e:	fa95 f3a5 	rbit	r3, r5
 8004c32:	fab3 f383 	clz	r3, r3
 8004c36:	f003 031f 	and.w	r3, r3, #31
 8004c3a:	fa06 f303 	lsl.w	r3, r6, r3
 8004c3e:	4213      	tst	r3, r2
 8004c40:	d1a6      	bne.n	8004b90 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c42:	f7ff ff97 	bl	8004b74 <HAL_GetTick>
 8004c46:	1bc0      	subs	r0, r0, r7
 8004c48:	2864      	cmp	r0, #100	; 0x64
 8004c4a:	d9ed      	bls.n	8004c28 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 8004c4c:	2003      	movs	r0, #3
 8004c4e:	e7d3      	b.n	8004bf8 <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c50:	680b      	ldr	r3, [r1, #0]
 8004c52:	b932      	cbnz	r2, 8004c62 <HAL_RCC_OscConfig+0xde>
 8004c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c58:	600b      	str	r3, [r1, #0]
 8004c5a:	680b      	ldr	r3, [r1, #0]
 8004c5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c60:	e7d4      	b.n	8004c0c <HAL_RCC_OscConfig+0x88>
 8004c62:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8004c66:	d1f5      	bne.n	8004c54 <HAL_RCC_OscConfig+0xd0>
 8004c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c6c:	600b      	str	r3, [r1, #0]
 8004c6e:	e7ca      	b.n	8004c06 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8004c70:	f7ff ff80 	bl	8004b74 <HAL_GetTick>
 8004c74:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8004c78:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c7a:	2601      	movs	r6, #1
 8004c7c:	fa95 f3a5 	rbit	r3, r5
 8004c80:	680a      	ldr	r2, [r1, #0]
 8004c82:	fa95 f3a5 	rbit	r3, r5
 8004c86:	fab3 f383 	clz	r3, r3
 8004c8a:	f003 031f 	and.w	r3, r3, #31
 8004c8e:	fa06 f303 	lsl.w	r3, r6, r3
 8004c92:	4213      	tst	r3, r2
 8004c94:	f43f af7c 	beq.w	8004b90 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c98:	f7ff ff6c 	bl	8004b74 <HAL_GetTick>
 8004c9c:	1bc0      	subs	r0, r0, r7
 8004c9e:	2864      	cmp	r0, #100	; 0x64
 8004ca0:	d9ec      	bls.n	8004c7c <HAL_RCC_OscConfig+0xf8>
 8004ca2:	e7d3      	b.n	8004c4c <HAL_RCC_OscConfig+0xc8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004ca4:	497b      	ldr	r1, [pc, #492]	; (8004e94 <HAL_RCC_OscConfig+0x310>)
 8004ca6:	684b      	ldr	r3, [r1, #4]
 8004ca8:	f013 0f0c 	tst.w	r3, #12
 8004cac:	d007      	beq.n	8004cbe <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004cae:	684b      	ldr	r3, [r1, #4]
 8004cb0:	f003 030c 	and.w	r3, r3, #12
 8004cb4:	2b08      	cmp	r3, #8
 8004cb6:	d121      	bne.n	8004cfc <HAL_RCC_OscConfig+0x178>
 8004cb8:	684b      	ldr	r3, [r1, #4]
 8004cba:	03df      	lsls	r7, r3, #15
 8004cbc:	d41e      	bmi.n	8004cfc <HAL_RCC_OscConfig+0x178>
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cc4:	6808      	ldr	r0, [r1, #0]
 8004cc6:	fa93 f3a3 	rbit	r3, r3
 8004cca:	fab3 f383 	clz	r3, r3
 8004cce:	f003 031f 	and.w	r3, r3, #31
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd8:	4203      	tst	r3, r0
 8004cda:	d002      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x15e>
 8004cdc:	6923      	ldr	r3, [r4, #16]
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d189      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ce2:	6808      	ldr	r0, [r1, #0]
 8004ce4:	23f8      	movs	r3, #248	; 0xf8
 8004ce6:	fa93 f3a3 	rbit	r3, r3
 8004cea:	fab3 f283 	clz	r2, r3
 8004cee:	6963      	ldr	r3, [r4, #20]
 8004cf0:	4093      	lsls	r3, r2
 8004cf2:	f020 02f8 	bic.w	r2, r0, #248	; 0xf8
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	600b      	str	r3, [r1, #0]
 8004cfa:	e74d      	b.n	8004b98 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cfc:	6922      	ldr	r2, [r4, #16]
 8004cfe:	2501      	movs	r5, #1
 8004d00:	b302      	cbz	r2, 8004d44 <HAL_RCC_OscConfig+0x1c0>
 8004d02:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 8004d06:	fab3 f383 	clz	r3, r3
 8004d0a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004d0e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	2602      	movs	r6, #2
 8004d16:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8004d18:	f7ff ff2c 	bl	8004b74 <HAL_GetTick>
 8004d1c:	4607      	mov	r7, r0
 8004d1e:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d22:	680a      	ldr	r2, [r1, #0]
 8004d24:	fa96 f3a6 	rbit	r3, r6
 8004d28:	fab3 f383 	clz	r3, r3
 8004d2c:	f003 031f 	and.w	r3, r3, #31
 8004d30:	fa05 f303 	lsl.w	r3, r5, r3
 8004d34:	4213      	tst	r3, r2
 8004d36:	d1d4      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d38:	f7ff ff1c 	bl	8004b74 <HAL_GetTick>
 8004d3c:	1bc0      	subs	r0, r0, r7
 8004d3e:	2802      	cmp	r0, #2
 8004d40:	d9ed      	bls.n	8004d1e <HAL_RCC_OscConfig+0x19a>
 8004d42:	e783      	b.n	8004c4c <HAL_RCC_OscConfig+0xc8>
 8004d44:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8004d48:	fab3 f383 	clz	r3, r3
 8004d4c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004d50:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	2602      	movs	r6, #2
 8004d58:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004d5a:	f7ff ff0b 	bl	8004b74 <HAL_GetTick>
 8004d5e:	4607      	mov	r7, r0
 8004d60:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d64:	680a      	ldr	r2, [r1, #0]
 8004d66:	fa96 f3a6 	rbit	r3, r6
 8004d6a:	fab3 f383 	clz	r3, r3
 8004d6e:	f003 031f 	and.w	r3, r3, #31
 8004d72:	fa05 f303 	lsl.w	r3, r5, r3
 8004d76:	4213      	tst	r3, r2
 8004d78:	f43f af0e 	beq.w	8004b98 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d7c:	f7ff fefa 	bl	8004b74 <HAL_GetTick>
 8004d80:	1bc0      	subs	r0, r0, r7
 8004d82:	2802      	cmp	r0, #2
 8004d84:	d9ec      	bls.n	8004d60 <HAL_RCC_OscConfig+0x1dc>
 8004d86:	e761      	b.n	8004c4c <HAL_RCC_OscConfig+0xc8>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d88:	69a2      	ldr	r2, [r4, #24]
 8004d8a:	4d42      	ldr	r5, [pc, #264]	; (8004e94 <HAL_RCC_OscConfig+0x310>)
 8004d8c:	4842      	ldr	r0, [pc, #264]	; (8004e98 <HAL_RCC_OscConfig+0x314>)
 8004d8e:	2101      	movs	r1, #1
 8004d90:	b312      	cbz	r2, 8004dd8 <HAL_RCC_OscConfig+0x254>
 8004d92:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_ENABLE();
 8004d96:	fab3 f383 	clz	r3, r3
 8004d9a:	4403      	add	r3, r0
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	2602      	movs	r6, #2
 8004da0:	6019      	str	r1, [r3, #0]
      tickstart = HAL_GetTick();
 8004da2:	f7ff fee7 	bl	8004b74 <HAL_GetTick>
 8004da6:	4607      	mov	r7, r0
 8004da8:	fa96 f3a6 	rbit	r3, r6
 8004dac:	fa96 f3a6 	rbit	r3, r6
 8004db0:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004db4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8004db6:	fa96 f3a6 	rbit	r3, r6
 8004dba:	fab3 f383 	clz	r3, r3
 8004dbe:	f003 031f 	and.w	r3, r3, #31
 8004dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8004dc6:	4213      	tst	r3, r2
 8004dc8:	f47f aeea 	bne.w	8004ba0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dcc:	f7ff fed2 	bl	8004b74 <HAL_GetTick>
 8004dd0:	1bc0      	subs	r0, r0, r7
 8004dd2:	2802      	cmp	r0, #2
 8004dd4:	d9e8      	bls.n	8004da8 <HAL_RCC_OscConfig+0x224>
 8004dd6:	e739      	b.n	8004c4c <HAL_RCC_OscConfig+0xc8>
 8004dd8:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_DISABLE();
 8004ddc:	fab3 f383 	clz	r3, r3
 8004de0:	4403      	add	r3, r0
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	2602      	movs	r6, #2
 8004de6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8004de8:	f7ff fec4 	bl	8004b74 <HAL_GetTick>
 8004dec:	4607      	mov	r7, r0
 8004dee:	fa96 f3a6 	rbit	r3, r6
 8004df2:	fa96 f3a6 	rbit	r3, r6
 8004df6:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dfa:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8004dfc:	fa96 f3a6 	rbit	r3, r6
 8004e00:	fab3 f383 	clz	r3, r3
 8004e04:	f003 031f 	and.w	r3, r3, #31
 8004e08:	fa01 f303 	lsl.w	r3, r1, r3
 8004e0c:	4213      	tst	r3, r2
 8004e0e:	f43f aec7 	beq.w	8004ba0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e12:	f7ff feaf 	bl	8004b74 <HAL_GetTick>
 8004e16:	1bc0      	subs	r0, r0, r7
 8004e18:	2802      	cmp	r0, #2
 8004e1a:	d9e8      	bls.n	8004dee <HAL_RCC_OscConfig+0x26a>
 8004e1c:	e716      	b.n	8004c4c <HAL_RCC_OscConfig+0xc8>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e1e:	491d      	ldr	r1, [pc, #116]	; (8004e94 <HAL_RCC_OscConfig+0x310>)
 8004e20:	69cb      	ldr	r3, [r1, #28]
 8004e22:	00d8      	lsls	r0, r3, #3
 8004e24:	d433      	bmi.n	8004e8e <HAL_RCC_OscConfig+0x30a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e26:	69cb      	ldr	r3, [r1, #28]
 8004e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e2c:	61cb      	str	r3, [r1, #28]
 8004e2e:	69cb      	ldr	r3, [r1, #28]
 8004e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e34:	9301      	str	r3, [sp, #4]
 8004e36:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004e38:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e3a:	4e18      	ldr	r6, [pc, #96]	; (8004e9c <HAL_RCC_OscConfig+0x318>)
 8004e3c:	6833      	ldr	r3, [r6, #0]
 8004e3e:	05da      	lsls	r2, r3, #23
 8004e40:	d52e      	bpl.n	8004ea0 <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e42:	68e3      	ldr	r3, [r4, #12]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d13b      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x33c>
 8004e48:	6a0b      	ldr	r3, [r1, #32]
 8004e4a:	f043 0301 	orr.w	r3, r3, #1
 8004e4e:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8004e50:	f7ff fe90 	bl	8004b74 <HAL_GetTick>
 8004e54:	2602      	movs	r6, #2
 8004e56:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e58:	46b0      	mov	r8, r6
 8004e5a:	2701      	movs	r7, #1
 8004e5c:	fa96 f3a6 	rbit	r3, r6
 8004e60:	fa96 f3a6 	rbit	r3, r6
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d06a      	beq.n	8004f3e <HAL_RCC_OscConfig+0x3ba>
 8004e68:	6a0a      	ldr	r2, [r1, #32]
 8004e6a:	fa98 f3a8 	rbit	r3, r8
 8004e6e:	fab3 f383 	clz	r3, r3
 8004e72:	f003 031f 	and.w	r3, r3, #31
 8004e76:	fa07 f303 	lsl.w	r3, r7, r3
 8004e7a:	4213      	tst	r3, r2
 8004e7c:	d056      	beq.n	8004f2c <HAL_RCC_OscConfig+0x3a8>
    if(pwrclkchanged == SET)
 8004e7e:	2d00      	cmp	r5, #0
 8004e80:	f43f ae92 	beq.w	8004ba8 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e84:	69cb      	ldr	r3, [r1, #28]
 8004e86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e8a:	61cb      	str	r3, [r1, #28]
 8004e8c:	e68c      	b.n	8004ba8 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8004e8e:	2500      	movs	r5, #0
 8004e90:	e7d3      	b.n	8004e3a <HAL_RCC_OscConfig+0x2b6>
 8004e92:	bf00      	nop
 8004e94:	40021000 	.word	0x40021000
 8004e98:	10908120 	.word	0x10908120
 8004e9c:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ea0:	6833      	ldr	r3, [r6, #0]
 8004ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ea6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004ea8:	f7ff fe64 	bl	8004b74 <HAL_GetTick>
 8004eac:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eae:	6833      	ldr	r3, [r6, #0]
 8004eb0:	05db      	lsls	r3, r3, #23
 8004eb2:	d4c6      	bmi.n	8004e42 <HAL_RCC_OscConfig+0x2be>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eb4:	f7ff fe5e 	bl	8004b74 <HAL_GetTick>
 8004eb8:	1bc0      	subs	r0, r0, r7
 8004eba:	2864      	cmp	r0, #100	; 0x64
 8004ebc:	d9f7      	bls.n	8004eae <HAL_RCC_OscConfig+0x32a>
 8004ebe:	e6c5      	b.n	8004c4c <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ec0:	bb33      	cbnz	r3, 8004f10 <HAL_RCC_OscConfig+0x38c>
 8004ec2:	6a0b      	ldr	r3, [r1, #32]
 8004ec4:	f023 0301 	bic.w	r3, r3, #1
 8004ec8:	620b      	str	r3, [r1, #32]
 8004eca:	6a0b      	ldr	r3, [r1, #32]
 8004ecc:	f023 0304 	bic.w	r3, r3, #4
 8004ed0:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8004ed2:	f7ff fe4f 	bl	8004b74 <HAL_GetTick>
 8004ed6:	2602      	movs	r6, #2
 8004ed8:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eda:	46b0      	mov	r8, r6
 8004edc:	2701      	movs	r7, #1
 8004ede:	fa96 f3a6 	rbit	r3, r6
 8004ee2:	fa96 f3a6 	rbit	r3, r6
 8004ee6:	b373      	cbz	r3, 8004f46 <HAL_RCC_OscConfig+0x3c2>
 8004ee8:	6a0a      	ldr	r2, [r1, #32]
 8004eea:	fa98 f3a8 	rbit	r3, r8
 8004eee:	fab3 f383 	clz	r3, r3
 8004ef2:	f003 031f 	and.w	r3, r3, #31
 8004ef6:	fa07 f303 	lsl.w	r3, r7, r3
 8004efa:	4213      	tst	r3, r2
 8004efc:	d0bf      	beq.n	8004e7e <HAL_RCC_OscConfig+0x2fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004efe:	f7ff fe39 	bl	8004b74 <HAL_GetTick>
 8004f02:	f241 3388 	movw	r3, #5000	; 0x1388
 8004f06:	eba0 0009 	sub.w	r0, r0, r9
 8004f0a:	4298      	cmp	r0, r3
 8004f0c:	d9e7      	bls.n	8004ede <HAL_RCC_OscConfig+0x35a>
 8004f0e:	e69d      	b.n	8004c4c <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f10:	2b05      	cmp	r3, #5
 8004f12:	6a0b      	ldr	r3, [r1, #32]
 8004f14:	d103      	bne.n	8004f1e <HAL_RCC_OscConfig+0x39a>
 8004f16:	f043 0304 	orr.w	r3, r3, #4
 8004f1a:	620b      	str	r3, [r1, #32]
 8004f1c:	e794      	b.n	8004e48 <HAL_RCC_OscConfig+0x2c4>
 8004f1e:	f023 0301 	bic.w	r3, r3, #1
 8004f22:	620b      	str	r3, [r1, #32]
 8004f24:	6a0b      	ldr	r3, [r1, #32]
 8004f26:	f023 0304 	bic.w	r3, r3, #4
 8004f2a:	e790      	b.n	8004e4e <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f2c:	f7ff fe22 	bl	8004b74 <HAL_GetTick>
 8004f30:	f241 3388 	movw	r3, #5000	; 0x1388
 8004f34:	eba0 0009 	sub.w	r0, r0, r9
 8004f38:	4298      	cmp	r0, r3
 8004f3a:	d98f      	bls.n	8004e5c <HAL_RCC_OscConfig+0x2d8>
 8004f3c:	e686      	b.n	8004c4c <HAL_RCC_OscConfig+0xc8>
 8004f3e:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f42:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8004f44:	e791      	b.n	8004e6a <HAL_RCC_OscConfig+0x2e6>
 8004f46:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f4a:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8004f4c:	e7cd      	b.n	8004eea <HAL_RCC_OscConfig+0x366>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f4e:	4943      	ldr	r1, [pc, #268]	; (800505c <HAL_RCC_OscConfig+0x4d8>)
 8004f50:	684b      	ldr	r3, [r1, #4]
 8004f52:	f003 030c 	and.w	r3, r3, #12
 8004f56:	2b08      	cmp	r3, #8
 8004f58:	f43f ae4d 	beq.w	8004bf6 <HAL_RCC_OscConfig+0x72>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f5c:	2a02      	cmp	r2, #2
 8004f5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f62:	d154      	bne.n	800500e <HAL_RCC_OscConfig+0x48a>
 8004f64:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8004f68:	fab3 f383 	clz	r3, r3
 8004f6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004f70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	2200      	movs	r2, #0
 8004f78:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004f7a:	f7ff fdfb 	bl	8004b74 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f7e:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8005060 <HAL_RCC_OscConfig+0x4dc>
        tickstart = HAL_GetTick();
 8004f82:	4607      	mov	r7, r0
 8004f84:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f88:	2501      	movs	r5, #1
 8004f8a:	fa96 f3a6 	rbit	r3, r6
 8004f8e:	680a      	ldr	r2, [r1, #0]
 8004f90:	fa96 f3a6 	rbit	r3, r6
 8004f94:	fab3 f383 	clz	r3, r3
 8004f98:	f003 031f 	and.w	r3, r3, #31
 8004f9c:	fa05 f303 	lsl.w	r3, r5, r3
 8004fa0:	4213      	tst	r3, r2
 8004fa2:	d12e      	bne.n	8005002 <HAL_RCC_OscConfig+0x47e>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fa4:	e9d4 0308 	ldrd	r0, r3, [r4, #32]
 8004fa8:	684a      	ldr	r2, [r1, #4]
 8004faa:	4303      	orrs	r3, r0
 8004fac:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	604b      	str	r3, [r1, #4]
 8004fb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fb8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8004fbc:	fab3 f383 	clz	r3, r3
 8004fc0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004fc4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004fc8:	009b      	lsls	r3, r3, #2
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fca:	4f25      	ldr	r7, [pc, #148]	; (8005060 <HAL_RCC_OscConfig+0x4dc>)
        __HAL_RCC_PLL_ENABLE();
 8004fcc:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8004fce:	f7ff fdd1 	bl	8004b74 <HAL_GetTick>
 8004fd2:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8004fd6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004fd8:	2501      	movs	r5, #1
 8004fda:	fa94 f3a4 	rbit	r3, r4
 8004fde:	680a      	ldr	r2, [r1, #0]
 8004fe0:	fa94 f3a4 	rbit	r3, r4
 8004fe4:	fab3 f383 	clz	r3, r3
 8004fe8:	f003 031f 	and.w	r3, r3, #31
 8004fec:	fa05 f303 	lsl.w	r3, r5, r3
 8004ff0:	4213      	tst	r3, r2
 8004ff2:	f47f addd 	bne.w	8004bb0 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ff6:	f7ff fdbd 	bl	8004b74 <HAL_GetTick>
 8004ffa:	1b80      	subs	r0, r0, r6
 8004ffc:	42b8      	cmp	r0, r7
 8004ffe:	d9ec      	bls.n	8004fda <HAL_RCC_OscConfig+0x456>
 8005000:	e624      	b.n	8004c4c <HAL_RCC_OscConfig+0xc8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005002:	f7ff fdb7 	bl	8004b74 <HAL_GetTick>
 8005006:	1bc0      	subs	r0, r0, r7
 8005008:	4540      	cmp	r0, r8
 800500a:	d9be      	bls.n	8004f8a <HAL_RCC_OscConfig+0x406>
 800500c:	e61e      	b.n	8004c4c <HAL_RCC_OscConfig+0xc8>
 800500e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8005012:	fab3 f383 	clz	r3, r3
 8005016:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800501a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	2200      	movs	r2, #0
 8005022:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005024:	f7ff fda6 	bl	8004b74 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005028:	4f0d      	ldr	r7, [pc, #52]	; (8005060 <HAL_RCC_OscConfig+0x4dc>)
        tickstart = HAL_GetTick();
 800502a:	4606      	mov	r6, r0
 800502c:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005030:	2501      	movs	r5, #1
 8005032:	fa94 f3a4 	rbit	r3, r4
 8005036:	680a      	ldr	r2, [r1, #0]
 8005038:	fa94 f3a4 	rbit	r3, r4
 800503c:	fab3 f383 	clz	r3, r3
 8005040:	f003 031f 	and.w	r3, r3, #31
 8005044:	fa05 f303 	lsl.w	r3, r5, r3
 8005048:	4213      	tst	r3, r2
 800504a:	f43f adb1 	beq.w	8004bb0 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800504e:	f7ff fd91 	bl	8004b74 <HAL_GetTick>
 8005052:	1b80      	subs	r0, r0, r6
 8005054:	42b8      	cmp	r0, r7
 8005056:	d9ec      	bls.n	8005032 <HAL_RCC_OscConfig+0x4ae>
 8005058:	e5f8      	b.n	8004c4c <HAL_RCC_OscConfig+0xc8>
 800505a:	bf00      	nop
 800505c:	40021000 	.word	0x40021000
 8005060:	00030d40 	.word	0x00030d40

08005064 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8005064:	4a50      	ldr	r2, [pc, #320]	; (80051a8 <HAL_RCC_ClockConfig+0x144>)
{
 8005066:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8005068:	6813      	ldr	r3, [r2, #0]
 800506a:	f003 0307 	and.w	r3, r3, #7
 800506e:	428b      	cmp	r3, r1
{
 8005070:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8005072:	d31b      	bcc.n	80050ac <HAL_RCC_ClockConfig+0x48>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005074:	682a      	ldr	r2, [r5, #0]
 8005076:	0790      	lsls	r0, r2, #30
 8005078:	d424      	bmi.n	80050c4 <HAL_RCC_ClockConfig+0x60>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800507a:	07d2      	lsls	r2, r2, #31
 800507c:	d42a      	bmi.n	80050d4 <HAL_RCC_ClockConfig+0x70>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800507e:	4a4a      	ldr	r2, [pc, #296]	; (80051a8 <HAL_RCC_ClockConfig+0x144>)
 8005080:	6813      	ldr	r3, [r2, #0]
 8005082:	f003 0307 	and.w	r3, r3, #7
 8005086:	428b      	cmp	r3, r1
 8005088:	d87a      	bhi.n	8005180 <HAL_RCC_ClockConfig+0x11c>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800508a:	6828      	ldr	r0, [r5, #0]
 800508c:	0743      	lsls	r3, r0, #29
 800508e:	f100 8082 	bmi.w	8005196 <HAL_RCC_ClockConfig+0x132>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005092:	f010 0008 	ands.w	r0, r0, #8
 8005096:	d014      	beq.n	80050c2 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005098:	4a44      	ldr	r2, [pc, #272]	; (80051ac <HAL_RCC_ClockConfig+0x148>)
 800509a:	6929      	ldr	r1, [r5, #16]
 800509c:	6853      	ldr	r3, [r2, #4]
 800509e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80050a2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80050a6:	6053      	str	r3, [r2, #4]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 80050a8:	2000      	movs	r0, #0
 80050aa:	e00a      	b.n	80050c2 <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ac:	6813      	ldr	r3, [r2, #0]
 80050ae:	f023 0307 	bic.w	r3, r3, #7
 80050b2:	430b      	orrs	r3, r1
 80050b4:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80050b6:	6813      	ldr	r3, [r2, #0]
 80050b8:	f003 0307 	and.w	r3, r3, #7
 80050bc:	428b      	cmp	r3, r1
 80050be:	d0d9      	beq.n	8005074 <HAL_RCC_ClockConfig+0x10>
      return HAL_ERROR;
 80050c0:	2001      	movs	r0, #1
}
 80050c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050c4:	4839      	ldr	r0, [pc, #228]	; (80051ac <HAL_RCC_ClockConfig+0x148>)
 80050c6:	68ac      	ldr	r4, [r5, #8]
 80050c8:	6843      	ldr	r3, [r0, #4]
 80050ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050ce:	4323      	orrs	r3, r4
 80050d0:	6043      	str	r3, [r0, #4]
 80050d2:	e7d2      	b.n	800507a <HAL_RCC_ClockConfig+0x16>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050d4:	686a      	ldr	r2, [r5, #4]
 80050d6:	4c35      	ldr	r4, [pc, #212]	; (80051ac <HAL_RCC_ClockConfig+0x148>)
 80050d8:	2a01      	cmp	r2, #1
 80050da:	d127      	bne.n	800512c <HAL_RCC_ClockConfig+0xc8>
 80050dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050e0:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050e4:	6820      	ldr	r0, [r4, #0]
 80050e6:	fa93 f3a3 	rbit	r3, r3
 80050ea:	fab3 f383 	clz	r3, r3
 80050ee:	f003 031f 	and.w	r3, r3, #31
 80050f2:	fa02 f303 	lsl.w	r3, r2, r3
 80050f6:	4203      	tst	r3, r0
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050f8:	d0e2      	beq.n	80050c0 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050fa:	6863      	ldr	r3, [r4, #4]
 80050fc:	f023 0303 	bic.w	r3, r3, #3
 8005100:	431a      	orrs	r2, r3
 8005102:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8005104:	f7ff fd36 	bl	8004b74 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005108:	686b      	ldr	r3, [r5, #4]
 800510a:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 800510c:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800510e:	f241 3788 	movw	r7, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005112:	d11e      	bne.n	8005152 <HAL_RCC_ClockConfig+0xee>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005114:	6863      	ldr	r3, [r4, #4]
 8005116:	f003 030c 	and.w	r3, r3, #12
 800511a:	2b04      	cmp	r3, #4
 800511c:	d0af      	beq.n	800507e <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800511e:	f7ff fd29 	bl	8004b74 <HAL_GetTick>
 8005122:	1b80      	subs	r0, r0, r6
 8005124:	42b8      	cmp	r0, r7
 8005126:	d9f5      	bls.n	8005114 <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 8005128:	2003      	movs	r0, #3
 800512a:	e7ca      	b.n	80050c2 <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800512c:	2a02      	cmp	r2, #2
 800512e:	bf0c      	ite	eq
 8005130:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8005134:	2302      	movne	r3, #2
 8005136:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800513a:	6826      	ldr	r6, [r4, #0]
 800513c:	fa93 f3a3 	rbit	r3, r3
 8005140:	fab3 f383 	clz	r3, r3
 8005144:	f003 031f 	and.w	r3, r3, #31
 8005148:	2001      	movs	r0, #1
 800514a:	fa00 f303 	lsl.w	r3, r0, r3
 800514e:	4233      	tst	r3, r6
 8005150:	e7d2      	b.n	80050f8 <HAL_RCC_ClockConfig+0x94>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005152:	2b02      	cmp	r3, #2
 8005154:	d10f      	bne.n	8005176 <HAL_RCC_ClockConfig+0x112>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005156:	6863      	ldr	r3, [r4, #4]
 8005158:	f003 030c 	and.w	r3, r3, #12
 800515c:	2b08      	cmp	r3, #8
 800515e:	d08e      	beq.n	800507e <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005160:	f7ff fd08 	bl	8004b74 <HAL_GetTick>
 8005164:	1b80      	subs	r0, r0, r6
 8005166:	42b8      	cmp	r0, r7
 8005168:	d9f5      	bls.n	8005156 <HAL_RCC_ClockConfig+0xf2>
 800516a:	e7dd      	b.n	8005128 <HAL_RCC_ClockConfig+0xc4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800516c:	f7ff fd02 	bl	8004b74 <HAL_GetTick>
 8005170:	1b80      	subs	r0, r0, r6
 8005172:	42b8      	cmp	r0, r7
 8005174:	d8d8      	bhi.n	8005128 <HAL_RCC_ClockConfig+0xc4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005176:	6863      	ldr	r3, [r4, #4]
 8005178:	f013 0f0c 	tst.w	r3, #12
 800517c:	d1f6      	bne.n	800516c <HAL_RCC_ClockConfig+0x108>
 800517e:	e77e      	b.n	800507e <HAL_RCC_ClockConfig+0x1a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005180:	6813      	ldr	r3, [r2, #0]
 8005182:	f023 0307 	bic.w	r3, r3, #7
 8005186:	430b      	orrs	r3, r1
 8005188:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800518a:	6813      	ldr	r3, [r2, #0]
 800518c:	f003 0307 	and.w	r3, r3, #7
 8005190:	428b      	cmp	r3, r1
 8005192:	d195      	bne.n	80050c0 <HAL_RCC_ClockConfig+0x5c>
 8005194:	e779      	b.n	800508a <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005196:	4a05      	ldr	r2, [pc, #20]	; (80051ac <HAL_RCC_ClockConfig+0x148>)
 8005198:	68e9      	ldr	r1, [r5, #12]
 800519a:	6853      	ldr	r3, [r2, #4]
 800519c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80051a0:	430b      	orrs	r3, r1
 80051a2:	6053      	str	r3, [r2, #4]
 80051a4:	e775      	b.n	8005092 <HAL_RCC_ClockConfig+0x2e>
 80051a6:	bf00      	nop
 80051a8:	40022000 	.word	0x40022000
 80051ac:	40021000 	.word	0x40021000

080051b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80051b4:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051b8:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8005330 <HAL_GPIO_Init+0x180>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051bc:	4a5a      	ldr	r2, [pc, #360]	; (8005328 <HAL_GPIO_Init+0x178>)
  uint32_t position = 0x00U;
 80051be:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 80051c0:	fa38 f403 	lsrs.w	r4, r8, r3
 80051c4:	d102      	bne.n	80051cc <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 80051c6:	b003      	add	sp, #12
 80051c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80051cc:	2401      	movs	r4, #1
 80051ce:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 80051d2:	ea1a 0508 	ands.w	r5, sl, r8
 80051d6:	f000 809c 	beq.w	8005312 <HAL_GPIO_Init+0x162>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051da:	684c      	ldr	r4, [r1, #4]
 80051dc:	f024 0b10 	bic.w	fp, r4, #16
 80051e0:	f1bb 0f02 	cmp.w	fp, #2
 80051e4:	d114      	bne.n	8005210 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 80051e6:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 80051ea:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80051ee:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80051f2:	f8dc 6020 	ldr.w	r6, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80051f6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80051fa:	270f      	movs	r7, #15
 80051fc:	fa07 f70e 	lsl.w	r7, r7, lr
 8005200:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005204:	690e      	ldr	r6, [r1, #16]
 8005206:	fa06 f60e 	lsl.w	r6, r6, lr
 800520a:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 800520c:	f8cc 6020 	str.w	r6, [ip, #32]
      temp = GPIOx->MODER;
 8005210:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005214:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8005216:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005218:	fa07 f70e 	lsl.w	r7, r7, lr
 800521c:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800521e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005222:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005224:	fa0c fc0e 	lsl.w	ip, ip, lr
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005228:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800522c:	ea4c 0606 	orr.w	r6, ip, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005230:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8005234:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005236:	d811      	bhi.n	800525c <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8005238:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800523a:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 800523e:	68ce      	ldr	r6, [r1, #12]
 8005240:	fa06 fc0e 	lsl.w	ip, r6, lr
 8005244:	ea4c 060b 	orr.w	r6, ip, fp
        GPIOx->OSPEEDR = temp;
 8005248:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800524a:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800524c:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005250:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8005254:	409e      	lsls	r6, r3
 8005256:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 800525a:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 800525c:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800525e:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005260:	688e      	ldr	r6, [r1, #8]
 8005262:	fa06 f60e 	lsl.w	r6, r6, lr
 8005266:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005268:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 800526a:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800526c:	d551      	bpl.n	8005312 <HAL_GPIO_Init+0x162>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800526e:	f8d9 6018 	ldr.w	r6, [r9, #24]
 8005272:	f046 0601 	orr.w	r6, r6, #1
 8005276:	f8c9 6018 	str.w	r6, [r9, #24]
 800527a:	f8d9 6018 	ldr.w	r6, [r9, #24]
 800527e:	f023 0703 	bic.w	r7, r3, #3
 8005282:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8005286:	f006 0601 	and.w	r6, r6, #1
 800528a:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800528e:	9601      	str	r6, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8005290:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005294:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8005296:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8005298:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800529c:	f04f 0c0f 	mov.w	ip, #15
 80052a0:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80052a4:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80052a8:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80052ac:	d033      	beq.n	8005316 <HAL_GPIO_Init+0x166>
 80052ae:	4e1f      	ldr	r6, [pc, #124]	; (800532c <HAL_GPIO_Init+0x17c>)
 80052b0:	42b0      	cmp	r0, r6
 80052b2:	d032      	beq.n	800531a <HAL_GPIO_Init+0x16a>
 80052b4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80052b8:	42b0      	cmp	r0, r6
 80052ba:	d030      	beq.n	800531e <HAL_GPIO_Init+0x16e>
 80052bc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80052c0:	42b0      	cmp	r0, r6
 80052c2:	d02e      	beq.n	8005322 <HAL_GPIO_Init+0x172>
 80052c4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80052c8:	42b0      	cmp	r0, r6
 80052ca:	bf0c      	ite	eq
 80052cc:	2604      	moveq	r6, #4
 80052ce:	2605      	movne	r6, #5
 80052d0:	fa06 f60e 	lsl.w	r6, r6, lr
 80052d4:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 80052d8:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 80052da:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80052dc:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80052de:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80052e2:	bf0c      	ite	eq
 80052e4:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80052e6:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 80052e8:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 80052ea:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80052ec:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80052f0:	bf0c      	ite	eq
 80052f2:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80052f4:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 80052f6:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 80052f8:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80052fa:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80052fe:	bf0c      	ite	eq
 8005300:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8005302:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 8005304:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8005306:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005308:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800530a:	bf54      	ite	pl
 800530c:	403e      	andpl	r6, r7
          temp |= iocurrent;
 800530e:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 8005310:	60d6      	str	r6, [r2, #12]
    position++;
 8005312:	3301      	adds	r3, #1
 8005314:	e754      	b.n	80051c0 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005316:	2600      	movs	r6, #0
 8005318:	e7da      	b.n	80052d0 <HAL_GPIO_Init+0x120>
 800531a:	2601      	movs	r6, #1
 800531c:	e7d8      	b.n	80052d0 <HAL_GPIO_Init+0x120>
 800531e:	2602      	movs	r6, #2
 8005320:	e7d6      	b.n	80052d0 <HAL_GPIO_Init+0x120>
 8005322:	2603      	movs	r6, #3
 8005324:	e7d4      	b.n	80052d0 <HAL_GPIO_Init+0x120>
 8005326:	bf00      	nop
 8005328:	40010400 	.word	0x40010400
 800532c:	48000400 	.word	0x48000400
 8005330:	40021000 	.word	0x40021000

08005334 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005334:	b10a      	cbz	r2, 800533a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005336:	6181      	str	r1, [r0, #24]
 8005338:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800533a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800533c:	4770      	bx	lr
 800533e:	0000      	movs	r0, r0

08005340 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005340:	4601      	mov	r1, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005342:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005344:	688b      	ldr	r3, [r1, #8]
{
 8005346:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005348:	690d      	ldr	r5, [r1, #16]
 800534a:	69c4      	ldr	r4, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800534c:	6810      	ldr	r0, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800534e:	432b      	orrs	r3, r5
 8005350:	694d      	ldr	r5, [r1, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005352:	f420 4016 	bic.w	r0, r0, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005356:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005358:	f020 000c 	bic.w	r0, r0, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800535c:	4323      	orrs	r3, r4
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800535e:	4303      	orrs	r3, r0
 8005360:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005362:	6853      	ldr	r3, [r2, #4]
 8005364:	68c8      	ldr	r0, [r1, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8005366:	6a0d      	ldr	r5, [r1, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005368:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800536c:	4303      	orrs	r3, r0
 800536e:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8005370:	6890      	ldr	r0, [r2, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8005372:	698b      	ldr	r3, [r1, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8005374:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8005378:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800537a:	4303      	orrs	r3, r0
 800537c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800537e:	4b65      	ldr	r3, [pc, #404]	; (8005514 <UART_SetConfig+0x1d4>)
 8005380:	429a      	cmp	r2, r3
 8005382:	d112      	bne.n	80053aa <UART_SetConfig+0x6a>
 8005384:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8005388:	4863      	ldr	r0, [pc, #396]	; (8005518 <UART_SetConfig+0x1d8>)
 800538a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538c:	f003 0303 	and.w	r3, r3, #3
 8005390:	5cc0      	ldrb	r0, [r0, r3]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005392:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8005396:	d178      	bne.n	800548a <UART_SetConfig+0x14a>
  {
    switch (clocksource)
 8005398:	2808      	cmp	r0, #8
 800539a:	d873      	bhi.n	8005484 <UART_SetConfig+0x144>
 800539c:	e8df f000 	tbb	[pc, r0]
 80053a0:	7223ad64 	.word	0x7223ad64
 80053a4:	727272ad 	.word	0x727272ad
 80053a8:	b5          	.byte	0xb5
 80053a9:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053aa:	4b5c      	ldr	r3, [pc, #368]	; (800551c <UART_SetConfig+0x1dc>)
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d125      	bne.n	80053fc <UART_SetConfig+0xbc>
 80053b0:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80053b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80053b6:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 80053ba:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80053be:	f000 8099 	beq.w	80054f4 <UART_SetConfig+0x1b4>
 80053c2:	d806      	bhi.n	80053d2 <UART_SetConfig+0x92>
 80053c4:	2800      	cmp	r0, #0
 80053c6:	d0e4      	beq.n	8005392 <UART_SetConfig+0x52>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053c8:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80053cc:	d05a      	beq.n	8005484 <UART_SetConfig+0x144>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80053ce:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 80053d0:	e057      	b.n	8005482 <UART_SetConfig+0x142>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053d2:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
 80053d6:	f000 8095 	beq.w	8005504 <UART_SetConfig+0x1c4>
 80053da:	f5b0 3f40 	cmp.w	r0, #196608	; 0x30000
 80053de:	d1f3      	bne.n	80053c8 <UART_SetConfig+0x88>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053e0:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80053e4:	d170      	bne.n	80054c8 <UART_SetConfig+0x188>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80053e6:	6849      	ldr	r1, [r1, #4]
 80053e8:	084b      	lsrs	r3, r1, #1
 80053ea:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80053ee:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80053f2:	fbb3 f3f1 	udiv	r3, r3, r1
  HAL_StatusTypeDef ret               = HAL_OK;
 80053f6:	2000      	movs	r0, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80053f8:	b29b      	uxth	r3, r3
        break;
 80053fa:	e03c      	b.n	8005476 <UART_SetConfig+0x136>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053fc:	4b48      	ldr	r3, [pc, #288]	; (8005520 <UART_SetConfig+0x1e0>)
 80053fe:	429a      	cmp	r2, r3
 8005400:	d10e      	bne.n	8005420 <UART_SetConfig+0xe0>
 8005402:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8005406:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005408:	f400 2040 	and.w	r0, r0, #786432	; 0xc0000
 800540c:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8005410:	d070      	beq.n	80054f4 <UART_SetConfig+0x1b4>
 8005412:	d9d7      	bls.n	80053c4 <UART_SetConfig+0x84>
 8005414:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8005418:	d074      	beq.n	8005504 <UART_SetConfig+0x1c4>
 800541a:	f5b0 2f40 	cmp.w	r0, #786432	; 0xc0000
 800541e:	e7de      	b.n	80053de <UART_SetConfig+0x9e>
 8005420:	4b40      	ldr	r3, [pc, #256]	; (8005524 <UART_SetConfig+0x1e4>)
 8005422:	429a      	cmp	r2, r3
 8005424:	d10e      	bne.n	8005444 <UART_SetConfig+0x104>
 8005426:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 800542a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800542c:	f400 1040 	and.w	r0, r0, #3145728	; 0x300000
 8005430:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 8005434:	d05e      	beq.n	80054f4 <UART_SetConfig+0x1b4>
 8005436:	d9c5      	bls.n	80053c4 <UART_SetConfig+0x84>
 8005438:	f5b0 1f00 	cmp.w	r0, #2097152	; 0x200000
 800543c:	d062      	beq.n	8005504 <UART_SetConfig+0x1c4>
 800543e:	f5b0 1f40 	cmp.w	r0, #3145728	; 0x300000
 8005442:	e7cc      	b.n	80053de <UART_SetConfig+0x9e>
 8005444:	4b38      	ldr	r3, [pc, #224]	; (8005528 <UART_SetConfig+0x1e8>)
 8005446:	429a      	cmp	r2, r3
 8005448:	d1be      	bne.n	80053c8 <UART_SetConfig+0x88>
 800544a:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 800544e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005450:	f400 0040 	and.w	r0, r0, #12582912	; 0xc00000
 8005454:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 8005458:	d04c      	beq.n	80054f4 <UART_SetConfig+0x1b4>
 800545a:	d9b3      	bls.n	80053c4 <UART_SetConfig+0x84>
 800545c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8005460:	d050      	beq.n	8005504 <UART_SetConfig+0x1c4>
 8005462:	f5b0 0f40 	cmp.w	r0, #12582912	; 0xc00000
 8005466:	e7ba      	b.n	80053de <UART_SetConfig+0x9e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005468:	6849      	ldr	r1, [r1, #4]
 800546a:	084b      	lsrs	r3, r1, #1
 800546c:	f503 0361 	add.w	r3, r3, #14745600	; 0xe10000
 8005470:	fbb3 f3f1 	udiv	r3, r3, r1
 8005474:	b29b      	uxth	r3, r3
    brrtemp = usartdiv & 0xFFF0U;
 8005476:	f023 010f 	bic.w	r1, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800547a:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 800547e:	430b      	orrs	r3, r1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005480:	60d3      	str	r3, [r2, #12]

}
 8005482:	bd30      	pop	{r4, r5, pc}
        ret = HAL_ERROR;
 8005484:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8005486:	2300      	movs	r3, #0
 8005488:	e7f5      	b.n	8005476 <UART_SetConfig+0x136>
    switch (clocksource)
 800548a:	2808      	cmp	r0, #8
 800548c:	d89f      	bhi.n	80053ce <UART_SetConfig+0x8e>
 800548e:	a301      	add	r3, pc, #4	; (adr r3, 8005494 <UART_SetConfig+0x154>)
 8005490:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8005494:	080054b9 	.word	0x080054b9
 8005498:	080054e1 	.word	0x080054e1
 800549c:	080054c9 	.word	0x080054c9
 80054a0:	080053cf 	.word	0x080053cf
 80054a4:	080054e1 	.word	0x080054e1
 80054a8:	080053cf 	.word	0x080053cf
 80054ac:	080053cf 	.word	0x080053cf
 80054b0:	080053cf 	.word	0x080053cf
 80054b4:	080054eb 	.word	0x080054eb
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80054b8:	6849      	ldr	r1, [r1, #4]
 80054ba:	084b      	lsrs	r3, r1, #1
 80054bc:	f503 03e1 	add.w	r3, r3, #7372800	; 0x708000
 80054c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	e7db      	b.n	8005480 <UART_SetConfig+0x140>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80054c8:	6849      	ldr	r1, [r1, #4]
 80054ca:	084b      	lsrs	r3, r1, #1
 80054cc:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80054d0:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80054d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80054d8:	b29b      	uxth	r3, r3
 80054da:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80054dc:	2000      	movs	r0, #0
        break;
 80054de:	e7d0      	b.n	8005482 <UART_SetConfig+0x142>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80054e0:	6849      	ldr	r1, [r1, #4]
 80054e2:	084b      	lsrs	r3, r1, #1
 80054e4:	f503 03e1 	add.w	r3, r3, #7372800	; 0x708000
 80054e8:	e7f4      	b.n	80054d4 <UART_SetConfig+0x194>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80054ea:	6849      	ldr	r1, [r1, #4]
 80054ec:	084b      	lsrs	r3, r1, #1
 80054ee:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80054f2:	e7ef      	b.n	80054d4 <UART_SetConfig+0x194>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054f4:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80054f8:	d1f2      	bne.n	80054e0 <UART_SetConfig+0x1a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80054fa:	6849      	ldr	r1, [r1, #4]
 80054fc:	084b      	lsrs	r3, r1, #1
 80054fe:	f503 0361 	add.w	r3, r3, #14745600	; 0xe10000
 8005502:	e776      	b.n	80053f2 <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005504:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8005508:	d1ef      	bne.n	80054ea <UART_SetConfig+0x1aa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800550a:	6849      	ldr	r1, [r1, #4]
 800550c:	084b      	lsrs	r3, r1, #1
 800550e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8005512:	e76e      	b.n	80053f2 <UART_SetConfig+0xb2>
 8005514:	40013800 	.word	0x40013800
 8005518:	08005c10 	.word	0x08005c10
 800551c:	40004400 	.word	0x40004400
 8005520:	40004800 	.word	0x40004800
 8005524:	40004c00 	.word	0x40004c00
 8005528:	40005000 	.word	0x40005000

0800552c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800552c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800552e:	9d06      	ldr	r5, [sp, #24]
 8005530:	4604      	mov	r4, r0
 8005532:	4616      	mov	r6, r2
 8005534:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005536:	6820      	ldr	r0, [r4, #0]
 8005538:	69c2      	ldr	r2, [r0, #28]
 800553a:	ea31 0302 	bics.w	r3, r1, r2
 800553e:	bf0c      	ite	eq
 8005540:	2201      	moveq	r2, #1
 8005542:	2200      	movne	r2, #0
 8005544:	42b2      	cmp	r2, r6
 8005546:	d001      	beq.n	800554c <UART_WaitOnFlagUntilTimeout+0x20>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8005548:	2000      	movs	r0, #0
 800554a:	e014      	b.n	8005576 <UART_WaitOnFlagUntilTimeout+0x4a>
    if(Timeout != HAL_MAX_DELAY)
 800554c:	1c6b      	adds	r3, r5, #1
 800554e:	d0f3      	beq.n	8005538 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8005550:	b995      	cbnz	r5, 8005578 <UART_WaitOnFlagUntilTimeout+0x4c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005552:	6823      	ldr	r3, [r4, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800555a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800555c:	689a      	ldr	r2, [r3, #8]
 800555e:	f022 0201 	bic.w	r2, r2, #1
 8005562:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8005564:	2320      	movs	r3, #32
 8005566:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800556a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 800556e:	2300      	movs	r3, #0
 8005570:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8005574:	2003      	movs	r0, #3
}
 8005576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8005578:	f7ff fafc 	bl	8004b74 <HAL_GetTick>
 800557c:	1bc0      	subs	r0, r0, r7
 800557e:	42a8      	cmp	r0, r5
 8005580:	d9d9      	bls.n	8005536 <UART_WaitOnFlagUntilTimeout+0xa>
 8005582:	e7e6      	b.n	8005552 <UART_WaitOnFlagUntilTimeout+0x26>

08005584 <UART_CheckIdleState>:
{
 8005584:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005586:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005588:	2100      	movs	r1, #0
 800558a:	66c1      	str	r1, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 800558c:	f7ff faf2 	bl	8004b74 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005590:	6823      	ldr	r3, [r4, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8005596:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005598:	d417      	bmi.n	80055ca <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	075b      	lsls	r3, r3, #29
 80055a0:	d50a      	bpl.n	80055b8 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055a6:	9300      	str	r3, [sp, #0]
 80055a8:	2200      	movs	r2, #0
 80055aa:	462b      	mov	r3, r5
 80055ac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055b0:	4620      	mov	r0, r4
 80055b2:	f7ff ffbb 	bl	800552c <UART_WaitOnFlagUntilTimeout>
 80055b6:	b9a0      	cbnz	r0, 80055e2 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 80055b8:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80055ba:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 80055bc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 80055c0:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 80055c4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 80055c8:	e00c      	b.n	80055e4 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055ca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055ce:	9300      	str	r3, [sp, #0]
 80055d0:	460a      	mov	r2, r1
 80055d2:	4603      	mov	r3, r0
 80055d4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80055d8:	4620      	mov	r0, r4
 80055da:	f7ff ffa7 	bl	800552c <UART_WaitOnFlagUntilTimeout>
 80055de:	2800      	cmp	r0, #0
 80055e0:	d0db      	beq.n	800559a <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80055e2:	2003      	movs	r0, #3
}
 80055e4:	b003      	add	sp, #12
 80055e6:	bd30      	pop	{r4, r5, pc}

080055e8 <HAL_UART_Init>:
{
 80055e8:	b510      	push	{r4, lr}
  if(huart == NULL)
 80055ea:	4604      	mov	r4, r0
 80055ec:	b328      	cbz	r0, 800563a <HAL_UART_Init+0x52>
  if(huart->gState == HAL_UART_STATE_RESET)
 80055ee:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80055f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80055f6:	b90b      	cbnz	r3, 80055fc <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 80055f8:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
  __HAL_UART_DISABLE(huart);
 80055fc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80055fe:	2324      	movs	r3, #36	; 0x24
 8005600:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8005604:	6813      	ldr	r3, [r2, #0]
 8005606:	f023 0301 	bic.w	r3, r3, #1
 800560a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800560c:	4620      	mov	r0, r4
 800560e:	f7ff fe97 	bl	8005340 <UART_SetConfig>
 8005612:	2801      	cmp	r0, #1
 8005614:	d011      	beq.n	800563a <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005616:	6823      	ldr	r3, [r4, #0]
 8005618:	685a      	ldr	r2, [r3, #4]
 800561a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800561e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005620:	689a      	ldr	r2, [r3, #8]
 8005622:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005626:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	f042 0201 	orr.w	r2, r2, #1
  return UART_CheckIdleState(huart);
 800562e:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8005630:	601a      	str	r2, [r3, #0]
}
 8005632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return UART_CheckIdleState(huart);
 8005636:	f7ff bfa5 	b.w	8005584 <UART_CheckIdleState>
}
 800563a:	2001      	movs	r0, #1
 800563c:	bd10      	pop	{r4, pc}

0800563e <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800563e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005640:	461f      	mov	r7, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8005642:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8005646:	2b20      	cmp	r3, #32
{
 8005648:	460d      	mov	r5, r1
 800564a:	4604      	mov	r4, r0
 800564c:	4611      	mov	r1, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800564e:	d14a      	bne.n	80056e6 <HAL_UART_Transmit+0xa8>
  {
    if((pData == NULL ) || (Size == 0U))
 8005650:	2d00      	cmp	r5, #0
 8005652:	d046      	beq.n	80056e2 <HAL_UART_Transmit+0xa4>
 8005654:	2a00      	cmp	r2, #0
 8005656:	d044      	beq.n	80056e2 <HAL_UART_Transmit+0xa4>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005658:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800565c:	2b01      	cmp	r3, #1
 800565e:	d042      	beq.n	80056e6 <HAL_UART_Transmit+0xa8>
 8005660:	2301      	movs	r3, #1
 8005662:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005666:	2300      	movs	r3, #0
 8005668:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800566a:	2321      	movs	r3, #33	; 0x21
 800566c:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005670:	f7ff fa80 	bl	8004b74 <HAL_GetTick>
 8005674:	4606      	mov	r6, r0

    huart->TxXferSize = Size;
 8005676:	f8a4 1050 	strh.w	r1, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 800567a:	f8a4 1052 	strh.w	r1, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 800567e:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8005682:	b292      	uxth	r2, r2
 8005684:	b962      	cbnz	r2, 80056a0 <HAL_UART_Transmit+0x62>
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005686:	9700      	str	r7, [sp, #0]
 8005688:	4633      	mov	r3, r6
 800568a:	2140      	movs	r1, #64	; 0x40
 800568c:	4620      	mov	r0, r4
 800568e:	f7ff ff4d 	bl	800552c <UART_WaitOnFlagUntilTimeout>
 8005692:	b998      	cbnz	r0, 80056bc <HAL_UART_Transmit+0x7e>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005694:	2320      	movs	r3, #32
 8005696:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800569a:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 800569e:	e00e      	b.n	80056be <HAL_UART_Transmit+0x80>
      huart->TxXferCount--;
 80056a0:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056a4:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 80056a6:	3b01      	subs	r3, #1
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056ae:	2200      	movs	r2, #0
 80056b0:	4633      	mov	r3, r6
 80056b2:	2180      	movs	r1, #128	; 0x80
 80056b4:	4620      	mov	r0, r4
 80056b6:	f7ff ff39 	bl	800552c <UART_WaitOnFlagUntilTimeout>
 80056ba:	b110      	cbz	r0, 80056c2 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 80056bc:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80056be:	b003      	add	sp, #12
 80056c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056c2:	68a3      	ldr	r3, [r4, #8]
 80056c4:	6822      	ldr	r2, [r4, #0]
 80056c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ca:	d107      	bne.n	80056dc <HAL_UART_Transmit+0x9e>
 80056cc:	6923      	ldr	r3, [r4, #16]
 80056ce:	b92b      	cbnz	r3, 80056dc <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80056d0:	f835 3b02 	ldrh.w	r3, [r5], #2
 80056d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80056d8:	8513      	strh	r3, [r2, #40]	; 0x28
 80056da:	e7d0      	b.n	800567e <HAL_UART_Transmit+0x40>
 80056dc:	f815 3b01 	ldrb.w	r3, [r5], #1
 80056e0:	e7fa      	b.n	80056d8 <HAL_UART_Transmit+0x9a>
      return  HAL_ERROR;
 80056e2:	2001      	movs	r0, #1
 80056e4:	e7eb      	b.n	80056be <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 80056e6:	2002      	movs	r0, #2
 80056e8:	e7e9      	b.n	80056be <HAL_UART_Transmit+0x80>

080056ea <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056ea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80056ee:	4698      	mov	r8, r3
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80056f0:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80056f4:	2b20      	cmp	r3, #32
{
 80056f6:	460d      	mov	r5, r1
 80056f8:	4604      	mov	r4, r0
 80056fa:	4611      	mov	r1, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 80056fc:	d15d      	bne.n	80057ba <HAL_UART_Receive+0xd0>
  {
    if((pData == NULL ) || (Size == 0U))
 80056fe:	2d00      	cmp	r5, #0
 8005700:	d059      	beq.n	80057b6 <HAL_UART_Receive+0xcc>
 8005702:	2a00      	cmp	r2, #0
 8005704:	d057      	beq.n	80057b6 <HAL_UART_Receive+0xcc>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005706:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800570a:	2b01      	cmp	r3, #1
 800570c:	d055      	beq.n	80057ba <HAL_UART_Receive+0xd0>
 800570e:	2301      	movs	r3, #1
 8005710:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->Instance->ICR = 0xFFFFFFFF;
 8005714:	6803      	ldr	r3, [r0, #0]
 8005716:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800571a:	621a      	str	r2, [r3, #32]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800571c:	2300      	movs	r3, #0
 800571e:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005720:	2322      	movs	r3, #34	; 0x22
 8005722:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005726:	f7ff fa25 	bl	8004b74 <HAL_GetTick>

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800572a:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 800572c:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8005730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8005734:	4607      	mov	r7, r0
    huart->RxXferCount = Size;
 8005736:	f8a4 105a 	strh.w	r1, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 800573a:	d115      	bne.n	8005768 <HAL_UART_Receive+0x7e>
 800573c:	6923      	ldr	r3, [r4, #16]
 800573e:	b98b      	cbnz	r3, 8005764 <HAL_UART_Receive+0x7a>
 8005740:	f240 13ff 	movw	r3, #511	; 0x1ff
 8005744:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8005748:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 800574c:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8005750:	b280      	uxth	r0, r0
 8005752:	b980      	cbnz	r0, 8005776 <HAL_UART_Receive+0x8c>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005754:	2320      	movs	r3, #32
 8005756:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800575a:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  }
  else
  {
    return HAL_BUSY;
  }
}
 800575e:	b002      	add	sp, #8
 8005760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 8005764:	23ff      	movs	r3, #255	; 0xff
 8005766:	e7ed      	b.n	8005744 <HAL_UART_Receive+0x5a>
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1ed      	bne.n	8005748 <HAL_UART_Receive+0x5e>
 800576c:	6923      	ldr	r3, [r4, #16]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d0f8      	beq.n	8005764 <HAL_UART_Receive+0x7a>
 8005772:	237f      	movs	r3, #127	; 0x7f
 8005774:	e7e6      	b.n	8005744 <HAL_UART_Receive+0x5a>
      huart->RxXferCount--;
 8005776:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800577a:	f8cd 8000 	str.w	r8, [sp]
      huart->RxXferCount--;
 800577e:	3b01      	subs	r3, #1
 8005780:	b29b      	uxth	r3, r3
 8005782:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005786:	2200      	movs	r2, #0
 8005788:	463b      	mov	r3, r7
 800578a:	2120      	movs	r1, #32
 800578c:	4620      	mov	r0, r4
 800578e:	f7ff fecd 	bl	800552c <UART_WaitOnFlagUntilTimeout>
 8005792:	b9a0      	cbnz	r0, 80057be <HAL_UART_Receive+0xd4>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005794:	68a2      	ldr	r2, [r4, #8]
 8005796:	6823      	ldr	r3, [r4, #0]
 8005798:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800579c:	d106      	bne.n	80057ac <HAL_UART_Receive+0xc2>
 800579e:	6922      	ldr	r2, [r4, #16]
 80057a0:	b922      	cbnz	r2, 80057ac <HAL_UART_Receive+0xc2>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80057a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80057a4:	4033      	ands	r3, r6
 80057a6:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 80057aa:	e7cf      	b.n	800574c <HAL_UART_Receive+0x62>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80057ac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80057ae:	4033      	ands	r3, r6
 80057b0:	f805 3b01 	strb.w	r3, [r5], #1
 80057b4:	e7ca      	b.n	800574c <HAL_UART_Receive+0x62>
      return  HAL_ERROR;
 80057b6:	2001      	movs	r0, #1
 80057b8:	e7d1      	b.n	800575e <HAL_UART_Receive+0x74>
    return HAL_BUSY;
 80057ba:	2002      	movs	r0, #2
 80057bc:	e7cf      	b.n	800575e <HAL_UART_Receive+0x74>
        return HAL_TIMEOUT;
 80057be:	2003      	movs	r0, #3
 80057c0:	e7cd      	b.n	800575e <HAL_UART_Receive+0x74>
 80057c2:	0000      	movs	r0, r0

080057c4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80057c4:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80057c6:	4b0a      	ldr	r3, [pc, #40]	; (80057f0 <_sbrk+0x2c>)
 80057c8:	6819      	ldr	r1, [r3, #0]
{
 80057ca:	4602      	mov	r2, r0
	if (heap_end == 0)
 80057cc:	b909      	cbnz	r1, 80057d2 <_sbrk+0xe>
		heap_end = &end;
 80057ce:	4909      	ldr	r1, [pc, #36]	; (80057f4 <_sbrk+0x30>)
 80057d0:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80057d2:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80057d4:	4669      	mov	r1, sp
 80057d6:	4402      	add	r2, r0
 80057d8:	428a      	cmp	r2, r1
 80057da:	d906      	bls.n	80057ea <_sbrk+0x26>
	{
		errno = ENOMEM;
 80057dc:	f7fb ff48 	bl	8001670 <__errno>
 80057e0:	230c      	movs	r3, #12
 80057e2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80057e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 80057e8:	bd08      	pop	{r3, pc}
	heap_end += incr;
 80057ea:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 80057ec:	e7fc      	b.n	80057e8 <_sbrk+0x24>
 80057ee:	bf00      	nop
 80057f0:	20000150 	.word	0x20000150
 80057f4:	200001e0 	.word	0x200001e0

080057f8 <Reset_Handler>:
 80057f8:	2100      	movs	r1, #0
 80057fa:	e003      	b.n	8005804 <LoopCopyDataInit>

080057fc <CopyDataInit>:
 80057fc:	4b0b      	ldr	r3, [pc, #44]	; (800582c <LoopForever+0x2>)
 80057fe:	585b      	ldr	r3, [r3, r1]
 8005800:	5043      	str	r3, [r0, r1]
 8005802:	3104      	adds	r1, #4

08005804 <LoopCopyDataInit>:
 8005804:	480a      	ldr	r0, [pc, #40]	; (8005830 <LoopForever+0x6>)
 8005806:	4b0b      	ldr	r3, [pc, #44]	; (8005834 <LoopForever+0xa>)
 8005808:	1842      	adds	r2, r0, r1
 800580a:	429a      	cmp	r2, r3
 800580c:	d3f6      	bcc.n	80057fc <CopyDataInit>
 800580e:	4a0a      	ldr	r2, [pc, #40]	; (8005838 <LoopForever+0xe>)
 8005810:	e002      	b.n	8005818 <LoopFillZerobss>

08005812 <FillZerobss>:
 8005812:	2300      	movs	r3, #0
 8005814:	6013      	str	r3, [r2, #0]
 8005816:	3204      	adds	r2, #4

08005818 <LoopFillZerobss>:
 8005818:	4b08      	ldr	r3, [pc, #32]	; (800583c <LoopForever+0x12>)
 800581a:	429a      	cmp	r2, r3
 800581c:	d3f9      	bcc.n	8005812 <FillZerobss>
 800581e:	f3af 8000 	nop.w
 8005822:	f7fb ff3f 	bl	80016a4 <__libc_init_array>
 8005826:	f7fe fc15 	bl	8004054 <main>

0800582a <LoopForever>:
 800582a:	e7fe      	b.n	800582a <LoopForever>
 800582c:	080061a0 	.word	0x080061a0
 8005830:	20000000 	.word	0x20000000
 8005834:	20000068 	.word	0x20000068
 8005838:	20000068 	.word	0x20000068
 800583c:	200001dc 	.word	0x200001dc

08005840 <BusFault_Handler>:
 8005840:	e7fe      	b.n	8005840 <BusFault_Handler>
 8005842:	0000      	movs	r0, r0

08005844 <_init>:
 8005844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005846:	bf00      	nop
 8005848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800584a:	bc08      	pop	{r3}
 800584c:	469e      	mov	lr, r3
 800584e:	4770      	bx	lr

08005850 <_fini>:
 8005850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005852:	bf00      	nop
 8005854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005856:	bc08      	pop	{r3}
 8005858:	469e      	mov	lr, r3
 800585a:	4770      	bx	lr
