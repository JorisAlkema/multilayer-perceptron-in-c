   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"read_csv.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.rodata.str1.1,"aMS",%progbits,1
  16              	.LC0:
  17 0000 7200     		.ascii	"r\000"
  18              	.LC1:
  19 0002 4572726F 		.ascii	"Error opening %s file. Make sure you mentioned the "
  19      72206F70 
  19      656E696E 
  19      67202573 
  19      2066696C 
  20 0035 66696C65 		.ascii	"file path correctly\012\000"
  20      20706174 
  20      6820636F 
  20      72726563 
  20      746C790A 
  21              	.LC2:
  22 004a 2C00     		.ascii	",\000"
  23              	.LC3:
  24 004c 2C0A00   		.ascii	",\012\000"
  25              		.section	.text.read_csv,"ax",%progbits
  26              		.align	1
  27              		.global	read_csv
  28              		.arch armv7e-m
  29              		.syntax unified
  30              		.thumb
  31              		.thumb_func
  32              		.fpu softvfp
  34              	read_csv:
  35              	.LVL0:
  36              	.LFB3:
  37              		.file 1 "read_csv.c"
   1:read_csv.c    **** /*
   2:read_csv.c    **** Author: Manohar Mukku
   3:read_csv.c    **** Date: 18.07.2018
   4:read_csv.c    **** Desc: Read .csv file into a 2D array
   5:read_csv.c    **** GitHub: https://github.com/manoharmukku/multilayer-perceptron-in-c
   6:read_csv.c    **** */
   7:read_csv.c    **** 
   8:read_csv.c    **** #include "read_csv.h"
   9:read_csv.c    **** 
  10:read_csv.c    **** void read_csv(char* filename, int rows, int cols, double** data) {
  38              		.loc 1 10 66 view -0
  39              		.cfi_startproc
  40              		@ args = 0, pretend = 0, frame = 8
  41              		@ frame_needed = 0, uses_anonymous_args = 0
  11:read_csv.c    ****     // Open file and perform sanity check
  12:read_csv.c    ****     FILE* fp = fopen(filename, "r");
  42              		.loc 1 12 5 view .LVU1
  10:read_csv.c    ****     // Open file and perform sanity check
  43              		.loc 1 10 66 is_stmt 0 view .LVU2
  44 0000 2DE9F74F 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
  45              	.LCFI0:
  46              		.cfi_def_cfa_offset 48
  47              		.cfi_offset 4, -36
  48              		.cfi_offset 5, -32
  49              		.cfi_offset 6, -28
  50              		.cfi_offset 7, -24
  51              		.cfi_offset 8, -20
  52              		.cfi_offset 9, -16
  53              		.cfi_offset 10, -12
  54              		.cfi_offset 11, -8
  55              		.cfi_offset 14, -4
  10:read_csv.c    ****     // Open file and perform sanity check
  56              		.loc 1 10 66 view .LVU3
  57 0004 0E46     		mov	r6, r1
  58              		.loc 1 12 16 view .LVU4
  59 0006 2349     		ldr	r1, .L15
  60              	.LVL1:
  10:read_csv.c    ****     // Open file and perform sanity check
  61              		.loc 1 10 66 view .LVU5
  62 0008 0546     		mov	r5, r0
  63 000a 1F46     		mov	r7, r3
  64              		.loc 1 12 16 view .LVU6
  65 000c FFF7FEFF 		bl	fopen
  66              	.LVL2:
  13:read_csv.c    ****     if (NULL == fp) {
  67              		.loc 1 13 5 is_stmt 1 view .LVU7
  68              		.loc 1 13 8 is_stmt 0 view .LVU8
  69 0010 0446     		mov	r4, r0
  70 0012 30B9     		cbnz	r0, .L2
  14:read_csv.c    ****         printf("Error opening %s file. Make sure you mentioned the file path correctly\n", filename
  71              		.loc 1 14 9 is_stmt 1 view .LVU9
  72 0014 2048     		ldr	r0, .L15+4
  73              	.LVL3:
  74              		.loc 1 14 9 is_stmt 0 view .LVU10
  75 0016 2946     		mov	r1, r5
  76 0018 FFF7FEFF 		bl	printf
  77              	.LVL4:
  15:read_csv.c    ****         exit(0);
  78              		.loc 1 15 9 is_stmt 1 view .LVU11
  79 001c 2046     		mov	r0, r4
  80 001e FFF7FEFF 		bl	exit
  81              	.LVL5:
  82              	.L2:
  16:read_csv.c    ****     }
  17:read_csv.c    **** 
  18:read_csv.c    ****     // Create memory to read a line/row from the file
  19:read_csv.c    ****     char* line = (char*)malloc(MAX_LINE_SIZE * sizeof(char));
  83              		.loc 1 19 5 view .LVU12
  84              		.loc 1 19 25 is_stmt 0 view .LVU13
  85 0022 4FF48010 		mov	r0, #1048576
  86              	.LVL6:
  87              		.loc 1 19 25 view .LVU14
  88 0026 FFF7FEFF 		bl	malloc
  89              	.LVL7:
  90              	.LBB2:
  20:read_csv.c    **** 
  21:read_csv.c    ****     // Read the file line by line and save it in the matrix 'data'
  22:read_csv.c    ****     int i, j;
  23:read_csv.c    ****     for (i = 0; fgets(line, MAX_LINE_SIZE, fp) && i < rows; i++) {
  24:read_csv.c    ****         char* tok = strtok(line, ",");
  91              		.loc 1 24 21 view .LVU15
  92 002a DFF87080 		ldr	r8, .L15+8
  25:read_csv.c    ****         for (j = 0; tok && *tok; j++) {
  26:read_csv.c    ****             data[i][j] = atof(tok);
  27:read_csv.c    ****             tok = strtok(NULL, ",\n");
  93              		.loc 1 27 19 view .LVU16
  94 002e DFF87090 		ldr	r9, .L15+12
  95              	.LBE2:
  19:read_csv.c    **** 
  96              		.loc 1 19 25 view .LVU17
  97 0032 0546     		mov	r5, r0
  98              	.LVL8:
  22:read_csv.c    ****     for (i = 0; fgets(line, MAX_LINE_SIZE, fp) && i < rows; i++) {
  99              		.loc 1 22 5 is_stmt 1 view .LVU18
  23:read_csv.c    ****         char* tok = strtok(line, ",");
 100              		.loc 1 23 5 view .LVU19
  23:read_csv.c    ****         char* tok = strtok(line, ",");
 101              		.loc 1 23 12 is_stmt 0 view .LVU20
 102 0034 4FF0000A 		mov	r10, #0
 103              	.LVL9:
 104              	.L3:
  23:read_csv.c    ****         char* tok = strtok(line, ",");
 105              		.loc 1 23 17 is_stmt 1 discriminator 1 view .LVU21
 106 0038 2246     		mov	r2, r4
 107 003a 4FF48011 		mov	r1, #1048576
 108 003e 2846     		mov	r0, r5
 109 0040 FFF7FEFF 		bl	fgets
 110              	.LVL10:
  23:read_csv.c    ****         char* tok = strtok(line, ",");
 111              		.loc 1 23 5 is_stmt 0 discriminator 1 view .LVU22
 112 0044 08B1     		cbz	r0, .L7
  23:read_csv.c    ****         char* tok = strtok(line, ",");
 113              		.loc 1 23 48 discriminator 3 view .LVU23
 114 0046 B245     		cmp	r10, r6
 115 0048 08DB     		blt	.L8
 116              	.L7:
  28:read_csv.c    ****         }
  29:read_csv.c    ****     }
  30:read_csv.c    **** 
  31:read_csv.c    ****     // Free the allocated memory in Heap for line
  32:read_csv.c    ****     free(line);
 117              		.loc 1 32 5 is_stmt 1 view .LVU24
 118 004a 2846     		mov	r0, r5
 119 004c FFF7FEFF 		bl	free
 120              	.LVL11:
  33:read_csv.c    **** 
  34:read_csv.c    ****     // Close the file
  35:read_csv.c    ****     fclose(fp);
 121              		.loc 1 35 5 view .LVU25
 122 0050 2046     		mov	r0, r4
  36:read_csv.c    **** }
 123              		.loc 1 36 1 is_stmt 0 view .LVU26
 124 0052 03B0     		add	sp, sp, #12
 125              	.LCFI1:
 126              		.cfi_remember_state
 127              		.cfi_def_cfa_offset 36
 128              		@ sp needed
 129 0054 BDE8F04F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 130              	.LCFI2:
 131              		.cfi_restore 14
 132              		.cfi_restore 11
 133              		.cfi_restore 10
 134              		.cfi_restore 9
 135              		.cfi_restore 8
 136              		.cfi_restore 7
 137              		.cfi_restore 6
 138              		.cfi_restore 5
 139              		.cfi_restore 4
 140              		.cfi_def_cfa_offset 0
 141              	.LVL12:
  35:read_csv.c    **** }
 142              		.loc 1 35 5 view .LVU27
 143 0058 FFF7FEBF 		b	fclose
 144              	.LVL13:
 145              	.L8:
 146              	.LCFI3:
 147              		.cfi_restore_state
 148              	.LBB3:
  24:read_csv.c    ****         for (j = 0; tok && *tok; j++) {
 149              		.loc 1 24 9 is_stmt 1 view .LVU28
  24:read_csv.c    ****         for (j = 0; tok && *tok; j++) {
 150              		.loc 1 24 21 is_stmt 0 view .LVU29
 151 005c 4146     		mov	r1, r8
 152 005e 2846     		mov	r0, r5
 153 0060 FFF7FEFF 		bl	strtok
 154              	.LVL14:
  25:read_csv.c    ****             data[i][j] = atof(tok);
 155              		.loc 1 25 9 is_stmt 1 view .LVU30
  25:read_csv.c    ****             data[i][j] = atof(tok);
 156              		.loc 1 25 9 is_stmt 0 view .LVU31
 157 0064 4FF0000B 		mov	fp, #0
 158              	.LVL15:
 159              	.L4:
  25:read_csv.c    ****             data[i][j] = atof(tok);
 160              		.loc 1 25 21 is_stmt 1 discriminator 1 view .LVU32
  25:read_csv.c    ****             data[i][j] = atof(tok);
 161              		.loc 1 25 9 is_stmt 0 discriminator 1 view .LVU33
 162 0068 08B1     		cbz	r0, .L5
  25:read_csv.c    ****             data[i][j] = atof(tok);
 163              		.loc 1 25 25 discriminator 3 view .LVU34
 164 006a 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 165 006c 13B9     		cbnz	r3, .L6
 166              	.L5:
 167              	.LBE3:
  23:read_csv.c    ****         char* tok = strtok(line, ",");
 168              		.loc 1 23 61 is_stmt 1 discriminator 2 view .LVU35
  23:read_csv.c    ****         char* tok = strtok(line, ",");
 169              		.loc 1 23 62 is_stmt 0 discriminator 2 view .LVU36
 170 006e 0AF1010A 		add	r10, r10, #1
 171              	.LVL16:
  23:read_csv.c    ****         char* tok = strtok(line, ",");
 172              		.loc 1 23 62 discriminator 2 view .LVU37
 173 0072 E1E7     		b	.L3
 174              	.L6:
 175              	.LBB4:
  26:read_csv.c    ****             tok = strtok(NULL, ",\n");
 176              		.loc 1 26 13 is_stmt 1 discriminator 4 view .LVU38
  26:read_csv.c    ****             tok = strtok(NULL, ",\n");
 177              		.loc 1 26 20 is_stmt 0 discriminator 4 view .LVU39
 178 0074 57F82A30 		ldr	r3, [r7, r10, lsl #2]
 179 0078 5B44     		add	r3, r3, fp
 180 007a 0193     		str	r3, [sp, #4]
  26:read_csv.c    ****             tok = strtok(NULL, ",\n");
 181              		.loc 1 26 26 discriminator 4 view .LVU40
 182 007c FFF7FEFF 		bl	atof
 183              	.LVL17:
  26:read_csv.c    ****             tok = strtok(NULL, ",\n");
 184              		.loc 1 26 24 discriminator 4 view .LVU41
 185 0080 019B     		ldr	r3, [sp, #4]
 186 0082 C3E90001 		strd	r0, [r3]
  27:read_csv.c    ****         }
 187              		.loc 1 27 13 is_stmt 1 discriminator 4 view .LVU42
  27:read_csv.c    ****         }
 188              		.loc 1 27 19 is_stmt 0 discriminator 4 view .LVU43
 189 0086 4946     		mov	r1, r9
 190 0088 0020     		movs	r0, #0
 191 008a FFF7FEFF 		bl	strtok
 192              	.LVL18:
  25:read_csv.c    ****             data[i][j] = atof(tok);
 193              		.loc 1 25 34 is_stmt 1 discriminator 4 view .LVU44
 194 008e 0BF1080B 		add	fp, fp, #8
 195 0092 E9E7     		b	.L4
 196              	.L16:
 197              		.align	2
 198              	.L15:
 199 0094 00000000 		.word	.LC0
 200 0098 02000000 		.word	.LC1
 201 009c 4A000000 		.word	.LC2
 202 00a0 4C000000 		.word	.LC3
 203              	.LBE4:
 204              		.cfi_endproc
 205              	.LFE3:
 207              		.text
 208              	.Letext0:
 209              		.file 2 "c:\\users\\joris\\chipwh~1\\cw\\home\\portable\\armgcc\\lib\\gcc\\arm-none-eabi\\10.2.1\\
 210              		.file 3 "c:\\users\\joris\\chipwh~1\\cw\\home\\portable\\armgcc\\arm-none-eabi\\include\\sys\\_typ
 211              		.file 4 "c:\\users\\joris\\chipwh~1\\cw\\home\\portable\\armgcc\\arm-none-eabi\\include\\sys\\reen
 212              		.file 5 "c:\\users\\joris\\chipwh~1\\cw\\home\\portable\\armgcc\\arm-none-eabi\\include\\sys\\lock
 213              		.file 6 "c:\\users\\joris\\chipwh~1\\cw\\home\\portable\\armgcc\\arm-none-eabi\\include\\stdio.h"
 214              		.file 7 "c:\\users\\joris\\chipwh~1\\cw\\home\\portable\\armgcc\\arm-none-eabi\\include\\string.h"
 215              		.file 8 "c:\\users\\joris\\chipwh~1\\cw\\home\\portable\\armgcc\\arm-none-eabi\\include\\stdlib.h"
DEFINED SYMBOLS
                            *ABS*:00000000 read_csv.c
C:\Users\joris\AppData\Local\Temp\ccBmQd9I.s:26     .text.read_csv:00000000 $t
C:\Users\joris\AppData\Local\Temp\ccBmQd9I.s:34     .text.read_csv:00000000 read_csv
C:\Users\joris\AppData\Local\Temp\ccBmQd9I.s:199    .text.read_csv:00000094 $d

UNDEFINED SYMBOLS
fopen
printf
exit
malloc
fgets
free
fclose
strtok
atof
