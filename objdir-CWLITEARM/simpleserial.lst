   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"simpleserial.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.ss_crc,"ax",%progbits
  16              		.align	1
  17              		.global	ss_crc
  18              		.arch armv7e-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	ss_crc:
  25              	.LVL0:
  26              	.LFB0:
  27              		.file 1 "simpleserial.c"
   1:simpleserial.c **** // simpleserial.c
   2:simpleserial.c **** 
   3:simpleserial.c **** #include "simpleserial.h"
   4:simpleserial.c **** #include <stdint.h>
   5:simpleserial.c **** #include "hal.h"
   6:simpleserial.c **** 
   7:simpleserial.c **** 
   8:simpleserial.c **** #define MAX_SS_CMDS 16
   9:simpleserial.c **** static int num_commands = 0;
  10:simpleserial.c **** 
  11:simpleserial.c **** #define MAX_SS_LEN 256
  12:simpleserial.c **** 
  13:simpleserial.c **** //#define SS_VER_1_0 0
  14:simpleserial.c **** //#define SS_VER_1_1 1
  15:simpleserial.c **** //#define SS_VER_2_0 2
  16:simpleserial.c **** 
  17:simpleserial.c **** 
  18:simpleserial.c **** // 0xA6 formerly 
  19:simpleserial.c **** #define CW_CRC 0x4D 
  20:simpleserial.c **** uint8_t ss_crc(uint8_t *buf, uint8_t len)
  21:simpleserial.c **** {
  28              		.loc 1 21 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  22:simpleserial.c **** 	unsigned int k = 0;
  32              		.loc 1 22 2 view .LVU1
  23:simpleserial.c **** 	uint8_t crc = 0x00;
  33              		.loc 1 23 2 view .LVU2
  24:simpleserial.c **** 	while (len--) {
  34              		.loc 1 24 2 view .LVU3
  21:simpleserial.c **** 	unsigned int k = 0;
  35              		.loc 1 21 1 is_stmt 0 view .LVU4
  36 0000 10B5     		push	{r4, lr}
  37              	.LCFI0:
  38              		.cfi_def_cfa_offset 8
  39              		.cfi_offset 4, -8
  40              		.cfi_offset 14, -4
  41 0002 0144     		add	r1, r1, r0
  42              	.LVL1:
  23:simpleserial.c **** 	uint8_t crc = 0x00;
  43              		.loc 1 23 10 view .LVU5
  44 0004 0022     		movs	r2, #0
  45              	.LVL2:
  46              	.L2:
  47              		.loc 1 24 8 view .LVU6
  48 0006 8842     		cmp	r0, r1
  49 0008 01D1     		bne	.L6
  25:simpleserial.c **** 		crc ^= *buf++;
  26:simpleserial.c **** 		for (k = 0; k < 8; k++) {
  27:simpleserial.c **** 			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
  28:simpleserial.c **** 		}
  29:simpleserial.c **** 	}
  30:simpleserial.c **** 	return crc;
  50              		.loc 1 30 2 is_stmt 1 view .LVU7
  31:simpleserial.c **** 
  32:simpleserial.c **** }
  51              		.loc 1 32 1 is_stmt 0 view .LVU8
  52 000a 1046     		mov	r0, r2
  53              	.LVL3:
  54              		.loc 1 32 1 view .LVU9
  55 000c 10BD     		pop	{r4, pc}
  56              	.LVL4:
  57              	.L6:
  25:simpleserial.c **** 		crc ^= *buf++;
  58              		.loc 1 25 3 is_stmt 1 view .LVU10
  25:simpleserial.c **** 		crc ^= *buf++;
  59              		.loc 1 25 7 is_stmt 0 view .LVU11
  60 000e 10F8013B 		ldrb	r3, [r0], #1	@ zero_extendqisi2
  61              	.LVL5:
  25:simpleserial.c **** 		crc ^= *buf++;
  62              		.loc 1 25 7 view .LVU12
  63 0012 5340     		eors	r3, r3, r2
  64 0014 DBB2     		uxtb	r3, r3
  65              	.LVL6:
  26:simpleserial.c **** 			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
  66              		.loc 1 26 3 is_stmt 1 view .LVU13
  25:simpleserial.c **** 		crc ^= *buf++;
  67              		.loc 1 25 7 is_stmt 0 view .LVU14
  68 0016 0824     		movs	r4, #8
  69              	.LVL7:
  70              	.L5:
  27:simpleserial.c **** 		}
  71              		.loc 1 27 4 is_stmt 1 view .LVU15
  27:simpleserial.c **** 		}
  72              		.loc 1 27 8 is_stmt 0 view .LVU16
  73 0018 13F0800F 		tst	r3, #128
  74 001c 4FEA4303 		lsl	r3, r3, #1
  75              	.LVL8:
  27:simpleserial.c **** 		}
  76              		.loc 1 27 34 view .LVU17
  77 0020 18BF     		it	ne
  78 0022 83F04D03 		eorne	r3, r3, #77
  27:simpleserial.c **** 		}
  79              		.loc 1 27 8 view .LVU18
  80 0026 DBB2     		uxtb	r3, r3
  81              	.LVL9:
  26:simpleserial.c **** 			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
  82              		.loc 1 26 3 view .LVU19
  83 0028 013C     		subs	r4, r4, #1
  84              	.LVL10:
  26:simpleserial.c **** 			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
  85              		.loc 1 26 3 view .LVU20
  86 002a 1A46     		mov	r2, r3
  87 002c F4D1     		bne	.L5
  88 002e EAE7     		b	.L2
  89              		.cfi_endproc
  90              	.LFE0:
  92              		.section	.text.hex_decode,"ax",%progbits
  93              		.align	1
  94              		.global	hex_decode
  95              		.syntax unified
  96              		.thumb
  97              		.thumb_func
  98              		.fpu softvfp
 100              	hex_decode:
 101              	.LVL11:
 102              	.LFB1:
  33:simpleserial.c **** 
  34:simpleserial.c **** // [B_STUFF, CMD, SCMD, LEN, B_STUFF, DATA..., CRC, TERM]
  35:simpleserial.c **** 
  36:simpleserial.c **** //#define SS_VER SS_VER_2_0
  37:simpleserial.c **** #if SS_VER == SS_VER_2_0
  38:simpleserial.c **** #error "SS_VER_2_0 is deprecated! Use SS_VER_2_1 instead."
  39:simpleserial.c **** #elif SS_VER == SS_VER_2_1
  40:simpleserial.c **** 
  41:simpleserial.c **** int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
  42:simpleserial.c **** {
 103              		.loc 1 42 1 is_stmt 1 view -0
 104              		.cfi_startproc
 105              		@ args = 0, pretend = 0, frame = 0
 106              		@ frame_needed = 0, uses_anonymous_args = 0
  43:simpleserial.c **** 	for(int i = 0; i < len; i++)
 107              		.loc 1 43 2 view .LVU22
 108              	.LBB2:
 109              		.loc 1 43 6 view .LVU23
 110              		.loc 1 43 6 is_stmt 0 view .LVU24
 111              	.LBE2:
  42:simpleserial.c **** 	for(int i = 0; i < len; i++)
 112              		.loc 1 42 1 view .LVU25
 113 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 114              	.LCFI1:
 115              		.cfi_def_cfa_offset 20
 116              		.cfi_offset 4, -20
 117              		.cfi_offset 5, -16
 118              		.cfi_offset 6, -12
 119              		.cfi_offset 7, -8
 120              		.cfi_offset 14, -4
 121              	.LBB7:
 122              		.loc 1 43 10 view .LVU26
 123 0002 0023     		movs	r3, #0
 124              	.LBB3:
  44:simpleserial.c **** 	{
  45:simpleserial.c **** 		char n_hi = ascii_buf[2*i];
  46:simpleserial.c **** 		char n_lo = ascii_buf[2*i+1];
 125              		.loc 1 46 8 view .LVU27
 126 0004 4F1C     		adds	r7, r1, #1
 127              	.LVL12:
 128              	.L9:
 129              		.loc 1 46 8 view .LVU28
 130              	.LBE3:
  43:simpleserial.c **** 	{
 131              		.loc 1 43 2 discriminator 1 view .LVU29
 132 0006 8342     		cmp	r3, r0
 133 0008 01DB     		blt	.L19
 134              	.LBE7:
  47:simpleserial.c **** 
  48:simpleserial.c **** 		if(n_lo >= '0' && n_lo <= '9')
  49:simpleserial.c **** 			data_buf[i] = n_lo - '0';
  50:simpleserial.c **** 		else if(n_lo >= 'A' && n_lo <= 'F')
  51:simpleserial.c **** 			data_buf[i] = n_lo - 'A' + 10;
  52:simpleserial.c **** 		else if(n_lo >= 'a' && n_lo <= 'f')
  53:simpleserial.c **** 			data_buf[i] = n_lo - 'a' + 10;
  54:simpleserial.c **** 		else
  55:simpleserial.c **** 			return 1;
  56:simpleserial.c **** 
  57:simpleserial.c **** 		if(n_hi >= '0' && n_hi <= '9')
  58:simpleserial.c **** 			data_buf[i] |= (n_hi - '0') << 4;
  59:simpleserial.c **** 		else if(n_hi >= 'A' && n_hi <= 'F')
  60:simpleserial.c **** 			data_buf[i] |= (n_hi - 'A' + 10) << 4;
  61:simpleserial.c **** 		else if(n_hi >= 'a' && n_hi <= 'f')
  62:simpleserial.c **** 			data_buf[i] |= (n_hi - 'a' + 10) << 4;
  63:simpleserial.c **** 		else
  64:simpleserial.c **** 			return 1;
  65:simpleserial.c **** 	}
  66:simpleserial.c **** 
  67:simpleserial.c **** 	return 0;
 135              		.loc 1 67 9 view .LVU30
 136 000a 0020     		movs	r0, #0
 137              	.LVL13:
 138              		.loc 1 67 9 view .LVU31
 139 000c 20E0     		b	.L8
 140              	.LVL14:
 141              	.L19:
 142              	.LBB8:
 143              	.LBB4:
  45:simpleserial.c **** 		char n_lo = ascii_buf[2*i+1];
 144              		.loc 1 45 3 is_stmt 1 view .LVU32
  46:simpleserial.c **** 
 145              		.loc 1 46 8 is_stmt 0 view .LVU33
 146 000e 17F81350 		ldrb	r5, [r7, r3, lsl #1]	@ zero_extendqisi2
  45:simpleserial.c **** 		char n_lo = ascii_buf[2*i+1];
 147              		.loc 1 45 8 view .LVU34
 148 0012 11F81340 		ldrb	r4, [r1, r3, lsl #1]	@ zero_extendqisi2
 149              	.LVL15:
  46:simpleserial.c **** 
 150              		.loc 1 46 3 is_stmt 1 view .LVU35
  48:simpleserial.c **** 			data_buf[i] = n_lo - '0';
 151              		.loc 1 48 3 view .LVU36
  48:simpleserial.c **** 			data_buf[i] = n_lo - '0';
 152              		.loc 1 48 18 is_stmt 0 view .LVU37
 153 0016 A5F13006 		sub	r6, r5, #48
 154 001a F6B2     		uxtb	r6, r6
  48:simpleserial.c **** 			data_buf[i] = n_lo - '0';
 155              		.loc 1 48 5 view .LVU38
 156 001c 092E     		cmp	r6, #9
 157 001e 0BD8     		bhi	.L10
  49:simpleserial.c **** 		else if(n_lo >= 'A' && n_lo <= 'F')
 158              		.loc 1 49 4 is_stmt 1 view .LVU39
  49:simpleserial.c **** 		else if(n_lo >= 'A' && n_lo <= 'F')
 159              		.loc 1 49 16 is_stmt 0 view .LVU40
 160 0020 D654     		strb	r6, [r2, r3]
 161              	.LVL16:
 162              	.L11:
  57:simpleserial.c **** 			data_buf[i] |= (n_hi - '0') << 4;
 163              		.loc 1 57 3 is_stmt 1 view .LVU41
  57:simpleserial.c **** 			data_buf[i] |= (n_hi - '0') << 4;
 164              		.loc 1 57 18 is_stmt 0 view .LVU42
 165 0022 A4F13005 		sub	r5, r4, #48
  57:simpleserial.c **** 			data_buf[i] |= (n_hi - '0') << 4;
 166              		.loc 1 57 5 view .LVU43
 167 0026 EEB2     		uxtb	r6, r5
 168 0028 092E     		cmp	r6, #9
 169 002a 14D8     		bhi	.L15
 170              	.L22:
  60:simpleserial.c **** 		else if(n_hi >= 'a' && n_hi <= 'f')
 171              		.loc 1 60 16 view .LVU44
 172 002c D45C     		ldrb	r4, [r2, r3]	@ zero_extendqisi2
 173              	.LVL17:
  60:simpleserial.c **** 		else if(n_hi >= 'a' && n_hi <= 'f')
 174              		.loc 1 60 16 view .LVU45
 175 002e 44EA0514 		orr	r4, r4, r5, lsl #4
 176              	.L21:
  62:simpleserial.c **** 		else
 177              		.loc 1 62 16 view .LVU46
 178 0032 D454     		strb	r4, [r2, r3]
 179              	.LBE4:
  43:simpleserial.c **** 	{
 180              		.loc 1 43 27 view .LVU47
 181 0034 0133     		adds	r3, r3, #1
 182              	.LVL18:
  43:simpleserial.c **** 	{
 183              		.loc 1 43 27 view .LVU48
 184 0036 E6E7     		b	.L9
 185              	.LVL19:
 186              	.L10:
 187              	.LBB5:
  50:simpleserial.c **** 			data_buf[i] = n_lo - 'A' + 10;
 188              		.loc 1 50 8 is_stmt 1 view .LVU49
  50:simpleserial.c **** 			data_buf[i] = n_lo - 'A' + 10;
 189              		.loc 1 50 10 is_stmt 0 view .LVU50
 190 0038 A5F14106 		sub	r6, r5, #65
 191 003c 052E     		cmp	r6, #5
 192 003e 02D8     		bhi	.L12
  51:simpleserial.c **** 		else if(n_lo >= 'a' && n_lo <= 'f')
 193              		.loc 1 51 4 is_stmt 1 view .LVU51
  51:simpleserial.c **** 		else if(n_lo >= 'a' && n_lo <= 'f')
 194              		.loc 1 51 29 is_stmt 0 view .LVU52
 195 0040 373D     		subs	r5, r5, #55
 196              	.LVL20:
 197              	.L20:
  53:simpleserial.c **** 		else
 198              		.loc 1 53 16 view .LVU53
 199 0042 D554     		strb	r5, [r2, r3]
 200              	.LVL21:
  53:simpleserial.c **** 		else
 201              		.loc 1 53 16 view .LVU54
 202 0044 EDE7     		b	.L11
 203              	.LVL22:
 204              	.L12:
  52:simpleserial.c **** 			data_buf[i] = n_lo - 'a' + 10;
 205              		.loc 1 52 8 is_stmt 1 view .LVU55
  52:simpleserial.c **** 			data_buf[i] = n_lo - 'a' + 10;
 206              		.loc 1 52 10 is_stmt 0 view .LVU56
 207 0046 A5F16106 		sub	r6, r5, #97
 208 004a 052E     		cmp	r6, #5
 209 004c 01D9     		bls	.L13
 210              	.LVL23:
 211              	.L18:
  55:simpleserial.c **** 
 212              		.loc 1 55 11 view .LVU57
 213 004e 0120     		movs	r0, #1
 214              	.LVL24:
 215              	.L8:
  55:simpleserial.c **** 
 216              		.loc 1 55 11 view .LVU58
 217              	.LBE5:
 218              	.LBE8:
  68:simpleserial.c **** }
 219              		.loc 1 68 1 view .LVU59
 220 0050 F0BD     		pop	{r4, r5, r6, r7, pc}
 221              	.LVL25:
 222              	.L13:
 223              	.LBB9:
 224              	.LBB6:
  53:simpleserial.c **** 		else
 225              		.loc 1 53 4 is_stmt 1 view .LVU60
  53:simpleserial.c **** 		else
 226              		.loc 1 53 29 is_stmt 0 view .LVU61
 227 0052 573D     		subs	r5, r5, #87
 228              	.LVL26:
  53:simpleserial.c **** 		else
 229              		.loc 1 53 29 view .LVU62
 230 0054 F5E7     		b	.L20
 231              	.LVL27:
 232              	.L15:
  59:simpleserial.c **** 			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 233              		.loc 1 59 8 is_stmt 1 view .LVU63
  59:simpleserial.c **** 			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 234              		.loc 1 59 10 is_stmt 0 view .LVU64
 235 0056 A4F14105 		sub	r5, r4, #65
 236 005a 052D     		cmp	r5, #5
 237 005c 02D8     		bhi	.L17
  60:simpleserial.c **** 		else if(n_hi >= 'a' && n_hi <= 'f')
 238              		.loc 1 60 4 is_stmt 1 view .LVU65
  60:simpleserial.c **** 		else if(n_hi >= 'a' && n_hi <= 'f')
 239              		.loc 1 60 31 is_stmt 0 view .LVU66
 240 005e A4F13705 		sub	r5, r4, #55
 241 0062 E3E7     		b	.L22
 242              	.L17:
  61:simpleserial.c **** 			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 243              		.loc 1 61 8 is_stmt 1 view .LVU67
  61:simpleserial.c **** 			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 244              		.loc 1 61 10 is_stmt 0 view .LVU68
 245 0064 A4F16105 		sub	r5, r4, #97
 246 0068 052D     		cmp	r5, #5
 247 006a F0D8     		bhi	.L18
  62:simpleserial.c **** 		else
 248              		.loc 1 62 4 is_stmt 1 view .LVU69
  62:simpleserial.c **** 		else
 249              		.loc 1 62 16 is_stmt 0 view .LVU70
 250 006c D55C     		ldrb	r5, [r2, r3]	@ zero_extendqisi2
  62:simpleserial.c **** 		else
 251              		.loc 1 62 31 view .LVU71
 252 006e 573C     		subs	r4, r4, #87
 253              	.LVL28:
  62:simpleserial.c **** 		else
 254              		.loc 1 62 16 view .LVU72
 255 0070 45EA0414 		orr	r4, r5, r4, lsl #4
 256              	.LVL29:
  62:simpleserial.c **** 		else
 257              		.loc 1 62 16 view .LVU73
 258 0074 DDE7     		b	.L21
 259              	.LBE6:
 260              	.LBE9:
 261              		.cfi_endproc
 262              	.LFE1:
 264              		.section	.text.ss_puts,"ax",%progbits
 265              		.align	1
 266              		.global	ss_puts
 267              		.syntax unified
 268              		.thumb
 269              		.thumb_func
 270              		.fpu softvfp
 272              	ss_puts:
 273              	.LVL30:
 274              	.LFB2:
  69:simpleserial.c **** 
  70:simpleserial.c **** typedef struct ss_cmd
  71:simpleserial.c **** {
  72:simpleserial.c **** 	char c;
  73:simpleserial.c **** 	unsigned int len;
  74:simpleserial.c **** 	uint8_t (*fp)(uint8_t, uint8_t, uint8_t, uint8_t *);
  75:simpleserial.c **** } ss_cmd;
  76:simpleserial.c **** static ss_cmd commands[MAX_SS_CMDS];
  77:simpleserial.c **** 
  78:simpleserial.c **** void ss_puts(char *x)
  79:simpleserial.c **** {
 275              		.loc 1 79 1 is_stmt 1 view -0
 276              		.cfi_startproc
 277              		@ args = 0, pretend = 0, frame = 0
 278              		@ frame_needed = 0, uses_anonymous_args = 0
 279              		.loc 1 79 1 is_stmt 0 view .LVU75
 280 0000 10B5     		push	{r4, lr}
 281              	.LCFI2:
 282              		.cfi_def_cfa_offset 8
 283              		.cfi_offset 4, -8
 284              		.cfi_offset 14, -4
 285 0002 0446     		mov	r4, r0
 286              	.LVL31:
 287              	.L24:
  80:simpleserial.c **** 	do {
 288              		.loc 1 80 2 is_stmt 1 discriminator 1 view .LVU76
  81:simpleserial.c **** 		putch(*x);
 289              		.loc 1 81 3 discriminator 1 view .LVU77
 290 0004 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 291 0006 FFF7FEFF 		bl	putch
 292              	.LVL32:
  82:simpleserial.c **** 	} while (*++x);
 293              		.loc 1 82 2 is_stmt 0 discriminator 1 view .LVU78
 294 000a 14F8013F 		ldrb	r3, [r4, #1]!	@ zero_extendqisi2
 295              	.LVL33:
 296              		.loc 1 82 2 discriminator 1 view .LVU79
 297 000e 002B     		cmp	r3, #0
 298 0010 F8D1     		bne	.L24
  83:simpleserial.c **** }
 299              		.loc 1 83 1 view .LVU80
 300 0012 10BD     		pop	{r4, pc}
 301              		.loc 1 83 1 view .LVU81
 302              		.cfi_endproc
 303              	.LFE2:
 305              		.section	.text.stuff_data,"ax",%progbits
 306              		.align	1
 307              		.global	stuff_data
 308              		.syntax unified
 309              		.thumb
 310              		.thumb_func
 311              		.fpu softvfp
 313              	stuff_data:
 314              	.LVL34:
 315              	.LFB5:
  84:simpleserial.c **** 
  85:simpleserial.c **** #define FRAME_BYTE 0x00
  86:simpleserial.c **** 
  87:simpleserial.c **** uint8_t check_version(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *data)
  88:simpleserial.c **** {
  89:simpleserial.c **** 	uint8_t ver = SS_VER;
  90:simpleserial.c **** 	simpleserial_put('r', 1, &ver);
  91:simpleserial.c **** 	return SS_ERR_OK;
  92:simpleserial.c **** }
  93:simpleserial.c **** 
  94:simpleserial.c **** uint8_t ss_get_commands(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *data)
  95:simpleserial.c **** {
  96:simpleserial.c ****     uint8_t cmd_chars[MAX_SS_CMDS];
  97:simpleserial.c ****     for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
  98:simpleserial.c ****         cmd_chars[i] = commands[i].c;
  99:simpleserial.c ****     }
 100:simpleserial.c **** 
 101:simpleserial.c ****     simpleserial_put('r', num_commands & 0xFF, (void *)cmd_chars);
 102:simpleserial.c ****     return 0x00;
 103:simpleserial.c **** 
 104:simpleserial.c **** }
 105:simpleserial.c **** 
 106:simpleserial.c **** uint8_t stuff_data(uint8_t *buf, uint8_t len)
 107:simpleserial.c **** {
 316              		.loc 1 107 1 is_stmt 1 view -0
 317              		.cfi_startproc
 318              		@ args = 0, pretend = 0, frame = 0
 319              		@ frame_needed = 0, uses_anonymous_args = 0
 108:simpleserial.c **** 	uint8_t i = 1;
 320              		.loc 1 108 2 view .LVU83
 109:simpleserial.c **** 	uint8_t last = 0;
 321              		.loc 1 109 2 view .LVU84
 110:simpleserial.c **** 	for (; i < len; i++) {
 322              		.loc 1 110 2 view .LVU85
 107:simpleserial.c **** 	uint8_t i = 1;
 323              		.loc 1 107 1 is_stmt 0 view .LVU86
 324 0000 30B5     		push	{r4, r5, lr}
 325              	.LCFI3:
 326              		.cfi_def_cfa_offset 12
 327              		.cfi_offset 4, -12
 328              		.cfi_offset 5, -8
 329              		.cfi_offset 14, -4
 109:simpleserial.c **** 	uint8_t last = 0;
 330              		.loc 1 109 10 view .LVU87
 331 0002 0022     		movs	r2, #0
 332 0004 0446     		mov	r4, r0
 108:simpleserial.c **** 	uint8_t last = 0;
 333              		.loc 1 108 10 view .LVU88
 334 0006 0123     		movs	r3, #1
 335              	.LVL35:
 336              	.L27:
 337              		.loc 1 110 2 discriminator 1 view .LVU89
 338 0008 8B42     		cmp	r3, r1
 339 000a 01D3     		bcc	.L29
 111:simpleserial.c **** 		if (buf[i] == FRAME_BYTE) {
 112:simpleserial.c **** 			buf[last] = i - last;
 113:simpleserial.c **** 			last = i;
 114:simpleserial.c **** 		}
 115:simpleserial.c **** 	}
 116:simpleserial.c **** 	return 0x00;
 340              		.loc 1 116 2 is_stmt 1 view .LVU90
 117:simpleserial.c **** }
 341              		.loc 1 117 1 is_stmt 0 view .LVU91
 342 000c 0020     		movs	r0, #0
 343              	.LVL36:
 344              		.loc 1 117 1 view .LVU92
 345 000e 30BD     		pop	{r4, r5, pc}
 346              	.LVL37:
 347              	.L29:
 111:simpleserial.c **** 		if (buf[i] == FRAME_BYTE) {
 348              		.loc 1 111 3 is_stmt 1 view .LVU93
 111:simpleserial.c **** 		if (buf[i] == FRAME_BYTE) {
 349              		.loc 1 111 6 is_stmt 0 view .LVU94
 350 0010 14F8015F 		ldrb	r5, [r4, #1]!	@ zero_extendqisi2
 351 0014 15B9     		cbnz	r5, .L28
 112:simpleserial.c **** 			last = i;
 352              		.loc 1 112 4 is_stmt 1 view .LVU95
 112:simpleserial.c **** 			last = i;
 353              		.loc 1 112 18 is_stmt 0 view .LVU96
 354 0016 9D1A     		subs	r5, r3, r2
 112:simpleserial.c **** 			last = i;
 355              		.loc 1 112 14 view .LVU97
 356 0018 8554     		strb	r5, [r0, r2]
 113:simpleserial.c **** 		}
 357              		.loc 1 113 4 is_stmt 1 view .LVU98
 358              	.LVL38:
 112:simpleserial.c **** 			last = i;
 359              		.loc 1 112 14 is_stmt 0 view .LVU99
 360 001a 1A46     		mov	r2, r3
 361              	.LVL39:
 362              	.L28:
 110:simpleserial.c **** 		if (buf[i] == FRAME_BYTE) {
 363              		.loc 1 110 19 view .LVU100
 364 001c 0133     		adds	r3, r3, #1
 365              	.LVL40:
 110:simpleserial.c **** 		if (buf[i] == FRAME_BYTE) {
 366              		.loc 1 110 19 view .LVU101
 367 001e DBB2     		uxtb	r3, r3
 368              	.LVL41:
 110:simpleserial.c **** 		if (buf[i] == FRAME_BYTE) {
 369              		.loc 1 110 19 view .LVU102
 370 0020 F2E7     		b	.L27
 371              		.cfi_endproc
 372              	.LFE5:
 374              		.section	.text.unstuff_data,"ax",%progbits
 375              		.align	1
 376              		.global	unstuff_data
 377              		.syntax unified
 378              		.thumb
 379              		.thumb_func
 380              		.fpu softvfp
 382              	unstuff_data:
 383              	.LVL42:
 384              	.LFB6:
 118:simpleserial.c **** 
 119:simpleserial.c **** uint8_t unstuff_data(uint8_t *buf, uint8_t len)
 120:simpleserial.c **** {
 385              		.loc 1 120 1 is_stmt 1 view -0
 386              		.cfi_startproc
 387              		@ args = 0, pretend = 0, frame = 0
 388              		@ frame_needed = 0, uses_anonymous_args = 0
 121:simpleserial.c **** 	uint8_t next = buf[0];
 389              		.loc 1 121 2 view .LVU104
 120:simpleserial.c **** 	uint8_t next = buf[0];
 390              		.loc 1 120 1 is_stmt 0 view .LVU105
 391 0000 10B5     		push	{r4, lr}
 392              	.LCFI4:
 393              		.cfi_def_cfa_offset 8
 394              		.cfi_offset 4, -8
 395              		.cfi_offset 14, -4
 396              		.loc 1 121 10 view .LVU106
 397 0002 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 398              	.LVL43:
 122:simpleserial.c **** 	buf[0] = 0x00;
 399              		.loc 1 122 2 is_stmt 1 view .LVU107
 400              		.loc 1 122 9 is_stmt 0 view .LVU108
 401 0004 0024     		movs	r4, #0
 402 0006 0470     		strb	r4, [r0]
 123:simpleserial.c **** 	//len -= 1;
 124:simpleserial.c **** 	uint8_t tmp = next;
 403              		.loc 1 124 2 is_stmt 1 view .LVU109
 404              	.LVL44:
 125:simpleserial.c **** 	while ((next < len) && tmp != 0) {
 405              		.loc 1 125 2 view .LVU110
 121:simpleserial.c **** 	buf[0] = 0x00;
 406              		.loc 1 121 10 is_stmt 0 view .LVU111
 407 0008 1346     		mov	r3, r2
 408              	.LVL45:
 409              	.L31:
 410              		.loc 1 125 8 view .LVU112
 411 000a 8B42     		cmp	r3, r1
 412 000c 00D2     		bcs	.L35
 413              		.loc 1 125 22 discriminator 1 view .LVU113
 414 000e 0AB9     		cbnz	r2, .L33
 415              	.L35:
 126:simpleserial.c **** 		tmp = buf[next];
 127:simpleserial.c **** 		buf[next] = FRAME_BYTE;
 128:simpleserial.c **** 		next += tmp;
 129:simpleserial.c **** 	}
 130:simpleserial.c **** 	return next;
 131:simpleserial.c **** }
 416              		.loc 1 131 1 view .LVU114
 417 0010 1846     		mov	r0, r3
 418              	.LVL46:
 419              		.loc 1 131 1 view .LVU115
 420 0012 10BD     		pop	{r4, pc}
 421              	.LVL47:
 422              	.L33:
 126:simpleserial.c **** 		tmp = buf[next];
 423              		.loc 1 126 3 is_stmt 1 view .LVU116
 126:simpleserial.c **** 		tmp = buf[next];
 424              		.loc 1 126 7 is_stmt 0 view .LVU117
 425 0014 C25C     		ldrb	r2, [r0, r3]	@ zero_extendqisi2
 426              	.LVL48:
 127:simpleserial.c **** 		next += tmp;
 427              		.loc 1 127 3 is_stmt 1 view .LVU118
 127:simpleserial.c **** 		next += tmp;
 428              		.loc 1 127 13 is_stmt 0 view .LVU119
 429 0016 C454     		strb	r4, [r0, r3]
 128:simpleserial.c **** 	}
 430              		.loc 1 128 3 is_stmt 1 view .LVU120
 128:simpleserial.c **** 	}
 431              		.loc 1 128 8 is_stmt 0 view .LVU121
 432 0018 1344     		add	r3, r3, r2
 433              	.LVL49:
 128:simpleserial.c **** 	}
 434              		.loc 1 128 8 view .LVU122
 435 001a DBB2     		uxtb	r3, r3
 436              	.LVL50:
 128:simpleserial.c **** 	}
 437              		.loc 1 128 8 view .LVU123
 438 001c F5E7     		b	.L31
 439              		.cfi_endproc
 440              	.LFE6:
 442              		.section	.text.simpleserial_addcmd,"ax",%progbits
 443              		.align	1
 444              		.global	simpleserial_addcmd
 445              		.syntax unified
 446              		.thumb
 447              		.thumb_func
 448              		.fpu softvfp
 450              	simpleserial_addcmd:
 451              	.LVL51:
 452              	.LFB8:
 132:simpleserial.c **** 
 133:simpleserial.c **** // Set up the SimpleSerial module by preparing internal commands
 134:simpleserial.c **** // This just adds the "v" command for now...
 135:simpleserial.c **** void simpleserial_init()
 136:simpleserial.c **** {
 137:simpleserial.c **** 	simpleserial_addcmd('v', 0, check_version);
 138:simpleserial.c ****     simpleserial_addcmd('w', 0, ss_get_commands);
 139:simpleserial.c **** }
 140:simpleserial.c **** 
 141:simpleserial.c **** int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t, uint8_t, uint8_t, uint8_t*
 142:simpleserial.c **** {
 453              		.loc 1 142 1 is_stmt 1 view -0
 454              		.cfi_startproc
 455              		@ args = 0, pretend = 0, frame = 0
 456              		@ frame_needed = 0, uses_anonymous_args = 0
 143:simpleserial.c **** 	if(num_commands >= MAX_SS_CMDS) {
 457              		.loc 1 143 2 view .LVU125
 142:simpleserial.c **** 	if(num_commands >= MAX_SS_CMDS) {
 458              		.loc 1 142 1 is_stmt 0 view .LVU126
 459 0000 38B5     		push	{r3, r4, r5, lr}
 460              	.LCFI5:
 461              		.cfi_def_cfa_offset 16
 462              		.cfi_offset 3, -16
 463              		.cfi_offset 4, -12
 464              		.cfi_offset 5, -8
 465              		.cfi_offset 14, -4
 466              		.loc 1 143 18 view .LVU127
 467 0002 0B4D     		ldr	r5, .L41
 468 0004 2B68     		ldr	r3, [r5]
 469              		.loc 1 143 4 view .LVU128
 470 0006 0F2B     		cmp	r3, #15
 471 0008 04DD     		ble	.L37
 144:simpleserial.c **** 		putch('a');
 472              		.loc 1 144 3 is_stmt 1 view .LVU129
 473 000a 6120     		movs	r0, #97
 474              	.LVL52:
 475              	.L40:
 145:simpleserial.c **** 		return 1;
 146:simpleserial.c **** 	}
 147:simpleserial.c **** 
 148:simpleserial.c **** 	if(len >= MAX_SS_LEN) {
 149:simpleserial.c **** 		putch('b');
 476              		.loc 1 149 3 is_stmt 0 view .LVU130
 477 000c FFF7FEFF 		bl	putch
 478              	.LVL53:
 150:simpleserial.c **** 		return 1;
 479              		.loc 1 150 3 is_stmt 1 view .LVU131
 480              		.loc 1 150 10 is_stmt 0 view .LVU132
 481 0010 0120     		movs	r0, #1
 482              	.L36:
 151:simpleserial.c **** 	}
 152:simpleserial.c **** 
 153:simpleserial.c **** 	commands[num_commands].c   = c;
 154:simpleserial.c **** 	commands[num_commands].len = len;
 155:simpleserial.c **** 	commands[num_commands].fp  = fp;
 156:simpleserial.c **** 	num_commands++;
 157:simpleserial.c **** 
 158:simpleserial.c **** 	return 0;
 159:simpleserial.c **** }
 483              		.loc 1 159 1 view .LVU133
 484 0012 38BD     		pop	{r3, r4, r5, pc}
 485              	.LVL54:
 486              	.L37:
 148:simpleserial.c **** 		putch('b');
 487              		.loc 1 148 2 is_stmt 1 view .LVU134
 148:simpleserial.c **** 		putch('b');
 488              		.loc 1 148 4 is_stmt 0 view .LVU135
 489 0014 FF29     		cmp	r1, #255
 490 0016 01D9     		bls	.L39
 149:simpleserial.c **** 		return 1;
 491              		.loc 1 149 3 is_stmt 1 view .LVU136
 492 0018 6220     		movs	r0, #98
 493              	.LVL55:
 149:simpleserial.c **** 		return 1;
 494              		.loc 1 149 3 is_stmt 0 view .LVU137
 495 001a F7E7     		b	.L40
 496              	.LVL56:
 497              	.L39:
 153:simpleserial.c **** 	commands[num_commands].len = len;
 498              		.loc 1 153 2 is_stmt 1 view .LVU138
 153:simpleserial.c **** 	commands[num_commands].len = len;
 499              		.loc 1 153 29 is_stmt 0 view .LVU139
 500 001c 0C24     		movs	r4, #12
 501 001e 04FB0354 		mla	r4, r4, r3, r5
 156:simpleserial.c **** 
 502              		.loc 1 156 14 view .LVU140
 503 0022 0133     		adds	r3, r3, #1
 153:simpleserial.c **** 	commands[num_commands].len = len;
 504              		.loc 1 153 29 view .LVU141
 505 0024 2071     		strb	r0, [r4, #4]
 154:simpleserial.c **** 	commands[num_commands].fp  = fp;
 506              		.loc 1 154 2 is_stmt 1 view .LVU142
 155:simpleserial.c **** 	num_commands++;
 507              		.loc 1 155 29 is_stmt 0 view .LVU143
 508 0026 C4E90212 		strd	r1, r2, [r4, #8]
 156:simpleserial.c **** 
 509              		.loc 1 156 2 is_stmt 1 view .LVU144
 156:simpleserial.c **** 
 510              		.loc 1 156 14 is_stmt 0 view .LVU145
 511 002a 2B60     		str	r3, [r5]
 158:simpleserial.c **** }
 512              		.loc 1 158 2 is_stmt 1 view .LVU146
 158:simpleserial.c **** }
 513              		.loc 1 158 9 is_stmt 0 view .LVU147
 514 002c 0020     		movs	r0, #0
 515              	.LVL57:
 158:simpleserial.c **** }
 516              		.loc 1 158 9 view .LVU148
 517 002e F0E7     		b	.L36
 518              	.L42:
 519              		.align	2
 520              	.L41:
 521 0030 00000000 		.word	.LANCHOR0
 522              		.cfi_endproc
 523              	.LFE8:
 525              		.section	.text.simpleserial_init,"ax",%progbits
 526              		.align	1
 527              		.global	simpleserial_init
 528              		.syntax unified
 529              		.thumb
 530              		.thumb_func
 531              		.fpu softvfp
 533              	simpleserial_init:
 534              	.LFB7:
 136:simpleserial.c **** 	simpleserial_addcmd('v', 0, check_version);
 535              		.loc 1 136 1 is_stmt 1 view -0
 536              		.cfi_startproc
 537              		@ args = 0, pretend = 0, frame = 0
 538              		@ frame_needed = 0, uses_anonymous_args = 0
 137:simpleserial.c ****     simpleserial_addcmd('w', 0, ss_get_commands);
 539              		.loc 1 137 2 view .LVU150
 136:simpleserial.c **** 	simpleserial_addcmd('v', 0, check_version);
 540              		.loc 1 136 1 is_stmt 0 view .LVU151
 541 0000 08B5     		push	{r3, lr}
 542              	.LCFI6:
 543              		.cfi_def_cfa_offset 8
 544              		.cfi_offset 3, -8
 545              		.cfi_offset 14, -4
 137:simpleserial.c ****     simpleserial_addcmd('w', 0, ss_get_commands);
 546              		.loc 1 137 2 view .LVU152
 547 0002 064A     		ldr	r2, .L44
 548 0004 0021     		movs	r1, #0
 549 0006 7620     		movs	r0, #118
 550 0008 FFF7FEFF 		bl	simpleserial_addcmd
 551              	.LVL58:
 138:simpleserial.c **** }
 552              		.loc 1 138 5 is_stmt 1 view .LVU153
 553 000c 044A     		ldr	r2, .L44+4
 554 000e 0021     		movs	r1, #0
 555 0010 7720     		movs	r0, #119
 139:simpleserial.c **** 
 556              		.loc 1 139 1 is_stmt 0 view .LVU154
 557 0012 BDE80840 		pop	{r3, lr}
 558              	.LCFI7:
 559              		.cfi_restore 14
 560              		.cfi_restore 3
 561              		.cfi_def_cfa_offset 0
 138:simpleserial.c **** }
 562              		.loc 1 138 5 view .LVU155
 563 0016 FFF7FEBF 		b	simpleserial_addcmd
 564              	.LVL59:
 565              	.L45:
 566 001a 00BF     		.align	2
 567              	.L44:
 568 001c 00000000 		.word	check_version
 569 0020 00000000 		.word	ss_get_commands
 570              		.cfi_endproc
 571              	.LFE7:
 573              		.section	.text.simpleserial_put,"ax",%progbits
 574              		.align	1
 575              		.global	simpleserial_put
 576              		.syntax unified
 577              		.thumb
 578              		.thumb_func
 579              		.fpu softvfp
 581              	simpleserial_put:
 582              	.LVL60:
 583              	.LFB10:
 160:simpleserial.c **** 
 161:simpleserial.c **** void simpleserial_get(void)
 162:simpleserial.c **** {
 163:simpleserial.c **** 	uint8_t data_buf[MAX_SS_LEN];
 164:simpleserial.c **** 	uint8_t err = 0;
 165:simpleserial.c **** 
 166:simpleserial.c **** 	for (int i = 0; i < 4; i++) {
 167:simpleserial.c **** 		data_buf[i] = getch(); //PTR, cmd, scmd, len
 168:simpleserial.c **** 		if (data_buf[i] == FRAME_BYTE) {
 169:simpleserial.c **** 			err = SS_ERR_FRAME_BYTE;
 170:simpleserial.c **** 			goto ERROR;
 171:simpleserial.c **** 		}
 172:simpleserial.c **** 	}
 173:simpleserial.c **** 	uint8_t next_frame = unstuff_data(data_buf, 4);
 174:simpleserial.c **** 
 175:simpleserial.c **** 	// check for valid command
 176:simpleserial.c **** 	uint8_t c = 0;
 177:simpleserial.c **** 	for(c = 0; c < num_commands; c++)
 178:simpleserial.c **** 	{
 179:simpleserial.c **** 		if(commands[c].c == data_buf[1])
 180:simpleserial.c **** 			break;
 181:simpleserial.c **** 	}
 182:simpleserial.c **** 
 183:simpleserial.c **** 	if (c == num_commands) {
 184:simpleserial.c **** 		err = SS_ERR_CMD;
 185:simpleserial.c **** 		goto ERROR;
 186:simpleserial.c **** 	}
 187:simpleserial.c **** 
 188:simpleserial.c **** 	//check that next frame not beyond end of message
 189:simpleserial.c **** 	// account for cmd, scmd, len, data, crc, end of frame
 190:simpleserial.c **** 	if ((data_buf[3] + 5) < next_frame) {
 191:simpleserial.c **** 		err = SS_ERR_LEN;
 192:simpleserial.c **** 		goto ERROR;
 193:simpleserial.c **** 	}
 194:simpleserial.c **** 
 195:simpleserial.c **** 	// read in data
 196:simpleserial.c **** 	// eq to len + crc + frame end
 197:simpleserial.c **** 	int i = 4;
 198:simpleserial.c **** 	for (; i < data_buf[3] + 5; i++) {
 199:simpleserial.c **** 		data_buf[i] = getch();
 200:simpleserial.c **** 		if (data_buf[i] == FRAME_BYTE) {
 201:simpleserial.c **** 			err = SS_ERR_FRAME_BYTE;
 202:simpleserial.c **** 			goto ERROR;
 203:simpleserial.c **** 		}
 204:simpleserial.c **** 	}
 205:simpleserial.c **** 
 206:simpleserial.c **** 	//check that final byte is the FRAME_BYTE
 207:simpleserial.c **** 	data_buf[i] = getch();
 208:simpleserial.c **** 	if (data_buf[i] != FRAME_BYTE) {
 209:simpleserial.c **** 		err = SS_ERR_LEN;
 210:simpleserial.c **** 		goto ERROR;
 211:simpleserial.c **** 	}
 212:simpleserial.c **** 
 213:simpleserial.c **** 	//fully unstuff data now
 214:simpleserial.c **** 	unstuff_data(data_buf + next_frame, i - next_frame + 1);
 215:simpleserial.c **** 
 216:simpleserial.c **** 	//calc crc excluding original frame offset and frame end and crc
 217:simpleserial.c **** 	uint8_t crc = ss_crc(data_buf+1, i-2);
 218:simpleserial.c **** 	if (crc != data_buf[i-1]) {
 219:simpleserial.c **** 		err = SS_ERR_CRC;
 220:simpleserial.c **** 		goto ERROR;
 221:simpleserial.c **** 	}
 222:simpleserial.c **** 
 223:simpleserial.c **** 	err = commands[c].fp(data_buf[1], data_buf[2], data_buf[3], data_buf+4);
 224:simpleserial.c **** 
 225:simpleserial.c **** ERROR:
 226:simpleserial.c **** 	simpleserial_put('e', 0x01, &err);
 227:simpleserial.c **** 	return;
 228:simpleserial.c **** }
 229:simpleserial.c **** 
 230:simpleserial.c **** void simpleserial_put(char c, uint8_t size, uint8_t* output)
 231:simpleserial.c **** {
 584              		.loc 1 231 1 is_stmt 1 view -0
 585              		.cfi_startproc
 586              		@ args = 0, pretend = 0, frame = 256
 587              		@ frame_needed = 0, uses_anonymous_args = 0
 232:simpleserial.c **** 	uint8_t data_buf[MAX_SS_LEN];
 588              		.loc 1 232 2 view .LVU157
 233:simpleserial.c **** 	data_buf[0] = 0x00;
 589              		.loc 1 233 2 view .LVU158
 231:simpleserial.c **** 	uint8_t data_buf[MAX_SS_LEN];
 590              		.loc 1 231 1 is_stmt 0 view .LVU159
 591 0000 70B5     		push	{r4, r5, r6, lr}
 592              	.LCFI8:
 593              		.cfi_def_cfa_offset 16
 594              		.cfi_offset 4, -16
 595              		.cfi_offset 5, -12
 596              		.cfi_offset 6, -8
 597              		.cfi_offset 14, -4
 598 0002 C0B0     		sub	sp, sp, #256
 599              	.LCFI9:
 600              		.cfi_def_cfa_offset 272
 601              		.loc 1 233 14 view .LVU160
 602 0004 0023     		movs	r3, #0
 231:simpleserial.c **** 	uint8_t data_buf[MAX_SS_LEN];
 603              		.loc 1 231 1 view .LVU161
 604 0006 0C46     		mov	r4, r1
 234:simpleserial.c **** 	data_buf[1] = c;
 235:simpleserial.c **** 	data_buf[2] = size;
 605              		.loc 1 235 14 view .LVU162
 606 0008 8DF80210 		strb	r1, [sp, #2]
 233:simpleserial.c **** 	data_buf[1] = c;
 607              		.loc 1 233 14 view .LVU163
 608 000c 8DF80030 		strb	r3, [sp]
 234:simpleserial.c **** 	data_buf[1] = c;
 609              		.loc 1 234 2 is_stmt 1 view .LVU164
 234:simpleserial.c **** 	data_buf[1] = c;
 610              		.loc 1 234 14 is_stmt 0 view .LVU165
 611 0010 8DF80100 		strb	r0, [sp, #1]
 612              		.loc 1 235 2 is_stmt 1 view .LVU166
 236:simpleserial.c **** 	int i = 0;
 613              		.loc 1 236 2 view .LVU167
 614              	.LVL61:
 237:simpleserial.c **** 	for (; i < size; i++) {
 615              		.loc 1 237 2 view .LVU168
 616 0014 0DF10301 		add	r1, sp, #3
 617              	.LVL62:
 618              	.L47:
 619              		.loc 1 237 2 is_stmt 0 discriminator 1 view .LVU169
 620 0018 9C42     		cmp	r4, r3
 621 001a 1BDC     		bgt	.L48
 238:simpleserial.c **** 		data_buf[i + 3] = output[i];
 239:simpleserial.c **** 	}
 240:simpleserial.c **** 	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 622              		.loc 1 240 2 is_stmt 1 view .LVU170
 623              		.loc 1 240 20 is_stmt 0 view .LVU171
 624 001c A11C     		adds	r1, r4, #2
 625 001e C9B2     		uxtb	r1, r1
 626 0020 0DF10100 		add	r0, sp, #1
 627 0024 FFF7FEFF 		bl	ss_crc
 628              	.LVL63:
 629              		.loc 1 240 18 view .LVU172
 630 0028 0DEB0403 		add	r3, sp, r4
 241:simpleserial.c **** 	data_buf[i + 4] = 0x00;
 631              		.loc 1 241 13 view .LVU173
 632 002c 261D     		adds	r6, r4, #4
 242:simpleserial.c **** 	stuff_data(data_buf, i + 5);
 633              		.loc 1 242 2 view .LVU174
 634 002e 611D     		adds	r1, r4, #5
 240:simpleserial.c **** 	data_buf[i + 4] = 0x00;
 635              		.loc 1 240 18 view .LVU175
 636 0030 D870     		strb	r0, [r3, #3]
 241:simpleserial.c **** 	data_buf[i + 4] = 0x00;
 637              		.loc 1 241 2 is_stmt 1 view .LVU176
 241:simpleserial.c **** 	data_buf[i + 4] = 0x00;
 638              		.loc 1 241 18 is_stmt 0 view .LVU177
 639 0032 0025     		movs	r5, #0
 640              		.loc 1 242 2 view .LVU178
 641 0034 C9B2     		uxtb	r1, r1
 642 0036 6846     		mov	r0, sp
 241:simpleserial.c **** 	data_buf[i + 4] = 0x00;
 643              		.loc 1 241 18 view .LVU179
 644 0038 0DF80650 		strb	r5, [sp, r6]
 645              		.loc 1 242 2 is_stmt 1 view .LVU180
 646 003c FFF7FEFF 		bl	stuff_data
 647              	.LVL64:
 243:simpleserial.c **** 	for (int i = 0; i < size + 5; i++) {
 648              		.loc 1 243 2 view .LVU181
 649              	.LBB10:
 650              		.loc 1 243 7 view .LVU182
 651              		.loc 1 243 7 is_stmt 0 view .LVU183
 652 0040 6C46     		mov	r4, sp
 653              	.LVL65:
 654              	.L49:
 244:simpleserial.c **** 		putch(data_buf[i]);
 655              		.loc 1 244 3 is_stmt 1 discriminator 3 view .LVU184
 656 0042 14F8010B 		ldrb	r0, [r4], #1	@ zero_extendqisi2
 243:simpleserial.c **** 	for (int i = 0; i < size + 5; i++) {
 657              		.loc 1 243 33 is_stmt 0 discriminator 3 view .LVU185
 658 0046 0135     		adds	r5, r5, #1
 659              	.LVL66:
 660              		.loc 1 244 3 discriminator 3 view .LVU186
 661 0048 FFF7FEFF 		bl	putch
 662              	.LVL67:
 243:simpleserial.c **** 	for (int i = 0; i < size + 5; i++) {
 663              		.loc 1 243 2 discriminator 3 view .LVU187
 664 004c AE42     		cmp	r6, r5
 665 004e F8DA     		bge	.L49
 666              	.LBE10:
 245:simpleserial.c **** 	}
 246:simpleserial.c **** }
 667              		.loc 1 246 1 view .LVU188
 668 0050 40B0     		add	sp, sp, #256
 669              	.LCFI10:
 670              		.cfi_remember_state
 671              		.cfi_def_cfa_offset 16
 672              		@ sp needed
 673 0052 70BD     		pop	{r4, r5, r6, pc}
 674              	.LVL68:
 675              	.L48:
 676              	.LCFI11:
 677              		.cfi_restore_state
 238:simpleserial.c **** 	}
 678              		.loc 1 238 3 is_stmt 1 discriminator 2 view .LVU189
 238:simpleserial.c **** 	}
 679              		.loc 1 238 19 is_stmt 0 discriminator 2 view .LVU190
 680 0054 D05C     		ldrb	r0, [r2, r3]	@ zero_extendqisi2
 681 0056 01F8010B 		strb	r0, [r1], #1
 237:simpleserial.c **** 		data_buf[i + 3] = output[i];
 682              		.loc 1 237 20 discriminator 2 view .LVU191
 683 005a 0133     		adds	r3, r3, #1
 684              	.LVL69:
 237:simpleserial.c **** 		data_buf[i + 3] = output[i];
 685              		.loc 1 237 20 discriminator 2 view .LVU192
 686 005c DCE7     		b	.L47
 687              		.cfi_endproc
 688              	.LFE10:
 690              		.section	.text.check_version,"ax",%progbits
 691              		.align	1
 692              		.global	check_version
 693              		.syntax unified
 694              		.thumb
 695              		.thumb_func
 696              		.fpu softvfp
 698              	check_version:
 699              	.LVL70:
 700              	.LFB3:
  88:simpleserial.c **** 	uint8_t ver = SS_VER;
 701              		.loc 1 88 1 is_stmt 1 view -0
 702              		.cfi_startproc
 703              		@ args = 0, pretend = 0, frame = 8
 704              		@ frame_needed = 0, uses_anonymous_args = 0
  89:simpleserial.c **** 	simpleserial_put('r', 1, &ver);
 705              		.loc 1 89 2 view .LVU194
  88:simpleserial.c **** 	uint8_t ver = SS_VER;
 706              		.loc 1 88 1 is_stmt 0 view .LVU195
 707 0000 07B5     		push	{r0, r1, r2, lr}
 708              	.LCFI12:
 709              		.cfi_def_cfa_offset 16
 710              		.cfi_offset 14, -4
  89:simpleserial.c **** 	simpleserial_put('r', 1, &ver);
 711              		.loc 1 89 10 view .LVU196
 712 0002 0323     		movs	r3, #3
 713              	.LVL71:
  90:simpleserial.c **** 	return SS_ERR_OK;
 714              		.loc 1 90 2 view .LVU197
 715 0004 0DF10702 		add	r2, sp, #7
 716              	.LVL72:
  90:simpleserial.c **** 	return SS_ERR_OK;
 717              		.loc 1 90 2 view .LVU198
 718 0008 0121     		movs	r1, #1
 719              	.LVL73:
  90:simpleserial.c **** 	return SS_ERR_OK;
 720              		.loc 1 90 2 view .LVU199
 721 000a 7220     		movs	r0, #114
 722              	.LVL74:
  89:simpleserial.c **** 	simpleserial_put('r', 1, &ver);
 723              		.loc 1 89 10 view .LVU200
 724 000c 8DF80730 		strb	r3, [sp, #7]
  90:simpleserial.c **** 	return SS_ERR_OK;
 725              		.loc 1 90 2 is_stmt 1 view .LVU201
 726 0010 FFF7FEFF 		bl	simpleserial_put
 727              	.LVL75:
  91:simpleserial.c **** }
 728              		.loc 1 91 2 view .LVU202
  92:simpleserial.c **** 
 729              		.loc 1 92 1 is_stmt 0 view .LVU203
 730 0014 0020     		movs	r0, #0
 731 0016 03B0     		add	sp, sp, #12
 732              	.LCFI13:
 733              		.cfi_def_cfa_offset 4
 734              		@ sp needed
 735 0018 5DF804FB 		ldr	pc, [sp], #4
 736              		.cfi_endproc
 737              	.LFE3:
 739              		.section	.text.ss_get_commands,"ax",%progbits
 740              		.align	1
 741              		.global	ss_get_commands
 742              		.syntax unified
 743              		.thumb
 744              		.thumb_func
 745              		.fpu softvfp
 747              	ss_get_commands:
 748              	.LVL76:
 749              	.LFB4:
  95:simpleserial.c ****     uint8_t cmd_chars[MAX_SS_CMDS];
 750              		.loc 1 95 1 is_stmt 1 view -0
 751              		.cfi_startproc
 752              		@ args = 0, pretend = 0, frame = 16
 753              		@ frame_needed = 0, uses_anonymous_args = 0
  96:simpleserial.c ****     for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 754              		.loc 1 96 5 view .LVU205
  97:simpleserial.c ****         cmd_chars[i] = commands[i].c;
 755              		.loc 1 97 5 view .LVU206
 756              	.LBB11:
  97:simpleserial.c ****         cmd_chars[i] = commands[i].c;
 757              		.loc 1 97 10 view .LVU207
  97:simpleserial.c ****         cmd_chars[i] = commands[i].c;
 758              		.loc 1 97 10 is_stmt 0 view .LVU208
 759              	.LBE11:
  95:simpleserial.c ****     uint8_t cmd_chars[MAX_SS_CMDS];
 760              		.loc 1 95 1 view .LVU209
 761 0000 30B5     		push	{r4, r5, lr}
 762              	.LCFI14:
 763              		.cfi_def_cfa_offset 12
 764              		.cfi_offset 4, -12
 765              		.cfi_offset 5, -8
 766              		.cfi_offset 14, -4
 767              	.LBB12:
  97:simpleserial.c ****         cmd_chars[i] = commands[i].c;
 768              		.loc 1 97 43 view .LVU210
 769 0002 0C4A     		ldr	r2, .L55
 770              	.LVL77:
  97:simpleserial.c ****         cmd_chars[i] = commands[i].c;
 771              		.loc 1 97 43 view .LVU211
 772 0004 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 773              	.LVL78:
  97:simpleserial.c ****         cmd_chars[i] = commands[i].c;
 774              		.loc 1 97 43 view .LVU212
 775              	.LBE12:
  95:simpleserial.c ****     uint8_t cmd_chars[MAX_SS_CMDS];
 776              		.loc 1 95 1 view .LVU213
 777 0006 85B0     		sub	sp, sp, #20
 778              	.LCFI15:
 779              		.cfi_def_cfa_offset 32
 780              	.LBB13:
  97:simpleserial.c ****         cmd_chars[i] = commands[i].c;
 781              		.loc 1 97 5 view .LVU214
 782 0008 0020     		movs	r0, #0
 783              	.LVL79:
  98:simpleserial.c ****     }
 784              		.loc 1 98 35 view .LVU215
 785 000a 0C24     		movs	r4, #12
 786              	.LVL80:
 787              	.L53:
  97:simpleserial.c ****         cmd_chars[i] = commands[i].c;
 788              		.loc 1 97 27 discriminator 1 view .LVU216
 789 000c C3B2     		uxtb	r3, r0
  97:simpleserial.c ****         cmd_chars[i] = commands[i].c;
 790              		.loc 1 97 5 discriminator 1 view .LVU217
 791 000e 8B42     		cmp	r3, r1
 792 0010 00F10100 		add	r0, r0, #1
 793              	.LVL81:
  97:simpleserial.c ****         cmd_chars[i] = commands[i].c;
 794              		.loc 1 97 5 discriminator 1 view .LVU218
 795 0014 06DB     		blt	.L54
 796              	.LBE13:
 101:simpleserial.c ****     return 0x00;
 797              		.loc 1 101 5 is_stmt 1 view .LVU219
 798 0016 6A46     		mov	r2, sp
 799 0018 7220     		movs	r0, #114
 800 001a FFF7FEFF 		bl	simpleserial_put
 801              	.LVL82:
 102:simpleserial.c **** 
 802              		.loc 1 102 5 view .LVU220
 104:simpleserial.c **** 
 803              		.loc 1 104 1 is_stmt 0 view .LVU221
 804 001e 0020     		movs	r0, #0
 805 0020 05B0     		add	sp, sp, #20
 806              	.LCFI16:
 807              		.cfi_remember_state
 808              		.cfi_def_cfa_offset 12
 809              		@ sp needed
 810 0022 30BD     		pop	{r4, r5, pc}
 811              	.LVL83:
 812              	.L54:
 813              	.LCFI17:
 814              		.cfi_restore_state
 815              	.LBB14:
  98:simpleserial.c ****     }
 816              		.loc 1 98 9 is_stmt 1 discriminator 3 view .LVU222
  98:simpleserial.c ****     }
 817              		.loc 1 98 22 is_stmt 0 discriminator 3 view .LVU223
 818 0024 04AD     		add	r5, sp, #16
 819 0026 1D44     		add	r5, r5, r3
  98:simpleserial.c ****     }
 820              		.loc 1 98 35 discriminator 3 view .LVU224
 821 0028 04FB0323 		mla	r3, r4, r3, r2
 822              	.LVL84:
  98:simpleserial.c ****     }
 823              		.loc 1 98 22 discriminator 3 view .LVU225
 824 002c 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 825 002e 05F8103C 		strb	r3, [r5, #-16]
 826              	.LVL85:
  98:simpleserial.c ****     }
 827              		.loc 1 98 22 discriminator 3 view .LVU226
 828 0032 EBE7     		b	.L53
 829              	.L56:
 830              		.align	2
 831              	.L55:
 832 0034 00000000 		.word	.LANCHOR0
 833              	.LBE14:
 834              		.cfi_endproc
 835              	.LFE4:
 837              		.section	.text.simpleserial_get,"ax",%progbits
 838              		.align	1
 839              		.global	simpleserial_get
 840              		.syntax unified
 841              		.thumb
 842              		.thumb_func
 843              		.fpu softvfp
 845              	simpleserial_get:
 846              	.LFB9:
 162:simpleserial.c **** 	uint8_t data_buf[MAX_SS_LEN];
 847              		.loc 1 162 1 is_stmt 1 view -0
 848              		.cfi_startproc
 849              		@ args = 0, pretend = 0, frame = 264
 850              		@ frame_needed = 0, uses_anonymous_args = 0
 163:simpleserial.c **** 	uint8_t err = 0;
 851              		.loc 1 163 2 view .LVU228
 164:simpleserial.c **** 
 852              		.loc 1 164 2 view .LVU229
 162:simpleserial.c **** 	uint8_t data_buf[MAX_SS_LEN];
 853              		.loc 1 162 1 is_stmt 0 view .LVU230
 854 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 855              	.LCFI18:
 856              		.cfi_def_cfa_offset 28
 857              		.cfi_offset 4, -28
 858              		.cfi_offset 5, -24
 859              		.cfi_offset 6, -20
 860              		.cfi_offset 7, -16
 861              		.cfi_offset 8, -12
 862              		.cfi_offset 9, -8
 863              		.cfi_offset 14, -4
 864 0004 C3B0     		sub	sp, sp, #268
 865              	.LCFI19:
 866              		.cfi_def_cfa_offset 296
 164:simpleserial.c **** 
 867              		.loc 1 164 10 view .LVU231
 868 0006 0025     		movs	r5, #0
 869 0008 02AE     		add	r6, sp, #8
 870 000a 8DF80750 		strb	r5, [sp, #7]
 166:simpleserial.c **** 		data_buf[i] = getch(); //PTR, cmd, scmd, len
 871              		.loc 1 166 2 is_stmt 1 view .LVU232
 872              	.LBB15:
 166:simpleserial.c **** 		data_buf[i] = getch(); //PTR, cmd, scmd, len
 873              		.loc 1 166 7 view .LVU233
 874              	.LVL86:
 166:simpleserial.c **** 		data_buf[i] = getch(); //PTR, cmd, scmd, len
 875              		.loc 1 166 7 is_stmt 0 view .LVU234
 876 000e 3446     		mov	r4, r6
 877              	.LVL87:
 878              	.L60:
 167:simpleserial.c **** 		if (data_buf[i] == FRAME_BYTE) {
 879              		.loc 1 167 3 is_stmt 1 view .LVU235
 167:simpleserial.c **** 		if (data_buf[i] == FRAME_BYTE) {
 880              		.loc 1 167 17 is_stmt 0 view .LVU236
 881 0010 FFF7FEFF 		bl	getch
 882              	.LVL88:
 167:simpleserial.c **** 		if (data_buf[i] == FRAME_BYTE) {
 883              		.loc 1 167 15 view .LVU237
 884 0014 06F8010B 		strb	r0, [r6], #1
 168:simpleserial.c **** 			err = SS_ERR_FRAME_BYTE;
 885              		.loc 1 168 3 is_stmt 1 view .LVU238
 168:simpleserial.c **** 			err = SS_ERR_FRAME_BYTE;
 886              		.loc 1 168 6 is_stmt 0 view .LVU239
 887 0018 58B9     		cbnz	r0, .L58
 888              	.LVL89:
 889              	.L65:
 169:simpleserial.c **** 			goto ERROR;
 890              		.loc 1 169 4 is_stmt 1 view .LVU240
 169:simpleserial.c **** 			goto ERROR;
 891              		.loc 1 169 8 is_stmt 0 view .LVU241
 892 001a 0523     		movs	r3, #5
 893              	.L74:
 894              	.LBE15:
 219:simpleserial.c **** 		goto ERROR;
 895              		.loc 1 219 7 view .LVU242
 896 001c 8DF80730 		strb	r3, [sp, #7]
 220:simpleserial.c **** 	}
 897              		.loc 1 220 3 is_stmt 1 view .LVU243
 898              	.L59:
 226:simpleserial.c **** 	return;
 899              		.loc 1 226 2 view .LVU244
 900 0020 0DF10702 		add	r2, sp, #7
 901 0024 0121     		movs	r1, #1
 902 0026 6520     		movs	r0, #101
 903 0028 FFF7FEFF 		bl	simpleserial_put
 904              	.LVL90:
 227:simpleserial.c **** }
 905              		.loc 1 227 2 view .LVU245
 228:simpleserial.c **** 
 906              		.loc 1 228 1 is_stmt 0 view .LVU246
 907 002c 43B0     		add	sp, sp, #268
 908              	.LCFI20:
 909              		.cfi_remember_state
 910              		.cfi_def_cfa_offset 28
 911              		@ sp needed
 912 002e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 913              	.LVL91:
 914              	.L58:
 915              	.LCFI21:
 916              		.cfi_restore_state
 917              	.LBB16:
 166:simpleserial.c **** 		data_buf[i] = getch(); //PTR, cmd, scmd, len
 918              		.loc 1 166 26 discriminator 2 view .LVU247
 919 0032 0135     		adds	r5, r5, #1
 920              	.LVL92:
 166:simpleserial.c **** 		data_buf[i] = getch(); //PTR, cmd, scmd, len
 921              		.loc 1 166 2 discriminator 2 view .LVU248
 922 0034 042D     		cmp	r5, #4
 923 0036 EBD1     		bne	.L60
 924              	.LBE16:
 173:simpleserial.c **** 
 925              		.loc 1 173 2 is_stmt 1 view .LVU249
 173:simpleserial.c **** 
 926              		.loc 1 173 23 is_stmt 0 view .LVU250
 927 0038 2946     		mov	r1, r5
 928 003a 2046     		mov	r0, r4
 929 003c FFF7FEFF 		bl	unstuff_data
 930              	.LVL93:
 177:simpleserial.c **** 	{
 931              		.loc 1 177 15 view .LVU251
 932 0040 244F     		ldr	r7, .L75
 179:simpleserial.c **** 			break;
 933              		.loc 1 179 31 view .LVU252
 934 0042 6178     		ldrb	r1, [r4, #1]	@ zero_extendqisi2
 177:simpleserial.c **** 	{
 935              		.loc 1 177 15 view .LVU253
 936 0044 3A68     		ldr	r2, [r7]
 173:simpleserial.c **** 
 937              		.loc 1 173 23 view .LVU254
 938 0046 8146     		mov	r9, r0
 939              	.LVL94:
 176:simpleserial.c **** 	for(c = 0; c < num_commands; c++)
 940              		.loc 1 176 2 is_stmt 1 view .LVU255
 177:simpleserial.c **** 	{
 941              		.loc 1 177 2 view .LVU256
 177:simpleserial.c **** 	{
 942              		.loc 1 177 2 is_stmt 0 view .LVU257
 943 0048 0023     		movs	r3, #0
 944 004a B846     		mov	r8, r7
 179:simpleserial.c **** 			break;
 945              		.loc 1 179 17 view .LVU258
 946 004c 0C20     		movs	r0, #12
 947              	.LVL95:
 948              	.L61:
 177:simpleserial.c **** 	{
 949              		.loc 1 177 15 discriminator 1 view .LVU259
 950 004e DFB2     		uxtb	r7, r3
 177:simpleserial.c **** 	{
 951              		.loc 1 177 2 discriminator 1 view .LVU260
 952 0050 9742     		cmp	r7, r2
 953 0052 02DB     		blt	.L63
 183:simpleserial.c **** 		err = SS_ERR_CMD;
 954              		.loc 1 183 2 is_stmt 1 view .LVU261
 183:simpleserial.c **** 		err = SS_ERR_CMD;
 955              		.loc 1 183 5 is_stmt 0 view .LVU262
 956 0054 07D1     		bne	.L62
 184:simpleserial.c **** 		goto ERROR;
 957              		.loc 1 184 3 is_stmt 1 view .LVU263
 184:simpleserial.c **** 		goto ERROR;
 958              		.loc 1 184 7 is_stmt 0 view .LVU264
 959 0056 0123     		movs	r3, #1
 960              	.LVL96:
 184:simpleserial.c **** 		goto ERROR;
 961              		.loc 1 184 7 view .LVU265
 962 0058 E0E7     		b	.L74
 963              	.LVL97:
 964              	.L63:
 179:simpleserial.c **** 			break;
 965              		.loc 1 179 3 is_stmt 1 view .LVU266
 179:simpleserial.c **** 			break;
 966              		.loc 1 179 17 is_stmt 0 view .LVU267
 967 005a 00FB0786 		mla	r6, r0, r7, r8
 968 005e 0133     		adds	r3, r3, #1
 969              	.LVL98:
 179:simpleserial.c **** 			break;
 970              		.loc 1 179 5 view .LVU268
 971 0060 3679     		ldrb	r6, [r6, #4]	@ zero_extendqisi2
 972 0062 8E42     		cmp	r6, r1
 973 0064 F3D1     		bne	.L61
 974              	.L62:
 190:simpleserial.c **** 		err = SS_ERR_LEN;
 975              		.loc 1 190 2 is_stmt 1 view .LVU269
 190:simpleserial.c **** 		err = SS_ERR_LEN;
 976              		.loc 1 190 15 is_stmt 0 view .LVU270
 977 0066 E378     		ldrb	r3, [r4, #3]	@ zero_extendqisi2
 190:simpleserial.c **** 		err = SS_ERR_LEN;
 978              		.loc 1 190 19 view .LVU271
 979 0068 0533     		adds	r3, r3, #5
 190:simpleserial.c **** 		err = SS_ERR_LEN;
 980              		.loc 1 190 5 view .LVU272
 981 006a 4B45     		cmp	r3, r9
 982 006c 02DA     		bge	.L64
 983              	.LVL99:
 984              	.L66:
 191:simpleserial.c **** 		goto ERROR;
 985              		.loc 1 191 3 is_stmt 1 view .LVU273
 191:simpleserial.c **** 		goto ERROR;
 986              		.loc 1 191 7 is_stmt 0 view .LVU274
 987 006e 0423     		movs	r3, #4
 988 0070 D4E7     		b	.L74
 989              	.LVL100:
 990              	.L68:
 191:simpleserial.c **** 		goto ERROR;
 991              		.loc 1 191 7 view .LVU275
 992 0072 3546     		mov	r5, r6
 993              	.LVL101:
 994              	.L64:
 199:simpleserial.c **** 		if (data_buf[i] == FRAME_BYTE) {
 995              		.loc 1 199 3 is_stmt 1 view .LVU276
 199:simpleserial.c **** 		if (data_buf[i] == FRAME_BYTE) {
 996              		.loc 1 199 17 is_stmt 0 view .LVU277
 997 0074 FFF7FEFF 		bl	getch
 998              	.LVL102:
 199:simpleserial.c **** 		if (data_buf[i] == FRAME_BYTE) {
 999              		.loc 1 199 15 view .LVU278
 1000 0078 6055     		strb	r0, [r4, r5]
 200:simpleserial.c **** 			err = SS_ERR_FRAME_BYTE;
 1001              		.loc 1 200 3 is_stmt 1 view .LVU279
 200:simpleserial.c **** 			err = SS_ERR_FRAME_BYTE;
 1002              		.loc 1 200 6 is_stmt 0 view .LVU280
 1003 007a 0028     		cmp	r0, #0
 1004 007c CDD0     		beq	.L65
 198:simpleserial.c **** 		data_buf[i] = getch();
 1005              		.loc 1 198 21 view .LVU281
 1006 007e E378     		ldrb	r3, [r4, #3]	@ zero_extendqisi2
 198:simpleserial.c **** 		data_buf[i] = getch();
 1007              		.loc 1 198 31 view .LVU282
 1008 0080 6E1C     		adds	r6, r5, #1
 1009              	.LVL103:
 198:simpleserial.c **** 		data_buf[i] = getch();
 1010              		.loc 1 198 11 view .LVU283
 1011 0082 0433     		adds	r3, r3, #4
 198:simpleserial.c **** 		data_buf[i] = getch();
 1012              		.loc 1 198 2 view .LVU284
 1013 0084 B342     		cmp	r3, r6
 1014 0086 F4DA     		bge	.L68
 207:simpleserial.c **** 	if (data_buf[i] != FRAME_BYTE) {
 1015              		.loc 1 207 2 is_stmt 1 view .LVU285
 207:simpleserial.c **** 	if (data_buf[i] != FRAME_BYTE) {
 1016              		.loc 1 207 16 is_stmt 0 view .LVU286
 1017 0088 FFF7FEFF 		bl	getch
 1018              	.LVL104:
 207:simpleserial.c **** 	if (data_buf[i] != FRAME_BYTE) {
 1019              		.loc 1 207 14 view .LVU287
 1020 008c A055     		strb	r0, [r4, r6]
 208:simpleserial.c **** 		err = SS_ERR_LEN;
 1021              		.loc 1 208 2 is_stmt 1 view .LVU288
 208:simpleserial.c **** 		err = SS_ERR_LEN;
 1022              		.loc 1 208 5 is_stmt 0 view .LVU289
 1023 008e 0028     		cmp	r0, #0
 1024 0090 EDD1     		bne	.L66
 214:simpleserial.c **** 
 1025              		.loc 1 214 2 is_stmt 1 view .LVU290
 214:simpleserial.c **** 
 1026              		.loc 1 214 40 is_stmt 0 view .LVU291
 1027 0092 F6B2     		uxtb	r6, r6
 1028              	.LVL105:
 214:simpleserial.c **** 
 1029              		.loc 1 214 2 view .LVU292
 1030 0094 C9F10101 		rsb	r1, r9, #1
 1031 0098 3144     		add	r1, r1, r6
 1032 009a C9B2     		uxtb	r1, r1
 1033 009c 04EB0900 		add	r0, r4, r9
 217:simpleserial.c **** 	if (crc != data_buf[i-1]) {
 1034              		.loc 1 217 16 view .LVU293
 1035 00a0 023E     		subs	r6, r6, #2
 214:simpleserial.c **** 
 1036              		.loc 1 214 2 view .LVU294
 1037 00a2 FFF7FEFF 		bl	unstuff_data
 1038              	.LVL106:
 217:simpleserial.c **** 	if (crc != data_buf[i-1]) {
 1039              		.loc 1 217 2 is_stmt 1 view .LVU295
 217:simpleserial.c **** 	if (crc != data_buf[i-1]) {
 1040              		.loc 1 217 16 is_stmt 0 view .LVU296
 1041 00a6 F1B2     		uxtb	r1, r6
 1042 00a8 0DF10900 		add	r0, sp, #9
 1043 00ac FFF7FEFF 		bl	ss_crc
 1044              	.LVL107:
 218:simpleserial.c **** 		err = SS_ERR_CRC;
 1045              		.loc 1 218 2 is_stmt 1 view .LVU297
 218:simpleserial.c **** 		err = SS_ERR_CRC;
 1046              		.loc 1 218 5 is_stmt 0 view .LVU298
 1047 00b0 635D     		ldrb	r3, [r4, r5]	@ zero_extendqisi2
 1048 00b2 8342     		cmp	r3, r0
 1049 00b4 01D0     		beq	.L67
 219:simpleserial.c **** 		goto ERROR;
 1050              		.loc 1 219 3 is_stmt 1 view .LVU299
 219:simpleserial.c **** 		goto ERROR;
 1051              		.loc 1 219 7 is_stmt 0 view .LVU300
 1052 00b6 0223     		movs	r3, #2
 1053 00b8 B0E7     		b	.L74
 1054              	.L67:
 223:simpleserial.c **** 
 1055              		.loc 1 223 2 is_stmt 1 view .LVU301
 223:simpleserial.c **** 
 1056              		.loc 1 223 19 is_stmt 0 view .LVU302
 1057 00ba 0C23     		movs	r3, #12
 1058 00bc 03FB0787 		mla	r7, r3, r7, r8
 1059              	.LVL108:
 223:simpleserial.c **** 
 1060              		.loc 1 223 8 view .LVU303
 1061 00c0 E278     		ldrb	r2, [r4, #3]	@ zero_extendqisi2
 1062 00c2 FD68     		ldr	r5, [r7, #12]
 1063              	.LVL109:
 223:simpleserial.c **** 
 1064              		.loc 1 223 8 view .LVU304
 1065 00c4 A178     		ldrb	r1, [r4, #2]	@ zero_extendqisi2
 1066 00c6 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 1067              	.LVL110:
 223:simpleserial.c **** 
 1068              		.loc 1 223 8 view .LVU305
 1069 00c8 6B44     		add	r3, sp, r3
 1070 00ca A847     		blx	r5
 1071              	.LVL111:
 223:simpleserial.c **** 
 1072              		.loc 1 223 6 view .LVU306
 1073 00cc 8DF80700 		strb	r0, [sp, #7]
 1074 00d0 A6E7     		b	.L59
 1075              	.L76:
 1076 00d2 00BF     		.align	2
 1077              	.L75:
 1078 00d4 00000000 		.word	.LANCHOR0
 1079              		.cfi_endproc
 1080              	.LFE9:
 1082              		.bss
 1083              		.align	2
 1084              		.set	.LANCHOR0,. + 0
 1087              	num_commands:
 1088 0000 00000000 		.space	4
 1091              	commands:
 1092 0004 00000000 		.space	192
 1092      00000000 
 1092      00000000 
 1092      00000000 
 1092      00000000 
 1093              		.text
 1094              	.Letext0:
 1095              		.file 2 "/usr/lib/gcc/arm-none-eabi/8.3.1/include/stdint.h"
 1096              		.file 3 "../hardware/victims/firmware/hal/stm32f3/stm32f3_hal.h"
 1097              		.file 4 "simpleserial.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 simpleserial.c
     /tmp/ccwIm9qt.s:16     .text.ss_crc:0000000000000000 $t
     /tmp/ccwIm9qt.s:24     .text.ss_crc:0000000000000000 ss_crc
     /tmp/ccwIm9qt.s:93     .text.hex_decode:0000000000000000 $t
     /tmp/ccwIm9qt.s:100    .text.hex_decode:0000000000000000 hex_decode
     /tmp/ccwIm9qt.s:265    .text.ss_puts:0000000000000000 $t
     /tmp/ccwIm9qt.s:272    .text.ss_puts:0000000000000000 ss_puts
     /tmp/ccwIm9qt.s:306    .text.stuff_data:0000000000000000 $t
     /tmp/ccwIm9qt.s:313    .text.stuff_data:0000000000000000 stuff_data
     /tmp/ccwIm9qt.s:375    .text.unstuff_data:0000000000000000 $t
     /tmp/ccwIm9qt.s:382    .text.unstuff_data:0000000000000000 unstuff_data
     /tmp/ccwIm9qt.s:443    .text.simpleserial_addcmd:0000000000000000 $t
     /tmp/ccwIm9qt.s:450    .text.simpleserial_addcmd:0000000000000000 simpleserial_addcmd
     /tmp/ccwIm9qt.s:521    .text.simpleserial_addcmd:0000000000000030 $d
     /tmp/ccwIm9qt.s:526    .text.simpleserial_init:0000000000000000 $t
     /tmp/ccwIm9qt.s:533    .text.simpleserial_init:0000000000000000 simpleserial_init
     /tmp/ccwIm9qt.s:568    .text.simpleserial_init:000000000000001c $d
     /tmp/ccwIm9qt.s:698    .text.check_version:0000000000000000 check_version
     /tmp/ccwIm9qt.s:747    .text.ss_get_commands:0000000000000000 ss_get_commands
     /tmp/ccwIm9qt.s:574    .text.simpleserial_put:0000000000000000 $t
     /tmp/ccwIm9qt.s:581    .text.simpleserial_put:0000000000000000 simpleserial_put
     /tmp/ccwIm9qt.s:691    .text.check_version:0000000000000000 $t
     /tmp/ccwIm9qt.s:740    .text.ss_get_commands:0000000000000000 $t
     /tmp/ccwIm9qt.s:832    .text.ss_get_commands:0000000000000034 $d
     /tmp/ccwIm9qt.s:838    .text.simpleserial_get:0000000000000000 $t
     /tmp/ccwIm9qt.s:845    .text.simpleserial_get:0000000000000000 simpleserial_get
     /tmp/ccwIm9qt.s:1078   .text.simpleserial_get:00000000000000d4 $d
     /tmp/ccwIm9qt.s:1083   .bss:0000000000000000 $d
     /tmp/ccwIm9qt.s:1087   .bss:0000000000000000 num_commands
     /tmp/ccwIm9qt.s:1091   .bss:0000000000000004 commands

UNDEFINED SYMBOLS
putch
getch
